import{_ as n,o as s,c as a,b as t}from"./app-491f955e.js";const l={},p=t(`<h2 id="图片懒加载" tabindex="-1"><a class="header-anchor" href="#图片懒加载" aria-hidden="true">#</a> 图片懒加载</h2><p>图片懒加载也叫延迟加载，只加载当前屏幕的图片，可视区域外的图片不会进行加载，只有当屏幕滚动的时候才加载</p><ol><li>特点：</li></ol><ul><li>提高网页加载速度</li><li>减少后台服务器压力</li><li>提升用户体验</li></ul><ol start="2"><li>原理</li></ol><ul><li>将图片地址存储到 data-xxx 属性上</li><li>判断图片是否在可视区域</li><li>如果在，就设置图片 src</li><li>绑定 scroll 监听事件</li></ul><h2 id="防抖和节流" tabindex="-1"><a class="header-anchor" href="#防抖和节流" aria-hidden="true">#</a> 防抖和节流</h2><ol><li>防抖</li></ol><p>防抖函数将多次触发的函数合并成一次去执行，并在指定的时间间隔后执行一次。通常在处理输入框、滚动等事件时使用，避免频繁触发事件导致页面卡顿等问题。 函数在 n 秒后再执行，如果 n 秒内被触发，重新计时，保证最后一次触发事件 n 秒后才执行。</p><p>应用场景：</p><ul><li>输入框搜索</li><li>表单提交按钮</li><li>文本器保存</li></ul><blockquote><p>示例</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@description</span>  防抖
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span> fn<span class="token punctuation">}</span></span>执行函数
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">await</span><span class="token punctuation">}</span></span>等待时间
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>immediate<span class="token punctuation">}</span></span>是否立即执行
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">const</span> <span class="token function-variable function">debounce</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> <span class="token keyword">await</span> <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">,</span> immediate <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
      timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>immediate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      fn <span class="token operator">&amp;&amp;</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>
      timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        timer <span class="token operator">=</span> <span class="token keyword">null</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">await</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
      timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">await</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>节流 函数在规定时间内只会执行一次，如果一段时间内被多次触发，则以第一次触发的时间为准。</li></ol><blockquote><p>示例</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**

- @description 节流
- @param <span class="token class-name"><span class="token punctuation">{</span>fn<span class="token punctuation">}</span></span> <span class="token parameter">执行函数</span>
- @param <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">await</span><span class="token punctuation">}</span></span> <span class="token parameter">等待时间</span>
- @reference
 */</span>

<span class="token keyword">const</span> <span class="token function-variable function">throttle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> <span class="token keyword">await</span> <span class="token operator">=</span> <span class="token number">500</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
      timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">await</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="首屏加载速度慢" tabindex="-1"><a class="header-anchor" href="#首屏加载速度慢" aria-hidden="true">#</a> 首屏加载速度慢</h2><ul><li><strong>JavaScript文件过大</strong>：SPA通常有很多 JavaScript 文件，如果这些文件的大小过大或加载速度慢，就会导致首屏加载缓慢。可以通过代码分割和打包、使用CDN等方式来优化加载速度。</li><li><strong>数据请求过多或数据请求太慢</strong>：SPA通过 AJAX 或 Fetch 等方式从后端获取数据，如果数据请求过多或数据请求太慢，也会导致首屏加载缓慢。可以通过减少数据请求、使用数据缓存、优化数据接口等方式来优化数据请求速度。</li><li><strong>大量图片加载慢</strong>：如果首屏需要加载大量图片，而这些图片大小过大或加载速度慢，也会导致首屏加载缓慢。可以通过图片压缩、使用图片懒加载等方式来优化图片加载速度。</li><li><strong>过多的渲染和重绘操作</strong>：如果在首屏加载时进行大量的渲染和重绘操作，也会导致首屏加载缓慢。可以通过尽可能少的DOM操作、使用CSS3动画代替JS动画等方式来优化渲染和重绘操作。</li><li><strong>网络问题</strong>：网络问题也会影响SPA首屏加载速度，比如网络延迟、丢包等。可以通过使用CDN、使用HTTP/2等方式来优化网络问题。</li></ul><h2 id="首屏加载优化" tabindex="-1"><a class="header-anchor" href="#首屏加载优化" aria-hidden="true">#</a> 首屏加载优化</h2><ol><li><p><strong>代码拆分（Code Splitting）</strong>：将应用程序的代码拆分成多个小块，按需加载。这可以减少初始加载时间，因为只有当前页面所需的代码会被加载，而不是一次性加载整个应用程序。</p></li><li><p><strong>路由懒加载</strong>：如果您的SPA使用路由来管理页面切换，可以使用路由懒加载技术。这意味着每个路由对应的组件会在首次访问时才被加载，而不是在应用启动时加载所有路由组件。</p></li><li><p><strong>预加载</strong>：预加载技术可以在后台加载将来可能需要的资源，以减少用户在导航到新页面时的加载时间。您可以使用<code>&lt;link rel=&quot;preload&quot;&gt;</code>标签或使用Webpack等构建工具的预加载插件。</p></li><li><p><strong>缓存</strong>：合理使用浏览器缓存机制，将静态资源缓存到用户的本地存储中，以便在下次访问时可以更快地加载。</p></li><li><p><strong>图片优化</strong>：优化图像以减小文件大小，使用适当的图像格式（如WebP），并应用懒加载以延迟图像的加载。</p></li><li><p><strong>压缩和缩小JavaScript和CSS文件</strong>：通过使用压缩工具（例如UglifyJS和Terser）来减小JavaScript文件的大小，以及通过使用CSS压缩工具来减小CSS文件的大小，可以减少加载时间。</p></li><li><p><strong>服务端渲染（Server-Side Rendering，SSR）</strong>：考虑在SPA中使用SSR，以便服务器可以在发送HTML之前渲染页面内容，减少客户端的初始加载时间。</p></li><li><p><strong>懒加载资源</strong>：将一些不是首屏必需的资源（例如广告、分析脚本等）进行懒加载，以确保首屏加载速度更快。</p></li><li><p><strong>移除不必要的依赖</strong>：检查您的项目依赖项，确保只加载和使用必需的库和组件。</p></li><li><p><strong>优化HTTP请求</strong>：减少HTTP请求的数量，合并文件，使用HTTP/2等技术来优化资源加载。</p></li><li><p><strong>减少DOM操作</strong>：尽量减少在首屏加载期间的DOM操作，因为DOM操作可能会导致页面重新渲染。</p></li><li><p><strong>代码优化</strong>：优化JavaScript代码，避免不必要的循环和计算，以提高代码执行性能。</p></li><li><p><strong>性能监控</strong>：使用性能监控工具来识别潜在的性能瓶颈，并定期进行性能分析和优化。</p></li></ol><h2 id="为什么要做性能优化" tabindex="-1"><a class="header-anchor" href="#为什么要做性能优化" aria-hidden="true">#</a> 为什么要做性能优化</h2><p>性能优化是为了提高网页的加载速度和相应速度，给用户带来更好的体验和用户满意度，同时还能减少服务器的负载压力，以此来提升程序的稳定性，具体有以下几个因素：</p><ul><li>提高用户体验</li><li>增加页面访问量</li><li>提高搜索引擎排名</li><li>减少服务器压力</li><li>节约成本</li><li>提高用户留存率</li></ul><h2 id="性能优化方式" tabindex="-1"><a class="header-anchor" href="#性能优化方式" aria-hidden="true">#</a> 性能优化方式</h2><ol><li><p><strong>压缩和缩小资源</strong>：</p><ul><li>使用压缩工具（如UglifyJS和Terser）来减小JavaScript文件的大小。</li><li>使用CSS压缩工具（如CSSNano）来减小CSS文件的大小。</li><li>压缩图像以减小文件大小，使用适当的图像格式，例如WebP。</li></ul></li><li><p><strong>减少HTTP请求</strong>：</p><ul><li>合并多个CSS和JavaScript文件，减少文件数量。</li><li>使用CSS雪碧图（CSS sprites）来合并小图标和背景图片。</li><li>考虑使用字体图标代替图像图标，减少图像请求。</li></ul></li><li><p><strong>浏览器缓存</strong>：</p><ul><li>设置适当的缓存头（Cache Headers）来充分利用浏览器缓存。</li><li>使用版本号或哈希值来确保浏览器在资源更新时获取新版本。</li></ul></li><li><p><strong>使用CDN（内容分发网络）</strong>：</p><ul><li>使用CDN分发静态资源，将资源提供给用户更接近他们的地理位置，从而减少加载时间。</li></ul></li><li><p><strong>延迟加载</strong>：</p><ul><li>使用懒加载技术，延迟加载页面上不是首次可见的内容，如图片、视频和部分JavaScript。</li></ul></li><li><p><strong>异步加载资源</strong>：</p><ul><li>使用<code>async</code>和<code>defer</code>属性来异步加载JavaScript文件，以避免阻塞页面渲染。</li></ul></li><li><p><strong>优化图片</strong>：</p><ul><li>使用现代图像格式，如WebP，以提高图像加载性能。</li><li>为图像指定适当的尺寸，并使用响应式图像技术。</li></ul></li><li><p><strong>使用字体优化</strong>：</p><ul><li>选择合适的字体，避免使用过多的自定义字体。</li><li>使用字体子集，只包含页面所需的字符，以减小字体文件大小。</li></ul></li><li><p><strong>服务端渲染（Server-Side Rendering，SSR）</strong>：</p><ul><li>对于需要SEO优化和更快的首屏加载速度的应用程序，考虑使用SSR。</li></ul></li><li><p><strong>代码分割</strong>：</p><ul><li>将代码拆分成小块，并按需加载，以减小初始加载时间。</li></ul></li><li><p><strong>性能监控</strong>：</p><ul><li>使用性能监控工具来识别潜在的性能问题，定期进行性能分析和优化。</li></ul></li><li><p><strong>减少第三方依赖</strong>：</p><ul><li>最小化使用第三方库和插件，因为它们可能增加页面加载时间。</li></ul></li><li><p><strong>提前加载重要资源</strong>：</p><ul><li>使用<code>&lt;link rel=&quot;preload&quot;&gt;</code>标签来提前加载关键资源，以减少加载时间。</li></ul></li><li><p><strong>优化DOM操作</strong>：</p><ul><li>减少频繁的DOM操作，因为它们可能导致页面重排（reflow）和重绘（repaint）。</li></ul></li><li><p><strong>响应式设计</strong>：</p><ul><li>使用响应式设计来确保网站在不同设备和屏幕尺寸上都有良好的性能和用户体验。</li></ul></li><li><p><strong>减小JavaScript的运行时间</strong>：</p><ul><li>优化JavaScript代码，避免不必要的循环和计算。</li><li>使用Web Workers来将一些任务移到后台线程以提高性能。</li></ul></li><li><p><strong>使用现代Web技术</strong>：</p><ul><li>使用HTTP/2协议以减少多个资源请求的开销。</li><li>使用新的浏览器API，如Service Workers，以实现离线访问和缓存。</li></ul></li></ol>`,25),i=[p];function e(o,c){return s(),a("div",null,i)}const r=n(l,[["render",e],["__file","性能优化.html.vue"]]);export{r as default};
