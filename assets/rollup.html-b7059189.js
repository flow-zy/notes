import{_ as n}from"./image-6827f1d4.js";import{_ as s,o as a,c as e,b as p}from"./app-491f955e.js";const t={},o=p(`<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><p>Rollup 是一个用于 JavaScript 的模块打包工具，它将小的代码片段编译成更大、更复杂的代码，例如库或应用程序。它使用 JavaScript 的 ES6 版本中包含的新标准化代码模块格式，而不是以前的 CommonJS 和 AMD 等特殊解决方案。ES 模块允许你自由无缝地组合你最喜欢的库中最有用的个别函数。</p><h2 id="为什么要学习rollup" tabindex="-1"><a class="header-anchor" href="#为什么要学习rollup" aria-hidden="true">#</a> 为什么要学习Rollup</h2><ol><li><p>轻量级：Rollup是一个轻量级的JavaScript模块打包工具，它的设计目标是尽可能简单和高效。与其他一些复杂的打包工具相比，Rollup的配置和使用相对简单，因此适合初学者和小型项目。</p></li><li><p>Tree Shaking：Rollup以其出色的Tree Shaking功能而闻名。Tree Shaking是一种优化技术，它可以自动删除未使用的代码，从而减小最终生成的JavaScript文件的大小。这有助于提高网页性能，减少加载时间。</p></li><li><p>ES6模块支持：Rollup对ES6模块有很好的支持，这意味着你可以使用现代的JavaScript模块语法来组织你的代码，而无需使用旧的CommonJS或AMD模块系统。</p></li><li><p>生态系统：Rollup拥有一个活跃的生态系统，有许多插件可供选择，用于处理各种不同类型的文件（例如CSS、TypeScript等）。这使得你可以根据项目的需求来扩展Rollup的功能。</p></li><li><p>性能：由于Rollup的轻量级设计和Tree Shaking功能，生成的JavaScript文件通常比其他打包工具更小，加载更快。这有助于提高你的网页性能。</p></li><li><p>定制化：Rollup允许你根据项目的具体需求进行高度定制。你可以选择只包含你需要的功能，从而减小生成文件的大小。</p></li><li><p>社区支持：Rollup拥有一个积极的社区，你可以在社区中找到有关Rollup的文档、教程和支持。</p></li></ol><h2 id="rollup-与webpack的区别" tabindex="-1"><a class="header-anchor" href="#rollup-与webpack的区别" aria-hidden="true">#</a> Rollup 与webpack的区别</h2><p>Rollup和Webpack都是用于构建JavaScript应用程序的工具。</p><ol><li><p><strong>打包策略</strong>:</p><ul><li><strong>Rollup</strong>: Rollup专注于ES模块（ESM）的打包。它将源代码中的模块打包成一个或多个输出文件，通常输出的是一个IIFE（Immediately Invoked Function Expression）格式的文件，适用于库和工具的开发。</li><li><strong>Webpack</strong>: Webpack是一个更通用的模块打包工具，支持各种模块系统，包括CommonJS、AMD、ESM等。它的打包策略更加灵活，适用于构建复杂的应用程序。</li></ul></li><li><p><strong>Tree Shaking</strong>:</p><ul><li><strong>Rollup</strong>: Rollup以静态分析的方式进行Tree Shaking，可以更好地消除未使用的代码，减小输出文件的体积。</li><li><strong>Webpack</strong>: Webpack也支持Tree Shaking，但在某些情况下，由于动态导入等原因，可能不够彻底。</li></ul></li><li><p><strong>生态系统</strong>:</p><ul><li><strong>Rollup</strong>: Rollup在一些领域，如JavaScript库的打包方面表现得很出色，因此在开发库或工具时很受欢迎。</li><li><strong>Webpack</strong>: Webpack在构建复杂应用程序时更加流行，因为它具有更多的插件和生态系统支持，可以处理各种资源，如CSS、图片、字体等。</li></ul></li><li><p><strong>配置</strong>:</p><ul><li><strong>Rollup</strong>: Rollup的配置相对较简单，通常更容易上手，但在处理非JavaScript资源时可能需要额外的插件。</li><li><strong>Webpack</strong>: Webpack的配置非常灵活，但也更复杂，因为它具有更多的配置选项和插件。</li></ul></li><li><p><strong>性能</strong>:</p><ul><li><strong>Rollup</strong>: Rollup通常比Webpack具有更快的构建速度，因为它的设计更简单，专注于模块的静态分析和打包。</li><li><strong>Webpack</strong>: Webpack在处理大型应用程序时可能会更慢，因为它的功能更多，需要更多的资源。</li></ul></li></ol><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i rollup <span class="token parameter variable">-g</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="快速开始" tabindex="-1"><a class="header-anchor" href="#快速开始" aria-hidden="true">#</a> 快速开始</h2><ol><li>在项目根目录下创建一个<code>main.js</code>的文件，在<code>main.js</code>文件中写入以下代码：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span>add<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>执行下面的命令</li></ol><ul><li>对Node.js</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rollup main.js <span class="token parameter variable">--format</span> cjs <span class="token parameter variable">--file</span> bundle.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>对浏览器</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rollup index.js <span class="token parameter variable">--file</span> bundle.js <span class="token parameter variable">--format</span> iife

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>浏览器和Node.js</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rollup index.js <span class="token parameter variable">--file</span> bundle.js <span class="token parameter variable">--format</span> umd <span class="token parameter variable">-name</span> <span class="token string">&quot;myBundle&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="命令行" tabindex="-1"><a class="header-anchor" href="#命令行" aria-hidden="true">#</a> 命令行</h2><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">-</span>c<span class="token punctuation">,</span> <span class="token comment">--config &lt;filename&gt;     配置文件 默认： rollup.config.js</span>
<span class="token operator">-</span>d<span class="token punctuation">,</span> <span class="token comment">--dir &lt;dirname&gt;         chunks 目录 (如果不存在，则打印到标准输出）</span>
<span class="token operator">-</span>e<span class="token punctuation">,</span> <span class="token comment">--external &lt;ids&gt;        要排除的模块 ID 的逗号分隔列表</span>
<span class="token operator">-</span>f<span class="token punctuation">,</span> <span class="token comment">--format &lt;format&gt;       输出类型（amd、cjs、es、iife、umd、system）</span>
<span class="token operator">-</span>g<span class="token punctuation">,</span> <span class="token comment">--globals &lt;pairs&gt;       \`moduleID:Global\` 对的逗号分隔列表</span>
<span class="token operator">-</span>h<span class="token punctuation">,</span> <span class="token comment">--help                       帮助消息</span>
<span class="token operator">-</span>i<span class="token punctuation">,</span> <span class="token comment">--input &lt;filename&gt;      输入（替代 &lt;entry file&gt;）</span>
<span class="token operator">-</span>m<span class="token punctuation">,</span> <span class="token comment">--sourcemap             生成源映射（\`-m inline\` 用于内联映射）</span>
<span class="token operator">-</span>n<span class="token punctuation">,</span> <span class="token comment">--name &lt;name&gt;          UMD 导出的名称</span>
<span class="token operator">-</span>o<span class="token punctuation">,</span> <span class="token comment">--file &lt;output&gt;         单个输出文件（如果不存在，则打印到标准输出）</span>
<span class="token operator">-</span>p<span class="token punctuation">,</span> <span class="token comment">--plugin &lt;plugin&gt;     使用指定的插件（可能重复）</span>
                                    如果插件名称不以 rollup<span class="token operator">-</span>plugin<span class="token operator">-</span> 或 <span class="token variable">@rollup</span><span class="token operator">/</span>plugin<span class="token operator">-</span> 开头，Rollup 将自动尝试添加这些前缀
<span class="token operator">-</span>v<span class="token punctuation">,</span> <span class="token comment">--version               显示版本号</span>
<span class="token operator">-</span>w<span class="token punctuation">,</span> <span class="token comment">--watch                 监视捆绑包中的文件并根据更改重建</span>
<span class="token comment">--amd.id &lt;id&gt;               AMD 模块的 ID（默认为匿名）</span>
<span class="token comment">--amd.autoId               根据块名称生成 AMD ID</span>
<span class="token comment">--amd.basePath &lt;prefix&gt;     预先添加到自动生成的 AMD ID 的路径</span>
<span class="token comment">--amd.define &lt;name&gt;        代替\`define\`使用的函数</span>
<span class="token comment">--assetFileNames &lt;pattern&gt;  发出资产的名称模式</span>
<span class="token comment">--banner &lt;text&gt;            在包顶部插入的代码（外部包装器）</span>
<span class="token comment">--chunkFileNames &lt;pattern&gt;  发出的次要块的名称模式</span>
<span class="token comment">--compact                   缩小包装器代码</span>
<span class="token comment">--context &lt;variable&gt;        指定顶级\`this\`值</span>
<span class="token comment">--entryFileNames &lt;pattern&gt;  发出的条目块的名称模式</span>
<span class="token comment">--environment &lt;values&gt;     传递给配置文件的设置（参见示例）</span>
<span class="token comment">--no-esModule              不要添加 __esModule 属性</span>
<span class="token comment">--exports &lt;mode&gt;            指定导出模式（auto, default, named, none）</span>
<span class="token comment">--extend                   扩展由 --name 定义的全局变量</span>
<span class="token comment">--no-externalLiveBindings   不生成支持实时绑定的代码</span>
<span class="token comment">--failAfterWarnings         如果构建产生警告，则退出并显示错误</span>
<span class="token comment">--footer &lt;text&gt;            要在包末尾插入的代码（外部包装器）</span>
<span class="token comment">--no-freeze                 不要冻结命名空间对象</span>
<span class="token comment">--no-hoistTransitiveImports 不要将传递性导入提升到入口块中</span>
<span class="token comment">--no-indent                不要缩进结果</span>
<span class="token comment">--no-interop                不包括互操作块</span>
<span class="token comment">--inlineDynamicImports      使用动态导入时创建单个包</span>
<span class="token comment">--intro &lt;text&gt;              在包顶部插入的代码（在包装器内）</span>
<span class="token comment">--minifyInternalExports    强制或禁用内部导出的缩小</span>
<span class="token comment">--namespaceToStringTag      为命名空间创建适当的 \`.toString\` 方法</span>
<span class="token comment">--noConflict               为 UMD 全局变量生成 noConflict 方法</span>
<span class="token comment">--outro &lt;text&gt;              在包的末尾插入的代码（在包装器内）</span>
<span class="token comment">--preferConst              使用 \`const\` 而不是 \`var\` 进行导出</span>
<span class="token comment">--no-preserveEntrySignatures 避免入口点的外观块</span>
<span class="token comment">--preserveModules           保留模块结构</span>
<span class="token comment">--preserveModulesRoot       将保留的模块放在根级别的此路径下</span>
<span class="token comment">--preserveSymlinks          解析文件时不要使用符号链接</span>
<span class="token comment">--no-sanitizeFileName       不要替换文件名中的无效字符</span>
<span class="token comment">--shimMissingExports        为缺失的导出创建填充变量</span>
<span class="token comment">--silent                    不要打印警告</span>
<span class="token comment">--sourcemapExcludeSources   不要在源映射中包含源代码</span>
<span class="token comment">--sourcemapFile &lt;file&gt;      指定源映射的包位置</span>
<span class="token comment">--stdin=ext                 指定用于标准输入的文件扩展名</span>
<span class="token comment">--no-stdin                 不要从标准输入中读取“-”</span>
<span class="token comment">--no-strict                 不要在生成的模块中发出 \`&quot;use strict&quot;;\`</span>
<span class="token comment">--strictDeprecations        为已弃用的功能抛出错误</span>
<span class="token comment">--systemNullSetters        用 \`null\` 替换空的 SystemJS setter</span>
<span class="token comment">--no-treeshake              禁用摇树优化</span>
<span class="token comment">--no-treeshake.annotations  忽略纯调用注释</span>
<span class="token comment">--no-treeshake.moduleSideEffects 假设模块没有副作用</span>
<span class="token comment">--no-treeshake.propertyReadSideEffects 忽略属性访问副作用</span>
<span class="token comment">--no-treeshake.tryCatchDeoptimization 不要关闭 try-catch-tree-shaking</span>
<span class="token comment">--no-treeshake.unknownGlobalSideEffects 假设未知的全局变量不抛出</span>
<span class="token comment">--waitForBundleInput        等待捆绑输入文件</span>
    如果入口点文件之一不可用，这不会引发错误。相反，它会等到所有文件都存在后再开始构建。这个有用，特别是在监视模式下，当 Rollup 消耗另一个进程的输出时
<span class="token comment">--watch.buildDelay &lt;number&gt; Throttle watch rebuilds</span>
<span class="token comment">--no-watch.clearScreen     重建时不清除屏幕</span>
<span class="token comment">--watch.skipWrite           观看时不要将文件写入磁盘</span>
<span class="token comment">--watch.exclude &lt;files&gt;     排除被监视的文件</span>
<span class="token comment">--watch.include &lt;files&gt;    限制观看指定文件</span>
<span class="token comment">--validate                  验证输出</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="external" tabindex="-1"><a class="header-anchor" href="#external" aria-hidden="true">#</a> external</h2><p>用于匹配需要排除在 bundle 外部的模块，它的值可以是一个接收模块 id 参数并返回 true （表示外部依赖）或 false （表示非外部依赖）的函数，也可以是一个模块 ID 数组或者正则表达式。除此之外，它还可以只是单个的模块 ID 或正则表达式。被匹配的模块 ID 应该满足以下条件之一：</p><ul><li>外部依赖的名称，需要和引入语句中写法完全一致。例如，如果想标记 <code>import &quot;dependency.js&quot;</code> 为外部依赖，就需要使用 <code>&quot;dependency.js&quot;</code></li><li>作为模块 ID；而如果要标记 <code>import &quot;dependency&quot;</code> 为外部依赖，则使用 <code>&quot;dependency&quot;</code>。 解析过的模块 ID（如文件的绝对路径）。</li></ul><h2 id="input" tabindex="-1"><a class="header-anchor" href="#input" aria-hidden="true">#</a> input</h2><p>用于指定<code>bundle</code>文件的入口文件</p><ol><li>单一入口</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&#39;src/main.js&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 你的应用程序的主要入口点</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>多个入口</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">&#39;src/main-a.js&#39;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;b/index&#39;</span><span class="token operator">:</span> <span class="token string">&#39;src/main-b.js&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 多个入口点</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>动态导入</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> glob <span class="token keyword">from</span> <span class="token string">&#39;glob&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">&#39;node:path&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> fileURLToPath <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;node:url&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
 <span class="token literal-property property">input</span><span class="token operator">:</span> Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span>
  glob<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token string">&#39;src/**/*.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">file</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
   <span class="token comment">// 这里将删除 \`src/\` 以及每个文件的扩展名。</span>
   <span class="token comment">// 因此，例如 src/nested/foo.js 会变成 nested/foo</span>
   path<span class="token punctuation">.</span><span class="token function">relative</span><span class="token punctuation">(</span>
    <span class="token string">&#39;src&#39;</span><span class="token punctuation">,</span>
    file<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span>length <span class="token operator">-</span> path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span>
   <span class="token punctuation">)</span><span class="token punctuation">,</span>
   <span class="token comment">// 这里可以将相对路径扩展为绝对路径，例如</span>
   <span class="token comment">// src/nested/foo 会变成 /project/src/nested/foo.js</span>
   <span class="token function">fileURLToPath</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span>
 <span class="token punctuation">)</span><span class="token punctuation">,</span>
 <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">&#39;es&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">dir</span><span class="token operator">:</span> <span class="token string">&#39;dist&#39;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="output" tabindex="-1"><a class="header-anchor" href="#output" aria-hidden="true">#</a> output</h2><p>写入配置</p><ol><li><code>file</code> 指定输出文件</li><li><code>dir</code> 指定输出文件的目录</li><li><code>format</code> 指定输出文件的格式</li></ol><ul><li><code>amd</code> – 异步模块加载，适用于 RequireJS 等模块加载器</li><li><code>cjs</code> – CommonJS，适用于 Node 环境和其他打包工具（别名：commonjs）</li><li><code>es</code> – 将 bundle 保留为 ES 模块文件，适用于其他打包工具，以及支持 <code>&lt;script type=module&gt;</code> 标签的浏览器。（别名：esm，module）</li><li><code>iife</code> – 自执行函数，适用于 <code>&lt;script&gt;</code> 标签（如果你想为你的应用程序创建 bundle，那么你可能会使用它）。iife 表示“自执行 函数表达式”</li><li><code>umd</code> – 通用模块定义规范，同时支持 amd，cjs 和 iife</li><li><code>system</code> – SystemJS 模块加载器的原生格式（别名：systemjs）</li></ul><ol start="4"><li><p><code>name</code> 全局变量名表示bundle</p></li><li><p><code>globals</code> 该选项用于在 umd / iife bundle 中，使用 id: variableName 键值对指定外部依赖</p></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">import</span> $ from <span class="token string">&#39;jquery&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span><span class="token punctuation">,</span>
  <span class="token literal-property property">external</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;jquery&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">&#39;iife&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;MyBundle&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">globals</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">jquery</span><span class="token operator">:</span> <span class="token string">&#39;$&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">/*
var MyBundle = (function ($) {
  // 这里编辑代码
}($));
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li><code>plugins</code> 用于指定输出插件</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
<span class="token keyword">import</span> terser <span class="token keyword">from</span> <span class="token string">&#39;@rollup/plugin-terser&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
 <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&#39;main.js&#39;</span><span class="token punctuation">,</span>
 <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
   <span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token string">&#39;bundle.js&#39;</span><span class="token punctuation">,</span>
   <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">&#39;es&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
   <span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token string">&#39;bundle.min.js&#39;</span><span class="token punctuation">,</span>
   <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">&#39;es&#39;</span><span class="token punctuation">,</span>
   <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">terser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="plugins" tabindex="-1"><a class="header-anchor" href="#plugins" aria-hidden="true">#</a> plugins</h2><p>Rollup 是一个 JavaScript 模块打包器，它用于将多个模块或文件打包成一个单独的文件，以便在浏览器中加载。Rollup 提供了插件系统，允许你通过添加不同的插件来扩展其功能。插件可以用于执行各种任务，例如转换代码、优化输出、处理资源文件等等。</p><p>Rollup 插件的作用包括但不限于：</p><ol><li><p>代码转换：插件可以将你的代码从一种语法或模块系统转换为另一种。例如，将 ES6 模块转换为 CommonJS 模块或将 TypeScript 转换为纯 JavaScript。</p></li><li><p>压缩和优化：插件可以压缩和优化你的 JavaScript 代码，以减小文件大小，提高加载性能。</p></li><li><p>处理资源文件：如果你的项目包含像图像、字体或样式等资源文件，插件可以帮助你将它们正确地导入和处理，以便在打包后的文件中使用。</p></li><li><p>代码拆分：一些插件支持将代码拆分成多个块，以便实现按需加载，提高应用程序的性能。</p></li><li><p>自定义任务：你还可以编写自己的自定义插件，以执行特定于你的项目的任务。</p></li></ol><p>使用 Rollup 插件，你可以根据项目的需要配置不同的插件来实现各种功能，这使得 Rollup 成为一个强大且高度可定制的工具，特别适用于构建现代的 JavaScript 应用程序和库。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> resolve <span class="token keyword">from</span> <span class="token string">&#39;@rollup/plugin-node-resolve&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> commonjs <span class="token keyword">from</span> <span class="token string">&#39;@rollup/plugin-commonjs&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> isProduction <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
 <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&#39;main.js&#39;</span><span class="token punctuation">,</span>
 <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">commonjs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  isProduction <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;@rollup/plugin-terser&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 <span class="token punctuation">]</span><span class="token punctuation">,</span>
 <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token string">&#39;bundle.js&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">&#39;cjs&#39;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>常用插件</p></blockquote><ol><li><code>@rollup/plugin-json</code>，允许你将 JSON 文件作为模块导入。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 安装</span>
yarn add @rollup<span class="token operator">/</span>plugin<span class="token operator">-</span>json <span class="token operator">--</span>dev
<span class="token comment">// 配置</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&#39;src/main.js&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token string">&#39;bundle.js&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">&#39;cjs&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token operator">++</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><code>@rollup/plugin-node-resolve</code>，允许你导入第三方模块，并配置如何查找它们。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>yarn add @rollup<span class="token operator">/</span>plugin<span class="token operator">-</span>node<span class="token operator">-</span>resolve <span class="token operator">--</span>dev
<span class="token keyword">import</span> resolve <span class="token keyword">from</span> <span class="token string">&#39;@rollup/plugin-node-resolve&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&#39;src/main.js&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token string">&#39;bundle.js&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">&#39;cjs&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><code>@rollup/plugin-commonjs</code>，允许你导入 CommonJS 模块。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>yarn add @rollup<span class="token operator">/</span>plugin<span class="token operator">-</span>commonjs <span class="token operator">--</span>dev
<span class="token keyword">import</span> resolve <span class="token keyword">from</span> <span class="token string">&#39;@rollup/plugin-node-resolve&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> commonjs <span class="token keyword">from</span> <span class="token string">&#39;@rollup/plugin-commonjs&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&#39;src/main.js&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token string">&#39;bundle.js&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">&#39;cjs&#39;</span>
  <span class="token punctuation">}</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">commonjs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><code>@rollup/plugin-babel</code>，允许你使用 Babel 转换代码。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>yarn add rollup<span class="token operator">/</span>plugin<span class="token operator">-</span>babel @rollup<span class="token operator">/</span>plugin<span class="token operator">-</span>node<span class="token operator">-</span>resolve <span class="token operator">--</span>dev
<span class="token keyword">import</span> resolve <span class="token keyword">from</span> <span class="token string">&#39;@rollup/plugin-node-resolve&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> babel <span class="token keyword">from</span> <span class="token string">&#39;@rollup/plugin-babel&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&#39;src/main.js&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token string">&#39;bundle.js&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">&#39;cjs&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">babel</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">babelHelpers</span><span class="token operator">:</span> <span class="token string">&#39;bundled&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li><code>@rollup/plugin-typescript</code>，允许你使用 TypeScript 编写代码。</li><li><code>@rollup/plugin-replace</code>，允许你使用环境变量和插件选项来替换代码中的值。</li><li><code>@rollup/plugin-image</code>，允许你导入图像文件。</li><li><code>@rollup/plugin-multi-entry</code>，允许你导入多个入口文件。</li><li><code>@rollup/plugin-terser</code>, 允许你使用 Terser 压缩代码。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>yarn add @rollup<span class="token operator">/</span>plugin<span class="token operator">-</span>json rollup<span class="token operator">-</span>plugin<span class="token operator">-</span>terser <span class="token operator">--</span>dev
<span class="token comment">// rollup.config.js</span>
<span class="token keyword">import</span> json <span class="token keyword">from</span> <span class="token string">&#39;@rollup/plugin-json&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> terser <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;rollup-plugin-terser&#39;</span><span class="token punctuation">;</span> <span class="token operator">++</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&#39;src/main.js&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token string">&#39;bundle.js&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">&#39;cjs&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token string">&#39;bundle.min.js&#39;</span><span class="token punctuation">,</span> <span class="token operator">++</span>
      <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">&#39;iife&#39;</span><span class="token punctuation">,</span> <span class="token operator">++</span> <span class="token comment">// 这种格式包装了代码，以便它可以通过浏览器中的脚本标签使用，同时避免与其他代码发生不必要的交互</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;version&#39;</span><span class="token punctuation">,</span> <span class="token operator">++</span>
      <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">terser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">++</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="插件开发" tabindex="-1"><a class="header-anchor" href="#插件开发" aria-hidden="true">#</a> 插件开发</h2><p>Rollup 插件是一个对象，具有 属性、构建钩子 和 输出生成钩子 中的一个或多个，并遵循我们的 约定。插件应作为一个导出一个函数的包进行发布，该函数可以使用插件特定的选项进行调用并返回此类对象。</p><h3 id="约定" tabindex="-1"><a class="header-anchor" href="#约定" aria-hidden="true">#</a> 约定</h3><ol><li>插件应该有一个明确的名称，并以rollup-plugin-作为前缀。</li><li>在package.json中包含rollup-plugin关键字。</li><li>插件应该被测试，我们推荐 mocha 或 ava，它们支持 Promise。</li><li>可能的话，使用异步方法，例如 fs.readFile 而不是 fs.readFileSync</li><li>用英文文档描述你的插件。</li><li>确保如果适当，你的插件输出正确的源映射。</li><li>如果插件使用“虚拟模块”（例如用于辅助函数），请使用\\0前缀模块 ID。这可以防止其他插件尝试处理它。</li></ol><h3 id="属性" tabindex="-1"><a class="header-anchor" href="#属性" aria-hidden="true">#</a> 属性</h3><ol><li><code>name</code>: <code>name</code>插件的名称，用于在警告和错误消息中标识插件。</li><li><code>version</code>:<code>version</code>插件的</li></ol><h3 id="构建钩子" tabindex="-1"><a class="header-anchor" href="#构建钩子" aria-hidden="true">#</a> 构建钩子</h3><p>钩子是在构建的各个阶段调用的函数。钩子可以影响构建的运行方式，提供关于构建的信息，或在构建完成后修改构建。 种类：</p><ul><li><code>async</code>：该钩子也可以返回一个解析为相同类型的值的<code>Promise</code>；否则，该钩子被标记为 <code>sync</code>。</li><li><code>first</code>：如果有多个插件实现此钩子，则钩子按顺序运行，直到钩子返回一个不是 <code>null</code> 或 <code>undefined</code> 的值。</li><li><code>sequential</code>：如果有多个插件实现此钩子，则所有这些钩子将按指定的插件顺序运行。如果钩子是 <code>async</code>，则此类后续钩子将等待当前钩子解决后再运行。</li><li><code>parallel</code>：如果有多个插件实现此钩子，则所有这些钩子将按指定的插件顺序运行。如果钩子是 <code>async</code>，则此类后续钩子将并行运行，而不是等待当前钩子。</li></ul><p>除了函数之外，钩子也可以是对象。在这种情况下，实际的钩子函数（或 <code>banner/footer/intro/outro</code> 的值）必须指定为 <code>handler</code>。这允许你提供更多的可选属性，以改变钩子的执行</p><ul><li><code>order</code>：如果有多个插件实现此钩子，则可以先运行此插件（<code>pre</code>），最后运行此插件（<code>post</code>），或在用户指定的位置运行（没有值或 <code>null</code>）。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">resolveFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">return</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;resolve-first&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">resolveId</span><span class="token operator">:</span> <span class="token punctuation">{</span>
   <span class="token literal-property property">order</span><span class="token operator">:</span> <span class="token string">&#39;pre&#39;</span><span class="token punctuation">,</span>
   <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>source <span class="token operator">===</span> <span class="token string">&#39;external&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> source<span class="token punctuation">,</span> <span class="token literal-property property">external</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果有多个插件使用 <code>&quot;pre&quot;</code> 或 <code>&quot;post&quot;</code>，<code>Rollup</code> 将按用户指定的顺序运行它们。此选项可用于所有插件钩子。对于并行钩子，它会更改同步部分运行的顺序</p><ul><li><code>sequential</code>: 不要与其他的插件相同钩子并行运行此钩子。仅可用于<code>parallel</code>钩子</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> resolve <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;node:path&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> readdir <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;node:fs/promises&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">getFilesOnDisk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">return</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;getFilesOnDisk&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">writeBundle</span><span class="token operator">:</span> <span class="token punctuation">{</span>
   <span class="token literal-property property">sequential</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
   <span class="token literal-property property">order</span><span class="token operator">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span>
   <span class="token keyword">async</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> dir <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> topLevelFiles <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readdir</span><span class="token punctuation">(</span><span class="token function">resolve</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>topLevelFiles<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+n+`" alt="执行顺序" tabindex="0" loading="lazy"><figcaption>执行顺序</figcaption></figure><ul><li><code>options</code> : (options: InputOptions) =&gt; InputOptions | null 类型： [async, sequential] 作用： 替换或操作传递给 rollup.rollup 的选项对象</li><li><code>buildStart</code> (options: InputOptions) =&gt; void 类型： [async, parallel] 作用：当您需要访问传递给 rollup.rollup() 的选项时，这是推荐使用的钩子，因为它考虑了所有选项钩子的转换，并且还包含未设置选项的正确默认值</li><li><code>resolveId</code></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">(</span>source<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> importer<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> options<span class="token operator">:</span> <span class="token punctuation">{</span>isEntry<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span> custom<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">[</span>plugin<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token boolean">false</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token punctuation">{</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> external<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token string">&quot;relative&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;absolute&quot;</span><span class="token punctuation">,</span> moduleSideEffects<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token string">&quot;no-treeshake&quot;</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> syntheticNamedExports<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> meta<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">[</span>plugin<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">}</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>类型： [async, first] 定义自定义解析器 解析器可用于例如定位第三方依赖。这里的 source 是 importee，正如它在 import 语句中所写的那样. 导入器是导入模块的完全解析的 id.在解析入口点时，importer 通常是未定义的.这里的一个例外是通过 this.emitFile 生成的入口点，因为在这里，您可以提供导入器参数。 对于这些情况，isEntry 选项将告诉您我们是否正在解析用户定义的入口点、发出的块，或者是否为 this.resolve 上下文函数提供了 isEntry 参数。</p><ul><li><code>load</code></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token punctuation">{</span>code<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> map<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> SourceMap<span class="token punctuation">,</span> ast<span class="token operator">?</span> <span class="token operator">:</span> ESTree<span class="token punctuation">.</span>Program<span class="token punctuation">,</span> moduleSideEffects<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token string">&quot;no-treeshake&quot;</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> syntheticNamedExports<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> meta<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">[</span>plugin<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">}</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>类型： [async, first] 定义自定义加载器。返回 null 延迟到其他加载函数（以及最终从文件系统加载的默认行为）。为了防止额外的解析开销，例如由于某种原因，这个钩子已经使用 this.parse 来生成一个 AST,这个钩子可以选择返回一个 { code, ast, map } 对象.ast 必须是标准的 ESTree AST，每个节点都有开始和结束属性。如果转换不移动代码，您可以通过将 map 设置为 null 来保留现有的源映射。否则，您可能需要生成源映射。请参阅有关源代码转换的部分.</p><ul><li><code>transform</code></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">(</span>code<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token punctuation">{</span>code<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> map<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> SourceMap<span class="token punctuation">,</span> ast<span class="token operator">?</span> <span class="token operator">:</span> ESTree<span class="token punctuation">.</span>Program<span class="token punctuation">,</span> moduleSideEffects<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token string">&quot;no-treeshake&quot;</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> syntheticNamedExports<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> meta<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">[</span>plugin<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">}</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>类型： [async, sequential] 可用于转换单个模块。为了防止额外的解析开销，例如由于某种原因，这个钩子已经使用 this.parse 来生成一个 AST，这个钩子可以选择返回一个 { code, ast, map } 对象。ast 必须是标准的 ESTree AST，每个节点都有开始和结束属性。如果转换不移动代码，您可以通过将 map 设置为 null 来保留现有的源映射.</p><ul><li><code>moduleParsed</code></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function-variable function">Type</span><span class="token operator">:</span> <span class="token punctuation">(</span>moduleInfo<span class="token operator">:</span> ModuleInfo<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>类型: async, parallel 每次 Rollup 完全解析模块时都会调用此钩子。有关传递给此钩子的信息，请参阅 this.getModuleInfo。 与转换钩子相反，这个钩子从不缓存，可用于获取有关缓存和其他模块的信息，包括元属性的最终形状、代码和 ast。 这个钩子会等到所有的导入都解决了，这样 moduleInfo.importedIds 和 moduleInfo.dynamicallyImportedIds 中的信息才完整准确。但是请注意，有关导入模块的信息可能不完整，因为稍后可能会发现其他导入程序。如果您需要此信息，请使用 buildEnd 挂钩。</p><ul><li><code>resolveDynamicImport</code></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">(</span>specifier<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> ESTree<span class="token punctuation">.</span>Node<span class="token punctuation">,</span> importer<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token boolean">false</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token punctuation">{</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> external<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>类型:: async, first 为动态导入定义自定义解析器。返回错误信号，表明导入应该保持原样，而不是传递给其他解析器，从而使其成为外部。与 resolveId 钩子类似，您还可以返回一个对象以将导入解析为不同的 id，同时将其标记为外部。 如果动态导入传递了一个字符串作为参数，则从该钩子返回的字符串将被解释为现有模块 id，而返回 null 将推迟到其他解析器并最终到 resolveId 。 如果动态导入没有传递字符串作为参数，此钩子可以访问原始 AST 节点以进行分析，并且在以下方面的行为略有不同：</p><p>如果所有插件都返回 null，则导入将被视为外部而不发出警告。 如果返回一个字符串，则该字符串不会被解释为模块 ID，而是用作导入参数的替换。插件有责任确保生成的代码有效。 要解决对现有模块的此类导入，您仍然可以返回对象 {id, external}。 注意这个钩子的返回值之后不会传递给resolveId；如果您需要访问静态解析算法，您可以在插件上下文中使用 this.resolve(source, importer) 。</p><ul><li><code>buildEnd</code></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function-variable function">Type</span><span class="token operator">:</span> <span class="token punctuation">(</span>error<span class="token operator">?</span><span class="token operator">:</span> Error<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>类型: async, parallel 在每个 rollup.rollup 构建上调用。当您需要访问传递给 rollup.rollup() 的选项时，这是推荐使用的钩子因为它考虑了所有选项挂钩的转换，并且还包含未设置选项的正确默认值。</p><ul><li><code>watchChange</code></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>watchChange<span class="token operator">:</span> <span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> change<span class="token operator">:</span> <span class="token punctuation">{</span>event<span class="token operator">:</span> <span class="token string">&#39;create&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;update&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;delete&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>类型: sync, sequential 每当 rollup 在 --watch 模式下检测到对受监控文件的更改时通知插件。这个钩子不能被输出插件使用。第二个参数包含更改事件的其他详细信息。</p><ul><li><code>closeWatcher</code></li></ul><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">void</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>类型: sync, sequential 当观察者进程关闭并且所有打开的资源也应该关闭时通知插件。这个钩子不能被输出插件使用</p>`,99),l=[o];function i(c,r){return a(),e("div",null,l)}const k=s(t,[["render",i],["__file","rollup.html.vue"]]);export{k as default};
