export default "{\"documentCount\":605,\"nextId\":605,\"documentIds\":{\"0\":\"v-55d4b2a4\",\"1\":\"v-55d4b2a4#创建一个新的-vue-2-项目\",\"2\":\"v-55d4b2a4#安装所需的依赖项\",\"3\":\"v-55d4b2a4#创建-todo-组件和-store\",\"4\":\"v-55d4b2a4#在-app-vue-中使用组件\",\"5\":\"v-55d4b2a4#运行项目\",\"6\":\"v-75b45195\",\"7\":\"v-75b45195#基础知识\",\"8\":\"v-75b45195#什么是react\",\"9\":\"v-75b45195#react的优点和特点\",\"10\":\"v-75b45195#react与其他前端框架的比较\",\"11\":\"v-75b45195#react的核心概念-组件、虚拟dom、状态和属性等\",\"12\":\"v-75b45195#jsx语法\",\"13\":\"v-75b45195#什么是jsx\",\"14\":\"v-75b45195#jsx与html的区别\",\"15\":\"v-75b45195#jsx的基本语法规则\",\"16\":\"v-75b45195#使用jsx创建react元素\",\"17\":\"v-75b45195#组件\",\"18\":\"v-75b45195#函数组件和类组件的区别\",\"19\":\"v-75b45195#创建react组件的基本语法\",\"20\":\"v-75b45195#组件的状态-state-和属性-props\",\"21\":\"v-75b45195#组件的渲染-rendering\",\"22\":\"v-75b45195#组件的生命周期\",\"23\":\"v-75b45195#高阶组件-hoc\",\"24\":\"v-75b45195#事件处理\",\"25\":\"v-75b45195#事件处理的基本概念\",\"26\":\"v-75b45195#绑定事件处理函数的方法\",\"27\":\"v-75b45195#事件对象和事件参数\",\"28\":\"v-75b45195#常见的事件类型\",\"29\":\"v-75b45195#表单\",\"30\":\"v-75b45195#表单元素的基本用法\",\"31\":\"v-75b45195#受控组件和非受控组件\",\"32\":\"v-75b45195#表单验证和错误处理\",\"33\":\"v-75b45195#处理表单提交\",\"34\":\"v-75b45195#组件通信\",\"35\":\"v-75b45195#父子组件通信\",\"36\":\"v-75b45195#属性传递\",\"37\":\"v-75b45195#上下文-context-api\",\"38\":\"v-75b45195#发布订阅模式和事件总线\",\"39\":\"v-75b45195#hooks\",\"40\":\"v-75b45195#什么是hooks\",\"41\":\"v-75b45195#常用的hooks函数-usestate、useeffect等\",\"42\":\"v-75b45195#自定义hooks\",\"43\":\"v-75b45195#hooks的使用注意事项\",\"44\":\"v-75b45195#性能优化\",\"45\":\"v-75b45195#virtual-dom的原理和优势\",\"46\":\"v-75b45195#使用key属性进行性能优化\",\"47\":\"v-75b45195#purecomponent和memo组件\",\"48\":\"v-75b45195#使用shouldcomponentupdate进行手动优化\",\"49\":\"v-75b45195#减少渲染次数\",\"50\":\"v-75b45195#使用生命周期方法和effect钩子进行异步加载\",\"51\":\"v-75b45195#懒加载和按需加载\",\"52\":\"v-75b45195#使用memoized函数和记忆化技术\",\"53\":\"v-75b45195#使用分页和虚拟滚动\",\"54\":\"v-75b45195#图片优化\",\"55\":\"v-75b45195#缓存和数据请求优化\",\"56\":\"v-75b45195#代码拆分和模块化\",\"57\":\"v-75b45195#使用web-workers\",\"58\":\"v-75b45195#使用性能分析工具\",\"59\":\"v-148d48ae\",\"60\":\"v-148d48ae#介绍\",\"61\":\"v-148d48ae#渐进式框架\",\"62\":\"v-148d48ae#mvvm模型\",\"63\":\"v-148d48ae#spa单页面应用\",\"64\":\"v-148d48ae#第一个vue应用\",\"65\":\"v-148d48ae#引入vue-js\",\"66\":\"v-148d48ae#声明式渲染\",\"67\":\"v-148d48ae#创建vue实例\",\"68\":\"v-148d48ae#模板语法\",\"69\":\"v-148d48ae#插值\",\"70\":\"v-148d48ae#指令\",\"71\":\"v-148d48ae#计算属性与侦听器\",\"72\":\"v-148d48ae#计算属性-computed\",\"73\":\"v-148d48ae#介绍-1\",\"74\":\"v-148d48ae#示例\",\"75\":\"v-148d48ae#侦听器\",\"76\":\"v-148d48ae#介绍-2\",\"77\":\"v-148d48ae#示例-1\",\"78\":\"v-148d48ae#计算属性-侦听器-方法三者之间的区别\",\"79\":\"v-148d48ae#class与style的绑定\",\"80\":\"v-148d48ae#class绑定\",\"81\":\"v-148d48ae#介绍-3\",\"82\":\"v-148d48ae#写法\",\"83\":\"v-148d48ae#style绑定\",\"84\":\"v-148d48ae#介绍-4\",\"85\":\"v-148d48ae#写法-1\",\"86\":\"v-148d48ae#过滤器\",\"87\":\"v-148d48ae#生命周期\",\"88\":\"v-148d48ae#脚手架\",\"89\":\"v-148d48ae#组件化\",\"90\":\"v-148d48ae#定义\",\"91\":\"v-148d48ae#组件注册\",\"92\":\"v-148d48ae#单文件组件\",\"93\":\"v-148d48ae#组件通信\",\"94\":\"v-148d48ae#动态组件\",\"95\":\"v-148d48ae#异步组件\",\"96\":\"v-148d48ae#插槽\",\"97\":\"v-148d48ae#混入\",\"98\":\"v-148d48ae#过渡与动画\",\"99\":\"v-148d48ae#vue3相对vue2增加了那些东西\",\"100\":\"v-148d48ae#第一个vue3应用\",\"101\":\"v-148d48ae#应用实例\",\"102\":\"v-148d48ae#响应式\",\"103\":\"v-148d48ae#计算属性-computed-1\",\"104\":\"v-148d48ae#介绍-5\",\"105\":\"v-148d48ae#基本使用\",\"106\":\"v-148d48ae#计算属性缓存\",\"107\":\"v-148d48ae#计算属性依赖\",\"108\":\"v-148d48ae#计算属性应用场景\",\"109\":\"v-148d48ae#计算属性与方法的区别\",\"110\":\"v-148d48ae#侦听器-watch\",\"111\":\"v-148d48ae#计算属性与侦听器的区别\",\"112\":\"v-148d48ae#生命周期-1\",\"113\":\"v-148d48ae#生命周期图示\",\"114\":\"v-148d48ae#生命周期函数\",\"115\":\"v-148d48ae#组件\",\"116\":\"v-148d48ae#组件注册-1\",\"117\":\"v-148d48ae#依赖注入\",\"118\":\"v-148d48ae#内置组件\",\"119\":\"v-148d48ae#teleport\",\"120\":\"v-148d48ae#transition\",\"121\":\"v-148d48ae#过渡效果\",\"122\":\"v-148d48ae#过渡状态\",\"123\":\"v-148d48ae#过渡模式\",\"124\":\"v-148d48ae#过渡钩子\",\"125\":\"v-148d48ae#过渡类名\",\"126\":\"v-148d48ae#keep-alive\",\"127\":\"v-148d48ae#节点、树和虚拟dom\",\"128\":\"v-148d48ae#虚拟dom-virtual-dom\",\"129\":\"v-148d48ae#节点、树\",\"130\":\"v-48187af2\",\"131\":\"v-48187af2#简介\",\"132\":\"v-48187af2#安装和配置\",\"133\":\"v-48187af2#数据库操作\",\"134\":\"v-48187af2#表操作\",\"135\":\"v-48187af2#查询语言-sql\",\"136\":\"v-48187af2#数据类型\",\"137\":\"v-48187af2#事务处理\",\"138\":\"v-48187af2#性能优化和调优\",\"139\":\"v-5dd7b515\",\"140\":\"v-5dd7b515#介绍\",\"141\":\"v-5dd7b515#语法\",\"142\":\"v-5dd7b515#书写方式\",\"143\":\"v-5dd7b515#选择器\",\"144\":\"v-5dd7b515#样式属性\",\"145\":\"v-5dd7b515#单位\",\"146\":\"v-5dd7b515#盒模型\",\"147\":\"v-5dd7b515#布局\",\"148\":\"v-5dd7b515#响应式设计\",\"149\":\"v-5dd7b515#css3-功能\",\"150\":\"v-5dd7b515#_2d和3d转换-2d-and-3d-transforms\",\"151\":\"v-5dd7b515#过渡-transitions\",\"152\":\"v-5dd7b515#动画-animations\",\"153\":\"v-5dd7b515#渐变-gradients\",\"154\":\"v-5dd7b515#多列布局-multi-column-layout\",\"155\":\"v-5dd7b515#弹性盒子-flexbox\",\"156\":\"v-5dd7b515#网格布局-css-grid\",\"157\":\"v-5dd7b515#媒体查询-media-queries\",\"158\":\"v-5dd7b515#背景-background\",\"159\":\"v-5dd7b515#选择器-selector\",\"160\":\"v-5dd7b515#css框架\",\"161\":\"v-5dd7b515#css预处理器\",\"162\":\"v-3d3f98c6\",\"163\":\"v-3d3f98c6#简介\",\"164\":\"v-3d3f98c6#ecmascript-和-javascript-的关系\",\"165\":\"v-3d3f98c6#变量\",\"166\":\"v-3d3f98c6#解构赋值\",\"167\":\"v-3d3f98c6#字符串\",\"168\":\"v-3d3f98c6#正则表达式\",\"169\":\"v-3d3f98c6#数值-number\",\"170\":\"v-3d3f98c6#数组-array\",\"171\":\"v-3d3f98c6#对象-object\",\"172\":\"v-3d3f98c6#函数-function\",\"173\":\"v-3d3f98c6#运算符\",\"174\":\"v-3d3f98c6#symbol\",\"175\":\"v-3d3f98c6#数据结构\",\"176\":\"v-3d3f98c6#set-集合\",\"177\":\"v-3d3f98c6#map-映射\",\"178\":\"v-3d3f98c6#weakset-弱集合\",\"179\":\"v-3d3f98c6#weakmap-弱映射\",\"180\":\"v-3d3f98c6#arraybuffer-数组缓冲区\",\"181\":\"v-3d3f98c6#typedarray-类型化数组\",\"182\":\"v-3d3f98c6#dataview-数据视图\",\"183\":\"v-3d3f98c6#类-class\",\"184\":\"v-3d3f98c6#迭代器-iterator\",\"185\":\"v-3d3f98c6#用法\",\"186\":\"v-3d3f98c6#生成器-generator\",\"187\":\"v-3d3f98c6#用法-1\",\"188\":\"v-3d3f98c6#代理-proxy\",\"189\":\"v-3d3f98c6#用法-2\",\"190\":\"v-3d3f98c6#反映-reflect\",\"191\":\"v-3d3f98c6#常用方法\",\"192\":\"v-3d3f98c6#promise\",\"193\":\"v-3d3f98c6#常用方法-1\",\"194\":\"v-3d3f98c6#async-函数\",\"195\":\"v-3d3f98c6#实现原理\",\"196\":\"v-3d3f98c6#特点和用法\",\"197\":\"v-3d3f98c6#generator函数的异步应用\",\"198\":\"v-3d3f98c6#常见场景\",\"199\":\"v-3d3f98c6#模块化\",\"200\":\"v-3d3f98c6#commonjs模块化\",\"201\":\"v-3d3f98c6#es模块化\",\"202\":\"v-3d3f98c6#用法-3\",\"203\":\"v-3d3f98c6#commonjs和es模块的区别\",\"204\":\"v-3d3f98c6#装饰器\",\"205\":\"v-58f2a8e2\",\"206\":\"v-58f2a8e2#介绍\",\"207\":\"v-58f2a8e2#基本结构\",\"208\":\"v-58f2a8e2#元数据\",\"209\":\"v-58f2a8e2#标记元素\",\"210\":\"v-58f2a8e2#块级元素与内联元素\",\"211\":\"v-58f2a8e2#属性\",\"212\":\"v-58f2a8e2#注释\",\"213\":\"v-58f2a8e2#实体字符\",\"214\":\"v-58f2a8e2#表格\",\"215\":\"v-58f2a8e2#语义化表格\",\"216\":\"v-58f2a8e2#表单\",\"217\":\"v-58f2a8e2#表单验证\",\"218\":\"v-58f2a8e2#框架\",\"219\":\"v-58f2a8e2#框架和嵌入内容\",\"220\":\"v-58f2a8e2#多媒体\",\"221\":\"v-58f2a8e2#图像\",\"222\":\"v-58f2a8e2#音频\",\"223\":\"v-58f2a8e2#视频\",\"224\":\"v-58f2a8e2#链接\",\"225\":\"v-58f2a8e2#html5-新特性\",\"226\":\"v-58f2a8e2#语义化\",\"227\":\"v-58f2a8e2#语义化表单\",\"228\":\"v-58f2a8e2#语义化图表\",\"229\":\"v-58f2a8e2#地理定位\",\"230\":\"v-58f2a8e2#语义化标记\",\"231\":\"v-58f2a8e2#微数据\",\"232\":\"v-58f2a8e2#访问键盘导航\",\"233\":\"v-58f2a8e2#响应式框架\",\"234\":\"v-58f2a8e2#语义化表单验证与-ajax\",\"235\":\"v-58f2a8e2#全球化-internationalization-i18n\",\"236\":\"v-58f2a8e2#web-存储\",\"237\":\"v-58f2a8e2#图形化与绘图\",\"238\":\"v-58f2a8e2#跨文档通信\",\"239\":\"v-58f2a8e2#响应式图片\",\"240\":\"v-58f2a8e2#浏览器存储\",\"241\":\"v-58f2a8e2#后端集成\",\"242\":\"v-58f2a8e2#拖放功能\",\"243\":\"v-58f2a8e2#渐进式网络应用-progressive-web-apps-pwa\",\"244\":\"v-58f2a8e2#web-组件\",\"245\":\"v-58f2a8e2#模板\",\"246\":\"v-58f2a8e2#访问性-accessibility\",\"247\":\"v-3f2413a6\",\"248\":\"v-3f2413a6#介绍\",\"249\":\"v-3f2413a6#变量\",\"250\":\"v-3f2413a6#数据类型\",\"251\":\"v-3f2413a6#常见数据类型\",\"252\":\"v-3f2413a6#类型转换\",\"253\":\"v-3f2413a6#类型检测\",\"254\":\"v-3f2413a6#运算符\",\"255\":\"v-3f2413a6#控制流程\",\"256\":\"v-3f2413a6#字符串-string\",\"257\":\"v-3f2413a6#数组-array\",\"258\":\"v-3f2413a6#函数-function\",\"259\":\"v-3f2413a6#对象-object\",\"260\":\"v-3f2413a6#定时器\",\"261\":\"v-3f2413a6#作用域及作用域链\",\"262\":\"v-3f2413a6#this指向\",\"263\":\"v-3f2413a6#事件处理\",\"264\":\"v-3f2413a6#事件流-event-loop\",\"265\":\"v-3f2413a6#dom操作\",\"266\":\"v-3f2413a6#bom操作\",\"267\":\"v-3f2413a6#原型与原型链\",\"268\":\"v-3f2413a6#闭包\",\"269\":\"v-3f2413a6#递归\",\"270\":\"v-3f2413a6#任务队列\",\"271\":\"v-3f2413a6#消息队列\",\"272\":\"v-3f2413a6#异步编程\",\"273\":\"v-3f2413a6#堆和栈\",\"274\":\"v-3f2413a6#内存管理\",\"275\":\"v-3f2413a6#内存泄漏\",\"276\":\"v-3f2413a6#垃圾回收\",\"277\":\"v-3f2413a6#堆栈溢出\",\"278\":\"v-3f2413a6#开发模式\",\"279\":\"v-3f2413a6#正则表达式\",\"280\":\"v-3f2413a6#词法环境与作用域\",\"281\":\"v-3f2413a6#拷贝\",\"282\":\"v-3f2413a6#api\",\"283\":\"v-a3acd7c8\",\"284\":\"v-a3acd7c8#引入jquery库\",\"285\":\"v-a3acd7c8#文档加载事件\",\"286\":\"v-a3acd7c8#选择器\",\"287\":\"v-a3acd7c8#事件处理\",\"288\":\"v-a3acd7c8#dom操作\",\"289\":\"v-a3acd7c8#ajax\",\"290\":\"v-a3acd7c8#动画效果\",\"291\":\"v-a3acd7c8#遍历和过滤\",\"292\":\"v-a3acd7c8#ajax的进一步使用\",\"293\":\"v-a3acd7c8#插件\",\"294\":\"v-a3acd7c8#表单操作\",\"295\":\"v-a3acd7c8#样式操作\",\"296\":\"v-a3acd7c8#插入和移除元素\",\"297\":\"v-a3acd7c8#响应式设计\",\"298\":\"v-a3acd7c8#扩展jquery\",\"299\":\"v-a3acd7c8#高级选择器\",\"300\":\"v-a3acd7c8#图片和多媒体操作\",\"301\":\"v-a3acd7c8#滚动操作\",\"302\":\"v-a3acd7c8#事件委托\",\"303\":\"v-a3acd7c8#父子关系和遍历\",\"304\":\"v-a3acd7c8#属性操作\",\"305\":\"v-a3acd7c8#数据存储\",\"306\":\"v-a3acd7c8#deferred对象和promise\",\"307\":\"v-a3acd7c8#多库共存\",\"308\":\"v-7ae919f5\",\"309\":\"v-7ae919f5#介绍\",\"310\":\"v-7ae919f5#数据类型\",\"311\":\"v-7ae919f5#变量\",\"312\":\"v-7ae919f5#接口和-类\",\"313\":\"v-7ae919f5#函数\",\"314\":\"v-7ae919f5#枚举\",\"315\":\"v-7ae919f5#类型注解\",\"316\":\"v-7ae919f5#类型推断\",\"317\":\"v-7ae919f5#类型守卫\",\"318\":\"v-7ae919f5#自定义类型\",\"319\":\"v-7ae919f5#高级类型\",\"320\":\"v-7ae919f5#泛型\",\"321\":\"v-7ae919f5#高级类型操作符\",\"322\":\"v-7ae919f5#异步编程\",\"323\":\"v-7ae919f5#迭代器和生成器\",\"324\":\"v-7ae919f5#类装饰器\",\"325\":\"v-7ae919f5#声明文件\",\"326\":\"v-7ae919f5#命名空间\",\"327\":\"v-7ae919f5#模块化\",\"328\":\"v-7ae919f5#模块解析\",\"329\":\"v-7ae919f5#声明合并\",\"330\":\"v-7ae919f5#mixins\",\"331\":\"v-7ae919f5#三斜线指令\",\"332\":\"v-4f3198fa\",\"333\":\"v-4f3198fa#简介\",\"334\":\"v-4f3198fa#基础\",\"335\":\"v-4f3198fa#分支管理\",\"336\":\"v-4f3198fa#远程仓库\",\"337\":\"v-4f3198fa#协作开发\",\"338\":\"v-4f3198fa#高级操作\",\"339\":\"v-20a24382\",\"340\":\"v-20a24382#简介\",\"341\":\"v-20a24382#原理\",\"342\":\"v-20a24382#优点\",\"343\":\"v-20a24382#相关技术和工具\",\"344\":\"v-20a24382#使用示例\",\"345\":\"v-20a24382#获取并显示数据\",\"346\":\"v-20a24382#表单提交\",\"347\":\"v-20a24382#自动完成\",\"348\":\"v-20a24382#动态内容加载\",\"349\":\"v-20a24382#注意事项\",\"350\":\"v-286d6e52\",\"351\":\"v-286d6e52#简介\",\"352\":\"v-286d6e52#http基本概念\",\"353\":\"v-286d6e52#http请求方法\",\"354\":\"v-286d6e52#http状态码\",\"355\":\"v-286d6e52#http头部信息\",\"356\":\"v-286d6e52#http缓存\",\"357\":\"v-286d6e52#cookie-和-session\",\"358\":\"v-286d6e52#连接管理\",\"359\":\"v-286d6e52#https\",\"360\":\"v-286d6e52#url输入的时候发生了什么\",\"361\":\"v-286d6e52#三次握手与四次挥手\",\"362\":\"v-1cc90ac1\",\"363\":\"v-1cc90ac1#简介\",\"364\":\"v-1cc90ac1#安装和基本配置\",\"365\":\"v-1cc90ac1#路由和处理请求\",\"366\":\"v-1cc90ac1#中间件\",\"367\":\"v-1cc90ac1#模板引擎和视图\",\"368\":\"v-1cc90ac1#静态文件和资源\",\"369\":\"v-1cc90ac1#数据库集成\",\"370\":\"v-1cc90ac1#身份认证和授权\",\"371\":\"v-1cc90ac1#api-开发\",\"372\":\"v-1cc90ac1#测试和调试\",\"373\":\"v-39a3d8ae\",\"374\":\"v-39a3d8ae#概念\",\"375\":\"v-39a3d8ae#安装react-router\",\"376\":\"v-39a3d8ae#路由器-router-组件\",\"377\":\"v-39a3d8ae#路由-route-组件\",\"378\":\"v-39a3d8ae#switch组件\",\"379\":\"v-39a3d8ae#嵌套路由-nested-routes\",\"380\":\"v-39a3d8ae#跳转-navigation\",\"381\":\"v-39a3d8ae#带参数的路由-route-parameters\",\"382\":\"v-39a3d8ae#重定向路由\",\"383\":\"v-39a3d8ae#编程式导航-programmatic-navigation\",\"384\":\"v-39a3d8ae#带有历史记录的跳转\",\"385\":\"v-39a3d8ae#路由保护\",\"386\":\"v-39a3d8ae#路由参数传递\",\"387\":\"v-39a3d8ae#路由事件\",\"388\":\"v-39a3d8ae#基本用法\",\"389\":\"v-39a3d8ae#路由重定向\",\"390\":\"v-39a3d8ae#路由模式\",\"391\":\"v-39a3d8ae#动态路由\",\"392\":\"v-39a3d8ae#路由匹配\",\"393\":\"v-39a3d8ae#路由跳转\",\"394\":\"v-39a3d8ae#路由高亮\",\"395\":\"v-39a3d8ae#路由过渡\",\"396\":\"v-39a3d8ae#outlet\",\"397\":\"v-39a3d8ae#路由懒加载\",\"398\":\"v-39a3d8ae#路由hook\",\"399\":\"v-bbfad046\",\"400\":\"v-bbfad046#什么是redux\",\"401\":\"v-bbfad046#redux的核心概念\",\"402\":\"v-bbfad046#redux的工作流程\",\"403\":\"v-bbfad046#redux的工作原理\",\"404\":\"v-bbfad046#redux的优点\",\"405\":\"v-bbfad046#redux中间件\",\"406\":\"v-bbfad046#redux与react的集成\",\"407\":\"v-bbfad046#使用redux的最佳实践\",\"408\":\"v-c837b17c\",\"409\":\"v-c837b17c#介绍\",\"410\":\"v-c837b17c#什么是路由\",\"411\":\"v-c837b17c#基础\",\"412\":\"v-c837b17c#创建第一个应用\",\"413\":\"v-c837b17c#动态路由\",\"414\":\"v-c837b17c#路由的匹配规则\",\"415\":\"v-c837b17c#嵌套路由\",\"416\":\"v-c837b17c#编程式导航\",\"417\":\"v-c837b17c#命名路由和视图\",\"418\":\"v-c837b17c#重定向\",\"419\":\"v-c837b17c#路由别名\",\"420\":\"v-c837b17c#路由组件传参\",\"421\":\"v-c837b17c#路由守卫\",\"422\":\"v-c837b17c#路由元信息\",\"423\":\"v-c837b17c#路由懒加载\",\"424\":\"v-33b543ef\",\"425\":\"v-33b543ef#介绍\",\"426\":\"v-33b543ef#工作原理\",\"427\":\"v-33b543ef#如何安装和配置vuex\",\"428\":\"v-33b543ef#vuex中的状态和数据流\",\"429\":\"v-33b543ef#使用state管理应用程序的状态\",\"430\":\"v-33b543ef#使用getter获取状态\",\"431\":\"v-33b543ef#修改状态的方法和提交mutation\",\"432\":\"v-33b543ef#异步操作和提交action\",\"433\":\"v-33b543ef#使用action和mutation处理异步逻辑\",\"434\":\"v-33b543ef#为什么需要模块化\",\"435\":\"v-33b543ef#如何划分和组织模块\",\"436\":\"v-33b543ef#模块内部的state、getter、mutation和action\",\"437\":\"v-33b543ef#使用插件扩展vuex功能\",\"438\":\"v-33b543ef#使用devtools调试vuex\",\"439\":\"v-33b543ef#使用vuex-persistedstate插件持久化状态\",\"440\":\"v-33b543ef#构建一个简单的vuex应用程序示例\",\"441\":\"v-33b543ef#如何在vue组件中使用vuex\",\"442\":\"v-33b543ef#如何处理表单和非响应式数据\",\"443\":\"v-33b543ef#如何优化vuex应用程序性能\",\"444\":\"v-33b543ef#常见问题和解决方案\",\"445\":\"v-124509b8\",\"446\":\"v-124509b8#介绍\",\"447\":\"v-e716102e\",\"448\":\"v-e716102e#webpack简介\",\"449\":\"v-e716102e#安装\",\"450\":\"v-e716102e#配置\",\"451\":\"v-e716102e#运行\",\"452\":\"v-e716102e#打包结果\",\"453\":\"v-e716102e#核心概念\",\"454\":\"v-e716102e#配置文件\",\"455\":\"v-e716102e#加载器-loaders\",\"456\":\"v-e716102e#插件-plugins\",\"457\":\"v-e716102e#模式-mode\",\"458\":\"v-e716102e#代码分割-code-splitting\",\"459\":\"v-e716102e#热模块替换-hot-module-replacement\",\"460\":\"v-e716102e#模块解析\",\"461\":\"v-e716102e#devserver\",\"462\":\"v-e716102e#tree-shaking\",\"463\":\"v-e716102e#loader机制\",\"464\":\"v-e716102e#插件系统-plugin-system\",\"465\":\"v-e716102e#缓存\",\"466\":\"v-e716102e#提取公共代码\",\"467\":\"v-e716102e#动态导入\",\"468\":\"v-e716102e#调试配置\",\"469\":\"v-e716102e#优化配置\",\"470\":\"v-e716102e#webpack和现代前端工具的整合\",\"471\":\"v-e716102e#_1-babel\",\"472\":\"v-e716102e#_2-css预处理器\",\"473\":\"v-e716102e#_3-图片和其他静态资源\",\"474\":\"v-e716102e#_4-css框架和库\",\"475\":\"v-e716102e#安装和配置webpack-5\",\"476\":\"v-e716102e#模块加载器和插件\",\"477\":\"v-e716102e#插件的生命周期\",\"478\":\"v-e716102e#插件的执行顺序\",\"479\":\"v-e716102e#配置和使用不同的模式\",\"480\":\"v-e716102e#代码优化和分割\",\"481\":\"v-e716102e#缓存和持久化缓存\",\"482\":\"v-e716102e#_1-缓存策略\",\"483\":\"v-e716102e#_2-持久化缓存\",\"484\":\"v-e716102e#深入理解webpack-5的核心概念\",\"485\":\"v-e716102e#_1-入口点-entry-point\",\"486\":\"v-e716102e#_2-输出-output\",\"487\":\"v-e716102e#_3-loader\",\"488\":\"v-e716102e#_4-插件-plugins\",\"489\":\"v-e716102e#_5-模式-mode\",\"490\":\"v-e716102e#_6-开发服务器-devserver\",\"491\":\"v-e716102e#_7-文件处理-file-handling\",\"492\":\"v-e716102e#_8-打包分析-bundle-analysis\",\"493\":\"v-e716102e#_9-代码拆分-code-splitting\",\"494\":\"v-e716102e#_10-懒加载-lazy-loading\",\"495\":\"v-e716102e#_11-缓存-caching\",\"496\":\"v-e716102e#_12-优化-optimization\",\"497\":\"v-e716102e#webpack-5的新特性和改进\",\"498\":\"v-e716102e#调试和故障排除\",\"499\":\"v-e716102e#_1-查看错误信息\",\"500\":\"v-e716102e#_2-使用source-maps\",\"501\":\"v-e716102e#_3-逐步重构或排除因素\",\"502\":\"v-e716102e#_4-检查各个插件和配置\",\"503\":\"v-e716102e#_5-查阅webpack文档和社区资源\",\"504\":\"v-e716102e#最佳实践和性能优化\",\"505\":\"v-11aa30a5\",\"506\":\"v-11aa30a5#简介\",\"507\":\"v-11aa30a5#安装node-js\",\"508\":\"v-11aa30a5#创建node-js应用\",\"509\":\"v-11aa30a5#使用模块\",\"510\":\"v-11aa30a5#包管理器-npm\",\"511\":\"v-11aa30a5#异步编程\",\"512\":\"v-11aa30a5#express框架\",\"513\":\"v-9cb277da\",\"514\":\"v-9cb277da#语法\",\"515\":\"v-9cb277da#输出方式\",\"516\":\"v-9cb277da#变量\",\"517\":\"v-9cb277da#变量规则\",\"518\":\"v-9cb277da#常量\",\"519\":\"v-9cb277da#设置-php-常量\",\"520\":\"v-9cb277da#常量是全局的\",\"521\":\"v-9cb277da#魔术常量\",\"522\":\"v-9cb277da#超级全局变量\",\"523\":\"v-9cb277da#弱类型语言\",\"524\":\"v-9cb277da#变量作用域\",\"525\":\"v-9cb277da#全局作用域和局部作用域\",\"526\":\"v-9cb277da#参数作用域\",\"527\":\"v-9cb277da#eof-heredoc\",\"528\":\"v-9cb277da#使用概述\",\"529\":\"v-9cb277da#类型\",\"530\":\"v-9cb277da#string-字符串\",\"531\":\"v-9cb277da#integer-整型\",\"532\":\"v-9cb277da#float-浮点型\",\"533\":\"v-9cb277da#boolean-布尔型\",\"534\":\"v-9cb277da#array-数组\",\"535\":\"v-9cb277da#object-对象\",\"536\":\"v-9cb277da#null-空值\",\"537\":\"v-9cb277da#enum-枚举\",\"538\":\"v-9cb277da#resource-资源类型\",\"539\":\"v-9cb277da#callback-callable-类型\",\"540\":\"v-9cb277da#类型比较\",\"541\":\"v-9cb277da#比较-0、false、null\",\"542\":\"v-9cb277da#字符串\",\"543\":\"v-9cb277da#长度\",\"544\":\"v-9cb277da#连接\",\"545\":\"v-9cb277da#截取\",\"546\":\"v-9cb277da#替换\",\"547\":\"v-9cb277da#转换为小写或大写\",\"548\":\"v-9cb277da#去除首尾空格\",\"549\":\"v-9cb277da#转义\",\"550\":\"v-9cb277da#运算符\",\"551\":\"v-9cb277da#算术运算符\",\"552\":\"v-9cb277da#赋值运算符\",\"553\":\"v-9cb277da#比较运算符\",\"554\":\"v-9cb277da#条件语句\",\"555\":\"v-9cb277da#if语句\",\"556\":\"v-9cb277da#elseif语句\",\"557\":\"v-9cb277da#switch语句\",\"558\":\"v-9cb277da#三元运算符\",\"559\":\"v-9cb277da#循环语句\",\"560\":\"v-9cb277da#for循环\",\"561\":\"v-9cb277da#while循环\",\"562\":\"v-9cb277da#do-while循环\",\"563\":\"v-9cb277da#foreach循环\",\"564\":\"v-9cb277da#break语句\",\"565\":\"v-9cb277da#函数\",\"566\":\"v-9cb277da#定义函数\",\"567\":\"v-9cb277da#调用函数\",\"568\":\"v-9cb277da#返回值\",\"569\":\"v-9cb277da#可变函数\",\"570\":\"v-9cb277da#内置函数\",\"571\":\"v-9cb277da#箭头函数\",\"572\":\"v-9cb277da#数组\",\"573\":\"v-9cb277da#索引数组\",\"574\":\"v-9cb277da#关联数组\",\"575\":\"v-9cb277da#访问数组元素\",\"576\":\"v-9cb277da#修改数组元素\",\"577\":\"v-9cb277da#遍历数组\",\"578\":\"v-9cb277da#方法\",\"579\":\"v-9cb277da#对象\",\"580\":\"v-9cb277da#表单\",\"581\":\"v-9cb277da#文件上传\",\"582\":\"v-9cb277da#迭代器和生成器\",\"583\":\"v-9cb277da#面向对象\",\"584\":\"v-9cb277da#命名空间\",\"585\":\"v-9cb277da#异常处理\",\"586\":\"v-9cb277da#错误报告级别\",\"587\":\"v-9cb277da#自定义错误处理函数\",\"588\":\"v-9cb277da#异常处理-1\",\"589\":\"v-9cb277da#异常类\",\"590\":\"v-9cb277da#匿名函数和闭包\",\"591\":\"v-9cb277da#接口和抽象类\",\"592\":\"v-9cb277da#设计模式\",\"593\":\"v-9cb277da#文件操作\",\"594\":\"v-9cb277da#打开和关闭文件\",\"595\":\"v-9cb277da#读取文件内容\",\"596\":\"v-9cb277da#写入文件\",\"597\":\"v-9cb277da#复制、重命名和删除文件\",\"598\":\"v-9cb277da#获取文件信息\",\"599\":\"v-9cb277da#包含文件\",\"600\":\"v-9cb277da#数据库连接与操作\",\"601\":\"v-9cb277da#缓存技术\",\"602\":\"v-9cb277da#安全性和防护\",\"603\":\"v-9cb277da#过滤器\",\"604\":\"v-9cb277da#json\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[4,18],\"2\":[1,11],\"3\":[4,142],\"4\":[4,27],\"5\":[1,104],\"6\":[1,3],\"7\":[1],\"8\":[1,48],\"9\":[1,104],\"10\":[1,54],\"11\":[4,57],\"12\":[1],\"13\":[1,59],\"14\":[1,71],\"15\":[1,108],\"16\":[1,40],\"17\":[1],\"18\":[1,63],\"19\":[1,61],\"20\":[5,85],\"21\":[3,54],\"22\":[1,162],\"23\":[3,86],\"24\":[1],\"25\":[1,72],\"26\":[1,50],\"27\":[1,50],\"28\":[1,51],\"29\":[1],\"30\":[1,94],\"31\":[1,74],\"32\":[1,52],\"33\":[1,53],\"34\":[1],\"35\":[1,81],\"36\":[1,77],\"37\":[3,79],\"38\":[1,73],\"39\":[1],\"40\":[1,26],\"41\":[3,211],\"42\":[1,73],\"43\":[1,52],\"44\":[1],\"45\":[2,62],\"46\":[1,37],\"47\":[1,60],\"48\":[1,73],\"49\":[1,54],\"50\":[1,72],\"51\":[1,88],\"52\":[1,93],\"53\":[1,56],\"54\":[1,70],\"55\":[1,69],\"56\":[1,69],\"57\":[2,84],\"58\":[1,69],\"59\":[1],\"60\":[1,18],\"61\":[1,33],\"62\":[1,20],\"63\":[1,54],\"64\":[1],\"65\":[2,16],\"66\":[1,8],\"67\":[1,16],\"68\":[1,19],\"69\":[1,15],\"70\":[1,384],\"71\":[1],\"72\":[3],\"73\":[1,9],\"74\":[1,33],\"75\":[1],\"76\":[1,6],\"77\":[1,45],\"78\":[3,9],\"79\":[1],\"80\":[1],\"81\":[1,8],\"82\":[1,76],\"83\":[1],\"84\":[1,8],\"85\":[1,36],\"86\":[1,53],\"87\":[1,104],\"88\":[1,57],\"89\":[1,26],\"90\":[1,34],\"91\":[1,112],\"92\":[1,73],\"93\":[1,148],\"94\":[1,77],\"95\":[1,58],\"96\":[1,57],\"97\":[1,102],\"98\":[1,126],\"99\":[1,63],\"100\":[1,18],\"101\":[1,12],\"102\":[1,178],\"103\":[3],\"104\":[1,7],\"105\":[1,28],\"106\":[1,5],\"107\":[1,7],\"108\":[1,12],\"109\":[1,4],\"110\":[3,98],\"111\":[1,7],\"112\":[1,11],\"113\":[1,1],\"114\":[1,41],\"115\":[1],\"116\":[1,30],\"117\":[1,25],\"118\":[1],\"119\":[1,32],\"120\":[1,6],\"121\":[1,6],\"122\":[1,19],\"123\":[1,8],\"124\":[1,12],\"125\":[1,32],\"126\":[2,78],\"127\":[2],\"128\":[4,88],\"129\":[2,67],\"130\":[1],\"131\":[1,66],\"132\":[1,55],\"133\":[1,62],\"134\":[1,96],\"135\":[3,69],\"136\":[1,68],\"137\":[1,63],\"138\":[1,59],\"139\":[1],\"140\":[1,13],\"141\":[1,9],\"142\":[1,58],\"143\":[1,102],\"144\":[1,221],\"145\":[1,62],\"146\":[1,88],\"147\":[1,90],\"148\":[1,61],\"149\":[2],\"150\":[6,116],\"151\":[3,81],\"152\":[3,104],\"153\":[3,83],\"154\":[5,136],\"155\":[3,76],\"156\":[4,71],\"157\":[4,66],\"158\":[3,54],\"159\":[3,66],\"160\":[1,45],\"161\":[1,135],\"162\":[1],\"163\":[1,17],\"164\":[4,57],\"165\":[1,55],\"166\":[1,47],\"167\":[1,105],\"168\":[1,122],\"169\":[3,89],\"170\":[3,98],\"171\":[3,108],\"172\":[3,142],\"173\":[1,71],\"174\":[1,101],\"175\":[1,4],\"176\":[3,30],\"177\":[3,40],\"178\":[3,26],\"179\":[3,28],\"180\":[3,25],\"181\":[3,22],\"182\":[3,23],\"183\":[3,174],\"184\":[3,78],\"185\":[1,59],\"186\":[3,70],\"187\":[1,75],\"188\":[3,90],\"189\":[1,132],\"190\":[3,10],\"191\":[2,110],\"192\":[1,81],\"193\":[1,114],\"194\":[2,11],\"195\":[1,64],\"196\":[1,144],\"197\":[1,83],\"198\":[1,163],\"199\":[1,8],\"200\":[1,71],\"201\":[1,60],\"202\":[1,71],\"203\":[1,58],\"204\":[1,128],\"205\":[1],\"206\":[1,9],\"207\":[1,26],\"208\":[1,26],\"209\":[1,27],\"210\":[1,25],\"211\":[1,22],\"212\":[1,8],\"213\":[1,20],\"214\":[1,21],\"215\":[1,21],\"216\":[1,38],\"217\":[1,18],\"218\":[1,28],\"219\":[1,37],\"220\":[1,5],\"221\":[1,15],\"222\":[1,14],\"223\":[1,17],\"224\":[1,26],\"225\":[2,30],\"226\":[1,17],\"227\":[1,23],\"228\":[1,37],\"229\":[1,37],\"230\":[1,18],\"231\":[1,40],\"232\":[1,19],\"233\":[1,12],\"234\":[2,18],\"235\":[4,34],\"236\":[2,23],\"237\":[1,22],\"238\":[1,16],\"239\":[1,15],\"240\":[1,14],\"241\":[1,25],\"242\":[1,23],\"243\":[6,25],\"244\":[2,13],\"245\":[1,15],\"246\":[3,25],\"247\":[1],\"248\":[1,7],\"249\":[1,76],\"250\":[1,3],\"251\":[2,78],\"252\":[1,75],\"253\":[1,59],\"254\":[1,110],\"255\":[1,69],\"256\":[3,149],\"257\":[3,130],\"258\":[3,156],\"259\":[3,68],\"260\":[1,62],\"261\":[1,93],\"262\":[1,80],\"263\":[1,105],\"264\":[4,128],\"265\":[1,134],\"266\":[1,75],\"267\":[1,160],\"268\":[1,69],\"269\":[1,63],\"270\":[1,131],\"271\":[1,110],\"272\":[1,154],\"273\":[1,89],\"274\":[1,42],\"275\":[1,61],\"276\":[1,75],\"277\":[1,55],\"278\":[1,122],\"279\":[1,52],\"280\":[1,45],\"281\":[1,124],\"282\":[1,102],\"283\":[1],\"284\":[1,16],\"285\":[1,9],\"286\":[1,26],\"287\":[1,14],\"288\":[1,36],\"289\":[1,18],\"290\":[1,25],\"291\":[1,19],\"292\":[1,21],\"293\":[1,9],\"294\":[1,25],\"295\":[1,12],\"296\":[1,21],\"297\":[1,8],\"298\":[1,13],\"299\":[1,20],\"300\":[1,25],\"301\":[1,19],\"302\":[1,11],\"303\":[1,15],\"304\":[1,10],\"305\":[1,10],\"306\":[1,19],\"307\":[1,15],\"308\":[1],\"309\":[1,6],\"310\":[1,327],\"311\":[1,110],\"312\":[2,204],\"313\":[1,152],\"314\":[1,128],\"315\":[1,63],\"316\":[1,57],\"317\":[1,64],\"318\":[1,58],\"319\":[1,144],\"320\":[1,87],\"321\":[1,63],\"322\":[1,74],\"323\":[1,73],\"324\":[1,88],\"325\":[1,79],\"326\":[1,68],\"327\":[1,91],\"328\":[1,107],\"329\":[1,107],\"330\":[1,142],\"331\":[1,51],\"332\":[1],\"333\":[1,32],\"334\":[1,85],\"335\":[1,60],\"336\":[1,58],\"337\":[1,53],\"338\":[1,61],\"339\":[1],\"340\":[1,50],\"341\":[1,54],\"342\":[1,40],\"343\":[1,59],\"344\":[1],\"345\":[1,69],\"346\":[1,67],\"347\":[1,70],\"348\":[1,60],\"349\":[1,36],\"350\":[1],\"351\":[1,35],\"352\":[1,94],\"353\":[1,46],\"354\":[1,62],\"355\":[1,78],\"356\":[1,72],\"357\":[3,78],\"358\":[1,62],\"359\":[1,116],\"360\":[1,72],\"361\":[1,48],\"362\":[1],\"363\":[1,50],\"364\":[1,87],\"365\":[1,99],\"366\":[1,97],\"367\":[1,116],\"368\":[1,79],\"369\":[1,99],\"370\":[1,71],\"371\":[2,83],\"372\":[1,68],\"373\":[1],\"374\":[1,13],\"375\":[2,11],\"376\":[3,25],\"377\":[3,12],\"378\":[1,20],\"379\":[4,17],\"380\":[3,36],\"381\":[4,12],\"382\":[1,13],\"383\":[4,30],\"384\":[1,98],\"385\":[1,63],\"386\":[1,62],\"387\":[1,70],\"388\":[1,48],\"389\":[1,79],\"390\":[1,31],\"391\":[1,60],\"392\":[1,68],\"393\":[1,96],\"394\":[1,99],\"395\":[1,53],\"396\":[1,94],\"397\":[1,76],\"398\":[1,39],\"399\":[1],\"400\":[1,53],\"401\":[1,241],\"402\":[1,84],\"403\":[1,146],\"404\":[1,50],\"405\":[1,156],\"406\":[1,136],\"407\":[1,183],\"408\":[1],\"409\":[1,10],\"410\":[1,12],\"411\":[1],\"412\":[1,82],\"413\":[1,77],\"414\":[1,51],\"415\":[1,95],\"416\":[1,62],\"417\":[1,95],\"418\":[1,35],\"419\":[1,21],\"420\":[1,81],\"421\":[1,86],\"422\":[1,54],\"423\":[1,42],\"424\":[1],\"425\":[1,42],\"426\":[1,61],\"427\":[1,59],\"428\":[1,49],\"429\":[1,74],\"430\":[1,55],\"431\":[1,73],\"432\":[1,82],\"433\":[1,81],\"434\":[2,49],\"435\":[1,48],\"436\":[3,58],\"437\":[1,57],\"438\":[1,49],\"439\":[2,81],\"440\":[1,130],\"441\":[1,47],\"442\":[1,64],\"443\":[1,51],\"444\":[1,197],\"445\":[1],\"446\":[1],\"447\":[1],\"448\":[1,25],\"449\":[1,6],\"450\":[1,19],\"451\":[1,3],\"452\":[1,5],\"453\":[1,79],\"454\":[1,84],\"455\":[3,83],\"456\":[3,66],\"457\":[3,55],\"458\":[4,64],\"459\":[5,45],\"460\":[1,65],\"461\":[1,67],\"462\":[2,63],\"463\":[1,90],\"464\":[4,56],\"465\":[1,65],\"466\":[1,56],\"467\":[1,95],\"468\":[1,58],\"469\":[1,87],\"470\":[1,4],\"471\":[2,28],\"472\":[2,30],\"473\":[2,36],\"474\":[2,26],\"475\":[2,83],\"476\":[1,107],\"477\":[1,13],\"478\":[1,2],\"479\":[1,51],\"480\":[1,81],\"481\":[1,5],\"482\":[2,29],\"483\":[2,46],\"484\":[2],\"485\":[5,17],\"486\":[4,22],\"487\":[2,24],\"488\":[4,25],\"489\":[4,15],\"490\":[4,21],\"491\":[5,21],\"492\":[5,27],\"493\":[5,31],\"494\":[5,30],\"495\":[4,19],\"496\":[4,26],\"497\":[2,110],\"498\":[1,4],\"499\":[2,11],\"500\":[3,17],\"501\":[2,10],\"502\":[2,8],\"503\":[2,10],\"504\":[1,68],\"505\":[1],\"506\":[1,57],\"507\":[2,61],\"508\":[2,40],\"509\":[1,76],\"510\":[3,61],\"511\":[1,67],\"512\":[1,30],\"513\":[1,32],\"514\":[1,22],\"515\":[1,51],\"516\":[1,1],\"517\":[1,27],\"518\":[1,11],\"519\":[3,63],\"520\":[1,18],\"521\":[1,41],\"522\":[1,11],\"523\":[1,2],\"524\":[1,45],\"525\":[1,35],\"526\":[1,12],\"527\":[3,13],\"528\":[1,61],\"529\":[1],\"530\":[3,12],\"531\":[3,34],\"532\":[3,18],\"533\":[3,6],\"534\":[3,12],\"535\":[3,25],\"536\":[3,8],\"537\":[2,38],\"538\":[3,44],\"539\":[3,45],\"540\":[1,34],\"541\":[4,16],\"542\":[1],\"543\":[1,14],\"544\":[1,11],\"545\":[1,13],\"546\":[1,13],\"547\":[1,19],\"548\":[1,11],\"549\":[1,13],\"550\":[1],\"551\":[1,34],\"552\":[1,16],\"553\":[1,26],\"554\":[1],\"555\":[1,12],\"556\":[1,14],\"557\":[2,15],\"558\":[1,14],\"559\":[1],\"560\":[1,11],\"561\":[1,11],\"562\":[2,14],\"563\":[1,12],\"564\":[1,24],\"565\":[1,5],\"566\":[1,13],\"567\":[1,9],\"568\":[1,19],\"569\":[1,40],\"570\":[1,73],\"571\":[1,45],\"572\":[1,3],\"573\":[1,11],\"574\":[1,16],\"575\":[1,20],\"576\":[1,22],\"577\":[1,24],\"578\":[1,78],\"579\":[1,83],\"580\":[1,142],\"581\":[1,101],\"582\":[1,79],\"583\":[1,138],\"584\":[1,47],\"585\":[1,3],\"586\":[1,26],\"587\":[1,17],\"588\":[1,14],\"589\":[1,21],\"590\":[1,52],\"591\":[1,89],\"592\":[1,53],\"593\":[1],\"594\":[1,13],\"595\":[1,16],\"596\":[1,13],\"597\":[2,23],\"598\":[1,30],\"599\":[1,41],\"600\":[1,119],\"601\":[1,46],\"602\":[1,50],\"603\":[1,65],\"604\":[1,182]},\"averageFieldLength\":[1.4330578512396697,55.85523458807395],\"storedFields\":{\"0\":{\"h\":\"todoMvc\"},\"1\":{\"h\":\"创建一个新的 Vue 2 项目\",\"t\":[\"安装 Node.js（如果尚未安装）\",\"打开终端并创建一个新的目录\",\"进入该目录，并运行以下命令来创建一个新的 Vue 3 项目：\",\" vue create todo-mvc \",\"在创建过程中，选择默认选项，然后等待项目创建完成。\"]},\"2\":{\"h\":\"安装所需的依赖项\",\"t\":[\"进入项目目录，然后运行以下命令来安装所需的依赖项：\",\" cd todo-mvc npm install vuex@next npm install eslint \"]},\"3\":{\"h\":\"创建 todo 组件和 store\",\"t\":[\"打开 src 文件夹\",\"创建一个新的 components 目录，并在其中创建 TodoItem.vue 组件文件\",\"在 TodoItem.vue 文件中，添加以下代码：\",\"<template> <li :class=\\\"{ completed: todo.completed, editing: editing }\\\"> <div class=\\\"view\\\"> <input class=\\\"toggle\\\" type=\\\"checkbox\\\" v-model=\\\"todo.completed\\\"> <label @dblclick=\\\"editTodo\\\">{{ todo.title }}</label> <button class=\\\"destroy\\\" @click=\\\"deleteTodo\\\"></button> </div> <input class=\\\"edit\\\" v-model=\\\"todo.title\\\" @keyup.enter=\\\"doneEdit\\\" @blur=\\\"cancelEdit\\\" ref=\\\"editInput\\\"> </li> </template> <script> export default { props: ['todo'], data() { return { editing: false } }, methods: { deleteTodo() { this.$emit('delete-todo', this.todo) }, editTodo() { this.editing = true; this.$nextTick(() => { this.$refs.editInput.focus(); }); }, doneEdit() { this.editing = false; if (this.todo.title.trim() === '') { this.deleteTodo(); } }, cancelEdit() { this.editing = false; } } } </script> \",\"在 components 目录中创建 TodoList.vue 组件文件\",\"在 TodoList.vue 文件中，添加以下代码：\",\"<template> <section class=\\\"main\\\"> <input id=\\\"toggle-all\\\" class=\\\"toggle-all\\\" type=\\\"checkbox\\\" v-model=\\\"allCompleted\\\"> <label for=\\\"toggle-all\\\">Mark all as complete</label> <ul class=\\\"todo-list\\\"> <TodoItem v-for=\\\"todo in filteredTodos\\\" :key=\\\"todo.id\\\" :todo=\\\"todo\\\" @delete-todo=\\\"deleteTodo(todo)\\\" /> </ul> </section> </template> <script> import TodoItem from './TodoItem.vue'; export default { components: { TodoItem }, computed: { filteredTodos() { return this.$store.getters.filteredTodos; }, allCompleted: { get() { return this.$store.getters.allCompleted; }, set(value) { this.$store.commit('markAll', value); } } }, methods: { deleteTodo(todo) { this.$store.commit('deleteTodo', todo); } } } </script> \",\"在 components 目录中创建 TodoInput.vue 组件文件\",\"在 TodoInput.vue 文件中，添加以下代码：\",\"<template> <header class=\\\"header\\\"> <h1>todos</h1> <input class=\\\"new-todo\\\" placeholder=\\\"What needs to be done?\\\" v-model=\\\"newTodo\\\" @keyup.enter=\\\"addTodo\\\" > </header> </template> <script> export default { data() { return { newTodo: '' } }, methods: { addTodo() { if (this.newTodo.trim() !== '') { this.$store.commit('addTodo', this.newTodo.trim()); this.newTodo = ''; } } } } </script> \",\"在 src 目录中创建一个新的目录 store，并在其中创建 index.js 文件\",\"import { createStore } from 'vuex'; export default createStore({ state() { return { todos: [] } }, getters: { filteredTodos: state => { // implement filtering logic here return state.todos; }, allCompleted: state => { // implement logic to check if all todos are completed return false; } }, mutations: { addTodo: (state, todo) => { state.todos.push({ id: Date.now(), title: todo, completed: false }); }, deleteTodo: (state, todo) => { state.todos = state.todos.filter(item => item !== todo); }, markAll: (state, value) => { state.todos.forEach(item => { item.completed = value; }); } } }); \"]},\"4\":{\"h\":\"在 App.vue 中使用组件\",\"t\":[\"<template> <div class=\\\"app\\\"> <h1>Todo MVC</h1> <TodoInput /> <TodoList /> </div> </template> <script> import TodoInput from './components/TodoInput.vue'; import TodoList from './components/TodoList.vue'; export default { components: { TodoInput, TodoList } } </script> <style scoped> </style> \"]},\"5\":{\"h\":\"运行项目\",\"t\":[\"在终端中，使用以下命令来运行项目：\",\" npm run serve \",\"打开浏览器，访问 http://localhost:8080，即可查看运行中的 Todo MVC 应用。\",\"这样，你就在 Vue 2 中创建了一个简单的 Todo MVC 应用。你可以根据需要添加其他功能和样式，以满足你的需求。\",\"创建一个新的React项目，确保你已经安装了Node.js和npm。\",\"npx create-react-app todo-app cd todo-app \",\"清除默认的React组件和样式，并创建一个新的Todo组件。\",\"// src/App.js import React from 'react'; function Todo() { return ( <div> TODO MVC App </div> ); } export default Todo; \",\"在App.js中添加Todo列表的组件。\",\"// src/App.js import React, { useState } from 'react'; function Todo() { const [todos, setTodos] = useState([]); const [todoInput, setTodoInput] = useState(''); const handleAddTodo = () => { setTodos([...todos, todoInput]); setTodoInput(''); }; const handleDeleteTodo = (index) => { const updatedTodos = [...todos]; updatedTodos.splice(index, 1); setTodos(updatedTodos); }; return ( <div> <h1>Todo MVC App</h1> <input type=\\\"text\\\" value={todoInput} onChange={(e) => setTodoInput(e.target.value)} /> <button onClick={handleAddTodo}>Add Todo</button> <ul> {todos.map((todo, index) => ( <li key={index}> {todo} <button onClick={() => handleDeleteTodo(index)}>Delete</button> </li> ))} </ul> </div> ); } export default Todo; \",\"在src/index.js中使用ReactDOM.render将Todo组件渲染到DOM中。\",\"// src/index.js import React from 'react'; import ReactDOM from 'react-dom'; import Todo from './App'; import './index.css'; ReactDOM.render( <React.StrictMode> <Todo /> </React.StrictMode>, document.getElementById('root') ); \",\"运行你的应用程序。\",\"npm start \",\"现在你应该可以在浏览器中看到一个简单的TodoMVC应用程序了。你可以添加和删除Todo。\"]},\"6\":{\"h\":\"React\",\"t\":[\"以下是一个React学习笔记的大纲，希望能够帮助你更好地学习React：\"]},\"7\":{\"h\":\"基础知识\"},\"8\":{\"h\":\"什么是React\",\"t\":[\"React是一个由Facebook开发的用于构建用户界面的JavaScript库。它是一个采用组件化开发思想的库，通过将页面拆分成多个可复用的组件，可以更方便地开发大规模、高性能的Web应用程序。\",\"React使用了虚拟DOM（Virtual DOM）的概念，它将页面的状态映射到组件树，并将变化的部分与实际的DOM进行对比，最终只更新需要变化的部分，以提高性能和降低资源消耗。\",\"React具有以下特点：\",\"组件化开发：React将页面拆分成多个可复用和独立的组件，每个组件负责管理自己的状态和渲染逻辑，便于开发和维护复杂的UI界面。\",\"声明式编程：通过使用JSX语法，开发人员可以以声明式的方式描述UI的外观和行为，React会根据声明的规则自动更新界面，无需手动操作DOM。\",\"单向数据流：React中的数据流是单向的，从父组件传递给子组件，子组件通过props接收数据，保证了数据的可追踪性和可维护性。\",\"高性能：React通过使用虚拟DOM和高效的DOM Diff算法，只更新变化的部分，减少了对实际DOM的操作次数，提高了性能。\",\"生态系统丰富：React拥有庞大的生态系统，包括React Router用于处理路由、Redux和Mobx等状态管理库、React Native用于开发移动应用等，可以扩展React的功能和适用领域。\",\"总之，React是一个强大而灵活的JavaScript库，使得开发人员能够高效地构建交互性强、大规模的用户界面。它已经成为Web开发中的主流技术之一。\"]},\"9\":{\"h\":\"React的优点和特点\",\"t\":[\"优点\",\"组件化开发：React采用组件化的开发思想，将界面拆分成独立的可复用组件，使得代码更易于理解、维护和测试。组件的高度复用性也提高了开发效率。\",\"虚拟DOM：React使用虚拟DOM（Virtual DOM）来进行高效的页面更新。它将页面的状态映射到组件树上，并将变化部分与实际DOM进行对比，然后只更新需要变化的部分，减少了对实际DOM的操作次数，提高了性能。\",\"单向数据流：React采用单向数据流的数据管理模式，数据由父组件传递给子组件，子组件通过props接收数据。这种数据流清晰明了，易于追踪和调试，减少了出错的可能性。\",\"JSX语法：React使用JSX语法来描述组件的结构和外观，将HTML代码和JavaScript代码融合在一起，使得开发人员可以在JavaScript中编写组件，增强了组件的可维护性和可重用性。\",\"高性能：通过采用虚拟DOM和高效的Diff算法，React能够最小化对实际DOM的操作，减少了页面重绘的次数，提高了应用的性能。此外，React还支持使用PureComponent和memo组件进行性能优化。\",\"生态系统丰富：React拥有庞大的生态系统，有众多开源组件和库可供选择，可以加速开发过程。此外，React还与其他流行的库和框架（如React Router、Redux等）集成得很好，提供了完整的解决方案。\",\"跨平台开发：借助React Native，开发人员可以使用React框架来构建原生移动应用，实现跨平台开发，大大提高了开发效率和代码的复用性。\",\"总而言之，React的组件化开发、虚拟DOM、单向数据流等特点使其在前端开发中具有重要的优势，在构建大规模、高性能的用户界面时表现出色。同时，React还拥有丰富的生态系统和跨平台开发能力，为开发人员提供了更多的选择和便利。\",\"缺点\",\"学习曲线陡峭：React采用了一种特殊的编程模型，使用JSX语法和组件化开发方式，这对于新手来说可能需要一些时间来适应和学习。初学者可能需要花费一些时间来熟悉React的概念和工作方式。\",\"只关注View层：React只是一个UI库，它专注于构建用户界面的视图层，而不是提供完整的应用程序架构。这意味着开发者在使用React时需要自己选择和集成其他库或框架来处理路由、状态管理等应用程序级别的功能。\",\"大型应用的复杂性：随着应用规模的增长，React应用可能变得越来越复杂。管理组件之间的通信、状态管理和应用的整体架构可能需要更多的努力和合理的设计。\",\"状态管理：虽然React提供了状态管理的能力，但对于大型应用来说，选择合适的状态管理解决方案可能并不容易。开发者需要评估和选择Redux、Mobx等状态管理库，而这可能会增加复杂性和学习成本。\",\"性能问题：虽然React通过虚拟DOM和Diff算法对页面进行优化，但在极端情况下，当组件较多或更新频繁时，React仍然可能面临性能问题。需要开发者进行性能优化，并正确使用React的优化手段（如PureComponent、memo等）。\",\"生态系统的快速变化：React生态系统发展迅速，新的库和技术不断涌现，这可能会导致开发者需要不断跟进和学习新的东西，有时可能会出现版本兼容性、依赖关系和技术选择等问题。\",\"需要注意的是，这些缺点并不意味着React是一个不好的框架，而是需要权衡其优点和缺点，并根据具体的项目需求和开发团队的情况来评估使用React的适宜程度。\"]},\"10\":{\"h\":\"React与其他前端框架的比较\",\"t\":[\"React与其他前端框架相比具有不同的特点和优势。下面是React与几个常见前端框架的比较：\",\"React vs Angular：\",\"学习曲线：React相对于Angular来说，学习曲线较为平缓。Angular包含更多的概念和复杂度，需要更多的时间来学习和掌握。\",\"构建方式：React采用组件化开发思想，并通过虚拟DOM进行高效更新，更加灵活和可控。Angular则采用模块化和依赖注入的方式，更加自动化和全面。\",\"生态系统：React拥有庞大的生态系统和活跃的社区，提供了许多第三方组件和库，而Angular拥有完整的一站式解决方案，内置了很多功能和工具。\",\"性能：React在处理大型应用和频繁更新时具有较好的性能，而Angular的性能在小型应用上可能更好。\",\"选择依据：选择React还是Angular取决于项目规模、团队技能、开发需求和个人喜好等因素。\",\"React vs Vue：\",\"学习曲线：Vue的学习曲线比React更为平缓，因为Vue的设计哲学更接近传统的HTML和JavaScript，更容易上手。\",\"构建方式：React和Vue都采用组件化开发模型，但Vue使用了更灵活的模板语法，使得编写和编译模板更为简单直观。\",\"生态系统：React拥有庞大且成熟的生态系统，而Vue在生态系统的范围上稍逊一筹。然而，Vue也有一些优秀的插件和库可供选择。\",\"性能：React和Vue在性能上表现相似，毕竟它们都使用了虚拟DOM和Diff算法进行高效更新。但在小型应用中，Vue可能具有更好的性能。\",\"选择依据：选择React还是Vue取决于个人偏好、项目需求和团队经验。React适合构建大型应用和复杂场景，而Vue适合快速原型开发和更小规模的项目。\",\"总之，React、Angular和Vue都是强大的前端框架，每个框架都有自己的优势和适用场景。选择哪个框架取决于项目的需求、团队技能和个人偏好。最重要的是根据具体情况评估和选择最适合的工具和技术。\"]},\"11\":{\"h\":\"React的核心概念：组件、虚拟DOM、状态和属性等\",\"t\":[\"React的核心概念包括组件、虚拟DOM、状态和属性（props）等。下面对这些概念进行详细说明：\",\"组件（Components）：React将用户界面拆分成独立的可复用组件，每个组件负责管理自己的状态和渲染逻辑。组件可以是类组件（Class Components）或函数组件（Function Components）。组件具有输入项（输入属性props）和输出项（渲染结果），可以通过组合和嵌套组件来构建复杂的界面。\",\"虚拟DOM（Virtual DOM）：虚拟DOM是React的核心机制之一，它是React使用的一种轻量级的表示实际DOM结构的JavaScript对象。虚拟DOM中包含了组件的状态和结构信息，React使用虚拟DOM来进行高效的页面更新。当组件状态发生改变时，React会通过比较新旧虚拟DOM的差异，最小化对实际DOM的操作，只更新需要改变的部分，以提高性能。\",\"状态（State）：组件的状态是组件内部管理数据的一种方式。状态是一种动态的数据，当状态发生变化时，React会重新渲染组件，更新界面。状态只能在组件内部进行修改，通过使用setState方法来更新状态，并触发重新渲染。\",\"属性（Props）：属性是组件接收的输入值，它是从父组件传递到子组件的数据。属性是组件的只读数据，一旦传递给组件，属性的值就不能被组件本身修改。通过在组件中访问props对象，可以获取和使用传递的数据。\",\"这些核心概念共同构成了React的编程模型，使开发人员可以使用组件化的方式构建用户界面。通过组件化和虚拟DOM的机制，React提供了高效的页面更新和管理组件状态的能力，同时通过属性的传递和状态的管理，实现了组件之间的数据传递和交互。这些概念是理解和使用React的基础。\"]},\"12\":{\"h\":\"JSX语法\"},\"13\":{\"h\":\"什么是JSX\",\"t\":[\"JSX（JavaScript XML）是一种JavaScript的语法扩展，用于在React中编写组件的UI结构。它允许我们在JavaScript代码中直接书写类似于HTML的标记结构，以声明式的方式构建用户界面。\",\"在使用JSX时，我们可以使用HTML标签和组件来描述UI的结构，同时可以在标签中嵌入JavaScript表达式，通过花括号 {} 来包裹。这使得我们可以在UI中动态地使用变量、执行函数、进行条件判断等操作。\",\"下面是一个简单的示例，展示了使用JSX编写一个React组件的UI结构：\",\"import React from 'react'; class MyComponent extends React.Component { render() { const name = 'John Doe'; return ( <div> <h1>Hello, {name}!</h1> <p>Welcome to my website.</p> </div> ); } } \",\"在上述示例中，我们使用了<div>、<h1>、<p>等HTML标签来构建UI结构。通过花括号 {} 包裹的表达式，我们可以动态地插入变量name。\",\"JSX被React组件的render方法所支持，它会将JSX代码转换为纯JavaScript代码，被React解析和渲染到最终的DOM结构中。\",\"需要注意的是，JSX看起来类似HTML，但实际上它被转换成等效的JavaScript代码。这意味着我们可以在JSX中使用JavaScript语法，但也要遵循JSX语法规则，如标签闭合、属性名使用驼峰命名等。\"]},\"14\":{\"h\":\"JSX与HTML的区别\",\"t\":[\"JSX与HTML在外观上很相似，因为它们都使用了类似于HTML的标记结构。然而，它们在一些细节和功能上有一些区别：\",\"语法规则：JSX是JavaScript的语法扩展，而HTML是一种独立的标记语言。因此，JSX需要遵循JavaScript的语法规则，如使用花括号 {} 包裹表达式、使用驼峰命名属性等。HTML是一种更宽松的标记语言，对于标签闭合和属性命名更宽松。\",\"表达式插入：在JSX中，可以使用花括号 {} 插入JavaScript表达式，从而动态地生成内容。这使得在JSX中可以直接使用变量、执行函数、进行条件判断等操作。HTML中没有这种内嵌表达式的能力。\",\"属性名称：在JSX中，属性名称使用驼峰命名，而HTML中属性名称是不区分大小写的。\",\"类名和样式：在JSX中，使用className属性代替HTML中的class属性来定义元素的类名。同样地，使用style属性传递一个JavaScript对象，而不是直接在属性中写CSS样式。\",\"以下是JSX和HTML的对比示例：\",\"JSX示例：\",\"import React from 'react'; const name = 'John Doe'; const isActive = true; const element = ( <div className=\\\"container\\\"> <h1>Hello, {name}!</h1> <p className={isActive ? 'active' : 'inactive'}>Welcome to my website.</p> </div> ); \",\"HTML示例：\",\"<div class=\\\"container\\\"> <h1>Hello, John Doe!</h1> <p class=\\\"active\\\">Welcome to my website.</p> </div> \",\"需要注意的是，虽然JSX和HTML看起来相似，但它们是不同的语言，有不同的语法和解析方式。在使用JSX时，需要确保它被正确地转换为纯JavaScript代码，从而被React组件所理解和渲染。\"]},\"15\":{\"h\":\"JSX的基本语法规则\",\"t\":[\"标签：使用类似HTML的标签来描述元素的结构，标签名称可以是HTML标签或自定义的React组件。标签需要正确闭合。\",\"// 使用HTML标签 <div></div> // 使用React组件 <MyComponent></MyComponent> \",\"嵌套：标签可以相互嵌套，形成层次结构。\",\"<div> <h1>Heading</h1> <p>Paragraph</p> </div> \",\"表达式插入：可以通过花括号 {} 在标签中插入JavaScript表达式。表达式可以是变量、函数调用、条件判断等。\",\"const name = 'John Doe'; <h1>Hello, {name}!</h1> \",\"属性：使用类似HTML的属性来传递数据给标签。属性名称遵循驼峰命名规则，属性值可以是字符串或嵌套的表达式。\",\"<img src=\\\"image.jpg\\\" alt=\\\"Image\\\" /> <button onClick={handleClick}>Click me</button> \",\"类名和样式：使用className属性来指定元素的类名，使用style属性传递一个JavaScript对象来定义元素的样式。类名和样式规则与HTML相同。\",\"<div className=\\\"container\\\"></div> <p style={{ color: 'red', fontSize: '16px' }}>Text content</p> \",\"注释：使用花括号和斜杠 {/* */} 来添加注释。\",\"<div> {/* This is a comment */} <h1>Hello, World!</h1> </div> \",\"Fragments（片段）：如果要返回多个相邻的元素，可以使用空标签或片段来包裹它们，以避免创建一个额外的父级容器元素。\",\"// 使用空标签 <> <h1>Heading 1</h1> <p>Paragraph 1</p> <h2>Heading 2</h2> <p>Paragraph 2</p> </> // 使用片段 <React.Fragment> <h1>Heading 1</h1> <p>Paragraph 1</p> <h2>Heading 2</h2> <p>Paragraph 2</p> </React.Fragment> \",\"标签自闭合：对于没有子元素的标签，可以使用自闭合语法。\",\"// 自闭合 <img src=\\\"image.jpg\\\" alt=\\\"Image\\\" /> // 非自闭合 <img src=\\\"image.jpg\\\" alt=\\\"Image\\\"></img> \",\"需要注意的是，在使用JSX时，必须将其转换为有效的JavaScript代码。通常情况下，使用Babel等工具来进行转换，以便React组件可以正确解析和渲染JSX代码。 这些是JSX的一些基本语法规则，可以根据需要使用它们来创建具有动态特性和交互性的React元素。同时，还可以根据项目需求进行进一步的学习和使用，如条件渲染、循环和事件处理等。\"]},\"16\":{\"h\":\"使用JSX创建React元素\",\"t\":[\"使用JSX创建React元素非常简单，只需按照以下步骤操作：\",\"导入React库：\",\"import React from 'react'; \",\"创建React元素：\",\"使用JSX语法创建一个React元素，类似于使用HTML标签。可以使用自定义的React组件或原生HTML标签作为元素的类型。\",\"const element = <h1>Hello, World!</h1>; \",\"渲染React元素：\",\"使用ReactDOM库中的render方法将React元素渲染到指定的DOM容器上。\",\"import ReactDOM from 'react-dom'; ReactDOM.render(element, document.getElementById('root')); \",\"完整的示例代码如下：\",\"import React from 'react'; import ReactDOM from 'react-dom'; const element = <h1>Hello, World!</h1>; ReactDOM.render(element, document.getElementById('root')); \",\"在上述示例中，我们导入了React和ReactDOM库，然后使用JSX语法创建了一个简单的React元素，其中包含一个<h1>标签。最后使用ReactDOM.render方法将该元素渲染到id为root的DOM容器中。\",\"这样，当应用程序加载时，React将会将JSX转换为相应的JavaScript代码，并将其渲染到DOM中，显示为\\\"Hello, World!\\\"。\"]},\"17\":{\"h\":\"组件\"},\"18\":{\"h\":\"函数组件和类组件的区别\",\"t\":[\"函数组件和类组件是React中两种常见的组件类型，它们之间有一些区别。以下是函数组件和类组件的主要区别：\",\"语法：函数组件是使用函数的形式定义的，而类组件是使用ES6类的形式定义的。\",\"函数组件示例：\",\"function FunctionComponent(props) { return <h1>Hello, {props.name}!</h1>; } \",\"类组件示例：\",\"class ClassComponent extends React.Component { render() { return <h1>Hello, {this.props.name}!</h1>; } } \",\"写法：函数组件更简洁，只需要编写一个函数，函数的返回值是组件的结构和内容。类组件需要继承自React.Component类，并编写render方法来返回组件的结构和内容。\",\"状态管理：在React 16.8版本之前，函数组件没有内置的状态管理功能，只能通过使用React的Hooks来处理状态。而类组件可以使用this.state来管理组件的状态，并使用this.setState来更新状态。\",\"生命周期：在React 16.3版本之前，函数组件没有生命周期方法，只能通过使用useEffect等Hooks来模拟生命周期。而类组件可以使用生命周期方法，如componentDidMount、componentDidUpdate等来处理组件的不同阶段。\",\"性能：函数组件通常比类组件具有更好的性能，因为函数组件本身更简单，没有额外的实例化和继承开销。\",\"总的来说，函数组件更简洁、易于理解和维护，适合编写简单的无状态组件。而类组件更强大，拥有更多的功能和生命周期方法，适合编写复杂的有状态组件。在React 16.8版本引入Hooks后，函数组件也可以使用Hooks来拥有更多的功能和状态管理能力。因此，在选择函数组件还是类组件时，可以根据具体的需求和组件复杂度来决定。\"]},\"19\":{\"h\":\"创建React组件的基本语法\",\"t\":[\"在React中，创建组件的基本语法有两种：函数组件和类组件。\",\"函数组件: 函数组件是最简单的一种组件形式，通过一个函数来定义组件。函数组件适合编写那些不需要内部状态管理和生命周期方法的简单组件。\",\"创建一个函数组件的基本语法如下:\",\"function FunctionComponent(props) { return ( <div> <h1>Hello, {props.name}!</h1> </div> ); } \",\"在函数组件中，函数名称即为组件的名称，组件的输入参数通常被命名为props，代表传入的属性。函数返回的内容就是组件的结构和渲染的内容。可以在返回的JSX代码中使用props对象来访问传入的属性。\",\"类组件: 类组件是通过继承React.Component类来定义的，这种形式适用于需要内部状态管理和生命周期方法的组件。\",\"创建一个类组件的基本语法如下:\",\"class ClassComponent extends React.Component { render() { return ( <div> <h1>Hello, {this.props.name}!</h1> </div> ); } } \",\"在类组件中，使用render()方法来返回组件的结构和渲染的内容。在render()方法中可以通过this.props来访问传入的属性。\",\"创建完组件后，可以使用该组件在其他地方进行渲染，例如将其作为子组件放在另一个组件中：\",\"function App() { return ( <div> <FunctionComponent name=\\\"Alice\\\" /> <ClassComponent name=\\\"Bob\\\" /> </div> ); } \",\"上述示例中，我们创建了一个名为App的函数组件，并在其中渲染了前面定义的函数组件和类组件，并传递了name属性。\",\"无论是函数组件还是类组件，在使用时都可以像使用普通的React组件一样，将其放在其他组件中进行渲染、传递属性等操作。\"]},\"20\":{\"h\":\"组件的状态（state）和属性（props）\",\"t\":[\"在React组件中，状态（state）和属性（props）是两个重要的概念，用于管理组件的数据。它们有以下区别：\",\"属性（props）：\",\"属性是从组件的父组件传递给子组件的数据。\",\"属性是只读的，子组件不能直接修改父组件传递的属性。\",\"父组件可以在实例化或者渲染子组件时，通过在子组件上添加属性传递数据。\",\"子组件可以通过this.props来访问父组件传递的属性。例如：this.props.name将访问name属性的值。\",\"示例：\",\"// 父组件 function ParentComponent() { return <ChildComponent name=\\\"Alice\\\" />; } // 子组件 function ChildComponent(props) { return <h1>Hello, {props.name}!</h1>; } \",\"状态（state）：\",\"状态是组件内部管理的数据。\",\"状态是可变的，在组件的生命周期中可以通过this.state来访问和修改状态。\",\"状态初始化通常在构造函数constructor中进行，使用this.state来定义初始状态。\",\"可以使用this.setState()方法更新状态，并且React会自动重新渲染组件。\",\"示例：\",\"class CounterComponent extends React.Component { constructor(props) { super(props); this.state = { count: 0 }; } incrementCount() { this.setState({ count: this.state.count + 1 }); } render() { return ( <div> <h1>Count: {this.state.count}</h1> <button onClick={() => this.incrementCount()}>Increment</button> </div> ); } } \",\"在上面的示例中，CounterComponent是一个类组件，它包含一个状态count。在render方法中，通过this.state.count访问状态的值。在点击按钮时，调用incrementCount方法更新状态，使用this.setState方法更新count的值，并触发重新渲染。\",\"总结： 属性是从父组件传递给子组件的只读数据， 而状态是组件内部管理的可变数据。通过属性，组件可以接收外部的数据，而通过状态，组件可以管理自己的数据。\"]},\"21\":{\"h\":\"组件的渲染（rendering）\",\"t\":[\"组件的渲染是指将组件的结构和内容转换为实际的DOM元素，从而在浏览器中呈现出来。在React中，组件的渲染是通过render方法来实现的。\",\"无论是函数组件还是类组件，都必须实现一个render方法来返回组件的结构和内容。render方法应该只负责返回组件的UI表示，不应该包含副作用或直接修改状态。\",\"函数组件的渲染：\",\"function FunctionComponent() { return <h1>Hello, World!</h1>; } \",\"上述函数组件的渲染非常简单，只需在函数体中直接返回JSX。在函数组件中，返回的JSX定义了组件渲染后的结构和内容。\",\"类组件的渲染：\",\"class ClassComponent extends React.Component { render() { return <h1>Hello, World!</h1>; } } \",\"类组件中的render方法同样返回JSX，用于定义组件的结构和内容。render方法是类组件中必须实现的一个方法。\",\"要渲染组件，需要将其放置在其他组件中或者挂载到DOM中。在ReactDOM中，可以使用ReactDOM.render方法将组件渲染到指定的DOM容器中。\",\"const element = <FunctionComponent />; ReactDOM.render(element, document.getElementById('root')); \",\"上述示例中，FunctionComponent被渲染为一个element，并通过ReactDOM.render方法将其渲染到一个id为root的DOM容器中。\",\"渲染的结果是将组件的结构转换为实际的DOM元素，并在浏览器中呈现。当组件的属性或状态发生变化时，React会根据变化自动更新组件的渲染结果，实现了React的响应式特性。\"]},\"22\":{\"h\":\"组件的生命周期\",\"t\":[\"在React中，组件的生命周期指的是在组件存在期间，组件经历的不同阶段和触发的特定方法。这些方法可以让我们在不同的时机执行相关的操作，例如初始化组件、处理更新和清理资源等。\",\"在React 16.3版本之前，组件的生命周期包括三个阶段：挂载（Mounting）、更新（Updating）和卸载（Unmounting）。从React 16.3版本开始，还引入了一些新的生命周期方法和改动。下面是组件的生命周期和对应的方法：\",\"挂载阶段（Mounting）\",\"constructor：组件实例化时调用，用于初始化状态和绑定事件处理程序。\",\"static getDerivedStateFromProps：在渲染过程中调用，用于根据props初始化或更新state。\",\"render：必需的方法，在这里返回组件的JSX表示。\",\"componentDidMount：组件第一次渲染完成后调用，在这里进行异步数据加载、订阅事件等副作用操作。\",\"更新阶段（Updating）\",\"static getDerivedStateFromProps：在组件接收到新的props时调用，用于根据props更新state。\",\"shouldComponentUpdate：在组件更新前调用，控制组件是否重新渲染，默认返回true。\",\"render：重新渲染组件。\",\"componentDidUpdate：组件更新完成后调用，进行DOM操作或在更新后的状态做一些操作。\",\"卸载阶段（Unmounting）\",\"componentWillUnmount：组件即将从DOM中移除时调用，进行清理工作，如取消订阅或清除计时器。\",\"还有一些React 16.3版本之后引入的新方法：\",\"static getDerivedStateFromError：当组件的子组件抛出错误时调用，用于渲染出错处理。\",\"componentDidCatch：当子组件抛出错误时调用，用于记录错误信息和报告。\",\"此外，React还有一些弃用和即将弃用的生命周期方法，比如UNSAFE_componentWillMount、UNSAFE_componentWillReceiveProps、UNSAFE_componentWillUpdate，建议尽量避免使用它们。\",\"需要注意的是，从React 17版本开始，一些生命周期方法被标记为已弃用，并且有一些新方法被推荐使用，例如static getDerivedStateFromProps和componentDidCatch。\",\"总结：组件的生命周期包括挂载阶段、更新阶段和卸载阶段，在每个阶段都有对应的生命周期方法可以重写，以便在合适的时机执行相关操作。了解组件的生命周期可以帮助我们更好地管理组件的状态和执行逻辑。\",\"以下是每个生命周期方法的详细解释和示例代码：\",\"constructor：构造函数方法，在组件实例化时调用。初始化组件的状态（state），绑定方法的this指向等操作可以在这里进行。 示例代码：\",\"constructor(props) { super(props); this.state = { count: 0 }; // 绑定方法的this指向 this.handleClick = this.handleClick.bind(this); } \",\"static getDerivedStateFromProps：当组件接收到新的props时调用，用于根据props更新组件状态（state）。 示例代码：\",\"static getDerivedStateFromProps(nextProps, prevState) { if (nextProps.count !== prevState.count) { return { count: nextProps.count }; } return null; } \",\"render：必需的方法，用于返回组件的JSX表示。在这里，我们可以创建组件的UI结构。 示例代码：\",\"render() { return ( <div> <h1>Count: {this.state.count}</h1> <button onClick={this.handleClick}>Increment</button> </div> ); } \",\"componentDidMount：在组件第一次渲染完成后调用，可以在这里进行异步数据加载、订阅事件等副作用操作。 示例代码：\",\"componentDidMount() { // 异步请求数据 fetch('/api/data') .then(response => response.json()) .then(data => { this.setState({ data }); }); // 订阅事件 this.subscription = eventEmitter.subscribe('event', this.handleEvent); } \",\"shouldComponentUpdate：在组件更新前调用，返回一个布尔值，用于控制是否重新渲染组件。可以用于性能优化，避免不必要的重渲染。 示例代码：\",\"shouldComponentUpdate(nextProps, nextState) { if (this.props.count === nextProps.count && this.state.count === nextState.count) { return false; } return true; } \",\"componentDidUpdate：在组件更新完成后调用，可以进行DOM操作或在更新后的状态进行一些操作。 示例代码：\",\"componentDidUpdate(prevProps, prevState) { if (prevState.count !== this.state.count) { console.log('Count updated:', this.state.count); } } \",\"componentWillUnmount：在组件即将从DOM中移除时调用，可以进行一些清理工作，比如取消订阅或清除计时器。 示例代码：\",\"componentWillUnmount() { // 取消订阅 this.subscription.unsubscribe(); // 清除计时器 clearInterval(this.timer); } \",\"以上是React组件的常用生命周期方法，每个方法都有特定的用途和执行时机，通过重写这些方法，我们可以控制组件的行为，实现相应的操作和逻辑。需要根据具体的需求选择合适的生命周期方法来使用。\"]},\"23\":{\"h\":\"高阶组件（HOC）\",\"t\":[\"高阶组件（Higher-Order Component，简称HOC）是一种在React中用来复用组件逻辑的高级技术。\",\"HOC本质上是一个函数，可以接受一个组件作为参数并返回一个新的组件。这种模式可以将组件逻辑进行抽象和封装，使得代码更具可重用性和可维护性。\",\"HOC可以用于很多场景，比如：\",\"属性代理：通过修改组件的props，可以将共享的props、事件处理函数等注入到原组件中。这种方式可以用于实现一些通用的逻辑，如日志记录、性能监测等。\",\"const withLogger = (WrappedComponent) => { return function WithLogger(props) { console.log('Props:', props); return <WrappedComponent {...props} />; } } const MyComponent = withLogger((props) => { return <div>{props.name}</div>; }); \",\"渲染劫持：通过修改组件的渲染过程，可以动态地修改组件的行为和外观，比如添加条件渲染、添加loading状态等。\",\"const withLoading = (WrappedComponent) => { return function WithLoading({ isLoading, ...restProps }) { if (isLoading) { return <div>Loading...</div> } else { return <WrappedComponent {...restProps} />; } } } const MyComponent = withLoading((props) => { return <div>{props.name}</div>; }); \",\"响应式数据注入：通过使用容器组件包裹原组件，并将外部数据传递给原组件，可以实现数据的管理和状态的共享。\",\"const withData = (WrappedComponent) => { return class WithData extends React.Component { constructor(props) { super(props); this.state = { data: [] }; } componentDidMount() { // 获取数据并更新state fetch('api/data') .then(response => response.json()) .then(data => this.setState({ data })); } render() { return <WrappedComponent data={this.state.data} {...this.props} />; } } } const MyComponent = withData((props) => { return ( <div> {props.data.map(item => <div key={item.id}>{item.name}</div>)} </div> ); }); \",\"通过使用HOC，我们可以将一些具有相似功能或具有共同需求的组件逻辑进行提取和复用，避免了代码的重复编写和重复维护。同时，HOC也提高了代码的可读性和可测试性，使得组件变得更加灵活和可扩展。\"]},\"24\":{\"h\":\"事件处理\"},\"25\":{\"h\":\"事件处理的基本概念\",\"t\":[\"事件处理是指在Web应用程序中对用户交互事件（如点击、键盘输入、鼠标移动等）做出响应的过程。在React中，可以通过事件处理程序来捕捉和处理这些事件。\",\"事件绑定：使用JSX语法，在React元素中通过指定事件属性来绑定事件处理程序。常见的事件属性包括onClick、onKeyDown、onSubmit等。\",\"<button onClick={handleClick}>Click me</button> <input onKeyDown={handleKeyDown} /> <form onSubmit={handleSubmit}> {/* form content */} </form> \",\"事件处理程序：事件处理程序是一个JavaScript函数，用于定义事件被触发时要执行的操作。可以在组件内部定义事件处理程序，并将其作为属性传递给相应的元素。\",\"function handleClick() { console.log('Button clicked'); } function handleKeyDown(event) { console.log('Key pressed:', event.key); } function handleSubmit(event) { event.preventDefault(); console.log('Form submitted'); } \",\"事件对象：事件处理程序的参数通常是一个事件对象，其中包含有关触发事件的详细信息，如触发元素、按下的按键等。可以根据需要从事件对象中提取所需的信息。\",\"function handleClick(event) { console.log('Button clicked:', event.target); } function handleKeyDown(event) { console.log('Key pressed:', event.key); } function handleSubmit(event) { event.preventDefault(); console.log('Form submitted:', event.target.elements); } \",\"事件传参：有时需要将额外的参数传递给事件处理程序。可以使用箭头函数或bind()方法来传递参数。\",\"<button onClick={() => handleClick('param')}>Click me</button> <button onClick={handleClick.bind(null, 'param')}>Click me</button> \",\"在React中，事件处理程序通常是在类组件的方法中定义，或在函数组件内部使用useState或useCallback等钩子来定义。事件处理程序可以更新组件的状态、触发组件重新渲染以及执行其他操作。\",\"需要注意的是，在使用事件处理程序时，要确保正确绑定和处理事件，以避免出现意外行为或性能问题。\"]},\"26\":{\"h\":\"绑定事件处理函数的方法\",\"t\":[\"在React中，有多种方法可以绑定事件处理函数。以下是常用的几种方法：\",\"使用箭头函数： 使用箭头函数可以直接在JSX语法中定义并绑定事件处理函数。这种方式可以方便地传递参数给事件处理函数。\",\"<button onClick={() => handleButtonClick(param)}>Click me</button> \",\"使用类组件中的方法： 在类组件中，可以将事件处理函数定义为类的方法，并在JSX中通过this关键字来引用。\",\"class MyComponent extends React.Component { handleClick() { console.log('Button clicked'); } render() { return <button onClick={this.handleClick}>Click me</button>; } } \",\"在类组件中使用方法时，需要注意确保方法内部的this指向组件实例，可以使用bind方法或者使用箭头函数进行绑定。\",\"使用函数组件中的钩子： 在函数组件中，可以使用useState或useCallback钩子来定义事件处理函数。这样可以确保函数在重新渲染时保持一致。\",\"function MyComponent() { const handleClick = () => { console.log('Button clicked'); }; return <button onClick={handleClick}>Click me</button>; } \",\"无论使用哪种方法，重要的是将事件处理函数正确地绑定到元素的事件属性上，以确保在事件触发时执行相应的操作。此外，还可以使用preventDefault()方法来阻止事件的默认行为，或者使用stopPropagation()方法来停止事件冒泡传播到父元素。\"]},\"27\":{\"h\":\"事件对象和事件参数\",\"t\":[\"事件对象是在事件处理函数被调用时自动传递给事件处理函数的一个参数。它包含了关于触发事件的详细信息，如触发元素、按下的按键、鼠标位置等。\",\"在React中，事件对象通常作为事件处理函数的第一个参数传递。你可以按照下面的方式来访问事件对象中的属性和方法：\",\"function handleEvent(event) { // 访问事件对象的属性 const target = event.target; const eventType = event.type; // 阻止事件的默认行为 event.preventDefault(); // 停止事件冒泡传播 event.stopPropagation(); // ... } \",\"常用的事件对象属性如下：\",\"target：触发事件的元素对象。\",\"currentTarget：注册事件处理函数的元素对象。\",\"type：触发的事件类型，如\\\"click\\\"、\\\"keydown\\\"等。\",\"key：按下的键的值（仅适用于键盘事件）。\",\"clientX、clientY：鼠标事件发生时的鼠标指针相对于浏览器视口的水平和垂直坐标。\",\"pageX、pageY：鼠标事件发生时的鼠标指针相对于整个文档的水平和垂直坐标。\",\"preventDefault()：阻止事件的默认行为。\",\"stopPropagation()：停止事件冒泡传播到父元素。\",\"除了常用的事件对象属性，不同类型的事件可能还有其他特定的属性。你可以根据需要查阅相关文档来获取更详细的信息。\",\"需要注意的是，由于React的合成事件系统，事件对象在合成事件还是原生事件之间存在一些差异。但在大多数情况下，你可以像上面的例子一样使用事件对象，不必特别关注这些差异。\"]},\"28\":{\"h\":\"常见的事件类型\",\"t\":[\"在Web开发中，有很多常见的事件类型可以用于不同的交互和操作。下面是一些常见的事件类型：\",\"鼠标事件：\",\"click：鼠标点击事件。\",\"dblclick：鼠标双击事件。\",\"mouseover：鼠标移入事件。\",\"mouseout：鼠标移出事件。\",\"mousemove：鼠标移动事件。\",\"mousedown：鼠标按下事件。\",\"mouseup：鼠标松开事件。\",\"键盘事件：\",\"keydown：键盘按下事件。\",\"keyup：键盘松开事件。\",\"keypress：键盘按键事件。\",\"表单事件：\",\"input：输入框内容变化事件。\",\"change：表单元素值改变事件。\",\"submit：表单提交事件。\",\"focus：表单元素获得焦点事件。\",\"blur：表单元素失去焦点事件。\",\"触摸事件（移动设备）：\",\"touchstart：手指触摸屏幕事件。\",\"touchmove：手指在屏幕上滑动事件。\",\"touchend：手指离开屏幕事件。\",\"滚动事件：\",\"scroll：滚动事件，当元素滚动时触发。\",\"这只是一些常见的事件类型列表，Web浏览器还提供了其他许多事件类型。你可以根据具体的应用场景和需求选择适合的事件类型来进行事件处理和交互操作。\"]},\"29\":{\"h\":\"表单\"},\"30\":{\"h\":\"表单元素的基本用法\",\"t\":[\"表单元素是网页中常用的交互元素，用于接收用户输入的数据。下面是表单元素的基本用法：\",\"<form>元素： 表单元素包裹了表单中的其他元素，并提供了一些表单级别的属性和事件。通常情况下，表单元素会有一个action属性来指定表单数据的提交目标，以及一个method属性来指定数据提交的HTTP方法（通常为GET或POST）。\",\"<form action=\\\"/submit\\\" method=\\\"POST\\\"> <!-- 表单内容 --> </form> \",\"<input>元素： <input>元素用于接收单行文本输入。常见的type属性值有：\",\"text：文本输入框。\",\"password：密码输入框，输入的文本会被隐藏。\",\"email：电子邮件输入框。\",\"number：数字输入框。\",\"checkbox：复选框。\",\"radio：单选框。\",\"<input type=\\\"text\\\" name=\\\"username\\\" placeholder=\\\"请输入用户名\\\" /> \",\"<textarea>元素： <textarea>元素用于接收多行文本输入。\",\"<textarea name=\\\"message\\\" placeholder=\\\"请输入消息\\\"></textarea> \",\"<select>和<option>元素： <select>元素创建了一个下拉菜单选择框，而<option>元素定义了下拉菜单的选项。\",\"<select name=\\\"country\\\"> <option value=\\\"china\\\">中国</option> <option value=\\\"us\\\">美国</option> <option value=\\\"uk\\\">英国</option> </select> \",\"<button>元素： <button>元素用于创建按钮。\",\"<button type=\\\"submit\\\">提交</button> \",\"提交表单： 提交表单可以使用表单元素内的提交按钮。\",\"<form action=\\\"/submit\\\" method=\\\"POST\\\"> <!-- 表单内容 --> <button type=\\\"submit\\\">提交</button> </form> \",\"处理表单提交： 在服务器端或前端框架中，可以通过处理表单的提交事件来获取用户输入的数据。通常使用JavaScript来监听表单的submit事件，并在事件处理函数中处理表单数据。\",\"<form action=\\\"/submit\\\" method=\\\"POST\\\" onsubmit=\\\"handleSubmit(event)\\\"> <!-- 表单内容 --> <button type=\\\"submit\\\">提交</button> </form> \",\"function handleSubmit(event) { event.preventDefault(); // 阻止表单默认提交行为 const formData = new FormData(event.target); // 获取表单数据 // 处理表单数据... } \",\"这只是表单元素的基本用法，实际使用会涉及更多的属性和事件。通过表单元素，用户可以方便地输入数据并提交到服务器或进行其他类型的交互操作。\"]},\"31\":{\"h\":\"受控组件和非受控组件\",\"t\":[\"在React和其他一些前端框架中，有两种常见的方式来处理表单元素的值和状态：受控组件和非受控组件。\",\"受控组件（Controlled Components）： 在受控组件中，表单元素的值由React组件的状态所控制。当用户输入或选择表单元素时，通过事件处理函数更新组件的状态，然后使用状态值来渲染表单元素。\",\"class ControlledComponent extends React.Component { constructor(props) { super(props); this.state = { inputValue: '', }; } handleChange = (event) => { this.setState({ inputValue: event.target.value }); } handleSubmit = (event) => { event.preventDefault(); // 使用 this.state.inputValue 进行处理 } render() { return ( <form onSubmit={this.handleSubmit}> <input type=\\\"text\\\" value={this.state.inputValue} onChange={this.handleChange} /> <button type=\\\"submit\\\">提交</button> </form> ); } } \",\"受控组件的优点是可以完全控制表单元素的状态，可以在React组件中进行验证和处理，并且方便在表单提交时访问和处理表单数据。\",\"非受控组件（Uncontrolled Components）： 在非受控组件中，表单元素的值不受React组件状态的控制，而是由DOM本身维护。可以通过使用ref来获取表单元素的值。\",\"class UncontrolledComponent extends React.Component { handleSubmit = (event) => { event.preventDefault(); const inputValue = this.inputRef.value; // 使用 inputValue 进行处理 } render() { return ( <form onSubmit={this.handleSubmit}> <input type=\\\"text\\\" ref={ref => (this.inputRef = ref)} /> <button type=\\\"submit\\\">提交</button> </form> ); } } \",\"非受控组件的优点是写起来更简单，不需要维护组件状态。但缺点是没有集中控制表单数据的能力，可能需要手动做一些数据验证和处理。\",\"在选择受控组件或非受控组件时，可以根据具体的需求和场景来决定。如果需要精确控制和处理表单数据，建议使用受控组件。如果表单较简单或需要快速开发，非受控组件可能更合适。\"]},\"32\":{\"h\":\"表单验证和错误处理\",\"t\":[\"在处理表单验证和错误处理时，以下是一些常见的做法和技巧：\",\"表单验证：\",\"React表单验证通常在提交时或输入时进行。可以在提交表单时进行完整的验证，或在输入时实时验证。\",\"使用表单验证库（如Formik、Yup、React Hook Form等）来简化表单验证逻辑。\",\"可以通过正则表达式、内置的验证方法、自定义验证函数等方式进行验证。验证结果可以存储在组件状态中。\",\"错误处理：\",\"在处理表单错误时，可以使用组件状态来存储错误信息。例如，可以为每个表单字段创建一个对应的错误状态字段，并在验证或提交过程中设置错误信息。\",\"将错误信息显示给用户，可以使用条件渲染来根据错误状态字段来显示相应的错误。可以在表单项下方显示错误信息，或在表单项旁边显示错误提示。\",\"根据不同的情况，可以选择使用内联错误提示、弹出消息框等方式来呈现错误信息。\",\"可以为表单输入框添加样式，如红色边框或背景色变化等，以突出显示出现错误的输入框。\",\"错误处理的反馈和用户体验：\",\"在显示错误信息时，应尽量提供清晰的错误提示，以帮助用户理解错误的原因和如何纠正它。\",\"可以使用动画效果或逐渐显示错误信息，以改善用户体验。\",\"在用户纠正错误后，应及时清除或更新错误状态，并提供及时反馈。\",\"可以使用aria-live属性或类似技术，在屏幕阅读器中提供适当的辅助功能支持。\",\"总结来说，表单验证和错误处理是构建可靠和用户友好的表单交互的重要部分。通过使用适当的验证方法、错误状态管理和反馈机制，可以提供更好的用户体验，并帮助用户在提交表单时避免错误。\"]},\"33\":{\"h\":\"处理表单提交\",\"t\":[\"在处理表单提交时，以下是一些常见的做法和技巧：\",\"监听表单提交事件：\",\"在React中，可以使用onSubmit事件来监听表单的提交。\",\"在组件中定义一个处理提交的回调函数，将其作为onSubmit事件的处理函数。\",\"阻止表单默认提交行为：\",\"在提交表单时，浏览器通常会执行默认的表单提交行为，刷新页面或跳转到指定的URL。\",\"在React中，可以调用事件对象的preventDefault()方法，来阻止默认的提交行为发生。\",\"获取表单数据：\",\"可以通过事件对象的target属性来获取表单元素的值。\",\"使用event.target.elements可以获取所有的表单元素。\",\"针对特定表单元素，可以通过name属性访问它的值，例如：event.target.elements.name.value。\",\"处理表单提交逻辑：\",\"在提交表单时，可以进行一些逻辑处理，例如表单验证、发送网络请求等。\",\"可以在回调函数中执行相应的逻辑，并根据结果来更新组件状态或进行相应的操作。\",\"可以使用异步操作、Promise、async/await等方式来处理通信或数据操作的过程。\",\"提供用户反馈：\",\"在提交表单期间，可以显示加载指示符或其他适当的反馈给用户，以表示正在进行操作。\",\"可以禁用提交按钮，以防止用户多次点击提交。\",\"根据提交的结果，可以向用户显示成功或失败的消息，并采取相应的行动。\",\"总结来说，处理表单提交需要监听提交事件、获取表单数据、执行逻辑处理，并提供适当的用户反馈。通过合理的处理方式和用户友好的交互，可以提高用户体验，并确保提交过程的可靠性和准确性。\"]},\"34\":{\"h\":\"组件通信\"},\"35\":{\"h\":\"父子组件通信\",\"t\":[\"在React中，父子组件之间的通信可以通过props和回调函数来实现。以下是一些常用的父子组件通信方式：\",\"Props传递：\",\"父组件通过props将数据或函数传递给子组件。\",\"子组件可以通过props来读取传递的数据，并在需要时调用传递的函数。\",\"State提升：\",\"如果多个子组件需要共享相同的数据，可以将该数据状态提升到它们共同的父组件中，然后通过props传递给子组件。\",\"父组件通过改变状态的方式来更新数据，子组件通过props接收并使用这些数据。\",\"回调函数：\",\"父组件可以定义一个回调函数，然后将该函数作为props传递给子组件。\",\"子组件可以调用该回调函数来向父组件传递数据或触发特定的事件。\",\"通过回调函数的方式，子组件可以向父组件发送数据或请求执行某些操作。\",\"通过合适的父子组件通信方式，可以实现组件间的数据传递、事件触发和状态管理等功能，从而提高代码的可维护性和复用性。根据具体的场景和需求，选择适合的通信方式非常重要。\",\"下面举一个简单的例子来说明父子组件通信的实现方式：\",\"// 父组件 import React, { useState } from 'react'; import ChildComponent from './ChildComponent'; function ParentComponent() { const [message, setMessage] = useState(''); const handleMessageChange = (newMessage) => { setMessage(newMessage); }; return ( <div> <h1>Parent Component</h1> <ChildComponent message={message} onMessageChange={handleMessageChange} /> </div> ); } export default ParentComponent; \",\"// 子组件 import React from 'react'; function ChildComponent({ message, onMessageChange }) { const handleButtonClick = () => { onMessageChange('Hello from Child Component!'); }; return ( <div> <h2>Child Component</h2> <p>Message from Parent: {message}</p> <button onClick={handleButtonClick}>Change Message</button> </div> ); } export default ChildComponent; \",\"在这个例子中，父组件（ParentComponent）通过props将message和onMessageChange函数传递给子组件（ChildComponent）。子组件接收到message后将其显示在页面上，并且点击按钮时调用onMessageChange函数来通知父组件更新message的值。\",\"通过这种方式，父组件和子组件之间实现了数据的传递和事件的触发。当子组件中的按钮被点击时，子组件通过调用父组件传递的回调函数来改变父组件中的状态，从而实现了父子组件之间的通信。\"]},\"36\":{\"h\":\"属性传递\",\"t\":[\"属性传递是一种常见的父子组件通信方式，在React中通过props来实现。通过将数据或函数作为props传递给子组件，可以让父组件向子组件传递信息。\",\"下面是一个示例，展示了如何使用属性传递在父组件中向子组件传递数据和函数：\",\"// 父组件 import React from 'react'; import ChildComponent from './ChildComponent'; function ParentComponent() { const name = 'John Doe'; const handleClick = () => { console.log('Button clicked!'); }; return ( <div> <h1>Parent Component</h1> <ChildComponent name={name} handleClick={handleClick} /> </div> ); } export default ParentComponent; \",\"// 子组件 import React from 'react'; function ChildComponent(props) { return ( <div> <h2>Child Component</h2> <p>Name passed from parent: {props.name}</p> <button onClick={props.handleClick}>Click me</button> </div> ); } export default ChildComponent; \",\"在这个示例中，父组件（ParentComponent）通过props向子组件（ChildComponent）传递了一个名为name的数据和名为handleClick的函数。子组件通过props接收这些属性，并根据需要去使用它们。\",\"注意，通过props传递的属性名可以在子组件内部任意命名。在上述示例中，子组件使用了props.name和props.handleClick来访问父组件传递的name和handleClick。\",\"通过属性传递，父组件可以向子组件传递任意类型的数据，包括基本数据类型、对象、函数等。子组件可以使用这些属性来渲染数据、调用函数、实现交互等。\",\"需要注意的是，子组件通过props接收到的属性是只读的，即不能直接修改。如果子组件需要修改父组件传递的数据，可以通过回调函数、状态提升等方式来实现。\"]},\"37\":{\"h\":\"上下文（Context）API\",\"t\":[\"上下文（Context）API是React提供的一种机制，用于在组件树中共享数据，避免通过props一层层传递数据。\",\"使用上下文API，你可以创建一个上下文（Context）对象来封装共享的数据。然后，你可以在组件树中的任何一个地方访问和更新这个上下文数据。\",\"下面是一个简单的示例，展示了如何使用上下文API：\",\"// 创建上下文 import React from 'react'; const MyContext = React.createContext(); export default MyContext; \",\"// 父组件 import React from 'react'; import MyContext from './MyContext'; import ChildComponent from './ChildComponent'; function ParentComponent() { const sharedData = 'Hello from parent!'; return ( <div> <h1>Parent Component</h1> <MyContext.Provider value={sharedData}> <ChildComponent /> </MyContext.Provider> </div> ); } export default ParentComponent; \",\"// 子组件 import React from 'react'; import MyContext from './MyContext'; function ChildComponent() { return ( <div> <h2>Child Component</h2> <MyContext.Consumer> {sharedData => <p>Shared data: {sharedData}</p>} </MyContext.Consumer> </div> ); } export default ChildComponent; \",\"在这个示例中，我们首先创建了一个上下文对象MyContext。然后，在父组件（ParentComponent）中通过MyContext.Provider组件将共享的数据sharedData传递给所有子组件。子组件可以通过MyContext.Consumer组件来获取父组件传递的共享数据，并在函数内部进行渲染。\",\"在MyContext.Consumer中，我们使用一个函数作为子组件，并将共享数据sharedData作为函数参数，然后在这个函数内部渲染需要的内容。\",\"需要注意的是，只有消费者组件（如ChildComponent）才能使用MyContext.Consumer来获取上下文数据。MyContext.Provider需要放置在消费者组件的父组件中，以确保数据的传递和共享。\",\"使用上下文API可以更灵活地共享数据，在组件树中的任意位置获取父组件的数据，而不需要一层层通过props传递。然而，过度使用上下文API可能会导致组件耦合性增加，降低组件的可复用性，因此需要谨慎使用。\"]},\"38\":{\"h\":\"发布订阅模式和事件总线\",\"t\":[\"发布-订阅模式（Publish-Subscribe Pattern）是一种软件设计模式，用于实现组件或模块间的解耦和通信。在该模式中，有两个核心角色：发布者（Publisher）和订阅者（Subscriber）。发布者负责发布事件或消息，而订阅者则订阅感兴趣的事件或消息，并在事件发生时做出相应的处理。\",\"事件总线（Event Bus）是实现发布-订阅模式的一种常见方式，它充当了中介者的角色。事件总线提供了一种集中式的机制，用于管理事件的发布和订阅，使组件间的通信更加简单和灵活。\",\"下面是一个简单的示例，展示了如何使用事件总线实现发布-订阅模式：\",\"// 事件总线 import mitt from 'mitt'; const eventBus = mitt(); export default eventBus; \",\"// 发布者 import eventBus from './eventBus'; // 发布事件 eventBus.emit('eventA', data); \",\"// 订阅者 import eventBus from './eventBus'; // 订阅事件 eventBus.on('eventA', handleEvent); // 事件处理函数 function handleEvent(data) { // 处理事件 } \",\"在这个示例中，我们使用了一个第三方库mitt来创建一个事件总线eventBus。发布者可以使用eventBus.emit方法来发布指定的事件，并传递相应的数据。订阅者可以使用eventBus.on方法来订阅感兴趣的事件，并提供一个事件处理函数。当事件被发布时，订阅者的事件处理函数将被调用，并传递相应的数据。\",\"通过事件总线，发布者和订阅者之间解耦，发布者只需要关心事件的发布，而不需要关心具体的订阅者。订阅者只需要关心自己感兴趣的事件，并提供相应的事件处理函数。\",\"事件总线还可以用于跨组件通信，从而简化组件之间的通信逻辑。不同组件可以通过订阅感兴趣的事件来接收数据，并通过发布事件的方式向其他组件发送数据。\",\"需要注意的是，事件总线是全局的，因此需要避免滥用。过度使用事件总线可能会导致代码的维护困难和调试问题，所以需要谨慎使用，并合理规划你的事件名称和事件数据。\"]},\"39\":{\"h\":\"Hooks\"},\"40\":{\"h\":\"什么是Hooks\",\"t\":[\"Hooks是React 16.8版本引入的新特性，它允许你在函数式组件中使用状态（state）和其他React的特性。在之前的版本中，函数式组件没有内置的状态管理，需要使用类组件来管理状态。但是，使用类组件会引入一些额外的复杂性和冗余代码。\",\"Hooks的引入解决了这个问题，它提供了一组用于在函数式组件中使用状态和其他特性的函数。\",\"Hooks 在很大程度上简化了在函数式组件中处理状态和副作用的逻辑。通过使用Hooks，你可以编写更简洁、易于理解和维护的代码，并享受到更好的开发体验。\",\"需要注意的是，Hooks只能在函数式组件的顶层调用，不能在循环、条件或嵌套的函数中调用。这是为了确保Hook的执行顺序一致，并避免状态的错乱和混乱。\"]},\"41\":{\"h\":\"常用的Hooks函数：useState、useEffect等\",\"t\":[\"是的，常用的Hooks函数包括useState、useEffect等。下面我会分别介绍这些常用的Hooks函数及其用法：\",\"useState: useState是React提供的一个Hook，用于在函数式组件中添加和管理状态。它接收一个初始状态作为参数，并返回一个包含当前状态值和一个更新状态的函数的数组。可以通过调用更新状态的函数来改变状态的值。\",\"import React, { useState } from 'react'; function Counter() { const [count, setCount] = useState(0); const increment = () => { setCount(count + 1); }; return ( <div> <p>Count: {count}</p> <button onClick={increment}>Increment</button> </div> ); } \",\"在上面的示例中，我们使用useState创建了一个名为count的状态变量和一个名为setCount的更新状态的函数。每次点击按钮时，调用increment函数会将count的值增加1，从而更新界面上的计数。\",\"useEffect: useEffect用于处理副作用操作，比如执行订阅、数据获取等。它接收一个副作用函数和一个依赖项数组作为参数。副作用函数在组件渲染到屏幕上后执行，并且可以返回一个清理函数用于取消副作用。\",\"import React, { useEffect, useState } from 'react'; function DataFetcher() { const [data, setData] = useState(null); useEffect(() => { // 执行副作用操作 const fetchData = async () => { const response = await fetch('https://api.example.com/data'); const result = await response.json(); setData(result); }; fetchData(); // 返回一个清理函数 return () => { // 在组件卸载或重新渲染时执行清理操作 // 可以取消订阅、清除计时器等 }; }, []); return ( <div> {data ? ( <p>Data: {data}</p> ) : ( <p>Loading data...</p> )} </div> ); } \",\"在上面的示例中，useEffect函数用于异步获取数据，并通过setData函数更新组件的状态。我们使用一个空的依赖项数组([])，表示副作用只在组件挂载时执行一次。 当然，还有其他常用的Hooks函数。接下来我将介绍一些常用的Hooks函数及其用法：\",\"useContext: useContext用于在函数式组件中访问Context（上下文）的值。它接收一个Context对象作为参数，并返回该Context的当前值。\",\"import React, { useContext } from 'react'; const ThemeContext = React.createContext('light'); function ThemeComponent() { const theme = useContext(ThemeContext); return ( <div> <p>Current theme: {theme}</p> </div> ); } \",\"在上面的示例中，我们创建了一个名为ThemeContext的Context对象，并将其默认值设置为'light'。在ThemeComponent中，通过调用useContext(ThemeContext)来获取当前的主题值。\",\"useRef: useRef用于在函数式组件中创建一个可变的引用。它返回一个对象，该对象的current属性可以被赋值为任意值。这个引用在组件重新渲染时不会改变。\",\"import React, { useRef } from 'react'; function TextInput() { const inputRef = useRef(); const focusInput = () => { inputRef.current.focus(); }; return ( <div> <input type=\\\"text\\\" ref={inputRef} /> <button onClick={focusInput}>Focus</button> </div> ); } \",\"在上面的示例中，我们使用useRef创建了一个名为inputRef的引用。当点击按钮时，调用focusInput函数将焦点设置到input元素上。\",\"useReducer: useReducer用于在函数式组件中管理复杂的状态逻辑。它类似于Redux中的reducer函数，接收一个reducer函数和初始状态作为参数，并返回当前状态和一个dispatch函数，用于触发状态更新。\",\"import React, { useReducer } from 'react'; // 定义reducer函数 function reducer(state, action) { switch (action.type) { case 'INCREMENT': return state + 1; case 'DECREMENT': return state - 1; default: return state; } } function Counter() { const [count, dispatch] = useReducer(reducer, 0); const increment = () => { dispatch({ type: 'INCREMENT' }); }; const decrement = () => { dispatch({ type: 'DECREMENT' }); }; return ( <div> <p>Count: {count}</p> <button onClick={increment}>Increment</button> <button onClick={decrement}>Decrement</button> </div> ); } \",\"在上面的示例中，我们定义了一个reducer函数来处理状态的更新逻辑。通过useReducer将reducer函数和初始状态0传递进去，然后通过dispatch函数来触发状态更新。\",\"useCallback: useCallback用于优化函数的性能，它接收一个回调函数和一个依赖项数组，返回一个被记忆化的回调函数。只有当依赖项发生变化时，才会重新创建回调函数。\",\"import React, { useCallback, useState } from 'react'; function ParentComponent() { const [count, setCount] = useState(0); const increment = useCallback(() => { setCount(count + 1); }, [count]); return ( <div> <p>Count: {count}</p> <ChildComponent increment={increment} /> </div> ); } function ChildComponent({ increment }) { return ( <div> <button onClick={increment}>Increment</button> </div> ); } \",\"在上面的示中，我们使用useCallback创建一个记忆化的increment回调函数。依赖项数组[count]指定了该回调函数所依赖的状态。只有当count发生变化时，increment才会重新创建。\",\"useMemo: useMemo用于缓存计算结果，它接收一个回调函数和一个依赖项数组，返回一个缓存的值。只有当依赖项发生变化时，才会重新计算值。\",\"import React, { useMemo } from 'react'; function ExpensiveComponent({ a, b }) { const result = useMemo(() => { console.log('calculating...'); return a + b; }, [a, b]); return ( <div> <p>Result: {result}</p> </div> ); } \",\"在上面的示例中，我们使用useMemo来缓存a + b的计算结果。只有当a或b发生变化时，才会重新计算结果。\",\"useLayoutEffect: useLayoutEffect与useEffect非常相似，但会在DOM更新之后同步触发。它在DOM更新前同步执行，可以使用它来读取DOM节点的布局信息，或者在DOM更新之后执行同步任务。\",\"import React, { useLayoutEffect, useRef, useState } from 'react'; function measureHeight(node) { const { height } = node.getBoundingClientRect(); return height; } function HeightMeasurement() { const [height, setHeight] = useState(null); const contentRef = useRef(null); useLayoutEffect(() => { const measuredHeight = measureHeight(contentRef.current); setHeight(measuredHeight); }, []); return ( <div> <div ref={contentRef}>This is some content</div> <p>Height: {height}</p> </div> ); } \",\"在上面的示例中，我们使用useLayoutEffect来在DOM更新之后同步测量内容的高度。在组件挂载期间（由于传入了空依赖项数组），useLayoutEffect会在DOM更新前同步触发measureHeight函数，并更新height状态。\",\"useImperativeHandle: useImperativeHandle用于在父组件中自定义向子组件公开的实例值或方法。它允许你指定子组件实例的暴露给父组件的api。\",\"import React, { forwardRef, useImperativeHandle, useRef } from 'react'; const ChildComponent = forwardRef((props, ref) => { const childRef = useRef(null); useImperativeHandle(ref, () => ({ focusChild: () => { childRef.current.focus(); }, resetChild: () => { childRef.current.value = ''; }, })); return <input type=\\\"text\\\" ref={childRef} />; }); function ParentComponent() { const childRef = useRef(null); const handleFocus = () => { childRef.current.focusChild(); }; const handleReset = () => { childRef.current.resetChild(); }; return ( <div> <ChildComponent ref={childRef} /> <button onClick={handleFocus}>Focus Child Input</button> <button onClick={handleReset}>Reset Child Input</button> </div> ); } \",\"在上面的示例中，我们通过useImperativeHandle定义了子组件（ChildComponent）向父组件（ParentComponent）暴露的api。父组件可以通过ref来调用这些暴露出来的方法。\"]},\"42\":{\"h\":\"自定义Hooks\",\"t\":[\"自定义Hooks是一种让你在函数组件之间重用状态逻辑的方式。你可以根据自己的需求创建自定义Hooks，它可以包含其他的Hooks，也可以包含普通的JavaScript函数。\",\"下面是创建自定义Hooks的一般步骤：\",\"命名规则：自定义Hooks的名称应该以\\\"use\\\"开头，这样可以清楚地表示它是一个自定义Hooks。\",\"创建逻辑：在自定义Hooks中，你可以使用任何的Hooks和其他逻辑来定义你的状态逻辑。例如，你可以使用useState、useEffect等Hooks。\",\"返回值：自定义Hooks应该返回一组可以在组件中使用的值。这可以是一个状态值，也可以是一个函数等，具体取决于你的需求。\",\"下面是一个简单的例子，展示了如何创建一个自定义的计数器Hooks：\",\"import { useState } from 'react'; function useCounter(initialCount) { const [count, setCount] = useState(initialCount); const increment = () => { setCount(prevCount => prevCount + 1); }; const decrement = () => { setCount(prevCount => prevCount - 1); }; return [count, increment, decrement]; } \",\"在上面的例子中，我们创建了一个名为useCounter的自定义Hooks。它使用useState创建了一个名为count的状态变量，并返回了一个包含count的数组以及两个操作count变量的函数：increment和decrement。\",\"现在可以在任何组件中使用useCounter自定义Hooks：\",\"import React from 'react'; import useCounter from './useCounter'; function Counter() { const [count, increment, decrement] = useCounter(0); return ( <div> <p>Count: {count}</p> <button onClick={increment}>Increment</button> <button onClick={decrement}>Decrement</button> </div> ); } \",\"在上面的例子中，我们在Counter组件中使用了useCounter自定义Hooks，通过解构赋值获取了count、increment和decrement，并在组件中使用它们。\",\"通过自定义Hooks，你可以将组件间共享的逻辑提取出来，使得代码更加清晰、可复用。同时，它也使得逻辑的测试和维护更加容易。记得在设计自定义Hooks时，要考虑到Hooks的命名规范，并且尽量遵循Hooks的规则。\"]},\"43\":{\"h\":\"Hooks的使用注意事项\",\"t\":[\"在使用Hooks时需要注意以下几个事项：\",\"Hooks只能在函数组件中使用：Hooks只能在函数组件中使用，不能在类组件中使用。这是因为Hooks是基于函数组件的新特性，它利用了函数组件的闭包特性来存储状态和处理逻辑。\",\"顺序重要：在使用多个Hooks时，要确保它们的调用顺序是稳定的，不能在条件语句或循环中使用Hooks，因为这样会破坏它们的顺序。React依赖于Hooks的顺序来确保每个Hook的状态对应正确的组件实例。\",\"Hooks只能在顶层使用：Hooks不能在嵌套的函数内部使用，应该将所有的Hook调用放在组件函数的顶层。这样可以确保每次组件渲染时，Hook的调用顺序稳定，避免产生难以追踪的bug。\",\"使用规则：按照React官方的规范，Hooks的调用必须遵循一些特定的规则。例如，Hook的调用不能在条件语句中（可以使用条件表达式），也不能在循环语句中使用。另外，Hooks的调用必须在函数组件的顶层，并且不得在普通的JavaScript函数中使用。\",\"自定义Hooks命名规范：如果你创建了自定义Hooks，要遵循以\\\"use\\\"开头的命名规范，这样可以清楚地表示它是一个自定义Hooks。\",\"版本要求：使用Hooks需要确保React的版本不低于16.8.0。\",\"Hooks的性能优化：在某些情况下，Hooks的调用会导致额外的重渲染，可能会影响性能。为了避免这种情况，可以使用React.memo()或useMemo()等技术来优化组件的性能。\",\"参与依赖：如果你在自定义Hooks中使用了其他的Hooks（如useState、useEffect等），那么它们共享的状态和逻辑将通过闭包的方式与自定义Hooks形成依赖关系。\"]},\"44\":{\"h\":\"性能优化\"},\"45\":{\"h\":\"Virtual DOM的原理和优势\",\"t\":[\"Virtual DOM（虚拟DOM）是React框架的核心概念之一，它在React中起到了重要的作用。下面是Virtual DOM的原理和优势：\",\"Virtual DOM的原理：\",\"虚拟DOM是一个轻量级的JavaScript对象，它是对实际DOM的抽象表示。\",\"当应用的状态发生变化时，React会首先生成一个新的虚拟DOM树，与之前的虚拟DOM树进行比较。\",\"React会找出两个虚拟DOM树之间的差异，并只把实际DOM中需要变动的部分更新。\",\"这种差异计算的方式可以最小化对实际DOM的操作，从而提高性能和效率。\",\"Virtual DOM的优势：\",\"提高性能：由于实际DOM操作是非常昂贵的，Virtual DOM可以通过批量更新的方式减少对实际DOM的操作次数，从而提高性能。Virtual DOM会在内部使用算法来最小化对实际DOM的修改，只更新真正需要变动的部分，而不是整个页面。\",\"简化开发：Virtual DOM提供了一种声明式的方式来描述想要渲染的UI。你只需要关注数据的变化，并用React组件来描述UI的结构和状态，而无需手动操作DOM。这样简化了开发流程，提高了开发效率。\",\"跨平台：由于Virtual DOM是一个独立于平台的抽象层，可以在不同的平台上使用相同的代码。React Native就是一个例子，它使用Virtual DOM来实现在移动端的UI渲染。\",\"组件化开发：React的组件化开发模式和Virtual DOM紧密结合，可以将复杂的UI拆分成独立的组件，并对每个组件进行单独的状态管理、事件处理和渲染控制。这使得代码更加可维护、可复用，提高了开发效率。\",\"更好的用户体验：由于React使用Virtual DOM和高效的差异算法，它能够提供快速、流畅的用户体验。在组件状态变化时，React能够快速更新变化的部分，减少页面的闪烁和卡顿。\",\"总的来说，使用Virtual DOM可以通过减少实际DOM操作、提高开发效率和提供更好的用户体验等优势，使得React成为一个流行的前端开发框架。\"]},\"46\":{\"h\":\"使用key属性进行性能优化\",\"t\":[\"使用key属性可以对React元素列表的性能进行优化。key属性是在React元素列表中唯一标识每个列表项的属性。以下是如何使用key属性进行性能优化的一些指导原则：\",\"提供稳定的标识符：确保为每个元素提供一个稳定的、唯一的key值。理想情况下，使用每个列表项的唯一ID作为key值。这可以使用字符串、数字或基于对象唯一标识符（比如id属性）来实现。\",\"避免使用索引作为key值：使用索引作为key值是一种常见的误用。尽量避免将索引作为key值，因为在列表的插入、删除或排序等操作时，相同索引位置的元素可能会发生变化，导致React重新创建和渲染这个元素。\",\"指定唯一性：确保key属性的值在同一个列表内是唯一的。如果多个元素共享相同的key值，可能会导致React在更新列表时出现错误或不一致的行为。\",\"不要过度依赖key属性：key属性主要用于React在进行列表更新时识别和比较元素。它不应该被用于组件的状态或用途等其他用途。不要过度关注key属性的值，而是更关注其在列表中的唯一性和稳定性。\",\"使用key属性可以帮助React更准确地确定哪些元素需要更新、添加或删除，以提高列表渲染的性能。当列表项改变顺序或数量时，React会基于key属性来决定更新的方式，并尽量最小化对DOM的操作。这样可以避免重新创建和渲染整个列表，提高性能和用户体验。\"]},\"47\":{\"h\":\"PureComponent和memo组件\",\"t\":[\"PureComponent和memo都是React中用于性能优化的组件包装器。它们都可以在某些情况下避免不必要的重新渲染，以提高应用程序的性能。下面是它们的介绍和使用场景：\",\"PureComponent： PureComponent是React中的一个基类组件，它自动实现了shouldComponentUpdate方法，用于进行浅层的props和state比较。如果当前和前一个渲染的props和state相等，PureComponent会阻止组件重新渲染，提高性能。\",\"使用场景：\",\"当props和state的数据是不可变的，或者通过深层比较可以轻松确定它们的变化时，可以将组件包装为PureComponent。\",\"适用于大多数简单的展示性组件，它们主要依赖props而不是内部状态。\",\"不适用于使用引用类型数据（如数组、对象）的情况，因为浅层比较可能会造成误判。\",\"示例代码：\",\"class MyComponent extends React.PureComponent { // 省略其他方法... render() { return <div>{this.props.text}</div>; } } \",\"memo： memo是一个高阶组件，它类似于PureComponent，但用于函数式组件。memo接收一个组件作为参数，并返回一个具有性能优化的新组件。memo会对组件的props进行浅层比较，如果props没有变化，则阻止组件重新渲染。\",\"使用场景：\",\"适用于函数式组件，特别是当函数组件接收的props有限且不可变时。\",\"可以用于包裹那些在相同输入下保持相同输出的纯展示组件。\",\"示例代码：\",\"const MyComponent = React.memo(({ text }) => { return <div>{text}</div>; }); \",\"使用PureComponent和memo可以有效减少组件的不必要渲染，提高应用程序的性能。然而，需要注意的是，这些优化方法并非适用于所有组件或所有情况。在使用这些优化方法之前，最好进行性能测试和分析，确定其是否适合特定的组件以及是否能够带来明显的性能提升。\"]},\"48\":{\"h\":\"使用shouldComponentUpdate进行手动优化\",\"t\":[\"在React中，shouldComponentUpdate方法可以用于手动优化组件的渲染过程。shouldComponentUpdate是一个生命周期方法，在组件准备更新前被调用，用于判断组件是否需要重新渲染。通过在shouldComponentUpdate方法中进行自定义逻辑判断，可以避免不必要的重新渲染，从而提高组件的性能。\",\"下面是使用shouldComponentUpdate进行手动优化的一般步骤：\",\"在组件中定义shouldComponentUpdate方法，并接收两个参数：nextProps和nextState，用于表示下一个即将更新的props和state。\",\"class MyComponent extends React.Component { // 其他生命周期方法... shouldComponentUpdate(nextProps, nextState) { // 进行自定义逻辑判断，返回一个布尔值来决定是否重新渲染组件 // 例如，比较当前和下一个props的某些属性 if (this.props.someProp !== nextProps.someProp) { return true; // 需要重新渲染 } // 默认情况下，不重新渲染 return false; } render() { // 渲染组件 } } \",\"在shouldComponentUpdate方法中编写适当的逻辑，比较当前和下一个props以及state的值。根据这些值的变化情况，决定是否返回true（重新渲染）或false（不重新渲染）。\",\"shouldComponentUpdate方法的返回值会影响组件是否重新渲染。如果返回false，则组件不会重新渲染；如果返回true，则组件会继续执行后续的生命周期方法，进行更新。\",\"需要注意以下几点：\",\"在编写shouldComponentUpdate方法时，确保逻辑判断是准确的和高效的，避免引入不必要的复杂性和性能问题。\",\"在使用shouldComponentUpdate方法进行手动优化时，要特别注意对比引用类型（如数组、对象）的变化，因为对于引用类型，默认的浅层比较可能会导致误判。在这种情况下，需要自行实现深层比较或使用帮助函数（如lodash中的isEqual）来确保准确的比较。\",\"手动优化的好处是可以精确地控制组件的重新渲染，避免不必要的开销。然而，需要注意的是过度的手动优化也可能带来代码复杂性和维护难度，因此在使用shouldComponentUpdate方法进行手动优化时需要权衡利弊，确保真正需要进行优化并能够带来明显的性能提升。\"]},\"49\":{\"h\":\"减少渲染次数\",\"t\":[\"减少组件的渲染次数是优化性能的关键之一，以下是几种常见的方法可以帮助你减少不必要的组件渲染次数：\",\"使用shouldComponentUpdate或React.memo：在组件内部实现shouldComponentUpdate方法来手动判断组件是否需要重新渲染。或者，如果你使用函数式组件，可以使用React.memo包装组件来进行浅层比较，避免不必要的重新渲染。\",\"使用合适的数据结构：优化组件的渲染可以通过选择合适的数据结构来避免不必要的渲染。对于列表或集合等数据，使用对象或集合类型的数据结构，例如Map或Set，可以在元素的插入、删除和查找等操作上提供更好的性能。\",\"避免无关的重新渲染：如果一个组件只依赖于部分props或state，可以将这些相关数据提升到它们共同的父组件中，以避免不必要的重新渲染。另外，使用合适的组件拆分方法，将大型组件拆分成更小的子组件，只在需要更新的时候更新相应的子组件。\",\"使用React的useCallback和useMemo钩子：使用useCallback来缓存回调函数，以防止在每次渲染时创建新的函数实例。使用useMemo来缓存计算结果，以防止在每次渲染时重新计算。这些钩子可以减少渲染次数，提高性能。\",\"使用React的useEffect钩子：使用useEffect来仅在特定条件下触发副作用逻辑。通过指定依赖项，可以控制副作用逻辑的执行时机，避免不必要的副作用触发。\",\"使用React.PureComponent或优化的函数组件：使用React.PureComponent类或通过手动编写shouldComponentUpdate来确保组件只在其props或state发生实际变化时才进行重新渲染。\",\"使用虚拟化技术：对于大型列表或表格等长列表，可以使用虚拟化技术，例如react-virtualized库，只渲染可见区域的元素，而不是所有元素。\",\"通过结合使用上述方法，你可以明显减少组件的渲染次数，提高React应用程序的性能和响应性。需要注意的是，优化渲染次数并非一成不变的规则，具体要根据应用程序的具体需求和场景进行评估和调整。\"]},\"50\":{\"h\":\"使用生命周期方法和Effect钩子进行异步加载\",\"t\":[\"在React中，可以使用生命周期方法和Effect钩子来处理异步加载数据的逻辑。下面我将分别介绍使用类组件的生命周期方法和函数式组件的Effect钩子来进行异步加载。\",\"使用生命周期方法进行异步加载（适用于类组件）：\",\"在类组件中，可以使用componentDidMount生命周期方法来进行异步加载数据。它会在组件挂载后立即被调用，可以在这个方法中发起异步请求并更新组件的状态。\",\"class MyComponent extends React.Component { componentDidMount() { // 发起异步请求获取数据 fetchData() .then((data) => { // 更新组件的状态 this.setState({ data }); }) .catch((error) => { // 错误处理 console.log(error); }); } render() { // 渲染组件... } } \",\"在上面的例子中，componentDidMount方法被调用时，异步请求会被触发。在请求成功后，通过setState方法更新组件的状态，触发重新渲染。\",\"使用Effect钩子进行异步加载（适用于函数式组件）：\",\"在函数式组件中，可以使用Effect钩子（例如useEffect）来进行异步加载数据。可以在Effect钩子的回调函数中发起异步请求并更新组件状态。\",\"import React, { useState, useEffect } from 'react'; function MyComponent() { const [data, setData] = useState(null); useEffect(() => { // 在组件挂载后发起异步请求 fetchData() .then((data) => { // 更新组件状态 setData(data); }) .catch((error) => { // 错误处理 console.log(error); }); }, []); // 传递一个空数组作为依赖项，表示只在组件挂载和卸载时执行一次 // 渲染组件... } \",\"在上面的例子中，useEffect钩子的回调函数会在组件挂载后执行。通过在依赖数组[]中传递一个空数组，可以确保回调函数只在组件挂载和卸载时执行一次，避免多次触发。在异步请求成功后，使用setData函数更新组件状态。\",\"无论是使用生命周期方法还是Effect钩子，都可以在异步请求成功后更新组件的状态，从而触发重新渲染，展示加载的数据。需要注意的是，要处理可能的错误情况，并在组件卸载时取消挂起的异步请求以防止内存泄漏。\"]},\"51\":{\"h\":\"懒加载和按需加载\",\"t\":[\"懒加载（Lazy Loading）和按需加载（On-Demand Loading）是前端优化的两个常用技术，它们可以帮助减少初始加载时间和提高应用性能。下面我将分别介绍懒加载和按需加载的概念及实现方法。\",\"懒加载（Lazy Loading）： 懒加载是一种延迟加载技术，它允许将页面或组件的部分内容延迟到实际需要时再加载。懒加载通常用于加速初始页面加载，减少网络请求和资源的使用。\",\"在React中，可以使用React.lazy和Suspense组件来实现懒加载。React.lazy允许你以动态的方式引入一个组件，而Suspense组件则可以在懒加载完成前显示一个加载状态。\",\"import React, { Suspense } from 'react'; // 懒加载组件 const MyComponent = React.lazy(() => import('./MyComponent')); function App() { return ( <div> <Suspense fallback={<div>Loading...</div>}> <MyComponent /> </Suspense> </div> ); } export default App; \",\"在上面的例子中，通过React.lazy和import函数将MyComponent组件进行懒加载。在Suspense组件中，可以通过fallback属性指定一个加载状态，当懒加载完成前会显示该状态。\",\"按需加载（On-Demand Loading）： 按需加载是一种将代码分割成不同块并在需要时动态加载的技术，它可以根据用户的操作或需要来加载所需的代码模块，减小初始加载的体积。\",\"在React中，可以使用Webpack等打包工具的代码分割功能来实现按需加载。通过使用动态导入（Dynamic import）来引入组件或模块，Webpack会将其单独打包成一个块，然后在需要时再加载。\",\"import React, { useState } from 'react'; function App() { const [showComponent, setShowComponent] = useState(false); const loadComponent = () => { import('./MyComponent') .then((module) => { // 加载完成后显示组件 setShowComponent(true); }) .catch((error) => { // 错误处理 console.log(error); }); }; return ( <div> <button onClick={loadComponent}>Load Component</button> {showComponent && <MyComponent />} </div> ); } export default App; \",\"在上面的例子中，通过动态导入（import）的方式异步加载MyComponent组件。点击按钮时，触发loadComponent函数，在加载完成后通过设置showComponent状态变量来显示组件。\",\"懒加载和按需加载都是优化前端性能的重要手段，可以根据实际需求和场景选择合适的技术来延迟加载、降低初始加载时间，提升用户体验。\"]},\"52\":{\"h\":\"使用Memoized函数和记忆化技术\",\"t\":[\"Memoized函数和记忆化技术是一种优化方法，可以有效地缓存函数的结果，避免重复计算，提高性能。下面我将介绍使用Memoized函数和记忆化技术的概念及实现方法。\",\"Memoized函数： Memoized函数是指在函数的计算过程中，将函数的输入和对应的输出结果进行缓存，以便在后续调用中可以直接返回缓存结果，避免重复计算。\",\"在JavaScript中，可以通过闭包、高阶函数或使用第三方库（如lodash）来实现Memoized函数。\",\"function memoizedFunction(func) { const cache = {}; return function(...args) { const key = JSON.stringify(args); if (cache[key]) { return cache[key]; } else { const result = func(...args); cache[key] = result; return result; } }; } // 示例使用 const memoizedAdd = memoizedFunction((x, y) => { console.log(\\\"Calculating...\\\"); return x + y; }); console.log(memoizedAdd(1, 2)); // 第一次计算，并返回 3 console.log(memoizedAdd(1, 2)); // 直接返回缓存结果 3 console.log(memoizedAdd(2, 3)); // 第一次计算，并返回 5 \",\"在上面的例子中，memoizedFunction函数接受一个普通的函数作为参数，并返回一个新的函数。新函数使用闭包保存一个缓存对象cache，在每次调用时，根据参数生成一个唯一的key，然后检查缓存中是否存在对应的结果，如果存在则直接返回缓存结果，否则计算函数结果并保存到缓存中。\",\"记忆化技术： 记忆化技术是一种通用的优化技术，它可以应用于各种复杂的计算过程，包括递归函数、动态规划等。记忆化技术通过缓存中间结果，避免重复计算，提高执行效率。\",\"在JavaScript中，可以使用Memoized函数或使用函数装饰器等方式来实现记忆化技术。\",\"// Memoized函数的例子 function fibonacci(n) { if (n === 0 || n === 1) { return n; } return fibonacci(n - 1) + fibonacci(n - 2); } const memoizedFibonacci = memoizedFunction(fibonacci); console.log(memoizedFibonacci(10)); // 第一次计算，并返回结果 console.log(memoizedFibonacci(10)); // 直接返回缓存结果 // 装饰器的例子 function memoize(target, name, descriptor) { const originalMethod = descriptor.value; const cache = {}; descriptor.value = function(...args) { const key = JSON.stringify(args); if (cache[key]) { return cache[key]; } else { const result = originalMethod.apply(this, args); cache[key] = result; return result; } }; return descriptor; } class MyClass { @memoize fibonacci(n) { if (n === 0 || n === 1) { return n; } return this.fibonacci(n - 1) + this.fibonacci(n - 2); } } const myObj = new MyClass(); console.log(myObj.fibonacci(10)); // 第一次计算，并返回结果 console.log(myObj.fibonacci(10)); // 直接返回缓存结果 \",\"在上面的例子中，fibonacci函数使用Memoized函数的方式进行记忆化，缓存了中间计算结果，避免重复计算。另外，通过使用装饰器，可以在类的方法上应用记忆化技术，实现类似的效果。\",\"Memoized函数和记忆化技术可以应用于任何需要缓存的函数计算过程，可以在性能敏感的场景中显著提升程序的执行效率。但需要注意，记\"]},\"53\":{\"h\":\"使用分页和虚拟滚动\",\"t\":[\"分页和虚拟滚动是两种常用的优化技术，用于处理大量数据的展示和滚动问题。下面我将介绍分页和虚拟滚动的概念和实现方法。\",\"分页： 分页是将大量的数据划分为多个页面进行展示的一种方式。每个页面只包含一部分数据，可以通过点击页面切换或使用页码进行导航。分页可以减少一次性加载大量数据而导致的性能问题，同时使用户能够更方便地浏览和操作数据。\",\"在前端开发中，可以使用库或框架提供的分页组件实现分页功能，也可以自行编写代码进行分页逻辑实现。一般的分页实现包括以下几个步骤：\",\"根据数据总量和每页显示的数据量计算总页数。\",\"根据当前页数和每页显示的数据量计算当前页面的数据范围。\",\"根据当前页面的数据范围从整个数据集合中筛选出要展示的数据。\",\"使用分页组件或自定义UI展示当前页面的数据，并提供翻页功能。\",\"虚拟滚动： 虚拟滚动是一种技术，用于优化大量数据的滚动展示。通常情况下，滚动容器（如列表或表格）中的所有数据都会被渲染到DOM中，这会导致性能问题，尤其是在数据量很大的情况下。虚拟滚动通过只渲染可见部分的数据，而延迟渲染不可见部分，从而减少DOM的数量和渲染开销，提高滚动的性能和响应速度。\",\"在前端开发中，可以使用现成的虚拟滚动库或自行编写代码实现虚拟滚动。一般的虚拟滚动实现包括以下几个步骤：\",\"获取滚动容器的可见高度。\",\"根据每条数据的高度和总数据量，计算出滚动容器的实际高度。\",\"根据滚动容器的滚动位置，计算出当前可见的数据范围。\",\"只渲染当前可见数据范围内的数据到DOM中，延迟渲染不可见部分的数据。\",\"动态调整滚动容器的实际高度，以适应总数据量的变化。\",\"监听滚动事件，根据滚动位置的变化更新可见数据范围。\",\"虚拟滚动可以极大地优化大量数据的滚动展示性能，减少DOM操作和渲染开销。常见的虚拟滚动库包括React Virtualized、Vue Virtual Scroller等。\",\"综上所述，分页和虚拟滚动是处理大量数据展示和滚动问题的常用优化技术。通过使用分页和虚拟滚动，可以提高用户体验并减少性能问题。\"]},\"54\":{\"h\":\"图片优化\",\"t\":[\"图片优化是为了减小图片的文件大小，提高网页加载速度和用户体验的一种常用技术。下面我将介绍几种常见的图片优化方法：\",\"压缩图片： 压缩图片是最常见也是最有效的图片优化方法之一。可以使用图片编辑工具（如Adobe Photoshop、GIMP等）或在线图片压缩工具压缩图片的文件大小，减少图片的质量损失。常用的压缩方法包括无损压缩和有损压缩。无损压缩通过去除图片中的冗余数据和无用信息来减小文件大小，而不会损失图片的视觉质量。有损压缩则是通过牺牲一定程度的视觉质量来进一步减小文件大小。\",\"使用适当的图片格式： 选择适当的图片格式也是图片优化的重要一环。不同的图片格式适合不同的场景和要求。常见的图片格式包括JPEG、PNG和GIF等。\",\"JPEG（或JPG）是一种有损压缩的格式，适用于展示照片和复杂的图像，能够在保持较高视觉质量的同时减小文件大小。\",\"PNG是一种无损压缩的格式，适用于展示简单的图像和含有透明背景的图像，提供较高的视觉质量和细节清晰度。\",\"GIF适用于展示简单动画和带有透明背景的图像，但是在颜色深度和视觉质量方面较JPEG和PNG有限。\",\"选择适当的图片格式可以在保证视觉质量的同时减小文件大小，提高网页加载速度。\",\"使用合适的图片尺寸： 将图片调整为合适的尺寸也是一种优化图片的方法。使用原始图片尺寸展示一张小图会导致浪费带宽和加载时间，而将一张大图缩小展示会导致图片失真等问题。通过裁剪或调整图片尺寸，可以保持图片在网页上的展示效果，同时减小文件大小。\",\"图片懒加载： 图片懒加载是一种延迟加载图片的技术，在页面滚动到可见范围时再进行图片加载。这种方式可以减少页面的初始加载时间和带宽占用，提高页面的响应速度。常见的图片懒加载库有LazyLoad和Intersection Observer API。\",\"使用CSS精灵图或矢量图： CSS精灵图（CSS Sprite）是将多个小图标或图片合并成一张图片，并通过CSS的background-image和background-position属性进行展示。这样可以减少多个小图片的请求，提高加载速度。另外，使用矢量图形（如SVG）也可以减小文件大小，同时保持较高的视觉质量和缩放性能。\",\"总结起来，通过压缩图片、选择适当的图片格式、调整图片尺寸、懒加载和使用CSS精灵图或矢量图等方法，可以有效地优化网页中的图片，提高网页加载速度和用户体验。\"]},\"55\":{\"h\":\"缓存和数据请求优化\",\"t\":[\"缓存和数据请求优化是在前端开发中常用的性能优化技术，可以减少服务器的负载和提高页面加载速度。下面我将介绍缓存和数据请求优化的一些常见方法：\",\"浏览器缓存： 浏览器缓存是浏览器将网页资源（如HTML、CSS、JavaScript和图片等）保存在本地的一种机制。当浏览器再次请求相同的资源时，可以直接从本地缓存中获取，减少服务器的请求和数据传输。通过设置合适的缓存策略，可以控制资源的缓存时间和缓存行为，提高页面加载速度。常见的缓存策略包括设置Cache-Control头，通过使用ETag和Last-Modified来实现缓存验证等。\",\"数据缓存： 除了浏览器缓存外，还可以在前端代码中手动实现数据缓存，将从服务器获取的数据保存在内存中或本地存储（如localStorage或sessionStorage）中。在后续需要使用相同数据的时候，可以直接从缓存中获取，减少重复的数据请求和服务器的负载。\",\"减少请求次数： 通过合理的资源合并和压缩，可以减少页面中的请求数量，从而降低服务器的负载和提高页面加载速度。常见的优化方法包括合并多个CSS或JavaScript文件成一个文件，压缩CSS和JavaScript代码，使用雪碧图和矢量图等。另外，可以使用HTTP/2的多路复用特性，将多个请求合并在一个TCP连接中，减少请求的延迟。\",\"数据请求优化： 在发送数据请求时，可以通过以下几种方式进行优化：\",\"使用CDN（内容分发网络）：将静态资源部署到全球分布的CDN节点上，可以提供更快的访问速度和稳定性。\",\"采用异步请求：使用异步请求（如Ajax）可以在后台发送请求，不影响页面的加载和渲染，提高用户体验。\",\"使用分页和懒加载：对于大数据量的列表或图片资源，可以采用分页加载和懒加载的策略，仅在需要时请求和加载数据，减少不必要的数据传输和加载时间。\",\"数据预取和预加载：根据用户的行为和页面展示的需求，提前请求和加载可能需要的数据，以提高用户体验。\",\"综上所述，缓存和数据请求优化是优化前端性能的关键技术。通过合理设置浏览器缓存和数据缓存，减少请求次数，优化数据请求等方法，可以提升页面加载速度，减轻服务器负载，提高用户体验。\"]},\"56\":{\"h\":\"代码拆分和模块化\",\"t\":[\"代码拆分和模块化是一种组织和管理代码的方法，旨在提高代码的可维护性、可读性和可重用性。下面我将介绍代码拆分和模块化的概念和实践方法。\",\"代码拆分： 代码拆分是将大型代码库或应用程序拆分为更小、更可管理的部分的过程。通过代码拆分，可以将复杂的功能划分为独立的模块、文件或组件，以便更好地组织和维护代码。常见的代码拆分方法包括：\",\"文件拆分：将不同功能或不同模块的代码分别放入不同的文件中，方便代码阅读和维护。\",\"组件拆分：根据UI组件的功能和复用性，将整个应用程序拆分为多个独立的组件，可独立开发和测试。\",\"模块化拆分：将代码按照功能或逻辑进行模块化拆分，每个模块负责特定的功能，通过模块之间的接口交互和协作。\",\"通过代码拆分，可以改善代码的可读性、可维护性和可扩展性，减少代码间的依赖性，方便团队协作。\",\"模块化： 模块化是一种思想和实践，将代码划分为独立、可组合和可重用的模块。模块化的好处包括：\",\"代码复用：通过将功能封装为模块，可以在不同的项目和场景中多次使用，减少重复开发的工作量。\",\"维护性和可扩展性：模块的独立性使得修改和维护更加容易，且可以根据需求方便地添加、删除或替换模块。\",\"可测试性：模块化的代码更容易进行单元测试，因为每个模块可以独立测试。\",\"在前端开发中，常见的模块化规范包括CommonJS、AMD（异步模块定义）、ES6模块等。模块化的实现可以借助模块加载器（如RequireJS、Webpack、Rollup等）或构建工具来管理依赖和编译模块化的代码。\",\"模块化还有一种更高级的概念，即组件化。组件化是将模块化应用到用户界面（UI）开发中，将UI划分为独立、可重用的组件。通过组件化开发，可以实现UI在不同页面和应用中的复用，提高开发效率和UI一致性。\",\"总结起来，代码拆分和模块化是一种组织和管理代码的方法。通过代码拆分，可以将复杂的代码库或应用程序划分为更小、更可管理的部分。而模块化则可以将代码划分为独立、可组合和可重用的模块，提高代码的可维护性和可重用性。\"]},\"57\":{\"h\":\"使用Web Workers\",\"t\":[\"Web Workers是HTML5提供的一项技术，可以在浏览器中运行后台线程，以实现并行计算和在后台处理耗时任务，而不会阻塞主线程，提高页面的响应性。下面我将介绍如何使用Web Workers。\",\"创建Web Worker： 首先，通过JavaScript代码创建一个Web Worker。可以使用以下方式创建一个Web Worker：\",\"// 创建一个新的Web Worker var worker = new Worker('worker.js'); \",\"这里的worker.js是Web Worker的脚本文件。\",\"编写Web Worker脚本： 在上一步创建的Web Worker脚本文件（例如worker.js）中，编写需要在后台执行的任务代码。注意，Web Worker脚本中不能直接访问DOM元素，因为它在主线程之外执行。\",\"一个简单的Web Worker脚本示例：\",\"// worker.js // 监听来自主线程的消息 self.onmessage = function(event) { // 获取主线程传递的数据 var data = event.data; // 在后台执行耗时任务 var result = timeConsumingTask(data); // 将处理结果发送回主线程 self.postMessage(result); }; // 后台耗时任务 function timeConsumingTask(data) { // 处理耗时任务... return result; } \",\"主线程与Web Worker通信： 在主线程中，可以通过消息传递的方式与Web Worker进行通信。主线程可以向Web Worker发送消息，并接收来自Web Worker的响应。\",\"向Web Worker发送消息的示例：\",\"// 向Web Worker发送消息 worker.postMessage(data); \",\"在Web Worker中，可以通过self.onmessage监听来自主线程的消息，并通过self.postMessage将结果发送回主线程。\",\"处理Web Worker的响应： 在主线程中，可以通过监听Web Worker的message事件来处理来自Web Worker的响应。\",\"处理Web Worker响应的示例：\",\"// 监听Web Worker的响应 worker.onmessage = function(event) { // 获取Web Worker传递的数据 var result = event.data; // 处理Web Worker的响应 // ... }; \",\"通过Web Worker，可以将耗时的计算和处理任务移到后台线程中进行，从而不会阻塞主线程，提高页面的响应性能。但需要注意，由于Web Worker运行在另一个线程中，因此不能直接访问主线程的全局变量和DOM元素。如果需要与主线程进行通信，可以使用消息传递的方式。\"]},\"58\":{\"h\":\"使用性能分析工具\",\"t\":[\"性能分析工具是开发者用来评估和改进应用程序性能的工具。它可以帮助开发者找到应用程序中的性能瓶颈，并提供有关代码执行、资源加载、网络请求等方面的详细信息。下面我将介绍几种常见的性能分析工具及其使用方法。\",\"浏览器开发者工具： 现代的浏览器都提供了内置的开发者工具，其中包含了一些性能分析功能，常用的有以下几种：\",\"Performance：提供了性能分析和时间线记录功能，可以查看应用程序的资源加载、代码执行、渲染时间等信息。\",\"Network：用于分析网络请求和响应，包括请求时间、资源大小等。\",\"Memory：用于分析内存使用情况，检测内存泄漏问题。\",\"通过打开浏览器开发者工具，可以在\\\"Performance\\\"或\\\"Network\\\"选项卡下进行性能分析，一般可以通过录制或刷新页面来开始分析过程。\",\"Lighthouse： Lighthouse是一个由Google开发的开源工具，可以对网站或Web应用进行综合性能评估，它会检查多个方面的性能指标，并提供改进建议。Lighthouse可以通过Chrome浏览器的开发者工具使用，也可以在命令行上使用。\",\"通过Chrome浏览器的开发者工具，选择\\\"Lighthouse\\\"选项卡，点击\\\"Generate report\\\"按钮即可生成性能评估报告。Lighthouse会评估网页的性能、可访问性、PWA特性等内容，并给出相应的分数和改进建议。\",\"WebPageTest： WebPageTest是一个基于云的性能分析工具，可以测试网页在不同地点和设备上的加载速度和性能，提供了更详细的性能指标和测试报告。你可以在WebPageTest网站上输入网页URL并选择测试配置，然后启动测试。\",\"测试完成后，WebPageTest将提供详细的性能指标、加载时间线、资源统计等信息，还可以和其他测试结果进行比较，以帮助开发者分析和优化性能。\",\"除了上述工具，还有一些其他的性能分析工具，如GTmetrix、PageSpeed Insights等，它们提供了更多额外的性能分析和改进建议。\",\"综上所述，性能分析工具是开发者用来评估网页或应用程序性能的工具，可以通过浏览器开发者工具、Lighthouse、WebPageTest等工具来进行性能分析，并根据分析结果进行优化改进。\"]},\"59\":{\"h\":\"Vue\"},\"60\":{\"h\":\"介绍\",\"t\":[\"(发音为 /vjuː/，类似 view) 是一款用于构建用户界面的 JavaScript 框架。它基于标准 HTML、CSS 和 JavaScript 构建，并提供了一套声明式的、组件化的编程模型，帮助你高效地开发用户界面。无论是简单还是复杂的界面，都可以胜任。\"]},\"61\":{\"h\":\"渐进式框架\",\"t\":[\"是一个框架，也是一个生态。其功能覆盖了大部分前端开发常见的需求。但 Web 世界是十分多样化的，不同的开发者在 Web 上构建的东西可能在形式和规模上会有很大的不同。考虑到这一点，的设计非常注重灵活性和“可以被逐步集成”这个特点。根据你的需求场景，你可以用不同的方式使用 Vue：\",\"无需构建步骤，渐进式增强静态的 HTML\",\"在任何页面中作为 Web Components 嵌入\",\"单页应用 (SPA)\",\"全栈 / 服务端渲染 (SSR)\",\"Jamstack / 静态站点生成 (SSG)\",\"开发桌面端、移动端、WebGL，甚至是命令行终端中的界面\"]},\"62\":{\"h\":\"MVVM模型\",\"t\":[\"MVVM 是一种软件架构模式，它将软件界面显示分离为两个部分：视图层和模型层。视图层负责界面的显示，模型层负责页面的逻辑操作。 MVVM 模式和 MVC 模式一样，也是模型 - 视图 - 控制器（Model-View-Controller）的简写。 MVVM 模式和 MVC 模式的不同之处在于它实现了视图（View）和模型（Model）的数据绑定。\"]},\"63\":{\"h\":\"SPA单页面应用\",\"t\":[\"单页面应用（SPA）是指在Web应用程序中，整个应用的UI只有一个HTML页面，通过使用JavaScript和动态更新页面的方式，实现不同视图之间的切换，而无需进行页面的完整重载。\",\"在传统的多页面应用中，每次导航到不同的页面时，服务器都会传输新的HTML页面。而在SPA中，初始的HTML页面中会加载所需的JavaScript和CSS资源，然后通过JavaScript动态地更新页面内容。\",\"Vue作为一种现代的JavaScript框架，非常适合构建SPA。它提供了路由功能（Vue Router）和 组件化开发（Vue Components）等核心特性，使得开发者可以轻松地构建和管理SPA应用。\",\"在Vue的SPA中，通过Vue Router进行路由管理，将不同的视图映射到不同的URL，并在URL的变化时，加载对应的组件来更新页面的内容。这种动态的更新方式，使得用户在使用应用时可以获得更流畅的页面切换体验。\",\"SPA的优势包括：\",\"更快速的页面导航和响应速度，因为无需每次都从服务器加载新的HTML页面。\",\"更好的用户体验，通过无需页面刷新即可实现页面切换，用户感知的页面加载时间更短。\",\"更好的组件化和模块化，将应用程序拆分为多个组件，便于维护和重用。\",\"可以使用前端框架提供的功能来处理路由、状态管理和数据响应等问题，提高开发效率。\",\"需要注意的是，SPA也有一些限制和挑战，如对搜索引擎优化 (SEO) 的支持不如传统多页面应用，以及前端资源的加载过程需要特别注意，以防止过大的初始页面加载和性能问题。\",\"总结而言，SPA是一种通过动态更新页面的方式切换视图的Web应用程序架构，Vue提供了丰富的功能和工具来构建SPA。\"]},\"64\":{\"h\":\"第一个Vue应用\"},\"65\":{\"h\":\"引入Vue.js\",\"t\":[\"<script src=\\\"https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js\\\"></script> \"]},\"66\":{\"h\":\"声明式渲染\",\"t\":[\"<div id=\\\"app\\\"> {{ message }} </div> \"]},\"67\":{\"h\":\"创建Vue实例\",\"t\":[\"实例是 应用的入口。\",\"const app =new Vue({ data() { return { message: 'Hello Vue!' } } }) app.mount('#app') \",\"这样你的第一个vue应用就创建好了，你可以看到页面上的hello world，接下来该正式踏入Vue之旅了 🎉\"]},\"68\":{\"h\":\"模板语法\",\"t\":[\"Vue.js 使用一种基于 HTML 的模板语法，使我们能够声明式地将其组件实例的数据绑定到呈现的 DOM 上。所有的 模板都是语法层面合法的 HTML,可以被符合规范的浏览器和 HTML 解析器解析。在底层机制中，会将模板编译成高度优化的 JavaScript 代码，然后在运行时将其转换为虚拟 DOM 并进行渲染。\"]},\"69\":{\"h\":\"插值\",\"t\":[\"数据绑定最常见的形式就是使用“Mustache”语法 (双大括号) 的文本插值 每次更新message的值，插值处的内容都会更新\",\"<div id=\\\"app\\\"> {{ message }} </div> \"]},\"70\":{\"h\":\"指令\",\"t\":[\"指令 (Directives) 是带有 v- 前缀的特殊属性。\",\"v-bind: 指令用于响应式地更新 HTML 属性\",\"<div id=\\\"app-2\\\"> <span v-bind:title=\\\"message\\\">鼠标悬停几秒钟查看此处动态绑定的提示信息！</span> 可以简写成 <span :title=\\\"message\\\">鼠标悬停几秒钟查看此处动态绑定的提示信息！</span> </div> <script> var app2 = new Vue({ el: '#app-2', data: { message: '页面加载于 ' + new Date().toLocaleString() } }) </script> \",\"v-on:指令用于监听 DOM 事件\",\"<div id=\\\"app-2\\\"> <p>{{ message }}</p> <button v-on:click=\\\"reverseMessage\\\">逆转消息</button> 可以简写成 <button @click=\\\"reverseMessage\\\">逆转消息</button> </div> <script> var app2 = new Vue({ el: '#app-2', data: { message: 'Hello Vue.js!' }, methods: { reverseMessage: function () { this.message = this.message.split('').reverse().join('') } } }) </script> \",\"事件修饰符\",\".stop\",\".prevent\",\".capture\",\".self\",\".once\",\".passive\",\" <!-- 阻止单击事件继续传播 --> <a v-on:click.stop=\\\"doThis\\\"></a> <!-- 提交事件不再重载页面 --> <form v-on:submit.prevent=\\\"onSubmit\\\"></form> <!-- 修饰符可以串联 --> <a v-on:click.stop.prevent=\\\"doThat\\\"></a> <!-- 只有修饰符 --> <form v-on:submit.prevent></form> <!-- 添加事件监听器时使用事件捕获模式 --> <!-- 即内部元素触发的事件先在此处理，然后才交由内部元素进行处理 --> <div v-on:click.capture=\\\"doThis\\\">...</div> <!-- 只当在 event.target 是当前元素自身时触发处理函数 --> <!-- 即事件不是从内部元素触发的 --> <div v-on:click.self=\\\"doThat\\\">...</div> <!-- 点击事件将只会触发一次 --> <a v-on:click.once=\\\"doThis\\\"></a> <!-- 滚动事件的默认行为 (即滚动行为) 将会立即触发 --> <!-- 而不会等待 `onScroll` 完成 ,能够提升移动端的性能 --> <!-- 这其中包含 `event.preventDefault()` 的情况 --> <div v-on:scroll.passive=\\\"onScroll\\\">...</div> \",\"v-model: 指令在表单控件元素上创建双向数据绑定\",\"<div id=\\\"app-2\\\"> <p>{{ message }}</p> <input v-model=\\\"message\\\"> </div> <script> var app2 = new Vue({ el: '#app-2', data: { message: 'Hello Vue!' } }) </script> \",\"v-if :指令用于条件性地渲染一块内容\",\"<div id=\\\"app-2\\\"> <p v-if=\\\"seen\\\">现在你看到我了</p> <p v-else>你又看到我了</p> </div> <script> var app2 = new Vue({ el: '#app-2', data: { seen: true } }) </script> \",\"v-show: 指令根据表达式的真假值，切换元素的 display 属性\",\"<div id=\\\"app-2\\\"> <p v-show=\\\"ok\\\">Hello!</p> </div> <script> var app2 = new Vue({ el: '#app-2', data: { ok: false } }) </script> \",\"v-if 和 v-show 的区别\",\"v-if 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。\",\"v-if 也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。\",\"v-show 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。\",\"v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。 所以，如果需要非常频繁地切换，则使用 v-show 较好；如果在运行时条件很少改变，则使用 v-if 较好。\",\"v-for: 指令基于一个数组(对象)来渲染一个列表\",\"数组\",\"<div id=\\\"app-2\\\"> <ol> <li v-for=\\\"todo in todos\\\" :key=\\\"todo.text\\\"> {{ todo.text }} </li> </ol> </div> <script> var app2 = new Vue({ el: '#app-2', data: { todos: [ { text: '学习 JavaScript' }, { text: '学习 Vue' }, { text: '整个牛项目' } ] } }) </script> \",\"对象\",\"<div id=\\\"app-2\\\"> <li v-for=\\\"value in object\\\" :key=\\\"value\\\"> {{ value }} </li> </div> <script> var app2 = new Vue({ el: '#app-2', data: { object: { title: 'How to do lists in Vue', author: 'Jane Doe', publishedAt: '2016-04-10' } } }) </script> \",\"v-for 中的key起什么作用，为什么要加，起什么作用\",\"在v-for指令中，key属性用于追踪和标识每个被渲染的元素，以便在DOM更新期间进行高效的元素重用和更新。\",\"key的作用有以下几点：\",\"唯一标识：key用于为每个生成的元素提供唯一的标识。Vue使用这个key来跟踪每个元素的身份，确保在重新渲染时能够正确地复用和更新元素，而不是重新创建或删除它们。\",\"提高渲染效率：在使用v-for渲染列表时，Vue使用key来检测哪些元素被添加、修改或删除。通过提供key，Vue可以准确地确定元素之间的差异，只对需要进行修改的元素进行重新渲染，而不是重新渲染整个列表，从而提高性能。\",\"解决状态保存问题：如果列表中的元素具有可变状态或用户的输入绑定，没有为每个元素提供key会导致在更新列表时出现意外的行为。例如，输入框的输入内容可能会被重新排序的元素\\\"拖拽过来\\\"导致错误地映射到不同的元素上，从而产生错误的状态。\",\"总结而言，为v-for中的元素提供key属性是一种最佳实践，它能够帮助Vue跟踪元素的身份，提高列表渲染的效率，并解决状态保存的问题。每个key应该是唯一且稳定的，通常使用数据的唯一标识符作为key值。\",\"v-html: 指令用于输出 HTML 代码\",\"<div id=\\\"app-3\\\"> <p>Using mustaches: {{ rawHtml }}</p> <p>Using v-html directive: <span v-html=\\\"rawHtml\\\"></span></p> </div> <script> var app3 = new Vue({ el: '#app-3', data: { rawHtml: '<span style=\\\"color: red\\\">This should be red.</span>' } }) </script> \",\"v-pre: 指令跳过元素和它的子元素的编译过程。\",\"<span v-pre>{{ this will not be compiled }}</span> \",\"v-cloak: 指令保持在元素上直到关联实例结束编译\",\"<div id=\\\"app-4\\\" v-cloak> <p>{{ message }}</p> </div> <script> var app4 = new Vue({ el: '#app-4', data: { message: 'Hello Vue.js!' } }) </script> \",\"v-once: 指令只渲染元素和组件一次。随后的重新渲染，元素/组件及其所有的子节点将被视为静态内容并跳过。\",\"<span v-once>This will never change: {{msg}}</span> \",\"v-text: 指令更新元素的 textContent。如果要更新部分的 textContent，需要使用 Mustache 插值。\",\"<span v-text=\\\"msg\\\"></span> <!-- 输出: \\\"Hello Vue.js!\\\" --> <span v-text=\\\"msg + '!'\\\"></span> <!-- 输出: \\\"Hello Vue.js! \\\" --> \",\"v-slot: 作用域插槽\",\"<base-layout> <template v-slot:header> <h1>Here might be a page title</h1> </template> <p>A paragraph for the main content.</p> <p>And another one.</p> <template v-slot:footer> <p>Here's some contact info</p> </template> </base-layout> \",\"自定义指令\",\"Vue自定义指令是用来操作 DOM 的。除了核心功能默认内置的指令(比如 v-model 或 v-show)之外，还允许你注册自定义的指令。有的情况下，对普通 DOM 元素进行底层操作，这时候就会用到自定义指令。\",\"注册全局指令和局部注册指令的方式不同，全局指令可以在任何地方使用，而局部注册指令只能在被注册的组件内部使用。\",\"注册自定义指令需要在 实例化之前进行，可以通过 app.config.globalProperties 或者 this.$options.globalProperties 来实现全局注册。\",\"自定义指令必须包含一个 unbind 钩子函数，用于解绑事件监听器。\",\"自定义指令必须包含一个 bind 钩子函数，用于绑定事件监听器。\",\"bind 钩子函数接收三个参数：el、binding 和 vnode。其中 el 是当前元素，binding 是当前元素上的绑定对象，vnode 是当前节点的信息。\",\"unbind 钩子函数也接收三个参数：el、binding 和 vnode。其中 el 是当前元素，binding 是当前元素上的绑定对象，vnode 是当前节点的信息。\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title>Vue自定义指令示例</title> </head> <body> <div id=\\\"app\\\"> <input v-focus /> </div> <script src=\\\"https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js\\\"></script> <script> Vue.directive('focus', { bind(el) { el.addEventListener('focus', function() { console.log('input focused'); this.blur(); // 防止浏览器默认行为聚焦到其他元素上 }) }, unbind(el) { el.removeEventListener('focus') } }); const app = new Vue({ el: '#app', data: {}, methods: {}, directives: { 'focus': true // 将全局指令注册为局部指令，使其只在当前组件中生效 } }); </script> </body> </html> \",\"在这个例子中，我们注册了一个名为 v-focus 的全局指令。当一个 input 元素被 插入到 DOM 中后，它会被自动聚焦。这个指令在组件内部使用时，需要在 setup 标签内使用 onMounted 钩子函数来实现。同时，我们还使用了 Vue.directive() 方法来注册全局指令和局部指令。\"]},\"71\":{\"h\":\"计算属性与侦听器\"},\"72\":{\"h\":\"计算属性（computed）\"},\"73\":{\"h\":\"介绍\",\"t\":[\"计算属性是基于它们的依赖进行缓存的。\",\"计算属性是可缓存的，只有当它的依赖项发生改变时，才会重新计算。\",\"计算属性默认只有 getter，不过在需要时也可以提供一个 setter。\"]},\"74\":{\"h\":\"示例\",\"t\":[\"<div id=\\\"example\\\"> <p>Original message: \\\"{{ message }}\\\"</p> <p>Computed reversed message: \\\"{{ reversedMessage }}\\\"</p> </div> \",\"var vm = new Vue({ el: '#example', data: { message: 'Hello' }, computed: { // 计算属性的 getter reversedMessage: function () { // `this` 指向 vm 实例 return this.message.split('').reverse().join('') } } }) \"]},\"75\":{\"h\":\"侦听器\"},\"76\":{\"h\":\"介绍\",\"t\":[\"侦听器可以用来监听数据的变化，并执行相应的操作。\",\"侦听属性是可异步的，且当需要在数据变化时执行异步或开销较大的操作时，该方法是最有用的。\"]},\"77\":{\"h\":\"示例\",\"t\":[\"<div id=\\\"watch-example\\\"> <p>Message: \\\"{{ message }}\\\"</p> <button v-on:click=\\\"reverseMessage\\\">Reverse Message</button> </div> \",\"var vm = new Vue({ el: '#watch-example', data: { message: 'Hello' }, watch: { // whenever `message` changes, `handler` will be called message: function (newValue, oldValue) { console.log('The message was changed!') console.log('Old message: ' + oldValue) console.log('New message: ' + newValue) } } }) \"]},\"78\":{\"h\":\"计算属性，侦听器，方法三者之间的区别\",\"t\":[\"计算属性是基于它们的依赖进行缓存的，只有在它的依赖发生改变时才会重新求值。\",\"侦听器，方法，计算属性都是用来监听数据的改变，并执行相应的操作。\",\"计算属性适用于计算值，侦听器适用于异步操作。\"]},\"79\":{\"h\":\"Class与Style的绑定\"},\"80\":{\"h\":\"Class绑定\"},\"81\":{\"h\":\"介绍\",\"t\":[\"绑定class样式，可以利用v-bind:class来实现。\",\"绑定的数据对象，可以是一个对象，也可以是数组。\"]},\"82\":{\"h\":\"写法\",\"t\":[\"对象语法\",\"第一种写法\",\"<div id=\\\"class-object\\\"> <div class=\\\"static\\\" v-bind:class=\\\"{ active: isActive, 'text-danger': hasError }\\\" ></div> </div> <script> new Vue({ el:'#class-object', data:{ isActive: true, hasError: false } }) </script> \",\"在这个例子中，我们使用了一个对象字面量 { active: isActive, 'text-danger': hasError } 作为 v-bind:class 的值。这个对象包含了两个属性：active 和 'text-danger',它们的值分别来自 实例的 isActive 和 hasError 数据属性。\",\"当 isActive 为真时，active 类将被添加到元素上；当 hasError 为真时，text-danger 类也将被添加到元素上。如果两个条件都不满足，则不会添加任何类。\",\"这种方式可以方便地动态地切换元素的类，而不需要手动为每个可能的状态编写多个样式规则。 结果渲染为\",\"<div class=\\\"static active\\\"></div> \",\"第二种写法\",\" <div v-bind:class=\\\"classObject\\\"></div> \",\" data: { classObject: { active: true, 'text-danger': false, }, }, \",\"在这个例子中，我们将一个对象字面量 { active: true, 'text-danger': false } 作为 v-bind:class 的值。这个对象包含了两个属性：active 和 'text-danger',它们的值分别表示是否应该添加对应的类名。\",\"当 active 为真时，active 类名将被添加到元素上；当 'text-danger' 为真时，text-danger 类名也将被添加到元素上。如果两个条件都不满足，则不会添加任何类名。\",\"结果渲染：和上面的结果一样\",\"数组语法\",\" <div id=\\\"class-object\\\"> <div v-bind:class=\\\"[activeClass, errorClass]\\\"></div> </div> <script> new Vue({ el: '#class-object', data: { activeClass: 'active', errorClass: 'text-danger', }, }); </script> \",\"在这个例子中，我们使用了数组语法 [activeClass, errorClass] 作为 v-bind:class 的值。这个数组包含了两个元素：activeClass 和 errorClass,它们的值分别表示要添加到元素上的类名。\",\"当 实例的 activeClass 为真时，active 类名将被添加到元素上；当 errorClass 为真时，text-danger 类名也将被添加到元素上。如果两个条件都不满足，则不会添加任何类名。\",\"结果渲染为\",\" <div class=\\\"active text-danger\\\"></div> \",\"根据条件列表切换class\",\" <div v-bind:class=\\\"[isActive ? activeClass : '', errorClass]\\\"></div> \",\" <div v-bind:class=\\\"[{ active: isActive }, errorClass]\\\"></div> \",\"这两个例子都是使用数组语法 [classObject, errorClass] 或对象语法 { active: isActive } 作为 v-bind:class 的值。\",\"在第一个例子中，我们使用了三元运算符来动态地决定是否添加 activeClass 类名。如果 isActive 为真，则添加 activeClass 类名；否则不添加任何类名。\",\"在第二个例子中，我们使用了对象语法来动态地决定是否添加 active 类名。如果 isActive 为真，则添加 active 类名；否则不添加任何类名。\",\"这种方式也可以写成 { active: true },其中 true 可以替换为任意真实值。\",\"和上面的渲染结果一样\"]},\"83\":{\"h\":\"Style绑定\"},\"84\":{\"h\":\"介绍\",\"t\":[\"绑定style，可以利用v-bind:style实现。\",\"绑定的数据对象，可以是一个对象，也可以是数组。\"]},\"85\":{\"h\":\"写法\",\"t\":[\"对象写法\",\" <div v-bind:style=\\\"{ color: activeColor, fontSize: fontSize + 'px' }\\\"></div> \",\"在这个例子中，我们将 color 和 fontSize 作为属性名传递给 v-bind:style,并将它们与动态计算的值绑定在一起。这样，当 activeColor 或 fontSize 发生变化时，元素的样式也会相应地更新。\",\"数组写法\",\" <div v-bind:style=\\\"[baseStyles, overridingStyles]\\\"></div> \",\"在这个例子中，我们使用了数组语法 [baseStyles, overridingStyles] 作为 v-bind:style 的值。这个数组包含了两个元素：baseStyles 和 overridingStyles,它们的值分别表示基础样式和覆盖样式。\",\"当 实例的数据发生变化时，会自动将这些样式应用到对应的元素上。如果两个样式对象中有相同的属性，则后面的样式对象会覆盖前面的样式对象中的属性值。\"]},\"86\":{\"h\":\"过滤器\",\"t\":[\"Vue过滤器是 中的一个特性，作用是用于对文本进行格式化的作用。过滤器分为全局过滤器和私有过滤器(本地过滤器)两种。全局过滤器可以在任何地方使用，而私有过滤器只能在当前组件中使用。\",\"下面是 过滤器的使用方法及注意事项：\",\"注册过滤器：Vue.filter(name, callback) 或 new Vue({ filters: {} })\",\"使用过滤器：{{ xxx | filterName }} 或 v-bind:属性=\\\"xxx | filterName\\\"\",\"注意：过滤器不会修改数据，只是改变用户看到的输出(效果)\",\" Vue.filter('capitalize', function(value) { if (!value) return ''; value = value.toString(); return value.charAt(0).toUpperCase() + value.slice(1); }); \",\"在上面的代码中，我们定义了一个名为 capitalize 的过滤器，它的作用是将输入的字符串首字母大写。在模板中使用时，可以像下面这样调用：\",\"<p>{{ message | capitalize }}</p> \"]},\"87\":{\"h\":\"生命周期\",\"t\":[\"生命周期是指 实例对象从创建之初到销毁的过程，所有功能的实现都是围绕其生命周期进行的。在生命周期的不同阶段调用对应的钩子函数可以实现组件数据管理和 DOM 渲染两大重要功能。\",\"以下是 生命周期的详细解析：\",\"beforeCreate:在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用。\",\"created:实例已创建，数据观测 (data observer) 和 event/watcher 事件配置已经完成，但还未挂载 DOM 之前被调用。\",\"beforeMount:在挂载开始之前被调用：相关的 render 函数首次被调用。\",\"mounted:实例已经挂载到 DOM,可以访问到 el 节点上，但是还没有开始渲染模板时被调用。\",\"beforeUpdate:数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。\",\"updated:由于数据更改导致的重新渲染和打补丁已经完成，DOM 更新后调用。\",\"beforeDestroy:实例销毁之前调用。在这一步，实例仍然完全可用。\",\"destroyed:实例销毁后调用。调用后，实例指示的所有东西都会解绑定，所有的事件监听器都会被移除，所有的子实例也会被解挂载 。\",\"图示\",\"生命周期\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <title>Vue生命周期示例</title> </head> <body> <div id=\\\"app\\\"> {{ message }} </div> <script src=\\\"https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js\\\"></script> <script> const app = new Vue({ el: '#app', data: { message: 'Hello Vue!' }, beforeCreate() { console.log('beforeCreate') }, created() { console.log('created') }, beforeMount() { console.log('beforeMount') }, mounted() { console.log('mounted') }, beforeUpdate() { console.log('beforeUpdate') }, updated() { console.log('updated') }, beforeDestroy() { console.log('beforeDestroy') }, destroyed() { console.log('destroyed') } }) </script> </body> </html> \",\"在这个例子中，我们创建了一个 实例，并在每个生命周期钩子函数中添加了一些日志输出。这些生命周期钩子函数包括 beforeCreate、created、beforeMount、mounted、beforeUpdate、updated、beforeDestroy 和 destroyed,它们分别在不同的阶段被调用。\"]},\"88\":{\"h\":\"脚手架\",\"t\":[\"脚手架（CLI）是 Vue.js 官方提供的脚手架工具，用于快速创建和管理 Vue.js 项目。使用 vue 脚手架可以简化项目创建、配置和维护的过程，提高开发效率。以下是使用 vue 脚手架创建和管理 Vue.js 项目的步骤：\",\"安装 Node.js：首先确保你安装了 Node.js。你可以从 下载并安装 Node.js。\",\"安装 vue 脚手架：打开命令行工具，全局安装 vue 脚手架。输入以下命令：\",\"npm install -g @vue/cli \",\"等待安装结束，脚手架就安装好了 项目运行步骤：\",\"创建一个新项目：在命令行工具中，导航到要创建项目的目录，然后输入以下命令创建一个新项目：\",\"vue create my-project \",\"将 my-project 替换为你的项目名称。这将创建一个新的项目文件夹，并自动安装所需的依赖项。\",\"进入项目目录：\",\"cd my-project \",\"运行项目：在项目目录中，输入以下命令启动开发服务器：\",\"npm run serve \",\"这将启动一个热重载的开发服务器。你可以在浏览器中访问 http://localhost:8080/ 查看你的 Vue.js 应用程序。\"]},\"89\":{\"h\":\"组件化\",\"t\":[\"图示\",\"组件组织\",\"组件化是一种将页面拆分成多个组件的架构模式，每个组件依赖的 CSS、JS、模板、图片等资源放在一起开发和维护，可以提高开发效率，方便重复使用，简化调试步骤。\",\"组件是可复用的 实例，所以它们与 new 接收相同的选项，例如 data、computed、watch、methods 以及生命周期钩子等。仅有的例外是像 el 这样根实例特有的选项。\"]},\"90\":{\"h\":\"定义\",\"t\":[\"在Vue中，组件可以通过Vue.component()方法或通过单文件组件（SFC）方式定义。组件可以包含模板、样式和行为逻辑，并可以在应用程序中多次使用。\",\"组件是 Vue.js 中的一个重要特性，它可以让我们将页面划分为多个部分，每个部分都是一个可重用的组件。组件的定义方式有两种：全局组件和局部组件。全局组件可以在任何地方使用，而局部组件只能在当前组件中使用。\",\"在组件中data为什么必须是个函数 这是因为组件是可以复用的，如果每个组件都使用同一个 data 对象，那么当一个组件改变了 data 的值，其它组件的 data 也会被改变， 这显然是不合理的。因此，要求 data 必须是一个函数，这样每次渲染组件时都会调用这个函数来创建一个新的 data 对象， 从而保证了组件的独立性和可复用性\"]},\"91\":{\"h\":\"组件注册\",\"t\":[\"在Vue中，可以使用全局注册和局部注册两种方式来注册组件。\",\"全局注册组件： 使用Vue的全局方法Vue.component()来注册组件。\",\"示例代码：\",\" <div id=\\\"app\\\"> <button-counter></button-counter> </div> <script> // 定义一个名为 button-counter 的新组件 Vue.component('button-counter', { data: function () { return { count: 0 } }, template: `<button v-on:click=\\\"count++\\\">You clicked me {{ count }} times.</button>` }) new Vue({ el:'#app' }) </script> \",\"在上面的例子中，使用Vue.component('button-counter', ButtonCounter)将MyComponent注册为全局组件。这样，在整个应用中就可以直接使用<button-counter>标签来引用和使用MyComponent组件了。\",\"局部注册组件： 在Vue组件中，可以通过components选项来局部注册组件。\",\"示例代码：\",\" \",\" 在上面的例子中，在components选项中将button-counter组件注册为局部组件。这样，只有当前组件及其子组件才能使用`<button-counter>`标签来引用和使用ButtonCounter组件。 >总结： >全局注册和局部注册组件都可以在Vue应用中使用组件。全局注册的组件可以在整个应用的任何地方使用，而局部注册的组件只能在指定的组件及其子组件中使用。根据项目的需求和组件的复用性，可以选择使用全局注册或局部注册来注册组件。 在 中，组件命名需要遵循以下规则： 1. 使用字母（大写或小写）、数字、连字符（-）或下划线（_）来命名组件。 2. 组件名应尽可能简洁，以便其他开发人员能够快速理解其用途。 3. 不要使用Vue内置的保留字，如data、el、$options等。 4. 组件名应遵循 PascalCase（大驼峰命名法）或 kebab-case（短横线命名法），但通常使用 PascalCase。 5. 在某些情况下，你可能需要使用多个单词来命名组件，这时可以使用 PascalCase。例如，如果你有一个名为UserProfile的组件，你可以将其命名为UserProfileComponent。 以下是一些常见的 组件命名示例： ``` js // 推荐 ComponentName UserProfileComponent ProfileListComponent // 尽量避免 componentName ComponentNameComponent ComponentName-Component \",\"在 中，通常使用单文件组件（SFC）来编写组件。SFC 的文件名应与组件名保持一致。例如，UserProfileComponent.vue。\"]},\"92\":{\"h\":\"单文件组件\",\"t\":[\"Vue.js 提供了单文件组件（SFC）的概念，这是一种简洁的组件编写方式，可以提高代码的可读性和可维护性。单文件组件由一个 .文件组成，该文件包含组件的模板、样式和逻辑。以下是一个简单的 单文件组件示例：\",\"<!-- UserProfileComponent.--> <template> <div> <h1>User Profile</h1> <p>Name: {{ user.name }}</p> <p>Age: {{ user.age }}</p> </div> </template> <script> export default { data() { return { user: { name: 'John Doe', age: 30, }, }; }, }; </script> <style scoped> /* 样式 */ </style> \",\"在这个示例中，我们创建了一个名为 UserProfileComponent 的单文件组件。组件包含一个模板、一个脚本和一些样式。在脚本中，我们定义了一个名为 user 的数据属性，其中包含用户的姓名和年龄。\",\"要使用这个单文件组件，你需要在其他 组件中导入它。例如，在另一个单文件组件中，你可以这样导入并使用 UserProfileComponent：\",\"<!-- another-component.--> <template> <div> <h1>Another Component</h1> <user-profile-component></user-profile-component> </div> </template> <script> import UserProfileComponent from './UserProfileComponent.vue'; export default { components: { UserProfileComponent, }, }; </script> \",\"这样，你就可以在 应用程序中使用和复用这个单文件组件了。\"]},\"93\":{\"h\":\"组件通信\",\"t\":[\"在Vue中，组件之间的通信可以通过父子组件的Props和事件以及兄弟组件或者任意组件之间通过Vue实例的事件总线和Vuex状态管理来实现。\",\"Props和事件：父组件可以通过Props将数据传递给子组件，子组件可以通过事件将数据传递给父组件。在父组件中定义Props，在子组件中通过this.$emit()触发事件来传递数据。\",\"父组件：\",\"<template> <div> <child-component :message=\\\"message\\\" @childEvent=\\\"handleChildEvent\\\"></child-component> </div> </template> <script> import ChildComponent from './ChildComponent.vue'; export default { components: { ChildComponent }, data() { return { message: 'Hello from parent' }; }, methods: { handleChildEvent(data) { console.log(data); // 接收子组件传递的数据 } } }; </script> \",\"子组件：\",\"<template> <div> <button @click=\\\"sendDataToParent\\\">Send data to parent</button> </div> </template> <script> export default { props: ['message'], methods: { sendDataToParent() { this.$emit('childEvent', 'Data from child'); // 触发事件传递数据给父组件 } } }; </script> \",\"Vue实例的事件总线：可以利用Vue实例作为事件中心来传递数据。在main.js中创建一个Vue实例，并通过$on()监听事件，通过$emit()触发事件来传递数据。\",\"// main.js import from 'vue'; export const EventBus = new Vue(); // 创建一个Vue实例作为事件总线 // 发送数据 EventBus.$emit('customEvent', data); // 接收数据 EventBus.$on('customEvent', (data) => { console.log(data); }); \",\"Vuex状态管理：Vuex是Vue官方提供的用于管理应用状态的库。可以在其中定义和修改共享状态，不需要通过组件之间的传递来实现通信。\",\"首先，在main.js中注册Vuex：\",\"import from 'vue'; import Vuex from 'vuex'; Vue.use(Vuex); const store = new Vuex.Store({ state: { message: 'Hello from Vuex' }, mutations: { setMessage(state, payload) { state.message = payload; } }, actions: { updateMessage({ commit }, payload) { commit('setMessage', payload); } } }); new Vue({ store, render: h => h(App) }).$mount('#app'); \",\"然后，在组件中可以使用mapState、mapMutations和mapActions来获取或者修改状态。\",\"<template> <div> <div>{{ message }}</div> <button @click=\\\"sendMessage\\\">Send Message</button> </div> </template> <script> import { mapState, mapActions } from 'vuex'; export default { computed: { ...mapState(['message']) }, methods: { ...mapActions(['updateMessage']), sendMessage() { this.updateMessage('New message from component'); // 修改状态 } } }; </script> \",\"parent/children/refs： Vue实例提供了一些特殊属性(refs：Vue实例提供了一些特殊属性(parent/children/children/refs)，可以访问父组件、子组件或具有ref属性的组件实例，通过这些属性可以在组件之间进行通信。\",\"举个例子，假设我们有一个父组件Parent和一个子组件Child，在Parent组件中有一个按钮，点击按钮后需要修改Child组件中的某个数据。\",\"首先，在Parent组件中定义一个数据（例如name），然后通过props将这个数据传递给Child组件：\",\"<template> <div> <button @click=\\\"changeData\\\">Change Data</button> <Child :name=\\\"name\\\"></Child> </div> </template> <script> import Child from './Child.vue'; export default { data() { return { name: 'John' } }, components: { Child }, methods: { changeData() { this.name = 'Alice'; } } }; </script> \",\"在Child组件中，利用props接收父组件传递的数据，并将其渲染到子组件的模板中：\",\"<template> <div>{{ name }}</div> </template> <script> export default { props: ['name'] }; </script> \",\"现在，当点击Parent组件中的按钮时，会触发changeData方法，将name的值修改为'Alice'。由于props是单向数据流，Child组件会自动更新，并将修改后的数据渲染到模板中。\",\"除了使用props传递数据外，还可以通过$emit在子组件中触发自定义事件，并在父组件中监听这些事件来实现通信。另外，$refs可以用来访问子组件的实例和方法，从而实现父子组件之间的方法调用。这些方式可以根据具体需求选择使用。\"]},\"94\":{\"h\":\"动态组件\",\"t\":[\"动态组件是 Vue.js 提供的一种高级功能，可以根据数据的变化动态地渲染不同的组件。\",\"使用动态组件的主要步骤如下：\",\"首先，在模板中定义一个占位符，用来渲染不同的组件。可以使用 <component> 标签，并通过 is 属性绑定一个数据，这个数据将决定要渲染哪个组件。示例：\",\"<template> <component :is=\\\"currentComponent\\\"></component> </template> \",\"在 实例中，定义一个用于决定要渲染哪个组件的数据属性。可以根据需求来修改这个数据属性的值以切换组件。示例：\",\"<script> export default { data() { return { currentComponent: 'ComponentA' } } } </script> \",\"创建需要动态渲染的组件。可以在 组件中定义多个组件，并根据需要来切换。示例：\",\"<template> <div> <p>This is Component A</p> </div> </template> <template> <div> <p>This is Component B</p> </div> </template> \",\"最后，在需要切换组件的时候，可以通过修改数据属性的值来实现动态渲染。例如，当点击按钮触发事件时，修改数据属性的值，从而切换渲染的组件。示例：\",\"<template> <div> <button @click=\\\"changeComponent\\\">Switch Component</button> </div> </template> <script> export default { methods: { changeComponent() { this.currentComponent = 'ComponentB'; } } } </script> \",\"通过这些步骤，你可以实现在 Vue.js 中动态渲染不同的组件。请注意，在实际应用中，你可以根据具体需求做更多的扩展和优化，例如使用 v-if 或者 v-show 来控制组件的显示与隐藏。\"]},\"95\":{\"h\":\"异步组件\",\"t\":[\"异步组件是通过使用 import() 函数实现的。这是一个异步模块加载函数，它可以返回一个 Promise，当组件需要加载时，这个 Promise 就会解析。异步组件的加载不会阻塞父组件的渲染，这样可以提高性能。\",\"下面是一个简单的异步组件示例：\",\"// AsyncComponent.vue export default { data() { return { loaded: false, }; }, async created() { await this.loadAsyncComponent(); }, methods: { async loadAsyncComponent() { const { default: AsyncComponent } = await import( /* webpackChunkName: \\\"AsyncComponent\\\" */ \\\"./AsyncComponent.js\\\" ); this.$options.components.AsyncComponent = AsyncComponent; this.loaded = true; }, }, }; \",\"在这个示例中，我们首先导出一个名为 AsyncComponent 的组件。然后，在 created 生命周期钩子中，我们使用 import() 函数加载 AsyncComponent.js 文件。当组件加载完成时，我们将组件添加到 components 选项中，并设置 loaded 数据属性为 true。这样，我们就可以在模板中使用这个异步组件了。\",\"需要注意的是，在 Vue 2 中，异步组件的命名必须是唯一的。因此，我们使用了 webpackChunkName: \\\"AsyncComponent\\\" 注释来为异步组件分配一个唯一的名称。\"]},\"96\":{\"h\":\"插槽\",\"t\":[\"插槽（Slot）是Vue.js中一种非常有用的功能，它允许我们在组件中定义一些带有特殊用途的占位符。通过使用插槽，我们可以将组件的内容进行动态的分发和替换。\",\"在Vue组件中使用插槽可以实现以下目的：\",\"插入默认内容：通过在组件内部定义插槽，可以在没有提供具体内容时显示默认的内容。\",\"分发内容：父组件可以通过插槽将内容分发到子组件的特定位置。这使得组件更加灵活，可以根据需要插入不同的内容。\",\"具名插槽：可以使用具名插槽在组件中定义多个插槽，并在父组件中根据名称选择插入的内容。\",\"作用域插槽：作用域插槽允许父组件在插槽中使用子组件的数据。这使得子组件能够向父组件传递数据。\",\"下面是一个简单的例子，演示了如何在Vue组件中使用插槽：\",\"// 子组件 ChildComponent.vue <template> <div> <h1>子组件标题</h1> <slot>这是默认的插槽内容</slot> </div> </template> // 父组件 ParentComponent.vue <template> <div> <h1>父组件标题</h1> <child-component> <p>插入到子组件插槽中的内容</p> </child-component> </div> </template> \",\"在上面的例子中，我们定义了一个子组件ChildComponent，它包含了一个默认的插槽<slot>。父组件ParentComponent中使用了子组件，并为子组件提供了额外的内容作为插槽的内容。在这个例子中，父组件的<p>标签中的内容将会被插入到子组件的插槽中。\",\"除了默认插槽外，Vue还支持具名插槽和作用域插槽。具名插槽可以通过<template>标签的v-slot指令来使用，而作用域插槽可以通过在<slot>标签中使用v-bind指令传递数据给父组件。\"]},\"97\":{\"h\":\"混入\",\"t\":[\"混入（Mixins）是一种重用组件选项的机制。它允许开发者将一些公共的选项（如组件的生命周期钩子、数据、方法等）提取出来，定义为混入对象，然后将这些混入对象应用到多个组件中，从而实现代码的复用和共享。\",\"混入可以被全局注册，也可以在组件内部进行局部注册。\",\"以下是混入的一些使用方式和特点：\",\"定义混入：混入对象是一个普通的JavaScript对象，它可以包含组件选项，例如data、methods、created等。可以通过mixins选项将混入对象添加到组件中。\",\"应用混入：在单个组件上，可以通过mixins选项将混入对象应用到组件中。当组件和混入对象具有相同的选项时，混入对象的选项会在组件中的选项之前被合并。\",\"合并规则：当混入对象和组件具有相同的选项时，Vue会根据一定的合并策略来处理。例如，对于data选项，混入对象的数据会被合并到组件的数据中；对于methods选项，混入对象的方法会被添加到组件的方法中。\",\"混入链：在使用混入时，如果多个混入对象具有相同的选项，它们会按照混入的顺序依次被调用，形成一个混入链。这使得开发者可以按照一定的顺序定义和应用混入对象。\",\"混入的使用可以帮助实现多个组件之间的代码共享和复用，提高开发效率。它适用于共享一些通用的逻辑、方法或状态，但要注意避免滥用混入，以避免过多的依赖关系和命名冲突。\",\"当一个系统中有多个组件需要共享一些相同的逻辑或数据时，可以使用混入来提取和复用这些代码逻辑。以下是一个简单的混入的例子：\",\"// 定义混入对象 const myMixin = { data() { return { count: 0 }; }, methods: { increment() { this.count++; }, logCount() { console.log(this.count); } } }; // 在组件中应用混入 Vue.component('my-component', { mixins: [myMixin], template: ` <div> <button @click=\\\"increment\\\">Increment</button> <button @click=\\\"logCount\\\">Log Count</button> </div> ` }); \",\"在上面的例子中，我们定义了一个混入对象myMixin，它包含了data和methods选项。data中有一个count变量用于计数，methods中有increment方法用于增加计数，以及logCount方法用于打印计数。\",\"然后，在一个组件中使用mixins选项将混入对象应用到组件上。在这个例子中，我们创建了一个名为my-component的组件，并应用了myMixin混入对象。组件模板中包含了两个按钮，一个用于增加计数，另一个用于打印计数。\",\"通过使用混入，我们可以实现多个组件共享相同的计数逻辑和方法，避免了代码的重复编写。\",\"这只是一个简单的例子，实际上混入可以包含更复杂的逻辑和多个选项。在工程化的项目中，混入可以帮助你更好地组织和复用代码，提高开发效率。\"]},\"98\":{\"h\":\"过渡与动画\",\"t\":[\"过渡和动画是用于为组件在状态改变时添加平滑的效果和动画效果的功能。Vue提供了内置的过渡组件和过渡类名，以及可以使用第三方动画库的能力，使得在Vue应用中实现过渡和动画变得简单和灵活。\",\"以下是Vue中过渡和动画的基本概念和用法：\",\"CSS过渡：Vue通过内置的<transition>组件来实现CSS过渡效果。通过在组件间添加<transition>标签，并在需要过渡的元素上使用<transition>组件的特定属性，可以定义进入和离开过渡的效果。例如，可以使用name属性指定动画类名，使用v-enter和v-leave-to来定义过渡效果。\",\"过渡类名：Vue在过渡过程中会自动添加和删除CSS类名，开发者可以利用这些类名来定义过渡的动画效果。常用的类名有：v-enter、v-enter-active、v-enter-to、v-leave、v-leave-active、v-leave-to等。可以通过这些类名设置CSS过渡和动画的属性，例如transition、animation等。\",\"JavaScript钩子函数：除了CSS过渡外，Vue还提供了一些JavaScript钩子函数来在过渡的不同阶段执行自定义逻辑。例如，在过渡开始前，可以使用before-enter钩子函数执行一些前置操作，或使用after-leave钩子函数在过渡结束后执行一些后置操作。\",\"第三方动画库：Vue还可以与一些第三方动画库集成，例如Animate.css、Velocity.js等。通过使用<transition>组件的name属性与动画库提供的类名进行组合，可以使用这些库的动画效果。\",\"请注意，过渡和动画在Vue中的使用是基于CSS的，因此需要一些基本的CSS知识来定义过渡和动画效果。\",\"总结而言，Vue提供了内置的过渡组件和过渡类名，以及与第三方动画库集成的能力，使得在Vue应用中实现过渡和动画效果变得更加简单和灵活。通过为组件的状态改变添加平滑的动画效果，可以提升用户体验和界面交互的吸引力。\",\"当用户点击按钮时，让一个元素在显示和隐藏时具有淡入淡出的过渡效果。可以通过引入Vue的过渡组件<transition>和使用CSS属性来实现。\",\"首先，需要在Vue组件中引入<transition>标签，并设置一个唯一的name属性，用于控制过渡的类名。然后，在需要进行过渡的元素上添加特定的class和v-if指令，使其与过渡组件关联起来。\",\"<template> <div> <button @click=\\\"toggleElement\\\">Toggle Element</button> <transition name=\\\"fade\\\"> <div class=\\\"element\\\" v-if=\\\"showElement\\\">This is a transition element.</div> </transition> </div> </template> <script> export default { data() { return { showElement: false }; }, methods: { toggleElement() { this.showElement = !this.showElement; } } }; </script> <style> .fade-enter-active, .fade-leave-active { transition: opacity 0.5s; } .fade-enter, .fade-leave-to { opacity: 0; } </style> \",\"在上面的例子中，我们定义了一个按钮和一个具有过渡效果的元素。点击按钮时，通过改变showElement的值，控制元素的显示和隐藏。\",\"我们使用<transition>组件将目标元素包裹起来，并给它设置一个独立的name属性，这里设置为\\\"fade\\\"。而实际上要执行过渡效果的元素是被v-if指令绑定的<div>。\",\"在CSS中，我们定义了两个类名。.fade-enter-active和.fade-leave-active是用来描述过渡期间的样式，通过transition属性指定了过渡效果的持续时间。.fade-enter和.fade-leave-to则是用来描述元素在进入过渡状态和离开过渡状态时的样式变化，这里通过修改opacity属性来实现淡入和淡出的效果。\",\"通过上述代码，当点击按钮时，元素会以淡入淡出的效果进行过渡。\",\"看完上面的内容，接下来该进入到Vue3的学习之路了\"]},\"99\":{\"h\":\"Vue3相对Vue2增加了那些东西\",\"t\":[\"更快的渲染效率：Vue 3采用了虚拟DOM的重写，它在渲染和更新方面比Vue 2更高效。新的虚拟DOM算法（Fragments + Static Trees）和编译器优化使得Vue 3在性能方面表现更好。\",\"更小的包大小：Vue 3的体积比Vue 2更小，这得益于对编译器的重构和优化，以及模块的拆分，使得开发者可以按需加载所需的功能。\",\"Composition API（组合式API）：Vue 3引入了Composition API，这是一个更灵活和可重用的API。与Vue 2的Options API相比，Composition API允许开发者根据逻辑相关性组织代码，提高了代码的可读性和维护性。\",\"TypeScript支持：Vue 3添加了对TypeScript的原生支持，提供了类型推导和完整的类型定义，使得开发者可以更方便地进行类型检查和开发。\",\"响应式系统升级：Vue 3中的响应式系统进行了重写，采用了Proxy代理作为底层实现，取代了Vue 2中的Object.defineProperty。这带来了更强大的响应式能力，提供了更细粒度的响应追踪，支持嵌套和数组响应。\",\"更好的错误处理：Vue 3改进了错误处理机制，提供了更好的错误捕获和报告方式，使得开发者能够更容易地定位并修复错误。\",\"更好的TypeScript和IDE支持：Vue 3针对TypeScript和IDE的支持进行了改进，提供了更准确的类型推断和代码编辑功能。\",\"除了上述的主要变化之外，Vue 3还增加了其他一些功能和改进，如Teleport、Suspense、多个根节点支持、全局API的调整等。\",\"需要注意的是，Vue 3在一些方面与Vue 2有一些不兼容之处，因此，如果要将现有的Vue 2项目迁移到Vue 3，可能需要进行一些修改和调整。\"]},\"100\":{\"h\":\"第一个vue3应用\",\"t\":[\"安装vue\",\"npm install vue@next \",\"创建一个vue3项目(选择需要下载的依赖)\",\"vue create hello-vue3 \",\"运行项目\",\"npm run serve \",\"访问\",\"http://localhost:8080 \"]},\"101\":{\"h\":\"应用实例\",\"t\":[\"每个vue应用都是通过createApp去创建实例\",\"示例\",\"import {createApp} from 'vue' import App from './App.vue' const app=createApp(App) app.mount('#app') \"]},\"102\":{\"h\":\"响应式\",\"t\":[\"响应式数据对象：在 Vue 3 中，可以通过使用 ref 函数或 reactive 函数将一个普通的 JavaScript 对象或基本类型转换为一个响应式数据对象。例如：\",\" import { ref, reactive } from 'vue'; const count = ref(0); // 将基本类型转换为响应式数据 const state = reactive({ // 将普通对象转换为响应式数据 message: 'Hello Vue 3', foo: ['bar'] }); \",\"ref函数：ref 函数接受一个参数，并返回一个响应式数据对象，该对象可以直接作为Vue实例的数据对象进行响应式处理。\",\"注意：ref 函数的返回值是一个对象，该对象包含一个指向响应式数据的单一属性 .value。\",\"ref函数的使用方式如下：\",\" import { ref } from 'vue'; const count = ref(0); // 将基本类型转换为响应式数据 console.log(count.value) count.value=3//修改响应式对象的值 \",\"上述代码中，使用ref函数创建了一个名为count的响应式对象，并初始化其值为0。通过访问count.value可以读取到响应式对象的值，通过修改count.value可以改变响应式对象的值。\",\"ref函数的返回值是一个包装了初始值的响应式对象，而不是像vue2中返回的是一个函数 除了基本类型的初始值，ref函数还可以接受对象、数组等作为参数。这样，创建的响应式对象就可以追踪到更复杂数据的变化。\",\"reactive函数：reactive 函数接受一个普通对象，并返回一个响应式代理对象，该对象的所有属性也都是响应式代理。\",\"注意：reactive 函数的返回值是一个对象，该对象的所有属性也都是对象，这些对象都是响应式代理。 不能替换整个对象 只能用于对象类型 解构会失去响应式\",\"reactive函数的返回值是一个对象，该对象的所有属性也都是对象，这些对象都是响应式代理。\",\"在组件中使用响应式对象： 在 Vue3 的组件中，可以直接将响应式对象用于渲染和操作视图。示例代码如下：\",\"<template> <div> <p>Count: {{ state.count }}</p> <p>Message: {{ state.message }}</p> <button @click=\\\"increment\\\">Increment</button> </div> </template> <script> import { reactive } from 'vue'; export default { setup() { const state = reactive({ count: 0, message: 'Hello Vue3!', }); const increment = () => { state.count++; }; return { state, increment, }; }, } </script> \",\"在上述示例中，我们使用 reactive 函数将 state 对象转换为响应式对象，并在模板中直接使用它的属性和方法。每当点击按钮时，state.count 的值会自动更新，从而触发视图的重新渲染。\",\"动态跟踪数据的变化： 使用 reactive 函数创建的响应式对象会自动追踪数据的变化。这意味着当响应式对象的属性发生变化时，相关的视图会自动更新。示例代码如下：\",\"const state = reactive({ count: 0, }); setTimeout(() => { state.count++; }, 1000); \",\"在上述示例中，通过 setTimeout 函数在 1 秒后增加 state.count 的值，由于 state.count 是响应式的，所以视图会自动更新显示新的值。\",\"练习实战\",\"toRefs:接受一个响应式对象作为参数，返回一个对象，该对象的每个属性都是 ref 对象，且是响应式的。\",\"import { toRefs, reactive } from 'vue'; const state = reactive({ name: 'John', age: 25, email: 'john@example.com' }); const converted = toRefs(state); console.log(converted.name.value); // 'John' console.log(converted.age.value); // 25 console.log(converted.email.value); // 'john@example.com' state.name = 'Jane'; console.log(converted.name.value); // 'Jane' \",\"在上面的示例中，我们首先创建了一个名为state的响应式对象，包含了三个属性：name、age和email。然后，我们使用toRefs函数将state对象转化为ref对象，并将结果保存在converted变量中。最后，我们可以通过converted对象访问state对象的属性和值，例如通过converted.name.value访问name属性的值。\",\"特点\",\"toRefs函数的返回值是一个包含所有属性的ref对象。这意味着每个属性都会被转化为一个独立的ref对象，以便在模板中使用。\",\"转化后的ref对象是响应式的，当原始对象的属性值发生变化时，相应的ref对象也会更新。\",\"通过toRefs转化后的属性是只读的，不能直接修改属性的值。如果要修改属性的值，需要通过修改原始对象来实现。\",\"WARNING\",\"toRefs只会将顶层属性转化为ref对象，而不会进行递归转化。如果state对象中的某个属性是另一个嵌套的响应式对象，那么toRefs只会将该属性本身转化为ref对象，而不会将其内部的属性转化为ref对象。如果需要将嵌套的响应式对象转化为ref对象，可以使用toRef或toRefs函数递归地转化每个属性。\",\"readonly: 用于创建一个只读的响应式对象。它接收一个普通的JavaScript对象作为参数，并返回一个只读的响应式对象。只读响应式对象的属性是不可修改的，不能进行赋值操作。\",\"import { reactive, readonly } from 'vue'; const state = reactive({ count: 0 }); const readOnlyState = readonly(state); readOnlyState.count++; // 无效 console.log(readOnlyState.count); // 打印出0 \",\"isRef: 用于检查一个值是否为一个Ref对象。\",\"import { ref, isRef } from 'vue'; const count = ref(0); console.log(isRef(count)); // true \",\"unref: 用于将一个ref对象转为原始值。如果参数是一个ref对象，则直接返回原始值，否则返回参数本身。\",\"import { ref, isRef } from 'vue'; const count = ref(0); console.log(unref(count)); // 0 console.log(unref(1)); // 1 \"]},\"103\":{\"h\":\"计算属性(Computed)\"},\"104\":{\"h\":\"介绍\",\"t\":[\"计算属性是Vue实例的一个属性，它是一个函数，返回一个值，这个值会被缓存，并且当依赖的响应式属性发生变化时，会重新计算。\"]},\"105\":{\"h\":\"基本使用\",\"t\":[\"<template> <div> <p>原始值：{{ state.count }}</p> <p>计算值：{{ computedCount }}</p> </div> </template> <script> import { reactive, computed } from 'vue'; export default { setup() { const state = reactive({ count: 0 }); const computedCount = computed(() => { return state.count * 2; }); return { state, computedCount }; } }; </script> \"]},\"106\":{\"h\":\"计算属性缓存\",\"t\":[\"计算属性具有缓存机制，这意味着只要计算属性依赖的数据没有发生变化，计算属性的值就会被缓存起来，不会进行重复计算。\"]},\"107\":{\"h\":\"计算属性依赖\",\"t\":[\"计算属性的值依赖于其他数据的值。Vue 3会自动追踪这些依赖，当依赖的数据发生变化时，计算属性会重新计算。如果没有依赖的数据发生变化，则计算属性将使用缓存的值\"]},\"108\":{\"h\":\"计算属性应用场景\",\"t\":[\"计算属性在很多场景下非常有用，特别是在需要根据其他数据进行复杂计算的情况下。例如，可以使用计算属性从原始数据中过滤出特定的数据，或者根据一些条件计算出动态的样式。\",\"计算属性是惰性的，也就是说，只有当计算属性被访问时才会计算。计算属性是基于其他数据进行计算的，它们本身并不存储任何数据。如果需要修改依赖的数据，可以使用watch侦听器\"]},\"109\":{\"h\":\"计算属性与方法的区别\",\"t\":[\"计算属性与方法最大的区别在于计算属性是基于它们的依赖进行缓存的，只有当依赖发生改变时，才会重新计算。\"]},\"110\":{\"h\":\"侦听器（Watch）\",\"t\":[\"侦听器（Watcher）是用来观察 Vue 实例数据变化并执行相应逻辑的功能。在 Vue 3 中，侦听器的实现方式与之前的版本有些不同，它们被称为 \\\"副作用函数\\\"（Effect Functions）。\",\"在 Vue 3 中，可以使用 watch 函数来创建侦听器。watch 函数接收一个侦听的数据源，以及一个回调函数。当数据源发生变化时，回调函数会被触发执行。\",\"以下是创建侦听器的示例代码：\",\"import { reactive, watch } from 'vue'; const myData = reactive({ foo: '123', bar: '456', }); watch(() => myData.foo, (newValue, oldValue) => { console.log('foo 从', oldValue, '变为', newValue); }); \",\"上面的例子中，我们通过 reactive 函数创建了一个响应式对象 myData，它包含了两个属性 foo 和 bar。通过 watch 函数，我们对 myData.foo 进行了侦听，并在它的值发生变化时输出变化值。\",\"在回调函数中，我们可以获取到新旧两个值，即 newValue 和 oldValue，用来进行相应的处理。侦听器还支持可选的第三个参数，用来配置侦听器行为的选项。\",\"除了可以侦听单个属性外，我们还可以使用 watch 函数侦听一个函数的返回值。在这种情况下，当函数的返回值发生变化时，回调函数将被触发执行。\",\"import { reactive, watch } from 'vue'; const myData = reactive({ foo: '123', bar: '456', }); watch(() => { return myData.foo + myData.bar; }, (newValue, oldValue) => { console.log('foo 和 bar 的总和从', oldValue, '变为', newValue); }); \",\"上面的例子中，我们将 myData.foo 和 myData.bar 的和作为侦听目标，并在它发生变化时输出变化值。\",\"需要注意的是，在 Vue 3 中，与 Vue 2 不同，watch 函数默认是在组件挂载时立即执行的。如果需要延迟执行侦听器，可以添加 immediate: false 的选项。\",\"此外，Vue 3 还提供了一些其他的侦听器相关的函数和API，如 watchEffect、watchRef、watchEffectOnce 等，用来实现更灵活的侦听器行为。可以根据具体需求选择合适的函数和API来使用。\",\"watchEffect:是一个自动执行的侦听器，它接收一个函数作为参数，在每次组件更新时都会自动执行该函数。\",\"import { reactive, watchEffect } from 'vue'; const myData = reactive({ foo: '123', bar: '456', }); watchEffect(() => { console.log(myData.foo + myData.bar); }); \",\"watchRef:用于侦听 ref 类型的数据，它接收一个 ref 对象作为参数，在每次组件更新时都会自动执行侦听器。\",\"import { ref, watchRef } from 'vue'; const myData = ref('123'); watchRef(myData, (newValue, oldValue) => { console.log('foo 从', oldValue, '变为', newValue); }); \",\"watchEffectOnce:是一个自动执行的侦听器，它接收一个函数作为参数，在组件第一次挂载时自动执行该函数，并在组件卸载时自动停止执行。\",\"import { reactive, watchEffectOnce } from 'vue'; const myData = reactive({ foo: '123', bar: '456', }); watchEffectOnce(() => { console.log(myData.foo + myData.bar); }); \"]},\"111\":{\"h\":\"计算属性与侦听器的区别\",\"t\":[\"计算属性是基于它们的依赖进行缓存的，只有当依赖发生改变时，才会重新计算。\",\"侦听器是数据变化时执行的函数，它不会进行缓存，不会自动进行依赖收集。\"]},\"112\":{\"h\":\"生命周期\",\"t\":[\"Vue 实例从创建到销毁的过程，就是生命周期。从开始创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、销毁等一系列过程，称之为生命周期。\"]},\"113\":{\"h\":\"生命周期图示\",\"t\":[\"生命周期图示\"]},\"114\":{\"h\":\"生命周期函数\",\"t\":[\"setup：在实例被创建之前调用。在 3.x 中， setup 函数现在位于 beforeCreate 之后，但在 2.x 中它们是并发执行的。\",\"created：在实例被创建后调用。此时，实例的属性已经被初始化，但DOM还没有被渲染。\",\"beforeMount：在挂载之前调用。此时，DOM还没有被渲染。\",\"mounted：在组件被挂载后调用。此时，组件已经渲染到了 DOM 中。 5 beforeUpdate：在组件更新之前调用。此时，组件的属性已经被更新，但 DOM 还没有被更新。\",\"updated：在组件更新之后调用。此时，组件的属性已经被更新，DOM 也已经被更新。\",\"beforeUnmount：在组件被卸载之前调用。此时，组件仍然存在于 DOM 中。\",\"unmounted：在组件被卸载之后调用。此时，组件已经被从 DOM 中移除。\"]},\"115\":{\"h\":\"组件\"},\"116\":{\"h\":\"组件注册\",\"t\":[\"全局注册\",\"全局注册的组件可以在任何模板中使用。\",\"全局注册的组件会通过 app.component() 注册。\",\"示例\",\" import {ref} from 'vue' app.component('my-component-name', { /* 选项 */ template:'<div>{{count}}</div>', setup(){ const count=ref(0) return { count } } }) \",\"局部注册\",\"局部组件只能在当前组件中使用。\",\"局部组件会通过 components 选项注册。\",\"示例\",\" \"]},\"117\":{\"h\":\"依赖注入\",\"t\":[\"依赖注入（Dependency Injection，简称 DI）是一种软件设计模式，用于解决模块之间的依赖关系。在依赖注入模式中，一个模块不需要显式地声明依赖关系，而是由容器在运行时注入。\",\"provide: 在组件实例创建之前调用，用于配置依赖关系。\",\"inject: 用于从父组件接收依赖。\",\"示例\",\"// 父组件 export default { setup() { provide('foo', 'foo'); } } // 子组件 export default { setup() { const foo = inject('foo'); } } \"]},\"118\":{\"h\":\"内置组件\"},\"119\":{\"h\":\"<Teleport>\",\"t\":[\"允许将一个组件的渲染位置移动到 DOM 树的另一个位置。\",\"示例\",\"<!-- 组件 A --> <template> <div class=\\\"a\\\"> <h1>A</h1> <teleport to=\\\"body\\\"> <div class=\\\"teleport-target\\\">Teleport Target</div> </teleport> </div> </template> \",\"<!-- 组件 B --> <template> <div class=\\\"b\\\"> <h1>B</h1> <teleport to=\\\".teleport-container\\\"> <div class=\\\"teleport-container\\\"> <h2>Teleport Container</h2> <teleport to=\\\".teleport-target\\\"> <div class=\\\"teleport-target\\\">Teleport Target</div> </teleport> </div> </teleport> </div> </template> \"]},\"120\":{\"h\":\"<transition>\",\"t\":[\"用于在组件切换时，在合适的时间添加/删除 CSS 类名。\",\"过渡效果图示\"]},\"121\":{\"h\":\"过渡效果\",\"t\":[\"<fade>: 淡入淡出\",\"<slide>: 滑动\",\"<zoom>: 缩放\"]},\"122\":{\"h\":\"过渡状态\",\"t\":[\"<appear>: 首次渲染时生效\",\"<appear-active>: 首次渲染时生效，且在动画结束后保持动画效果\",\"<enter>: 首次渲染时生效，且在动画结束后保持动画效果\",\"<enter-active>: 首次渲染时生效，且在动画结束后保持动画效果\",\"<leave>: 离开时生效\",\"<leave-active>: 离开时生效，且在动画结束后保持动画效果\",\"注意：<appear> 和 <appear-active> 只适用于 <transition> 组件，不适用于 <transition-group> 组件 示例\"]},\"123\":{\"h\":\"过渡模式\",\"t\":[\"<in-out>: 先执行离开动画，再执行进入动画\",\"<out-in>: 先执行进入动画，再执行离开动画\"]},\"124\":{\"h\":\"过渡钩子\",\"t\":[\"<before-enter>: 动画开始前触发\",\"<enter>: 动画开始时触发\",\"<after-enter>: 动画结束时触发\",\"<enter-cancelled>: 动画结束时触发\",\"<before-leave>: 动画开始前触发\",\"<leave>: 动画开始时触发\",\"<after-leave>: 动画结束时触发\",\"<leave-cancelled>: 动画结束时触发\"]},\"125\":{\"h\":\"过渡类名\",\"t\":[\"v-enter-from：进入动画的起始状态。在元素插入之前添加，在元素插入完成后的下一帧移除。\",\"v-enter-active：进入动画的生效状态。应用于整个进入动画阶段。在元素被插入之前添加，在过渡或动画完成之后移除。这个 class 可以被用来定义进入动画的持续时间、延迟与速度曲线类型。\",\"v-enter-to：进入动画的结束状态。在元素插入完成后的下一帧被添加 (也就是 v-enter-from 被移除的同时)，在过渡或动画完成之后移除。\",\"v-leave-from：离开动画的起始状态。在离开过渡效果被触发时立即添加，在一帧后被移除。\",\"v-leave-active：离开动画的生效状态。应用于整个离开动画阶段。在离开过渡效果被触发时立即添加，在过渡或动画完成之后移除。这个 class 可以被用来定义离开动画的持续时间、延迟与速度曲线类型。\",\"v-leave-to：离开动画的结束状态。在一个离开动画被触发后的下一帧被添加 (也就是 v-leave-from 被移除的同时)，在过渡或动画完成之后移除。\",\"v-enter-active 和 v-leave-active 给我们提供了为进入和离开动画指定不同速度曲线的能力.\"]},\"126\":{\"h\":\"<keep-alive>\",\"t\":[\"keep-alive 用于缓存和保持组件的状态，以便在组件切换时可以保留之前的状态数据，提高性能并提供更好的用户体验。\",\"当一个组件被包裹在 keep-alive 标签内时，该组件会被缓存起来，而不是被销毁。当该组件在父组件中切换可见性时，它不会被销毁和重新创建，而是从缓存中取出并重新激活。\",\"keep-alive 可以接受一个 include 属性，用于指定哪些组件需要被缓存。它可以是一个字符串或数组，用来指定组件的名称。只有指定的组件会被缓存，其他组件则会被正常销毁和重新创建。\",\"另外，keep-alive 还可以接受一个 exclude 属性，用于指定不需要被缓存的组件。它也可以是一个字符串或数组，指定组件的名称。\",\"下面是一个示例，展示了如何使用 keep-alive：\",\"<template> <div> <button @click=\\\"toggleComponent\\\">切换组件</button> <keep-alive> <component :is=\\\"currentComponent\\\"></component> </keep-alive> </div> </template> <script> export default { data() { return { currentComponent: 'ComponentA', }; }, methods: { toggleComponent() { this.currentComponent = this.currentComponent === 'ComponentA' ? 'ComponentB' : 'ComponentA'; }, }, }; </script> \",\"在上面的例子中，currentComponent 的初始值为 'ComponentA'。点击按钮后，它会在 'ComponentA' 和 'ComponentB' 之间切换。但是，无论切换多少次，每个组件都会保持它们的状态，而不会被销毁和重新创建。\",\"注意，keep-alive 只会缓存组件实例，而不会缓存组件的模板。这意味着每个被缓存的组件实例之间共享同一个模板。如果需要在每个组件实例之间保持不同的模板状态，可以通过在 keep-alive 标签内部使用 <router-view> 或条件渲染来实现。\"]},\"127\":{\"h\":\"节点、树和虚拟DOM\"},\"128\":{\"h\":\"虚拟DOM(Virtual DOM)\",\"t\":[\"虚拟DOM（Virtual DOM）是一种用于提高Web应用性能的技术，它是在内存中以JavaScript对象的形式表示整个DOM树的副本。虚拟DOM可以通过比较前后两次虚拟DOM之间的差异，最小化DOM操作，从而减少了对浏览器的重绘和回流，提高了应用的性能和响应速度。\",\"以下是虚拟DOM的基本原理和工作流程：\",\"创建虚拟DOM树：当Vue或React应用启动时，会通过解析组件的模板或JSX语法，创建整个应用的初始虚拟DOM树。每个组件被表示为一个虚拟DOM节点，包含其对应的标签、属性、事件等信息。\",\"进行修改和更新：当应用状态发生变化，需要重新渲染时，新的虚拟DOM树会与之前的虚拟DOM树进行比较和分析，找出二者之间的差异。\",\"生成补丁：通过比较两个虚拟DOM树，会生成一棵描述如何将旧DOM树更新为新DOM树的补丁树（Patch Tree），也就是所谓的DOM操作的指令。\",\"应用补丁：将补丁树应用于真实的DOM元素上，从而更新实际的用户界面。这些补丁操作通常是高效的，因为实际的DOM操作被最小化，只会修改必要的部分来保持视图的同步。\",\"通过使用虚拟DOM，可以减少直接对真实DOM的操作次数，从而提高渲染性能。虚拟DOM通过批量操作、优化重绘和回流等方式，将多次DOM操作转化为最小的修改，使得页面更新的效率更高。\",\"虽然虚拟DOM在Vue和React等框架中得到广泛应用，但它并非适用于所有场景。对于简单的应用或页面来说，直接操作真实DOM可能更为高效。虚拟DOM的主要目标是通过减少浏览器的DOM操作来提高复杂应用的性能。\",\"与真实DOM（Real DOM）的区别\",\"性能：虚拟DOM可以提高应用的性能。它通过在内存中操作轻量级的JavaScript对象来表示整个DOM树，然后将这个虚拟DOM与真实DOM进行比较，并只对实际发生变化的部分进行更新。相比之下，直接对真实DOM进行操作可能会导致频繁的重绘和回流，影响性能。\",\"批量操作：虚拟DOM可以对多个DOM更新操作进行批量处理，最小化对真实DOM的操作次数。相比之下，直接对真实DOM进行操作需要立即执行，无法进行批量处理。\",\"简化开发：虚拟DOM可以简化开发过程。通过使用虚拟DOM，开发者可以将关注点从低级的DOM操作转移到更高级的应用状态管理和UI组件开发上。\",\"跨平台：虚拟DOM是通过JavaScript对象表示的，因此可以在不同的平台上使用，例如浏览器、Node.js等。相比之下，真实DOM是平台特定的，与特定环境绑定。\",\"内存消耗：虚拟DOM可能会占用更多的内存，因为需要将整个DOM结构以JavaScript对象的形式存储在内存中。而真实DOM只需要存储实际的DOM元素。\",\"学习曲线：对于初学者来说，掌握虚拟DOM的概念和使用可能需要一些时间和学习成本。相比之下，直接对真实DOM进行操作更为直接和易于理解。\",\"总的来说，虚拟DOM在性能优化和开发便利性方面提供了一些优势，但它可能会带来额外的内存消耗，并且对于简单的应用来说，直接操作真实DOM可能更为简单和高效。\"]},\"129\":{\"h\":\"节点、树\",\"t\":[\"节点树（Node Tree）是指由节点组成的层次结构。在Web开发中，常用的节点树就是DOM树（Document Object Model Tree），它是通过HTML文档解析而得到的，表示了HTML文档的结构和内容。\",\"DOM树是一个由各种类型的节点组成的树状结构。每个节点代表HTML中的一个元素、属性、文本等。节点可以有子节点和兄弟节点，形成父子和兄弟关系。根据节点的类型不同，可以将节点分为元素节点、属性节点、文本节点、注释节点等。\",\"以下是一个示例的DOM树结构：\",\"- Document - DocumentType (<!DOCTYPE html>) - Element (HTML) - Element (HEAD) - Element (META charset=\\\"UTF-8\\\") - Element (TITLE) - Text (Example Page) - Element (BODY) - Element (H1) - Text (Hello, World!) - Element (P) - Text (This is a paragraph.) \",\"在上面的示例中，根节点是Document，它有两个子节点DocumentType和Element。Element节点又有子节点和兄弟节点，形成了树状结构。每个节点都包含了它们的类型和内容，在DOM操作中可以使用节点的属性和方法来访问和修改节点的属性和内容。\",\"通过操作节点树，我们可以对HTML文档进行增加、删除、修改等操作，以实现对页面的动态更新和交互。\",\"需要注意的是，虽然DOM树是常用的节点树表示方式，但在其他领域，比如计算机科学中的树数据结构，节点树可以具有不同的定义和用途。\",\"TODOMVC\",\"一个基于element-ui和vue2的后台管理系统\"]},\"130\":{\"h\":\"MySQL\"},\"131\":{\"h\":\"简介\",\"t\":[\"MySQL是一种开源的关系型数据库管理系统（RDBMS），由瑞典公司MySQL AB开发，目前由Oracle公司维护和支持。MySQL是一种高性能的数据库系统，被广泛应用于各种规模的应用程序，包括Web开发、企业级软件、移动应用和大数据分析等领域。\",\"MySQL采用了传统的客户端/服务器架构，其中数据库服务器（MySQL Server）处理数据库的存储、检索和管理，而客户端应用程序通过与服务器建立连接来访问和操作数据库。MySQL支持多种操作系统，包括Windows、Linux、macOS等，并提供多种编程语言的API和接口，使开发者能够方便地与MySQL进行交互。\",\"MySQL提供了丰富的功能和特性，包括：\",\"数据类型：支持常见的数值类型、字符串类型、日期和时间类型等。\",\"数据完整性：支持定义和执行数据约束、主键、外键等，确保数据的完整性和一致性。\",\"多种查询语言：支持SQL（Structured Query Language）查询语言，可以对数据库进行灵活和高效的数据查询。\",\"数据库复制和集群：提供数据库复制和主从复制的功能，以及支持分布式和高可用性的数据库集群。\",\"安全性：支持用户和权限管理，可以限制对数据库的访问权限和操作权限。\",\"性能优化：提供索引、查询优化器和缓存机制等功能，提高数据库的性能和响应能力。\",\"储存引擎：MySQL支持多种储存引擎，如InnoDB、MyISAM等，提供不同的存储机制和特性。\",\"数据备份和恢复：提供备份和恢复数据库的工具和机制，保护数据的安全和可靠性。\",\"MySQL的开源性、稳定性和易用性使其成为最受欢迎的关系型数据库之一。无论是个人开发者还是大型组织，都可以从MySQL的强大功能和丰富生态系统中受益，构建高效和可靠的应用程序。\"]},\"132\":{\"h\":\"安装和配置\",\"t\":[\"安装和配置MySQL通常包括以下步骤：\",\"下载MySQL安装程序： 访问MySQL官方网站（https://www.mysql.com/）下载适合您操作系统的MySQL安装程序。MySQL提供了多个版本，包括社区版和商业版，您可以根据自己的需求选择适合的版本。\",\"运行安装程序： 双击运行下载的MySQL安装程序。按照安装向导的指示进行操作。在安装过程中，您可以选择要安装的组件、安装路径和其他选项。\",\"配置MySQL服务器： 安装完成后，您需要配置MySQL服务器。在配置过程中，可以设置服务器的端口号、字符集、日志文件位置等。也可以选择是否将MySQL服务器配置为系统服务。\",\"启动MySQL服务器： 在安装完成并配置好MySQL服务器后，您可以启动MySQL服务器。具体方法取决于操作系统，可以通过命令行或图形界面启动MySQL服务。\",\"连接到MySQL服务器： 使用MySQL提供的客户端工具（如命令行客户端或图形界面工具）连接到已运行的MySQL服务器。您将需要提供数据库服务器的地址、端口号、用户名和密码等信息进行连接。\",\"进行基本配置和管理： 连接到MySQL服务器后，您可以进行更多的配置和管理操作，包括：\",\"创建和管理数据库\",\"创建和管理表\",\"设置用户和权限\",\"运行SQL查询\",\"配置和优化服务器参数\",\"备份和恢复数据\",\"请注意，MySQL的安装和配置过程可能会因操作系统和MySQL版本的不同而略有差异。安装和配置需要一定的技术知识和经验，请在进行操作前阅读相关文档和参考资料，并确保您具备必要的管理员权限。MySQL官方提供了详细的文档和指南，您可以参考官方文档以获得更具体的指导。\"]},\"133\":{\"h\":\"数据库操作\",\"t\":[\"创建新的数据库： 要创建一个新的数据库，在MySQL中使用CREATE DATABASE语句。指定要创建的数据库的名称。例如：\",\"CREATE DATABASE newdatabase; \",\"删除数据库： 要删除一个已存在的数据库，在MySQL中使用DROP DATABASE语句。注意，这将永久删除数据库及其中的所有数据。例如：\",\"DROP DATABASE existingdatabase; \",\"使用数据库： 要在MySQL中使用特定的数据库，使用USE语句。指定要使用的数据库的名称。例如：\",\"USE existingdatabase; \",\"显示数据库列表： 要显示MySQL中所有可用的数据库列表，可以使用SHOW DATABASES语句。例如：\",\"SHOW DATABASES; \",\"修改数据库名称： MySQL本身没有提供专门的命令来直接修改数据库的名称。一个常见的方法是，创建一个新的数据库，将旧数据库中的数据导出，然后导入到新数据库中，最后删除旧数据库。\",\"备份数据库： 要备份MySQL数据库，可以使用mysqldump命令行工具。以下是备份和还原数据库的基本命令示例：\",\"备份数据库：\",\"mysqldump -u username -p password databasename > backup.sql \",\"这将把databasename数据库备份到backup.sql文件中。\",\"还原数据库：\",\"mysql -u username -p password databasename < backup.sql \",\"这将从backup.sql文件中还原数据库到databasename。\",\"请注意，在上述命令中，替换username、password和databasename为您自己的实际值。\",\"备份和还原数据库时还有其他高级选项，如只备份结构而不包含数据，或者只恢复特定的表。\"]},\"134\":{\"h\":\"表操作\",\"t\":[\"表操作是在数据库中管理和操作表的结构和数据。\",\"创建表： 要创建一个新的表，在MySQL中使用CREATE TABLE语句。指定表的名称、列名、数据类型和约束等信息。例如：\",\"CREATE TABLE mytable ( id INT PRIMARY KEY, name VARCHAR(50), age INT ); \",\"删除表： 要删除一个已存在的表，在MySQL中使用DROP TABLE语句。这将永久删除表及其所有数据和结构。例如：\",\"DROP TABLE mytable; \",\"修改表结构： 要修改表的结构，可以使用ALTER TABLE语句。可以添加新的列、修改列的数据类型、添加约束等。例如，添加一个新的列：\",\"ALTER TABLE mytable ADD COLUMN email VARCHAR(100); \",\"插入数据： 要向表中插入新的数据行，使用INSERT INTO语句。指定要插入的列和相应的值。例如：\",\"INSERT INTO mytable (id, name, age) VALUES (1, 'John Doe', 25); \",\"更新数据： 要更新表中现有数据行的值，使用UPDATE语句。指定要更新的列和新的值，以及更新条件。例如：\",\"UPDATE mytable SET age = 26 WHERE id = 1; \",\"删除数据： 要从表中删除数据行，使用DELETE FROM语句。指定要删除的行的条件。例如：\",\"DELETE FROM mytable WHERE id = 1; \",\"查询数据： 要从表中检索数据行，使用SELECT语句。指定要检索的列、表，以及可选的查询条件和排序方式。例如：\",\"SELECT name, age FROM mytable WHERE age > 20; \",\"索引和约束： 使用索引和约束可以提高数据库的性能和保证数据的完整性。索引可以加速数据检索，而约束可以限制特定列的值满足特定条件。\",\"关联和连接表： 通过关联和连接表，可以根据共同的列将多个表关联起来，并进行复杂的数据查询。使用JOIN语句和相关的条件来实现。关联/连接包括INNER JOIN、LEFT JOIN、RIGHT JOIN和FULL JOIN等。例如：\",\"SELECT * FROM table1 INNER JOIN table2 ON table1.id = table2.id; \"]},\"135\":{\"h\":\"查询语言（SQL）\",\"t\":[\"查询语言（SQL）是用于在关系型数据库中检索和操作数据的标准语言。\",\"SELECT语句的使用： SELECT语句用于从数据库中检索数据。可以指定要检索的列、表，以及可选的查询条件和排序方式。例如：\",\"SELECT column1, column2 FROM table; \",\"聚合函数和GROUP BY语句： 聚合函数用于在查询中进行计算和汇总数据，如COUNT、SUM、AVG、MIN和MAX等。GROUP BY语句用于将查询结果按照一个或多个列进行分组。例如：\",\"SELECT column, COUNT(*) FROM table GROUP BY column; \",\"条件查询和WHERE子句： WHERE子句用于在查询中指定条件，限制所返回的数据行。可以使用比较运算符（如=、<、>）、逻辑运算符（如AND、OR）和其他条件操作符。例如：\",\"SELECT column1, column2 FROM table WHERE condition; \",\"排序和LIMIT子句： ORDER BY子句用于对查询结果进行排序，默认是升序排序，可以使用DESC关键字进行降序排序。LIMIT子句用于限制查询结果返回的行数。例如：\",\"SELECT column FROM table ORDER BY column DESC LIMIT 10; \",\"子查询和嵌套查询： 子查询是在一个查询内嵌套使用的查询语句。可以将子查询的结果作为外部查询的一部分条件。例如：\",\"SELECT column FROM table WHERE column IN (SELECT column FROM another_table); \",\"数据过滤和条件操作符： 条件操作符用于过滤和筛选特定条件的数据。常见的条件操作符包括等于（=）、不等于（<>）、大于（>）、小于（<）、大于等于（>=）、小于等于（<=）和模糊匹配（LIKE）。例如：\",\"SELECT column FROM table WHERE column > 10; SELECT column FROM table WHERE column LIKE 'abc%'; \"]},\"136\":{\"h\":\"数据类型\",\"t\":[\"在关系型数据库中，每个列都必须具有一个数据类型，用于定义列中存储的数据的类型和格式。不同的数据库管理系统可能支持不同的数据类型，但下面列举的是一些常见的数据类型：\",\"整数类型（Integer）：用于存储整数值，如INT、INTEGER、SMALLINT、BIGINT等。\",\"浮点数类型（Floating-Point）：用于存储有小数部分的数值，如FLOAT、REAL、DOUBLE、DECIMAL等。\",\"字符串类型（String）：用于存储文本数据，如VARCHAR、CHAR、TEXT、LONGTEXT等。\",\"日期和时间类型（Date and Time）：用于存储日期、时间和日期时间数据，如DATE、TIME、DATETIME、TIMESTAMP等。\",\"布尔类型（Boolean）：用于存储布尔值，通常是TRUE或FALSE。\",\"二进制类型（Binary）：用于存储二进制数据，如BLOB、LONGBLOB、VARBINARY等。\",\"枚举类型（Enumeration）：用于定义列中允许的固定值列表，用户只能从列表中选择一个值。\",\"集合类型（Set）：用于定义列中允许的多个非重复值集合，用户可以从集合中选择一个或多个值。\",\"除了上述常见的数据类型，某些数据库还支持特定的数据类型，如JSON、XML、UUID、IP地址等。此外，还可以通过定义自定义数据类型来满足特定的需求。\",\"在创建表时，必须为每个列指定适当的数据类型，这样数据库才能正确地存储和处理数据。选择正确的数据类型对于有效使用数据库和优化性能非常重要。\"]},\"137\":{\"h\":\"事务处理\",\"t\":[\"事务处理是数据库管理系统的重要概念，用于维护数据库操作的一致性、原子性、隔离性和持久性。事务是一组逻辑上相关的数据库操作，这些操作要么全部成功完成，要么全部失败回滚。\",\"在事务处理中，常见的操作包括插入、更新和删除数据。下面是事务处理的主要特性和相关概念：\",\"原子性（Atomicity）：事务的原子性要求其中的所有操作要么全部成功执行，要么全部失败回滚。如果事务中的任何操作失败，系统将撤销所有之前的操作到事务开始的状态。\",\"一致性（Consistency）：事务的一致性要求在执行事务之前和之后，数据库的状态必须保持一致。这意味着事务的执行不能破坏数据库的完整性约束和业务规则。\",\"隔离性（Isolation）：事务的隔离性要求每个事务的执行都与其他事务相互隔离，互不干扰。这样可以避免并发执行事务时产生的问题，如读取已修改但未提交的数据、脏读、不可重复读和幻像读等。\",\"持久性（Durability）：事务的持久性要求一旦事务提交成功，其对数据库的更改将永久保存，即使在系统故障或重启后也不会丢失。\",\"为了实现事务的特性，数据库管理系统提供了以下关键操作和机制：\",\"开始事务（BEGIN 或 START TRANSACTION）：用于标识事务的开始。\",\"提交事务（COMMIT）：将事务的所有操作永久地应用到数据库。\",\"回滚事务（ROLLBACK）：撤销事务的所有操作，将数据库恢复到事务开始之前的状态。\",\"设置保存点（SAVEPOINT）：允许在事务内部设置一个保存点，以便在回滚时可以回到该保存点。\",\"设置隔离级别（Isolation Level）：数据库管理系统支持多个隔离级别，如读未提交、读已提交、可重复读和串行化，用于控制事务之间的隔离程度和并发操作。\",\"通过正确地应用事务处理机制，可以确保数据库中的数据始终处于一致的状态，即使在并发操作和故障情况下也能保持数据的完整性和可靠性。\"]},\"138\":{\"h\":\"性能优化和调优\",\"t\":[\"性能优化和调优是在数据库系统中提高执行效率和响应速度的关键活动。它涉及一系列的优化技术和策略，旨在减少查询时间、降低资源消耗、提高吞吐量和增强系统的可伸缩性。下面是一些常见的性能优化和调优方法：\",\"优化数据库设计：\",\"正规化数据库结构，消除冗余数据。\",\"使用合适的数据类型和字段长度。\",\"建立适当的索引来加速数据检索。\",\"优化查询语句：\",\"编写高效的查询语句，避免使用不必要的JOIN操作和子查询。\",\"使用合适的WHERE条件和索引，以减少扫描的数据量。\",\"避免使用通配符LIKE查询，尽量使用前缀匹配。\",\"分批处理大量数据，避免一次性处理过多数据。\",\"优化数据库配置：\",\"调整数据库的缓冲池大小和内存配置，以适应数据访问模式。\",\"调整并发连接数、线程池大小等系统参数，以提高并发性能。\",\"合理配置日志记录级别和频率，以避免过多的日志写入。\",\"硬件和基础设施优化：\",\"使用高性能的硬件设备，如快速的磁盘驱动器、大内存容量、高性能CPU等。\",\"使用负载均衡和集群技术，以提高系统的可扩展性和容错性。\",\"使用缓存技术，如缓存服务器、数据缓存、查询结果缓存等，减少对数据库的频繁访问。\",\"监控和调试：\",\"定期监控数据库性能指标，如响应时间、吞吐量、并发连接数等。\",\"使用数据库性能分析工具，如慢查询日志、执行计划分析等，找出低效的查询和瓶颈点。\",\"进行性能测试和压力测试，以评估系统的性能和容量。\",\"定期维护和优化：\",\"对数据库进行定期维护，包括索引重建、表优化、数据清理和统计信息更新等。\",\"定期备份数据库，以防止数据丢失和系统故障。\"]},\"139\":{\"h\":\"CSS\"},\"140\":{\"h\":\"介绍\",\"t\":[\"CSS（Cascading Style Sheets）用于控制网页的样式和布局。\",\"CSS 使网页开发者能够将标记语言（如 HTML、XML）的内容和表示层（样式）分离。\"]},\"141\":{\"h\":\"语法\",\"t\":[\"CSS 规则由选择器和声明块组成。\",\"选择器选择要样式化的元素，声明块中包含一个或多个属性声明，每个声明包含属性和对应的值。\",\"p { color: red; } \"]},\"142\":{\"h\":\"书写方式\",\"t\":[\"在HTML文档中，可以通过以下几种方式来书写CSS代码：\",\"外部样式表（External Stylesheet）： 创建一个独立的CSS文件（通常以.css为后缀），然后使用link标签将该文件连接到HTML文档中。link标签应放置在HTML文档的head标签内。示例：\",\"<head> <link rel=\\\"stylesheet\\\" href=\\\"styles.css\\\"> </head> \",\"然后，在styles.css文件中编写CSS代码：\",\"body { background-color: #f1f1f1; } h1 { color: blue; } \",\"这种方式适用于对多个页面同时应用相同的样式。\",\"内部样式表（Internal Stylesheet）： 在HTML文档的head标签内，使用style标签定义CSS样式。在style标签中，可以直接编写CSS代码。示例：\",\"<head> <style> body { background-color: #f1f1f1; } h1 { color: blue; } </style> </head> \",\"这种方式适用于仅对当前HTML文档应用特定样式。\",\"内联样式（Inline Styles）： 在HTML元素的style属性中，直接编写CSS样式。示例：\",\" <h1 style=\\\"color: blue;\\\">Hello, World!</h1> \",\"这种方式适用于仅对个别元素应用特定样式。\",\"使用外部样式表和内部样式表可以使CSS代码与HTML代码相分离，更易于维护和管理。内联样式适用于需要对个别元素应用直接的样式调整，但不推荐在整个网页中广泛使用。根据具体需求，在合适的地方选择合适的CSS书写方式。\"]},\"143\":{\"h\":\"选择器\",\"t\":[\"CSS选择器用于选择要应用样式的HTML元素。以下是一些常见的CSS选择器及其详细解释：\",\"元素选择器（Element Selector）: 元素选择器通过HTML元素的名称选择元素。例如，要选择所有的段落元素，可以使用p选择器：\",\"p { color: blue; } \",\"类选择器（Class Selector）: 类选择器通过元素的class属性选择元素。类选择器以点号（.）开头，后面跟着类名。例如，要选择具有red-text类的元素，可以使用.red-text选择器：\",\".red-text { color: red; } \",\"ID选择器（ID Selector）: ID选择器通过元素的id属性选择元素。ID选择器以井号（#）开头，后面跟着ID名称。例如，要选择具有header ID的元素，可以使用#header选择器：\",\"#header { font-size: 24px; } \",\"后代选择器（Descendant Selector）: 后代选择器选择某个元素的后代元素。后代选择器使用空格分隔不同的元素名称。例如，要选择具有container类内部的所有段落元素，可以使用.container p选择器：\",\".container p { margin: 10px; } \",\"子元素选择器（Child Selector）: 子元素选择器选择某个元素的直接子元素。子元素选择器使用大于号（>）分隔不同的元素名称。例如，要选择container类的直接子元素中的段落元素，可以使用.container > p选择器：\",\".container > p { margin: 10px; } \",\"属性选择器（Attribute Selector）: 属性选择器通过元素的属性选择元素。属性选择器可以根据属性的存在、值以及其他匹配条件来选择元素。例如，要选择所有具有target=\\\"_blank\\\"的链接元素，可以使用a[target=\\\"_blank\\\"]选择器：\",\"a[target=\\\"_blank\\\"] { color: blue; } \",\"伪类选择器（Pseudo-class Selector）: 伪类选择器用于选择元素的特殊状态或行为。伪类选择器以冒号（:）开头，后面跟着伪类的名称。例如，要选择鼠标悬停在链接上的状态，可以使用:hover伪类选择器：\",\"a:hover { color: red; } \",\"伪元素选择器（Pseudo-element Selector）: 伪元素选择器用于选择元素的特殊部分或位置。伪元素选择器以两个冒号（::）开头，后面跟着伪元素的名称。例如，要选择段落的第一个字母，可以使用::first-letter伪元素选择器：\",\"p::first-letter { font-size: 24px; } \",\"相邻兄弟选择器（Adjacent Sibling Selector）: 相邻兄弟选择器选择某个元素之后紧邻的兄弟元素。相邻兄弟选择器使用加号（+）分隔两个选择器。例如，要选择紧跟在h1元素后面的p元素，可以使用h1 + p选择器：\",\"h1 + p { font-style: italic; } \",\"全体元素选择器（Universal Selector）: 全体元素选择器选择所有的HTML元素。全体元素选择器使用星号（*）。例如，要选择页面上的所有元素，可以使用*选择器：\",\"* { margin: 0; padding: 0; } \"]},\"144\":{\"h\":\"样式属性\",\"t\":[\"CSS样式属性是用于设置HTML元素的外观和布局的属性。以下是一些常见的CSS样式属性：\",\"盒模型属性（Box Model Properties）：\",\"width：设置元素的宽度。\",\"height：设置元素的高度。\",\"margin：设置元素的外边距。\",\"padding：设置元素的内边距。\",\"border：设置元素的边框样式和边框宽度。\",\"box-sizing：控制元素的盒模型计算方式。\",\".box { width: 200px; height: 150px; margin: 10px; padding: 20px; border: 1px solid #ccc; box-sizing: border-box; } \",\"字体和文本属性（Font and Text Properties）：\",\"color：设置文本的颜色。\",\"font-family：设置字体的名称。\",\"font-size：设置字体的大小。\",\"font-weight：设置字体的粗细。\",\"text-align：设置文本的对齐方式。\",\"text-decoration：设置文本的修饰效果，如下划线、删除线等.\",\"h1 { color: blue; font-family: Arial, sans-serif; font-size: 24px; font-weight: bold; text-align: center; text-decoration: underline; } \",\"背景属性（Background Properties）：\",\"background-color：设置元素的背景颜色。\",\"background-image：设置元素的背景图片。\",\"background-size：设置背景图片的尺寸。\",\"background-position：设置背景图片的位置。\",\"background-repeat：设置背景图片的重复方式。\",\".btn { background-color: #ff0000; background-image: url(\\\"button-bg.png\\\"); background-size: cover; background-position: center; background-repeat: no-repeat; } \",\"定位属性（Positioning Properties）：\",\"position：设置元素的定位方式。\",\"top、right、bottom、left：设置元素相对于其定位父级的位置。\",\"z-index：设置元素的堆叠顺序。\",\".header { position: fixed; top: 0; left: 0; width: 100%; background-color: #333; color: #fff; padding: 10px; z-index: 999; } \",\"布局属性（Layout Properties）：\",\"display：设置元素的显示方式。\",\"float：设置元素的浮动方式。\",\"clear：清除浮动元素对布局的影响。\",\"flex：设置弹性布局的子项属性。\",\"grid：设置网格布局的容器和项目属性。\",\".container { display: flex; justify-content: space-between; } .column { width: 30%; } .grid { display: grid; grid-template-columns: repeat(3, 1fr); grid-gap: 10px; } \",\"边框属性（Border Properties）：\",\"border-style：设置边框的样式。\",\"border-width：设置边框的宽度。\",\"border-color：设置边框的颜色。\",\"border-radius：设置边框的圆角半径。\",\"border：简写属性，同时设置边框的样式、宽度和颜色。\",\"border-top、border-right、border-bottom、border-left：设置单独边框的样式、宽度和颜色。\",\"border-image：使用图片来定义边框样式。\",\".box { border: 1px solid red; border-radius: 5px; } \",\"尺寸属性（Dimension Properties）：\",\"width：设置元素的宽度。\",\"height：设置元素的高度。\",\"max-width：设置元素的最大宽度限制。\",\"max-height：设置元素的最大高度限制。\",\"min-width：设置元素的最小宽度限制。\",\"min-height：设置元素的最小高度限制。\",\"box-sizing：控制元素包含的内容对宽度和高度的影响。\",\".image { width: 100%; height: auto; } .container { width: 50%; max-width: 800px; } .btn { min-width: 120px; } \",\"动画属性（Animation Properties）：\",\"CSS动画属性用于创建元素的动画效果。你可以使用关键帧（keyframes）规则来定义动画的不同阶段，并使用动画属性来指定动画的细节和行为。\",\"animation-name：指定要应用的关键帧名称。\",\"animation-duration：指定动画的持续时间。\",\"animation-delay：指定动画开始之前的延迟时间。\",\"animation-iteration-count：指定动画的重复次数。\",\"animation-timing-function：指定动画的时间函数（用于控制动画的速度变化）。\",\"animation-fill-mode：指定动画在非激活状态时（动画结束前和开始之后）的表现方式。\",\".box { animation-name: move; animation-duration: 2s; animation-delay: 1s; animation-iteration-count: infinite; animation-timing-function: ease-in-out; } @keyframes move { 0% { transform: translateX(0); } 50% { transform: translateX(100px); } 100% { transform: translateX(0); } } \",\"渐变属性（Gradient Properties）：\",\"CSS渐变属性用于创建元素的渐变效果，可以在背景、边框和文本等属性上应用渐变。\",\"background-image：指定背景图片为渐变。\",\"background：简写属性，同时设置背景的颜色或图片为渐变。\",\"border-image：使用渐变图片作为边框样式。\",\"text-fill-color：使用渐变作为文本颜色。\",\"mask-image：创建可见部分是渐变的遮罩效果。\",\".box { background: linear-gradient(to right, #ff0000, #00ff00); } .btn { background: radial-gradient(#ff0000, #00ff00); } \",\"10.其他常见属性：\",\".box { opacity: 0.8;//透明度 } .text { white-space: nowrap;//文本换行 overflow: hidden;//溢出 text-overflow: ellipsis;//文本溢出 } .input { outline: none; box-shadow: 0 0 5px rgba(0, 0, 0, 0.3);//盒子阴影 } .dropdown { cursor: pointer;//鼠标移入 pointer-events: none; } \"]},\"145\":{\"h\":\"单位\",\"t\":[\"px（像素）： 像素是最常用的单位，表示屏幕上的一个物理像素点。\",\"div { width: 200px; height: 150px; } \",\"%（百分比）： 百分比基于父元素的尺寸进行计算。\",\"div { width: 50%; height: 50%; } \",\"em：相对于元素的字体大小（font-size）来计算。\",\"p { font-size: 16px; margin: 0.5em; } \",\"rem： 相对于根元素（html）的字体大小（font-size）来计算。\",\"p { font-size: 16px; margin: 1rem; } \",\"vh/vw`： 视口高度（viewport height）和视口宽度（viewport width）的百分比。\",\"div { height: 50vh; width: 75vw; } \",\"pt（点）： 1英寸的1/72大小。\",\"h1 { font-size: 24pt; } \",\"cm（厘米）、mm（毫米）： 以厘米和毫米为单位的长度。\",\"img { width: 5cm; height: 3mm; } \",\"ex：相对于当前字体中小写字母x的高度。\",\"p { line-height: 2ex; } \",\"ch：相对于当前字体中数字0的宽度。\",\"p { width: 10ch; } \",\"此外，还有一些其他单位可用于地理坐标、时间等特定场景。选择恰当的单位非常重要，因为它会直接影响网页的布局和响应性。\"]},\"146\":{\"h\":\"盒模型\",\"t\":[\"CSS盒模型是一种用于描述网页元素的布局和尺寸的概念。它将每个HTML元素视为一个矩形的盒子，由内容、内边距、边框和外边距组成。以下是CSS盒模型的不同部分：\",\"内容区域（Content）： 这是盒子包含的实际内容，如文本、图像等。\",\"内边距（Padding）： 内边距是内容区域与边框之间的区域。它可以在内容和边框之间创建间距。\",\"边框（Border）： 边框是围绕内容和内边距的线条或样式。它定义了盒子的可见边界。\",\"外边距（Margin）： 外边距是盒子与周围元素之间的空间。它用于在元素之间创建间距。\",\"以下是一个示例，展示了CSS盒模型的不同部分：\",\" +----------------+ | Margin | | | | +------------+ | | | Padding | | | | | | | | +--------+ | | | | | Content| | | | | | | | | | | +--------+ | | | | +----------------+ \",\"在CSS中，可以使用各种属性来控制盒模型的不同部分。例如：\",\"width 和 height 属性用于设置内容区域的宽度和高度。\",\"padding 属性用于设置内边距的大小。\",\"border 属性用于设置边框的样式、宽度和颜色。\",\"margin 属性用于设置外边距的大小。\",\"这些属性可以帮助你控制元素的大小、边距和边框，从而实现所需的布局效果。了解并熟练运用CSS盒模型是进行网页布局和设计的基础。\",\"在CSS中，有两种常见的盒模型：标准盒模型和IE盒模型（也称为怪异盒模型）。\",\"标准盒模型： 标准盒模型是CSS中的默认盒模型。它包括内容区域、内边距、边框和外边距。元素的宽度和高度属性（如width和height）只会影响内容区域的尺寸，而内边距和边框会增加元素的总尺寸。\",\"IE盒模型（怪异盒模型）： IE盒模型是在早期的Internet Explorer版本中引入的盒模型。在IE盒模型中，元素的宽度和高度属性（如width和height）会包括内容区域、内边距和边框，而不会计算外边距。这导致元素的总尺寸大于在标准盒模型下相同的宽度和高度属性。\",\"为了改变盒模型的类型，可以使用box-sizing属性。默认情况下，box-sizing属性的值为content-box，即标准盒模型。如果想切换到IE盒模型（怪异盒模型），可以将box-sizing属性设置为border-box。示例如下：\",\"div { box-sizing: border-box; } \",\"这样，元素的宽度和高度属性将包括内边距和边框，而不会增加元素的总尺寸。\",\"通过改变盒模型的类型，可以对元素的布局和尺寸产生不同的影响。具体使用哪种盒模型取决于你的需求和个人偏好。标准盒模型更常用，但在某些情况下，IE盒模型可能提供更方便的尺寸计算。\"]},\"147\":{\"h\":\"布局\",\"t\":[\"CSS布局是指通过CSS样式来安排和组织网页中的元素，以实现所需的页面结构和视觉效果。以下是一些常见的CSS布局技术：\",\"流式布局（Flow Layout）： 流式布局是默认的布局方式，在这种布局中，元素按照其在HTML文档中的顺序自动流动。元素的位置由其前面的元素决定，会根据浏览器视口的大小而自动调整。这种布局适合简单的网页结构。例如：\",\"<div> <p>Paragraph 1</p> <p>Paragraph 2</p> <p>Paragraph 3</p> </div> \",\"相对定位（Relative Positioning）： 使用position: absolute;属性可以将元素从正常文档流中脱离，相对于最近的具有定位属性（比如父级元素）的祖先元素进行定位。通过设置top、right、bottom和left属性，可以精确控制元素的位置。例如：\",\".box { position: relative; top: 20px; left: 30px; } \",\"绝对定位（Absolute Positioning）： 使用position: absolute;属性可以将元素从正常文档流中脱离，相对于最近的具有定位属性（比如父级元素）的祖先元素进行定位。通过设置top、right、bottom和left属性，可以精确控制元素的位置。例如：\",\".container { position: relative; } .box { position: absolute; top: 50px; left: 100px; } \",\"浮动（Float）：\",\"使用float属性可以将元素从正常文档流中脱离，并使其浮动到其容器的左侧或右侧。浮动元素可以使其他元素环绕在其周围。常用于创建多列布局。例如：\",\".left { float: left; width: 200px; } .right { float: right; width: 300px; } \",\"网格布局（Grid Layout）： CSS网格布局是一个强大的布局系统，可以将网页的内容划分为列和行，使其更灵活和响应式地适应不同的屏幕尺寸和布局需求。通过使用display: grid;和相关属性，可以创建复杂的网格布局。例如：\",\".container { display: grid; grid-template-columns: 1fr 1fr 1fr; grid-gap: 10px; } .item { background-color: #ddd; padding: 10px; } \",\"弹性布局（Flexbox Layout）： CSS弹性布局是一种用于创建灵活和响应式布局的技术。通过使用display: flex;和相关属性，可以将容器中的元素放置在一条或多条轴上，并灵活地调整元素的大小、顺序和对齐方式。例如：\",\".container { display: flex; justify-content: space-between; } .item { flex-basis: 30%; } \"]},\"148\":{\"h\":\"响应式设计\",\"t\":[\"CSS响应式设计是一种让网页在不同设备上自适应布局和样式的技术。通过使用媒体查询（Media Queries）和流动单元（Fluid Units），可以根据不同的屏幕尺寸和特定的设备要求，动态地改变网页的外观和布局。\",\"下面是一些常见的用于实现响应式设计的CSS技术和方法：\",\"媒体查询（Media Queries）：使用媒体查询可以根据不同的媒体类型和特定的CSS条件，应用不同的样式规则。比如，你可以根据屏幕宽度来应用不同的样式，以适应不同的设备尺寸。\",\"@media screen and (max-width: 768px) { /* 在屏幕宽度小于等于768px时应用的样式 */ } \",\"流动单元（Fluid Units）：使用相对单位（如百分比、vw/vh）而不是固定像素值来设置元素的尺寸和间距。这样，元素的大小会相对于父元素或视口的大小进行调整，使得布局更加灵活适应不同的屏幕大小。\",\"弹性盒子布局（Flexbox）：Flexbox 是一种用于灵活布局元素的 CSS 布局模型。通过将容器元素设置为 display: flex;，并使用弹性盒子属性来定义子元素的大小和排列方式，可以轻松实现响应式布局。\",\"网格布局（CSS Grid）：CSS Grid 是一种二维布局系统，通过将网页划分为行和列的网格，可以更精确地控制元素的位置和大小。它可以在不同的屏幕尺寸上创建灵活的、自适应的布局。\",\"图片自适应：通过使用 max-width: 100%; 和 height: auto; 来使图片在不同屏幕上自适应大小，避免图片溢出或变形。\",\"通过结合使用这些技术和方法，可以创建出具有良好响应性的网页设计，使网页在各种设备上都能提供优秀的用户体验。\"]},\"149\":{\"h\":\"CSS3 功能\"},\"150\":{\"h\":\"2D和3D转换（2D and 3D Transforms）\",\"t\":[\"CSS提供了丰富的2D和3D转换功能，可以通过调整元素的位置、旋转、缩放和倾斜等来实现各种炫酷的效果。下面是一些常用的2D和3D转换方法：\",\"2D转换：\",\"平移（translate）：通过translate()函数可以在水平和垂直方向上移动元素。例如：transform: translate(100px, 50px); 将元素向右移动100px，向下移动50px。\",\"缩放（scale）：通过scale()函数可以在水平和垂直方向上缩放元素。例如：transform: scale(1.5, 0.5); 将元素水平方向上缩放1.5倍，垂直方向上缩放0.5倍。\",\"旋转（rotate）：通过rotate()函数可以旋转元素。例如：transform: rotate(45deg); 将元素逆时针旋转45度。\",\"倾斜（skew）：通过skew()函数可以在水平和垂直方向上倾斜元素。例如：transform: skew(20deg, -10deg); 将元素水平方向上倾斜20度，垂直方向上倾斜-10度。\",\"3D转换：\",\"透视（perspective）：通过perspective属性可以设置透视效果，使元素具有三维感。例如：perspective: 500px; 设置透视点的距离为500px。\",\"旋转X轴（rotateX）：通过rotateX()函数可以绕X轴旋转元素。例如：transform: rotateX(45deg); 将元素绕X轴逆时针旋转45度。\",\"旋转Y轴（rotateY）：通过rotateY()函数可以绕Y轴旋转元素。例如：transform: rotateY(45deg); 将元素绕Y轴逆时针旋转45度。\",\"旋转Z轴（rotateZ）：通过rotateZ()函数可以绕Z轴旋转元素。例如：transform: rotateZ(45deg); 将元素绕Z轴逆时针旋转45度。\",\"这些只是2D和3D转换的一些基本方法，你可以组合使用这些转换方法，也可以使用其他属性来进一步扩展效果。同时，还可以结合过渡（transition）和关键帧动画（keyframes）来实现更复杂的转换动画。记得在使用转换时，要考虑兼容性，并根据需要进行浏览器前缀处理。\",\"当然，这里有一个简单的例子来演示CSS的2D转换和3D转换。\",\"HTML：\",\"<div class=\\\"box\\\"></div> \",\"CSS：\",\".box { width: 100px; height: 100px; background-color: red; transition: transform 1s; } .box:hover { transform: rotate(45deg) scale(1.5); } \",\"在上述例子中，我们创建了一个名为\\\"box\\\"的<div>元素。初始状态下，它的宽度、高度和背景颜色分别为100px、100px和红色。通过transition属性，我们为transform属性添加了过渡效果，过渡时间为1秒。\",\"当鼠标悬停在这个元素上时，添加了:hover伪类选择器的CSS规则会生效。在这个规则中，我们使用了rotate()和scale()函数，将元素逆时针旋转45度并放大1.5倍。由于之前定义了过渡效果，元素将以平滑动画效果在1秒的时间内从初始状态过渡到悬停状态。\",\"这是一个简单的例子，展示了如何使用CSS的2D转换方法来创建基本的元素动画效果。你可以根据需要调整转换方法的参数，以及添加其他样式规则和选择器来创建更复杂和独特的转换效果，也可以参考CSS的3D转换方法来实现立体效果的转换动画。\"]},\"151\":{\"h\":\"过渡（Transitions）\",\"t\":[\"CSS过渡（Transition）是一种定义元素从一个样式状态到另一个样式状态之间的平滑动画效果的方法。通过指定过渡的属性、持续时间、延迟时间和过渡速度曲线，可以创建各种各样的过渡效果。\",\"下面是使用CSS过渡的基本语法：\",\".element { transition-property: property1, property2, ...; transition-duration: time; transition-timing-function: timing-function; transition-delay: time; } \",\"transition-property：指定需要过渡的属性。可以同时指定多个属性，用逗号分隔。例如：transition-property: width, height;将同时对宽度和高度属性进行过渡动画。\",\"transition-duration：指定过渡的持续时间，即从一个状态过渡到另一个状态所需的时间。时间的单位可以是毫秒（ms）或秒（s）。例如：transition-duration: 1s;将过渡持续1秒。\",\"transition-timing-function：指定过渡的速度曲线。速度曲线定义了过渡的加速和减速效果。常用的速度曲线包括ease（默认值，缓慢开始和结束）、linear（匀速）以及ease-in、ease-out、ease-in-out等。也可以使用贝塞尔曲线函数来自定义速度曲线。\",\"transition-delay：指定过渡效果开始前的延迟时间。时间的单位可以是毫秒（ms）或秒（s）。例如：transition-delay: 0.5s;将在0.5秒后开始过渡效果。\",\"以下是一个简单的示例：\",\"<div class=\\\"box\\\"></div> \",\".box { width: 100px; height: 100px; background-color: red; transition-property: width, height; transition-duration: 1s; transition-timing-function: ease-in-out; } .box:hover { width: 200px; height: 200px; } \",\"在上述示例中，.box的初始状态是一个100px * 100px的红色方块。当鼠标悬停在方块上时，使用过渡效果从初始状态过渡到悬停状态，宽度和高度分别变为200px。由于定义了过渡属性、持续时间和速度曲线，过渡效果将在1秒内平滑进行。\",\"通过调整过渡的属性、持续时间、速度曲线和延迟时间，以及在不同的状态之间应用过渡，可以创建更丰富和复杂的过渡动画效果。同时，你也可以使用CSS关键帧动画（@keyframes）来实现更高级的动画效果。\"]},\"152\":{\"h\":\"动画（Animations）\",\"t\":[\"CSS动画是通过CSS属性的变化和过渡效果来创建元素的动画效果。CSS动画提供了一种简单但强大的方式来实现各种动态效果，而无需编写复杂的JavaScript代码。\",\"以下是一些常用的CSS动画特性和方法：\",\"过渡（Transitions）：过渡是一种在状态之间平滑过渡的效果。通过指定一个或多个属性的开始值、结束值和过渡时间，可以实现元素属性从一种状态到另一种状态的平滑过渡效果。使用transition属性可以为元素的某个或多个属性添加过渡效果。\",\"关键帧动画（Keyframe Animations）：关键帧动画允许在动画过程中定义多个关键帧，每个关键帧定义了属性的特定值。通过在关键帧之间定义过渡效果，可以在不同的状态之间创建平滑的动画效果。使用@keyframes规则可以定义关键帧动画。\",\"动画属性（Animation Properties）：动画属性用于定义动画的持续时间、延迟时间、重复次数等。例如，animation-duration用于指定动画的持续时间，animation-delay用于指定动画的延迟时间。\",\"动画速度曲线（Animation Timing Function）：动画速度曲线用于定义动画属性在动画过程中的变化速度。通过使用不同的速度曲线，可以实现不同的动画效果，如匀速、渐入、渐出等。常见的速度曲线有ease、linear、ease-in、ease-out等。\",\"动画填充模式（Animation Fill Mode）：动画填充模式用于定义动画在播放前和播放后的状态。可以指定动画结束后是否回到初始状态，或者保持动画结束时的状态。常见的填充模式有forwards、backwards、both等。\",\"使用CSS动画时，我们可以根据需要选择适合的特性和方法，通过控制属性的变化和过渡，创建出丰富多样的动画效果。除了上述特性和方法之外，CSS还提供了许多其他的动画相关属性和选择器，允许开发者更加灵活地控制和定制动画效果。\",\"当然，这里有一个简单的例子来演示CSS动画的使用。\",\"HTML：\",\"<div class=\\\"box\\\"></div> \",\"CSS：\",\".box { width: 100px; height: 100px; background-color: red; transition: width 1s, height 1s, background-color 1s; } .box:hover { width: 200px; height: 200px; background-color: blue; } \",\"在上述例子中，我们创建了一个名为\\\"box\\\"的<div>元素。初始状态下，它的宽度、高度和背景颜色分别为100px、100px和红色。通过将这些属性添加到transition属性中，我们为这些属性添加了过渡效果，过渡时间为1秒。\",\"当鼠标悬停在这个元素上时，添加了:hover伪类选择器的CSS规则会生效。在这个规则中，我们将宽度、高度和背景颜色分别更改为200px、200px和蓝色。由于之前定义了过渡效果，元素将以平滑的动画效果在1秒的时间内从初始状态过渡到悬停状态。\",\"这是一个简单的例子，展示了如何使用CSS过渡来创建基本的元素动画效果。你可以根据需要调整属性的值和过渡时间，以及添加其他样式规则和选择器来创建更复杂和独特的动画效果。\"]},\"153\":{\"h\":\"渐变（Gradients）\",\"t\":[\"CSS渐变（Gradient）是一种在元素的背景、边框或文本中创建平滑过渡效果的方法。渐变可以是从一种颜色到另一种颜色的过渡，也可以是多种颜色之间的过渡。\",\"CSS提供了两种类型的渐变：线性渐变（Linear Gradient）和径向渐变（Radial Gradient）。\",\"线性渐变（Linear Gradient）： 线性渐变沿着一条直线方向进行过渡。可以通过定义起始点和结束点来控制渐变的方向和长度。\",\"线性渐变的语法如下：\",\"background: linear-gradient(direction, color-stop1, color-stop2, ...); \",\"direction：指定渐变的方向，可以是角度（表示从起点到终点的旋转角度）或关键词（例如：to top、to bottom、to left、to right等）。\",\"color-stop：定义渐变的颜色。可以指定颜色的位置和颜色值，例如：color-stop: 0% red, 50% blue, 100% green;表示从0%位置（起始点）到50%位置过渡为蓝色，再从50%位置到100%位置过渡为绿色。\",\"以下是一个示例：\",\".bg-gradient { background: linear-gradient(to right, red, orange, yellow); } \",\"上述示例表示创建一个从红色到橙色再到黄色的水平线性渐变。\",\"径向渐变（Radial Gradient）： 径向渐变以一个中心点为基准，向外辐射状进行颜色过渡。\",\"径向渐变的语法如下：\",\"background: radial-gradient(shape, start, end, color-stop1, color-stop2, ...); \",\"shape：指定渐变的形状，可以是圆形（circle）或椭圆形（ellipse）。\",\"start 和 end：分别定义径向渐变的起始点和结束点。\",\"color-stop：和线性渐变的color-stop属性相同，用于定义径向渐变的颜色过渡。\",\"以下是一个示例：\",\".bg-gradient { background: radial-gradient(circle, red, orange, yellow); } \",\"上述示例表示创建一个以圆形为形状的径向渐变，颜色从红色到橙色再到黄色。\",\"通过调整渐变的方向、形状、颜色以及添加更多的颜色过渡点，可以创建各种各样的渐变效果。同时，渐变可以应用于背景、边框和文本等元素的样式中，使得页面更具吸引力和多样性。\"]},\"154\":{\"h\":\"多列布局（Multi-column Layout）\",\"t\":[\"CSS多列布局（Multi-column Layout）是一种用于创建多列文本布局的技术。它可以将文本内容在多个列中呈现，类似于报纸或杂志的排版风格。\",\"使用多列布局，你可以通过设置容器元素的column-count属性来指定要创建的列数，以及通过column-gap属性来设置列之间的间距。\",\"以下是一个简单的多列布局示例：\",\"<div class=\\\"container\\\"> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi efficitur rutrum felis at ornare. Aliquam erat volutpat. Ut commodo mi sit amet orci elementum consequat. Sed ullamcorper, sem at auctor ultrices, nisl ligula maximus erat, ut viverra sem odio sit amet orci.</p> <p>Integer consectetur ipsum sed molestie finibus. Sed porttitor, massa vel rhoncus ultricies, turpis lorem dapibus mauris, at lobortis massa sem in enim. Sed varius finibus tortor vitae auctor. Mauris ut semper mauris. Vestibulum fringilla ex in aliquet molestie.</p> <p>Nullam sit amet malesuada risus, ut ultricies enim. Maecenas at leo quis elit aliquam interdum. Donec aliquam massa non ex fringilla mattis. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Phasellus sed metus libero.</p> </div> <style> .container { column-count: 3; column-gap: 20px; } </style> \",\"在上面的代码中，.container是包含文本内容的容器元素。我们通过设置column-count属性为3来将文本内容分为3列，同时使用column-gap属性设置列之间的间距为20像素。\",\"使用多列布局时，文本内容会自动在多个列中平均分布和流动，根据需要自动调整每列的高度。同时，在需要换行时，文本会自动跨列换行，保持整体的排版整齐和平衡。\",\"除了column-count和column-gap之外，还有其他一些属性可以用于进一步控制多列布局，如column-width设置列宽度、column-rule设置列之间的样式和边框等。\",\"多列布局可以帮助你有效地呈现大段文本内容，使其更具可读性和视觉吸引力。它适用于新闻、文章、博客等需要分栏显示的场景。\"]},\"155\":{\"h\":\"弹性盒子（Flexbox）\",\"t\":[\"CSS Flex布局（Flexible Box Layout）是一种用于创建灵活盒子布局的技术，它可以轻松实现自适应且可伸缩的布局结构。\",\"使用Flex布局，你可以将容器元素的display属性设置为flex或inline-flex，从而将其转换为一个Flex容器。然后，你可以通过设置Flex容器的属性来控制内部元素的布局。\",\"下面是一个使用Flex布局的简单示例：\",\"<div class=\\\"container\\\"> <div class=\\\"item\\\">Item 1</div> <div class=\\\"item\\\">Item 2</div> <div class=\\\"item\\\">Item 3</div> </div> <style> .container { display: flex; } .item { flex: 1; padding: 10px; border: 1px solid #ccc; } </style> \",\"在上面的代码中，.container是Flex容器，我们将它的display属性设置为flex。这将使.container内部的元素按照Flex布局进行排列。\",\".item是Flex容器的子项，我们将它们的flex属性设置为1。这意味着它们将平均分配可用空间，使它们的宽度自动伸缩。\",\"除了flex属性，Flex布局还有其他一些常用的属性，包括：\",\"flex-direction：定义Flex容器中的主轴方向（row、row-reverse、column、column-reverse）。\",\"justify-content：控制Flex容器中子项在主轴上的对齐方式（flex-start、flex-end、center、space-between、space-around）。\",\"align-items：控制Flex容器中子项在交叉轴上的对齐方式（flex-start、flex-end、center、stretch、baseline）。\",\"flex-wrap：指定Flex容器中子项的换行方式（nowrap、wrap、wrap-reverse）。\",\"align-content：在发生换行时，控制多行子项在交叉轴方向上的对齐方式（flex-start、flex-end、center、stretch、space-between、space-around）。\",\"通过使用这些属性，你可以灵活地控制Flex容器和子项的布局，以适应不同的需求和布局要求。Flex布局适用于响应式设计和快速构建简单而灵活的布局结构。\"]},\"156\":{\"h\":\"网格布局（CSS Grid）\",\"t\":[\"CSS Grid布局是一种强大的网格布局系统，它可以实现复杂的多行多列布局。通过定义网格容器和网格项，我们可以控制网格内的元素的位置和大小。\",\"要使用CSS Grid布局，首先需要创建一个网格容器，可以是div元素或其他具有display: grid;属性的元素。然后，通过控制网格容器的属性和网格项的位置，来定义网格布局。\",\"下面是一个使用CSS Grid布局的简单示例：\",\"<div class=\\\"container\\\"> <div class=\\\"item\\\">Item 1</div> <div class=\\\"item\\\">Item 2</div> <div class=\\\"item\\\">Item 3</div> <div class=\\\"item\\\">Item 4</div> </div> <style> .container { display: grid; grid-template-columns: 1fr 1fr; /* 定义两列网格 */ grid-gap: 10px; /* 设置网格间距 */ } .item { background-color: #ccc; padding: 20px; } </style> \",\"在上面的代码中，.container是网格容器，我们将它的display属性设置为grid。通过grid-template-columns属性，我们定义了网格容器的两列，1fr表示每列的宽度相等。通过grid-gap属性，我们设置了网格项之间的间距为10px。\",\"内部的.item是网格项，它们将自动填充网格容器的单元格。我们可以使用CSS属性和样式来控制网格项的外观。\",\"此外，CSS Grid布局还支持更复杂的功能，如媒体查询、自动布局、对齐方式等。你可以使用grid-template-rows属性定义网格的行，使用grid-area属性来控制网格项在网格中的位置，使用grid-auto-flow属性来定义网格的自动放置方式等等。\",\"通过灵活使用CSS Grid布局，你可以轻松创建多种多样的网格布局，适用于响应式设计和不同设备上的布局需求。\"]},\"157\":{\"h\":\"媒体查询（Media Queries）\",\"t\":[\"CSS媒体查询（Media Queries）是一种CSS技术，它允许你根据设备的属性（如屏幕尺寸、屏幕方向、分辨率等）来应用不同的CSS样式。\",\"使用媒体查询，你可以为不同设备（如手机、平板电脑、桌面电脑）提供适当的样式和布局，从而实现响应式设计。\",\"媒体查询的基本语法如下：\",\"@media mediaType and (mediaFeature) { /* CSS样式规则 */ } \",\"mediaType可以是以下三种之一： \",\"all：适用于所有媒体设备。\",\"screen：适用于计算机屏幕、平板电脑、智能手机等。\",\"print：适用于打印预览和打印。\",\"mediaFeature是设备属性或条件，例如： \",\"width：屏幕宽度。\",\"height：屏幕高度。\",\"orientation：屏幕方向（横向或纵向）。\",\"resolution：屏幕分辨率。\",\"等等。\",\"下面是一个简单的媒体查询的示例，当屏幕宽度小于等于600像素时，应用特定的CSS样式：\",\"@media screen and (max-width: 600px) { /* 在宽度小于等于600px时应用的CSS样式 */ body { font-size: 14px; } .container { display: flex; } } \",\"在上面的代码中，当屏幕宽度小于等于600像素时，.container会应用display: flex;的样式，同时body元素中的文本会使用14像素的字体大小。\",\"通过使用媒体查询，你可以针对不同的设备、不同的屏幕尺寸、不同的方向等情况，应用不同的样式和布局。这使得你可以为用户提供更好的用户体验，使网页在不同设备上都能良好地显示和运行。\"]},\"158\":{\"h\":\"背景（BackGround）\",\"t\":[\"能够更灵活地控制元素的背景效果，实现更多样化和富有创意的设计.\",\"background-size：用于定义背景图像的尺寸大小。可以使用像素值、百分比或关键字（如cover和contain）来设置背景图像的宽度和高度。\",\"background-origin：控制背景图像的起始位置。可以设置为content-box、padding-box或border-box，以指定背景图像相对于内容框、内边距框或边框框之间的位置。\",\"background-clip：控制背景图像的显示范围。可以设置为content-box、padding-box或border-box，以指定背景图像是否应裁剪到内容框、内边距框或边框框之内。\",\"background-origin和background-clip的组合使用：\",\"div { background-image: url(\\\"image.jpg\\\"); background-origin: content-box; background-clip: padding-box; } \",\"这个例子将背景图像应用于div元素，背景图像的起始位置相对于内容框，而背景图像的显示范围相对于内边距框。\",\"background-repeat：控制背景图像的重复方式。可以设置为repeat（默认值，在水平和垂直方向上重复）、repeat-x（仅在水平方向上重复）、repeat-y（仅在垂直方向上重复）或no-repeat（不重复）。\",\"background-attachment：控制背景图像的滚动方式。可以设置为scroll（默认值，在元素滚动时背景图像也跟随滚动）、fixed（固定在元素区域不随滚动而移动）或local（背景图像随元素内部内容滚动）。\",\"background-image：允许使用多个背景图像来创建复合背景效果。可以使用逗号分隔多个值，每个值表示一个背景图像的URL。\"]},\"159\":{\"h\":\"选择器（Selector）\",\"t\":[\"结构性伪类选择器（Structural Pseudo-class Selectors）：结构性伪类选择器选取的是符合文档结构特定条件的元素。例如，:first-child可以选择作为父元素第一个子元素的元素，:nth-child可以选择作为父元素中特定位置的子元素。\",\"通用兄弟选择器（General Sibling Selectors）：通用兄弟选择器可以选择在指定元素后的所有兄弟元素。例如，element1 ~ element2可以选择与element1后面的同一父元素中的所有element2。\",\"列选择器（Column Selectors）：列选择器可以选择表格中特定列的元素。例如，:nth-child(n)可以选择表格中的第n列。\",\":not()选择器（Negation Selector）：:not()选择器用于排除具有特定选择器的元素。例如，:not(.class)可以选择除了具有.class类的元素以外的所有元素。\",\":empty选择器：:empty选择器用于选择没有子元素或者没有文本内容的元素。\",\":target选择器：:target选择器用于选择URL片段标识符（URL fragment identifier）指向的元素。\",\":checked选择器：:checked选择器可以选择被选中的复选框或单选按钮。\",\":enabled和:disabled选择器：:enabled选择器用于选择可用（非禁用）的表单元素，而:disabled选择器用于选择禁用的表单元素。\",\":first-of-type和:last-of-type选择器：:first-of-type选择器选择同类型的元素中的第一个元素，:last-of-type选择器选择同类型的元素中的最后一个元素。\",\":nth-of-type选择器：:nth-of-type(n)选择器选择同类型的元素中的第n个元素。\",\":nth-last-of-type选择器：:nth-last-of-type(n)选择器选择同类型的元素中的倒数第n个元素。\",\":only-child选择器和:only-of-type选择器：:only-child选择器选择作为其父元素唯一子元素的元素，:only-of-type选择器选择同类型的元素中的唯一一个元素。\",\":first-line和:first-letter选择器：:first-line选择器选择块级元素的首行文本，:first-letter选择器选择块级元素的首字母。\"]},\"160\":{\"h\":\"Css框架\",\"t\":[\"CSS框架是预先编写好的CSS样式集合，旨在简化网页开发流程和提供一致的设计模式。通过使用CSS框架，开发者可以快速构建美观且响应式的网页布局，并且减少对样式的重复编写。\",\"以下是一些常见的CSS框架：\",\"Bootstrap（https://getbootstrap.com）：Bootstrap是最受欢迎的CSS框架之一，提供了大量的CSS类和组件，用于创建响应式网页布局和常见的UI组件。\",\"Foundation（https://foundation.zurb.com）：Foundation是另一个流行的CSS框架，具有灵活的栅格系统和各种可定制的组件，适用于构建各种类型的网站和应用程序。\",\"Bulma（https://bulma.io）：Bulma是一个轻量级的CSS框架，以简洁和现代的设计风格为特点。它提供了直观的类和组件，易于使用和定制。\",\"Tailwind CSS（https://tailwindcss.com）：Tailwind CSS是一个功能丰富且高度可定制的CSS框架，使用一组小型类来构建网页布局和组件。\",\"Semantic UI（https://semantic-ui.com）：Semantic UI是一个语义化的CSS框架，通过使用具有表义的类名，提供了易于阅读和维护的代码，并支持响应式设计和大量的UI组件。\",\"这些CSS框架都有自己的特点和优势，可以根据项目需求和个人喜好选择适合的框架。它们提供了一些常用的样式和组件，帮助开发者快速搭建网页，节省开发时间和精力。\"]},\"161\":{\"h\":\"Css预处理器\",\"t\":[\"CSS预处理器是一种将具有扩展语法的CSS代码转换成标准CSS的工具。它们引入了一些功能和语法，使得CSS的编写更加模块化、可复用和易于维护。\",\"以下是几个常见的CSS预处理器：\",\"Sass（Syntactically Awesome Style Sheets）：Sass是最受欢迎的CSS预处理器之一，它提供了许多有用的特性，如变量、嵌套选择器、混合器（Mixin）、函数等。Sass文件使用.scss扩展名。\",\"// 定义变量 $primary-color: #3498db; $secondary-color: #e74c3c; // 定义混合器 @mixin gradient-background { background: linear-gradient(to bottom, $primary-color, $secondary-color); } // 定义样式规则 .container { width: 80%; margin: 0 auto; padding: 20px; @include gradient-background; } .button { display: inline-block; padding: 10px 20px; background-color: $primary-color; color: #fff; border-radius: 4px; transition: background-color 0.3s; &:hover { background-color: darken($primary-color, 10%); } } \",\"在上面的示例中，我们首先定义了两个Sass变量：$primary-color和$secondary-color，分别代表主要颜色和次要颜色。然后，我们创建了一个混合器gradient-background，它会在生成的CSS中插入一个线性渐变背景样式。\",\"接下来，我们在.container类中使用了混合器gradient-background，这样每个.container元素都会具有一个渐变背景。\",\"在.button类中，我们使用了Sass变量$primary-color来设置背景颜色，并使用了Sass的darken函数来定义鼠标悬停时的背景颜色。\",\"这样，当我们编译这段Sass代码后，会得到以下的CSS输出：\",\".container { width: 80%; margin: 0 auto; padding: 20px; background: linear-gradient(to bottom, #3498db, #e74c3c); } .button { display: inline-block; padding: 10px 20px; background-color: #3498db; color: #fff; border-radius: 4px; transition: background-color 0.3s; } .button:hover { background-color: #2980b9; } \",\"这个例子展示了如何使用Sass的变量、混合器和嵌套选择器来简化CSS的编写，并提供了更灵活和可维护的样式规则。\",\"Less（Leaner Style Sheets）：Less是另一个流行的CSS预处理器，语法比较简单，与传统的CSS较为接近。它支持变量、嵌套选择器、Mixin等功能。Less文件使用.less扩展名。\",\"// 定义变量 @primary-color: #3498db; @secondary-color: #e74c3c; // 定义混合器 .gradient-background() { background: linear-gradient(to bottom, @primary-color, @secondary-color); } // 定义样式规则 .container { width: 80%; margin: 0 auto; padding: 20px; .gradient-background(); } .button { display: inline-block; padding: 10px 20px; background-color: @primary-color; color: #fff; border-radius: 4px; transition: background-color 0.3s; &:hover { background-color: darken(@primary-color, 10%); } } \",\"在上面的示例中，我们使用Less语法进行变量和混合器的定义。与Sass不同的是，在Less中使用@符号表示变量。我们定义了两个变量：@primary-color和@secondary-color，分别代表主要颜色和次要颜色。\",\"然后，我们创建了一个混合器.gradient-background()，它将在生成的CSS中插入一个线性渐变背景样式。\",\"接下来，我们在.container类中使用了混合器.gradient-background()，这样每个.container元素都会具有一个渐变背景。\",\"在.button类中，我们使用了Less变量@primary-color来设置背景颜色，并使用了Less的darken()函数来定义鼠标悬停时的背景颜色。\",\"这样，当我们编译这段Less代码后，会得到以下的CSS输出：\",\".container { width: 80%; margin: 0 auto; padding: 20px; background: linear-gradient(to bottom, #3498db, #e74c3c); } .button { display: inline-block; padding: 10px 20px; background-color: #3498db; color: #fff; border-radius: 4px; transition: background-color 0.3s; } .button:hover { background-color: #2980b9; } \",\"这个例子展示了如何使用Less的变量、混合器和嵌套选择器来简化CSS的编写，并提供了更灵活和可维护的样式规则。Less与Sass类似，但使用了不同的语法和变量表示方式。\",\"Stylus：Stylus是一个非常灵活和简化的CSS预处理器，它的语法更像是一种轻量级的编程语言。Stylus具有动态特性，可以通过简单的操作实现复杂的样式生成。Stylus文件使用.styl扩展名。\",\"// 定义变量 primary-color = #3498db secondary-color = #e74c3c // 定义混合器 gradient-background() background linear-gradient(to bottom, primary-color, secondary-color) // 定义样式规则 .container width 80% margin 0 auto padding 20px gradient-background() .button display inline-block padding 10px 20px background-color primary-color color #fff border-radius 4px transition background-color 0.3s &:hover background-color darken(primary-color, 10%) \",\"在上面的示例中，我们使用Stylus的语法来定义变量和混合器。在Stylus中，变量直接采用赋值符号=进行定义，而不需要添加$或@等符号。\",\"我们定义了两个变量：primary-color和secondary-color，分别代表主要颜色和次要颜色。\",\"然后，我们创建了一个混合器gradient-background()，它会在生成的CSS中插入一个线性渐变背景样式。\",\"接下来，我们在.container类中使用了混合器gradient-background()，这样每个.container元素都会具有一个渐变背景。\",\"在.button类中，我们使用了Stylus变量primary-color来设置背景颜色，并使用了Stylus的darken()函数来定义鼠标悬停时的背景颜色。\",\"这样，当我们编译这段Stylus代码后，会得到以下的CSS输出：\",\".container { width: 80%; margin: 0 auto; padding: 20px; background: linear-gradient(to bottom, #3498db, #e74c3c); } .button { display: inline-block; padding: 10px 20px; background-color: #3498db; color: #fff; border-radius: 4px; transition: background-color 0.3s; } .button:hover { background-color: #2980b9; } \",\"这个例子展示了如何使用Stylus的变量、混合器和嵌套选择器来简化CSS的编写，并提供了更灵活和可维护的样式规则。Stylus使用了一种更简化和紧凑的语法，可以通过简单的操作实现复杂的样式生成。\",\"这些CSS预处理器都提供了类似于变量、嵌套选择器、Mixin等功能，以及更强大的语法和特性，让开发者能够更高效地编写CSS样式。预处理器可以在开发过程中增加灵活性和可维护性，并自动转换为标准的CSS文件，以便在浏览器中使用。选择哪个预处理器取决于个人偏好、项目需求和团队共识。\"]},\"162\":{\"h\":\"ECMAScript\"},\"163\":{\"h\":\"简介\",\"t\":[\"ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在 2015 年 6 月正式发布了。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。\"]},\"164\":{\"h\":\"ECMAScript 和 JavaScript 的关系\",\"t\":[\"要讲清楚这个问题，需要回顾历史。1996 年 11 月，JavaScript 的创造者 Netscape 公司，决定将 JavaScript 提交给标准化组织 ECMA，希望这种语言能够成为国际标准。次年，ECMA 发布 262 号标准文件（ECMA-262）的第一版，规定了浏览器脚本语言的标准，并将这种语言称为 ECMAScript，这个版本就是 1.0 版。\",\"该标准从一开始就是针对 JavaScript 语言制定的，但是之所以不叫 JavaScript，有两个原因。一是商标，Java 是 Sun 公司的商标，根据授权协议，只有 Netscape 公司可以合法地使用 JavaScript 这个名字，且 JavaScript 本身也已经被 Netscape 公司注册为商标。二是想体现这门语言的制定者是 ECMA，不是 Netscape，这样有利于保证这门语言的开放性和中立性。\",\"因此，ECMAScript 和 JavaScript 的关系是，前者是后者的规格，后者是前者的一种实现（另外的 ECMAScript 方言还有 JScript 和 ActionScript）。日常场合，这两个词是可以互换的。\"]},\"165\":{\"h\":\"变量\",\"t\":[\"在ES6中，引入了两个新的变量声明关键字：let和const。相比于传统的var关键字，这两个新的关键字提供了更好的变量作用域控制和不可变性。\",\"let \",\"使用let关键字声明的变量具有块级作用域，只在声明的块内有效。\",\"块级作用域是指在大括号（{}）中定义的区域，如if语句、循环、函数等具有独立的作用域。\",\"let声明的变量可以在同一作用域中重新赋值，但不允许重复声明同名变量。\",\"示例：\",\"function example() { let x = 1; // 块级作用域内的变量 if (true) { let x = 2; // 在 if 块中重新声明一个新的变量 x console.log(x); // 输出 2 } console.log(x); // 输出 1 } \",\"const\",\"使用const关键字声明的变量也具有块级作用域，其值在声明后就不可修改（常量）。\",\"const声明的变量必须在声明时进行初始化，且不能再次赋值。\",\"示例：\",\"const pi = 3.14159; // 定义一个常量 pi pi = 3; // 报错，常量 pi 不可修改 \",\"需要注意的是，块级作用域内的变量无法在声明之前访问，这与var关键字有所不同。另外，let和const声明的变量也不会被添加到全局对象（例如window对象）中。\",\"使用let和const关键字可以更好地控制变量的作用域和可变性，提高代码的可读性和维护性。在编写ES6代码时，推荐首选使用let和const，只在需要兼容ES5及以下环境或特殊场景时才使用var。\"]},\"166\":{\"h\":\"解构赋值\",\"t\":[\"解构赋值是一种通过模式匹配来提取数组或对象中的值，并将其赋值给对应的变量。下面详细介绍解构赋值的语法和用法。\",\"数组解构赋值\",\"数组解构赋值使用[]来进行匹配和赋值。\",\"示例：\",\"let [a, b, c] = [1, 2, 3]; console.log(a); // 输出 1 console.log(b); // 输出 2 console.log(c); // 输出 3 \",\"数组解构赋值可以忽略某些元素，使用逗号来跳过对应的位置。\",\"示例：\",\"let [a, , c] = [1, 2, 3]; console.log(a); // 输出 1 console.log(c); // 输出 3 \",\"也可以设置默认值，在解构得到的值为undefined时使用默认值。\",\"示例：\",\"let [a = 0, b = 0, c = 0] = [1, undefined, 3]; console.log(a); // 输出 1 console.log(b); // 输出 0，默认值生效 console.log(c); // 输出 3 \",\"对象解构赋值\",\"对象解构赋值使用{}来进行匹配和赋值。\",\"示例：\",\"let {x, y} = {x: 1, y: 2}; console.log(x); // 输出 1 console.log(y); // 输出 2 \",\"对象解构赋值可以设置默认值，并在对象属性不存在时使用默认值。\",\"示例：\",\"let {x = 0, y = 0} = {}; console.log(x); // 输出 0 console.log(y); // 输出 0 \",\"可以通过别名重命名解构得到的变量。\",\"示例：\",\"let {x: a, y: b} = {x: 1, y: 2}; console.log(a); // 输出 1 console.log(b); // 输出 2 \",\"对象解构赋值也支持嵌套的解构模式。\",\"示例：\",\"let {x, nestedObj: {y}, z = 0} = {x: 1, nestedObj: {y: 2}}; console.log(x); // 输出 1 console.log(y); // 输出 2 console.log(z); // 输出 0 \",\"解构赋值还可以与函数参数、函数返回值等结合使用，以便更方便地处理复杂的数据结构。\",\"示例：\",\"function getCoords() { return {x: 1, y: 2}; } let {x, y} = getCoords(); console.log(x); // 输出 1 console.log(y); // 输出 2 \",\"通过使用解构赋值，可以简化变量的赋值过程，并使代码更加简洁、易读。掌握解构赋值的使用方法可以提高编码效率和代码质量。\"]},\"167\":{\"h\":\"字符串\",\"t\":[\"ES6对字符串的拓展主要包括以下几个方面：\",\"模板字符串（Template Strings）：ES6引入了模板字符串，使用反引号（`）包裹起来，并且可以在字符串中插入变量或者表达式。例如：\",\"const name = 'Alice'; console.log(`Hello, ${name}!`); // 输出：Hello, Alice! \",\"多行字符串：使用传统的字符串需要使用转义字符（\\\\n）来表示多行字符串，而ES6中可以直接使用反引号包裹多行字符串，可以在字符串中保留换行符。例如：\",\"const multiline = `这是一段 多行 字符串`; console.log(multiline); // 输出： // 这是一段 // 多行 // 字符串 \",\"字符串的常用方法拓展：ES6对字符串的常用方法进行了扩展，包括：\",\"startsWith()：判断字符串是否以指定的字符开头\",\"endsWith()：判断字符串是否以指定的字符结尾\",\"includes()：判断字符串是否包含指定的字符\",\"repeat()：重复字符串指定次数\",\"padStart()：在字符串的开头补全指定的字符至指定长度\",\"padEnd()：在字符串的结尾补全指定的字符至指定长度\",\"trimStart()：删除字符串开头的空格\",\"trimEnd()：删除字符串结尾的空格\",\"例如：\",\"const str = 'Hello, world!'; console.log(str.startsWith('Hello')); // 输出：true console.log(str.endsWith('world!')); // 输出：true console.log(str.includes('o')); // 输出：true console.log(str.repeat(3)); // 输出：Hello, world!Hello, world!Hello, world! console.log(str.padStart(15, 'x')); // 输出：xxHello, world! console.log(str.padEnd(15, 'x')); // 输出：Hello, world!xx console.log(' hello '.trimStart()); // 输出：hello console.log(' hello '.trimEnd()); // 输出： hello \",\"当然！接着上面的内容，还有一些其他的字符串拓展：\",\"字符串解构赋值：ES6中可以使用解构赋值的方式对字符串进行拆分。例如：\",\"const [a, b, c] = 'abc'; console.log(a); // 输出：a console.log(b); // 输出：b console.log(c); // 输出：c \",\"Unicode码点的识别和表示：ES6中可以使用\\\\u{}语法来表示一个Unicode码点，而且可以正确识别大于0xFFFF的码点。例如：\",\"console.log('\\\\u{1F601}'); // 输出：😁 console.log('\\\\u{1F602}'); // 输出：😂 console.log('\\\\u{1F603}'); // 输出：😃 \",\"字符串的迭代器：ES6中的字符串可以被迭代遍历，可以使用for...of循环遍历每一个字符。例如：\",\"const str = 'hello'; for (const char of str) { console.log(char); } // 输出： // h // e // l // l // o \",\"String.raw()方法：String.raw()方法返回一个斜杠转义的字符串。这在处理正则表达式、文件路径等方面很有用。例如：\",\"const path = String.raw`C:\\\\Users\\\\Admin\\\\Desktop`; console.log(path); // 输出：C:\\\\Users\\\\Admin\\\\Desktop \"]},\"168\":{\"h\":\"正则表达式\",\"t\":[\"ES6对正则表达式进行了一些重要的改进和拓展。下面是ES6中正则表达式的一些新特性：\",\"正则表达式的构造函数：ES6引入了RegExp构造函数的扩展，可以使用构造函数来创建正则表达式对象，而不仅仅是使用字面量形式。构造函数可以接收两个参数，分别是正则表达式的模式和标志。例如：\",\"const regex = new RegExp('[a-z]', 'i'); console.log(regex.test('abc')); // 输出：true console.log(regex.test('123')); // 输出：false \",\"u修饰符：ES6引入了u修饰符（unicode修饰符），用于处理码点大于0xFFFF的Unicode字符。当正则表达式中包含u修饰符时，会将正则表达式解析为Unicode模式。例如：\",\"console.log(/^\\\\uD83D/u.test('\\\\uD83D\\\\uDC2A')); // 输出：true，正常匹配 console.log(/^\\\\uD83D/.test('\\\\uD83D\\\\uDC2A')); // 输出：false，不匹配 \",\"y修饰符：ES6引入了y修饰符（粘连修饰符），用于执行粘连匹配。当正则表达式中包含y修饰符时，匹配操作会从目标字符串的当前索引位置开始，并且只匹配该索引位置之后的字符。例如：\",\"const str = 'abcabcabc'; const regex = /abc/y; regex.lastIndex = 2; console.log(regex.exec(str)); // 输出：['abc'] console.log(regex.exec(str)); // 输出：['abc'] console.log(regex.exec(str)); // 输出：['abc'] \",\"s修饰符：ES2018中引入了s修饰符，也称为dotAll修饰符。当正则表达式中包含s修饰符时，模式中的.匹配任意字符，包括换行符。例如：\",\"const regex = /foo.bar/s; console.log(regex.test('foo\\\\nbar')); // 输出：true \",\"后行断言：ES2018中引入了后行断言，即(?<=)和(?<!)。后行断言可以匹配某个位置之前的内容或者不匹配某个位置之前的内容。例如：\",\"console.log(/(?<=a)b/.test('ab')); // 输出：true console.log(/(?<!a)b/.test('cb')); // 输出：true console.log(/(?<=a)b/.test('cb')); // 输出：false \",\"dotAll 标志：除了使用s修饰符外，ES2018 引入了 s 标志，可以直接在正则表达式字面量后面添加，表示 . 匹配任意字符（包括换行符）的行为。例如：\",\"const regex = /foo.bar/s; console.log(regex.test('foo\\\\nbar')); // 输出：true \",\"Unicode 属性转义：ES2018 引入了 \\\\p{} 和 \\\\P{} 语法，用于匹配符合 Unicode 属性的字符和不符合 Unicode 属性的字符。例如：\",\"const regex = /\\\\p{Script=Greek}/u; console.log(regex.test('α')); // 输出：true console.log(regex.test('a')); // 输出：false \",\"具名捕获组：ES2018 引入了具名捕获组的语法，可以为捕获的子字符串设置名字，方便后续操作。例如：\",\"const regex = /(?<year>\\\\d{4})-(?<month>\\\\d{2})-(?<day>\\\\d{2})/; const str = '2023-07-30'; const result = regex.exec(str); console.log(result.groups.year); // 输出：2023 console.log(result.groups.month); // 输出：07 console.log(result.groups.day); // 输出：30 \",\"前行断言：类似于后行断言，ES2018 中引入了前行断言，即 (?=) 和 (?!=)。前行断言用于匹配某个位置之后的内容或者不匹配某个位置之后的内容。例如：\",\"console.log(/a(?=b)/.test('ab')); // 输出：true console.log(/a(?!b)/.test('ac')); // 输出：true console.log(/a(?=b)/.test('ac')); // 输出：false \",\"引用已匹配的子字符串：ES2018 中引入了 \\\\N 语法，可以在正则表达式中引用已经匹配到的子字符串，其中 N 表示对应的捕获组序号。例如：\",\"const regex = /(foo)bar\\\\1/; console.log(regex.test('foobarfoo')); // 输出：true \"]},\"169\":{\"h\":\"数值（Number）\",\"t\":[\"ES6对数字的拓展主要包括以下几个方面：\",\"二进制和八进制表示法：ES6中引入了二进制和八进制的新表示法，分别使用0b和0o作为前缀。例如：\",\"const binary = 0b1010; // 二进制表示，相当于十进制的10 const octal = 0o12; // 八进制表示，相当于十进制的10 console.log(binary); // 输出：10 console.log(octal); // 输出：10 \",\"Number.isFinite()：用于判断一个值是否为有限的数值。与全局的isFinite()函数相比，Number.isFinite()不会将非数值的值转换为数值。例如：\",\"console.log(Number.isFinite(123)); // 输出：true console.log(Number.isFinite(Infinity)); // 输出：false console.log(Number.isFinite('123')); // 输出：false \",\"Number.isInteger()：用于判断一个值是否为整数。与全局的isInteger()函数相比，Number.isInteger()不会将非数值的值转换为数值。例如：\",\"console.log(Number.isInteger(5)); // 输出：true console.log(Number.isInteger(5.1)); // 输出：false console.log(Number.isInteger('5')); // 输出：false \",\"Number.parseInt()：用于将字符串解析成整数。与全局的parseInt()函数相比，Number.parseInt()只能解析整数，也不会忽略字符串开头的空格。例如：\",\"console.log(Number.parseInt('123')); // 输出：123 console.log(Number.parseInt('123.45')); // 输出：123 console.log(Number.parseInt(' 123 ')); // 输出：123 \",\"Number.parseFloat()：用于将字符串解析成浮点数。与全局的parseFloat()函数相比，Number.parseFloat()不会忽略字符串开头的空格。例如：\",\"console.log(Number.parseFloat('3.14')); // 输出：3.14 console.log(Number.parseFloat(' 3.14 ')); // 输出：3.14 \",\"安全整数范围：ES6引入了Number.MIN_SAFE_INTEGER和Number.MAX_SAFE_INTEGER两个常量，用于表示JavaScript中的安全整数范围。这些范围以-2^53 + 1和2^53 - 1为界。例如：\",\"console.log(Number.MIN_SAFE_INTEGER); // 输出：-9007199254740991 console.log(Number.MAX_SAFE_INTEGER); // 输出：9007199254740991 \",\"Number.isNaN()：用于判断一个值是否为NaN。与全局的isNaN()函数相比，Number.isNaN()严格判断，只有当值为NaN时才返回true。例如：\",\"console.log(Number.isNaN(NaN)); // 输出：true console.log(Number.isNaN(123)); // 输出：false console.log(Number.isNaN('123')); // 输出：false \",\"Number.isSafeInteger()：用于判断一个值是否为安全整数。与全局的isSafeInteger()函数相比，Number.isSafeInteger()不会将非数值的值转换为数值。例如：\",\"console.log(Number.isSafeInteger(123)); // 输出：true console.log(Number.isSafeInteger(Infinity)); // 输出：false console.log(Number.isSafeInteger('123')); // 输出：false \",\"Math.sign()：用于判断一个数值的符号，返回1（正数）、-1（负数）、0（0）或NaN（非数值）。例如：\",\"console.log(Math.sign(3)); // 输出：1 console.log(Math.sign(-3)); // 输出：-1 console.log(Math.sign(0)); // 输出：0 console.log(Math.sign('abc')); // 输出：NaN \",\"Math.trunc()：用于去除一个数值的小数部分，返回整数部分。例如：\",\"console.log(Math.trunc(3.14)); // 输出：3 console.log(Math.trunc(-3.14)); // 输出：-3 console.log(Math.trunc(0.9)); // 输出：0 \",\"指数运算符：ES2016引入了指数运算符 **，用于计算一个数的指数幂。例如：\",\"console.log(2 ** 3); // 输出：8 console.log(3 ** 2); // 输出：9 \"]},\"170\":{\"h\":\"数组（Array）\",\"t\":[\"ES6对数组做了许多重要的改进和拓展。以下是ES6中与数组相关的一些主要特性：\",\"扩展运算符 (Spread Operator)：... 扩展运算符可以将一个数组展开为逗号分隔的参数序列，或者将一个字符串展开为字符数组。例如：\",\"const array1 = [1, 2, 3]; const array2 = [...array1, 4, 5, 6]; console.log(array2); // 输出：[1, 2, 3, 4, 5, 6] const str = 'Hello'; const chars = [...str]; console.log(chars); // 输出：['H', 'e', 'l', 'l', 'o'] \",\"Array.from()：Array.from() 方法用于从类似数组或可迭代对象创建一个新的数组实例。它接收一个可迭代对象或类数组对象，并返回一个新的数组。例如：\",\"const array1 = Array.from('Hello'); console.log(array1); // 输出：['H', 'e', 'l', 'l', 'o'] const array2 = Array.from([1, 2, 3], x => x * 2); console.log(array2); // 输出：[2, 4, 6] \",\"Array.of()：Array.of() 方法用于创建一个包含任意数量参数的新数组实例，不考虑参数的类型或数量。例如：\",\"const array1 = Array.of(1, 2, 3); console.log(array1); // 输出：[1, 2, 3] const array2 = Array.of(5); console.log(array2); // 输出：[5] \",\"find() 和 findIndex()：find() 方法用于查找数组中满足条件的第一个元素，并返回该元素；findIndex() 方法用于查找数组中满足条件的第一个元素的索引，并返回该索引。例如：\",\"const array = [1, 2, 3, 4, 5]; const foundElement = array.find(element => element > 3); console.log(foundElement); // 输出：4 const foundIndex = array.findIndex(element => element > 3); console.log(foundIndex); // 输出：3 \",\"includes()：includes() 方法用于判断数组是否包含某个特定元素，如果包含则返回 true；否则返回 false。例如：\",\"const array = [1, 2, 3, 4, 5]; console.log(array.includes(3)); // 输出：true console.log(array.includes(6)); // 输出：false \",\"fill()：fill() 方法用于将数组的所有元素替换为一个静态值。例如：\",\"const array = [1, 2, 3, 4, 5]; console.log(array.fill(0)); // 输出：[0, 0, 0, 0, 0] \",\"flat() 和 flatMap()：flat() 方法用于将嵌套的数组扁平化为一维数组；flatMap() 方法首先使用映射函数对原数组的每个元素进行映射，然后将返回的结果使用 flat() 方法扁平化。例如：\",\"const nestedArray = [1, [2, [3, [4]]]]; console.log(nestedArray.flat()); // 输出：[1, 2, [3, [4]]] console.log(nestedArray.flat(2)); // 输出：[1, 2, 3, [4]] const array = [1, 2, 3]; console.log(array.flatMap(x => [x * 2])); // 输出：[2, 4, 6] \",\"entries()、keys() 和 values()：entries() 方法用于返回一个包含数组所有键值对的迭代器；keys() 方法用于返回一个包含数组所有键的迭代器；values() 方法用于返回一个包含数组所有值的迭代器。例如：\",\"const array = ['a', 'b', 'c']; console.log([...array.entries()]); // 输出：[[0, 'a'], [1, 'b'], [2, 'c']] console.log([...array.keys()]); // 输出：[0, 1, 2] console.log([...array.values()]); // 输出：['a', 'b', 'c'] \",\"Array.prototype.includes()：ES7 引入了 Array.prototype.includes() 方法，用于检查数组是否包含某个元素。与 Array.includes() 静态方法类似，但是它是在数组原型上定义的。例如：\",\"const array = [1, 2, 3, 4, 5]; console.log(array.includes(3)); // 输出：true console.log(array.includes(6)); // 输出：false \",\"Array.prototype.findLast() 和 Array.prototype.findIndexLast()：这是一些自定义的方法，用于在数组中从后往前查找满足条件的元素和对应的索引。例如：\",\"Array.prototype.findLast = function(callback) { for (let i = this.length - 1; i >= 0; i--) { if (callback(this[i])) { return this[i]; } } } Array.prototype.findIndexLast = function(callback) { for (let i = this.length - 1; i >= 0; i--) { if (callback(this[i])) { return i; } } } const array = [1, 2, 3, 4, 5]; console.log(array.findLast(element => element > 3)); // 输出：5 console.log(array.findIndexLast(element => element > 3)); // 输出：4 \"]},\"171\":{\"h\":\"对象（Object）\",\"t\":[\"ES6对对象的处理也做了一些重要的改进和拓展。以下是ES6中与对象相关的一些主要特性：\",\"对象字面量扩展：ES6引入了一些便利的语法来创建和操作对象字面量。\",\"属性简写：当属性名称和变量名相同时，可以省略冒号和属性值。\",\"const name = 'Alice'; const age = 30; const person = { name, age }; console.log(person); // 输出：{ name: 'Alice', age: 30 } \",\"计算属性名：可以使用计算的表达式作为属性名称。\",\"const key = 'name'; const person = { [key]: 'Alice' }; console.log(person); // 输出：{ name: 'Alice' } \",\"对象解构赋值：可以通过解构赋值从对象中提取属性值，将其赋值给变量。\",\"const person = { name: 'Alice', age: 30 }; const { name, age } = person; console.log(name); // 输出：'Alice' console.log(age); // 输出：30 \",\"Object.assign()：Object.assign() 方法用于将一个或多个源对象的所有可枚举属性复制到目标对象中。\",\"const target = { a: 1, b: 2 }; const source = { b: 3, c: 4 }; const result = Object.assign(target, source); console.log(result); // 输出：{ a: 1, b: 3, c: 4 } \",\"Object.keys()、Object.values() 和 Object.entries()：Object.keys() 方法用于返回一个包含所有自身可枚举属性的数组；Object.values() 方法用于返回一个包含所有自身可枚举属性的值的数组；Object.entries() 方法用于返回一个包含所有自身可枚举属性的键值对数组。\",\"const object = { a: 1, b: 2, c: 3 }; console.log(Object.keys(object)); // 输出：['a', 'b', 'c'] console.log(Object.values(object)); // 输出：[1, 2, 3] console.log(Object.entries(object)); // 输出：[['a', 1], ['b', 2], ['c', 3]] \",\"Object.freeze()、Object.seal() 和 Object.preventExtensions()：Object.freeze() 方法用于冻结一个对象，使其属性不能被修改、删除或添加新属性；Object.seal() 方法用于封闭一个对象，使其属性不能被添加或删除，但可以修改现有属性；Object.preventExtensions() 方法用于阻止一个对象的扩展，使其无法添加新的属性。\",\"const obj = { a: 1, b: 2 }; Object.freeze(obj); obj.c = 3; // 无效，不会添加属性c obj.a = 10; // 无效，不会修改属性a的值 delete obj.b; // 无效，不会删除属性b console.log(obj); // 输出：{ a: 1, b: 2 } \",\"对象方法的简化写法：在ES6中，当一个对象的方法是一个函数时，可以省略函数关键字和冒号。\",\"const person = { name: 'Alice', age: 30, sayHello() { console.log(`Hello, my name is ${this.name} and I'm ${this.age} years old.`); } }; person.sayHello(); // 输出：Hello, my name is Alice and I'm 30 years old. \",\"Symbol 属性：ES6引入了一种新的原始数据类型，Symbol，用于表示独一无二的值。Symbol值可以作为对象的属性名，用于创建私有属性或唯一的标识符。\",\"const id = Symbol(); const person = { name: 'Alice', age: 30, [id]: '12345' }; console.log(person[id]); // 输出：'12345' \",\"可计算方法名：在ES6中，可以在对象字面量中使用与方法名匹配的表达式。\",\"const method = 'sayHello'; const person = { [method]() { console.log('Hello!'); } }; person.sayHello(); // 输出：Hello! \",\"super 关键字：在类的方法中可以使用 super 关键字来调用父类的方法。\",\"class Animal { constructor(name) { this.name = name; } speak() { console.log(this.name + ' makes a sound.'); } } class Dog extends Animal { speak() { super.speak(); console.log(this.name + ' barks.'); } } const dog = new Dog('Max'); dog.speak(); // 输出： // Max makes a sound. // Max barks. \"]},\"172\":{\"h\":\"函数（Function）\",\"t\":[\"ES6（ES2015）在函数方面引入了许多新的功能和语法。以下是ES6中与函数相关的一些重要和常用的特性：\",\"箭头函数（Arrow Functions）： 箭头函数是一种更简洁的函数语法形式，使用箭头（=>）来定义函数，具有更短的语法和更直接的词法作用域绑定。\",\"// 传统的函数表达式 const sum = function(a, b) { return a + b; }; // 箭头函数 const sum = (a, b) => a + b; \",\"默认参数（Default Parameters）： ES6允许在函数参数中指定默认值，简化了处理默认参数的逻辑。\",\"function greet(name = 'World') { console.log(`Hello, ${name}!`); } greet(); // 输出：Hello, World! greet('Alice'); // 输出：Hello, Alice! \",\"展开操作符（Spread Operator）： 展开操作符（也称为扩展操作符）用三个点（...）表示，可以将数组或可迭代对象展开为单独的元素。\",\"const numbers = [1, 2, 3]; console.log(...numbers); // 输出：1 2 3 // 在函数调用中使用展开操作符 function add(a, b, c) { return a + b + c; } console.log(add(...numbers)); // 输出：6 \",\"剩余参数（Rest Parameters）： 剩余参数允许将多个函数参数收集到一个数组中，以便在函数内部进行处理。\",\"function sum(...numbers) { let total = 0; for (let number of numbers) { total += number; } return total; } console.log(sum(1, 2, 3, 4, 5)); // 输出：15 \",\"函数的rest参数和arguments对象： 在ES6之前，我们使用arguments对象来获取函数参数列表中的所有参数。ES6引入了剩余参数的概念，在函数参数中使用...来收集剩余的参数，这样就可以直接访问参数的数组，而不需要使用arguments对象。\",\"function foo(a, b, ...rest) { console.log(a); // 输出：1 console.log(b); // 输出：2 console.log(rest); // 输出：[3, 4, 5] } foo(1, 2, 3, 4, 5); \",\"函数参数和析构赋值（Function Parameters and Destructuring Assignment）： ES6引入了参数解构赋值的语法，可以将传入函数的对象或数组解构为单独的变量。\",\"function greet({ name, age }) { console.log(`Hello, ${name}! You are ${age} years old.`); } const person = { name: 'Alice', age: 30 }; greet(person); // 输出：Hello, Alice! You are 30 years old. \",\"扩展的函数支持（Enhanced Function Support）： ES6提供了一些额外的函数支持，包括尾调用优化、尾递归、块级函数等。\",\"尾调用优化允许JS引擎优化尾部调用，避免不必要的栈帧创建从而提高性能。尾递归是一种特殊的尾调用，用于递归函数中最后一个操作是递归调用的情况，可以避免栈溢出错误。\",\"// 尾调用优化 function factorial(n, acc = 1) { if (n === 1) return acc; return factorial(n - 1, n * acc); } console.log(factorial(5)); // 输出：120 // 尾递归 function fibonacci(n, a = 0, b = 1) { if (n === 0) return a; return fibonacci(n - 1, b, a + b); } console.log(fibonacci(7)); // 输出：13 \",\"块级函数是在块作用域中定义的函数，而不是局限于函数作用域。这意味着在ES6中，可以在if语句、循环或任意块中定义函数。\",\"if (true) { function foo() { console.log('Inside block'); } foo(); // 输出：Inside block } foo(); // 抛出 ReferenceError: foo is not defined \",\"函数的尾逗号（Trailing Commas in Function Parameters）： ES6允许在函数参数列表的尾部添加逗号，使得添加和删除参数更加方便。\",\"function foo(a, b,) { // ... } foo(1, 2,); // 合法，尾部逗号被忽略 \",\"函数的name属性： ES6规定函数有一个名为name的只读属性，用于获取函数的名称。\",\"function foo() {} console.log(foo.name); // 输出：foo \",\"这些特性使得函数编写更简洁、灵活和易读。需要注意的是，某些特性可能需要在目标环境中进行支持或使用特定的语法转换工具（例如Babel）。\"]},\"173\":{\"h\":\"运算符\",\"t\":[\"当涉及到ES6运算符的扩展时，可能指的是一些增强的语法和运算符相关的功能。以下是ES6中的一些运算符扩展：\",\"展开运算符（Spread Operator）： 展开运算符（...）可以将可迭代对象（如数组或字符串）展开为单独的元素，或将多个元素合并为数组。\",\"const arr1 = [1, 2, 3]; const arr2 = [...arr1, 4, 5, 6]; console.log(arr2); // 输出：[1, 2, 3, 4, 5, 6] const str = 'Hello'; const chars = [...str]; console.log(chars); // 输出：['H', 'e', 'l', 'l', 'o'] \",\"可选链运算符（Optional Chaining Operator）： 可选链运算符（?.）用于安全地访问嵌套的属性或调用嵌套的函数，避免出现未定义或空值时的错误。\",\"const person = { name: 'Alice', address: { city: 'New York' } }; console.log(person.address?.city); // 输出：New York console.log(person.address?.country); // 输出：undefined \",\"空值合并运算符（Nullish Coalescing Operator）： 空值合并运算符（??）用于确定一个值为null或undefined时使用默认值。\",\"const name = null; const defaultName = name ?? 'Unknown'; console.log(defaultName); // 输出：Unknown \",\"BigInt数据类型和运算符： ES6引入了BigInt数据类型，可以表示任意精度的整数。此外，BigInt有自己的运算符，如+、-、*、**等。\",\"const bigInt1 = BigInt(Number.MAX_SAFE_INTEGER) + 1n; const bigInt2 = 123n; const sum = bigInt1 + bigInt2; console.log(sum); // 输出：9007199254740993n \"]},\"174\":{\"h\":\"Symbol\",\"t\":[\"Symbol是ES6中引入的一种新的原始数据类型。它是一种唯一且不可变的值，用于标识对象的属性。Symbol的主要特点是它的值是唯一的，即使创建多个具有相同描述的Symbol，它们也是不相等的。\",\"要创建一个Symbol，可以使用全局的Symbol函数，并可选地传入一个描述符字符串作为参数：\",\"const symbol1 = Symbol(); const symbol2 = Symbol('description'); console.log(typeof symbol1); // 输出：symbol console.log(symbol1 !== symbol2); // 输出：true \",\"Symbol可以用作对象的属性键，以确保属性的唯一性。使用Symbol作为属性键时，需要使用方括号语法来访问属性：\",\"const mySymbol = Symbol('mySymbol'); const obj = { [mySymbol]: 'value' }; console.log(obj[mySymbol]); // 输出：value \",\"Symbol还提供了一些内置的属性，如Symbol.iterator用于定义对象的默认迭代器，以及Symbol.hasInstance用于定义对象的instanceof操作符行为。此外，ES6还提供了一系列内置的Symbol常量，如Symbol.iterator、Symbol.match、Symbol.replace等。\",\"总而言之，Symbol是一种新的原始数据类型，用于创建唯一且不可变的标识符。它在创建唯一键值、定义对象行为等方面非常有用。\",\"以下是Symbol的其他一些重要特性和应用：\",\"全局Symbol注册表（Global Symbol Registry）： 在全局Symbol注册表中，可以注册全局可访问的Symbol，并根据提供的描述符字符串检索它们。\",\"const symbol1 = Symbol.for('key1'); const symbol2 = Symbol.for('key1'); console.log(symbol1 === symbol2); // 输出：true const key = Symbol.keyFor(symbol1); console.log(key); // 输出：key1 \",\"使用Symbol.for()方法可以创建一个全局注册的Symbol，如果之前已经有相同描述的注册Symbol存在，则返回已存在的Symbol。使用Symbol.keyFor()方法可以获取一个全局Symbol的描述符字符串。\",\"Symbol的迭代和反射： Symbol拥有自己的内置属性，例如Symbol.iterator用于定义自定义对象的迭代器，以及Symbol.reflect用于访问对象的反射元信息。\",\"const mySymbol = Symbol('mySymbol'); const obj = { a: 1, b: 2, [mySymbol]: 'hidden' }; for (const key in obj) { console.log(key); // 输出：a, b } const symbols = Object.getOwnPropertySymbols(obj); console.log(symbols); // 输出：[Symbol(mySymbol)] console.log(Reflect.ownKeys(obj)); // 输出：[\\\"a\\\", \\\"b\\\", Symbol(mySymbol)] \",\"在迭代对象的属性时，使用for...in循环只能获取普通的键，而使用Object.getOwnPropertySymbols()可以获取对象上的Symbol键。Reflect.ownKeys()方法返回对象的所有键，包括普通键和Symbol键。\",\"Symbol的内置常量： ES6提供了一些内置的Symbol常量，这些常量在语言中扮演着特殊的角色，例如Symbol.iterator、Symbol.match、Symbol.replace等。它们用于定义特定的操作行为和功能。\",\"const arr = [1, 2, 3]; console.log(arr[Symbol.iterator]); // 内置Symbol常量用于迭代 const regex = /pattern/; console.log(regex[Symbol.match]); // 内置Symbol常量用于正则匹配 \",\"Symbol的应用非常广泛，可以用于创建唯一的属性键，定义对象行为，管理全局Symbol，以及访问内置的Symbol常量。它为开发人员提供了更大的灵活性和控制力。\"]},\"175\":{\"h\":\"数据结构\",\"t\":[\"ES6引入了一些新的数据结构，使开发人员能够更方便地处理和组织数据。以下是ES6新增的一些数据结构：\"]},\"176\":{\"h\":\"Set（集合）\",\"t\":[\"Set 是一种值的有序列表，它具有唯一性，不允许重复值。Set 集合的元素可以是任意类型。Set 常用的方法有：\",\"add(value): 向集合中添加一个元素。\",\"has(value): 检查集合中是否存在指定元素。\",\"delete(value): 从集合中删除指定元素。\",\"size: 返回集合中元素的个数。\",\"const set = new Set(); set.add(1); set.add(2); set.add(3); set.add(1); // 重复的值不会被添加 console.log(set.size); // 输出：3 console.log(set.has(2)); // 输出：true set.delete(2); console.log(set.size); // 输出：2 set.clear(); console.log(set.size); // 输出：0 \"]},\"177\":{\"h\":\"Map（映射）\",\"t\":[\"Map 是一种键值对的集合，其中每个键和值都可以是任意类型。相比于对象，Map 具有更强大的功能和更容易使用的 API。Map 常用的方法有：\",\"set(key, value): 向 Map 中添加键值对。\",\"get(key): 获取指定键对应的值。\",\"has(key): 检查 Map 中是否存在指定的键。\",\"delete(key): 删除 Map 中指定的键值对。\",\"size: 返回 Map 中键值对的个数。\",\"const map = new Map(); const key1 = 'key1'; const key2 = { name: 'key2' }; const value1 = 'value1'; const value2 = { name: 'value2' }; map.set(key1, value1); map.set(key2, value2); console.log(map.get(key2)); // 输出：{ name: 'value2' } console.log(map.has(key2)); // 输出：true map.delete(key1); console.log(map.size); // 输出：1 map.clear(); console.log(map.size); // 输出：0 \"]},\"178\":{\"h\":\"WeakSet（弱集合）\",\"t\":[\"WeakSet 是一种与 Set 类似的集合，但它只能存储对象，并且对对象是弱引用，不会阻止对象被垃圾回收。因此，WeakSet 不可迭代且不具备清空全部元素的方法。\",\"WeakSet 的主要用途是存储对象的私有数据。\",\"const weakSet = new WeakSet(); const obj1 = { name: 'obj1' }; const obj2 = { name: 'obj2' }; weakSet.add(obj1); weakSet.add(obj2); console.log(weakSet.has(obj1)); // 输出：true weakSet.delete(obj1); console.log(weakSet.has(obj1)); // 输出：false \"]},\"179\":{\"h\":\"WeakMap（弱映射）\",\"t\":[\"WeakMap 是一种与 Map 类似的映射，但它只能以对象作为键，并且对键是弱引用，不会阻止键被垃圾回收。WeakMap 的主要用途是存储对象的附加数据。\",\"WeakMap 的特性使其在某些特定场景中非常有用，例如在对象之间建立一对一的关系并确保不会导致内存泄漏。\",\"const weakMap = new WeakMap(); const key1 = { name: 'key1' }; const key2 = { name: 'key2' }; const value1 = 'value1'; const value2 = { name: 'value2' }; weakMap.set(key1, value1); weakMap.set(key2, value2); console.log(weakMap.get(key2)); // 输出：{ name: 'value2' } weakMap.delete(key1); console.log(weakMap.has(key1)); // 输出：false \"]},\"180\":{\"h\":\"ArrayBuffer（数组缓冲区）\",\"t\":[\"ArrayBuffer 是一种用来存储二进制数据的固定长度缓冲区。它不能直接读取或写入，而是通过 TypedArray 和 DataView 进行操作。\",\"const buffer = new ArrayBuffer(16); const view = new Uint32Array(buffer); view[0] = 42; view[1] = 24; console.log(view.length); // 输出：2 console.log(view[0]); // 输出：42 \"]},\"181\":{\"h\":\"TypedArray（类型化数组）\",\"t\":[\"TypedArray 是一种处理二进制数据的数组类型。它们基于 ArrayBuffer，提供了对二进制数据的高效读写操作。\",\"const buffer = new ArrayBuffer(16); const int32Array = new Int32Array(buffer); int32Array[0] = 42; int32Array[1] = 24; console.log(int32Array.length); // 输出：8 console.log(int32Array[0]); // 输出：42 \"]},\"182\":{\"h\":\"DataView（数据视图）\",\"t\":[\"DataView 是一种用来读取和写入 ArrayBuffer 的低级接口，可以通过指定的字节索引访问和修改数据。\",\"const buffer = new ArrayBuffer(16); const view = new DataView(buffer); view.setInt8(0, 42); view.setInt16(2, 24); console.log(view.getInt8(0)); // 输出：42 console.log(view.getInt16(2)); // 输出：24 \"]},\"183\":{\"h\":\"类（Class）\",\"t\":[\"ES6引入了类（class）作为一种更简洁和面向对象的语法糖，用于定义对象的蓝图。类提供了一种声明对象的方式，包含了属性和方法的定义，以及构造函数来初始化对象的状态。以下是ES6类的详细说明和示例：\",\"定义类：\",\"class Person { constructor(name, age) { this.name = name; this.age = age; } sayHello() { console.log(`Hello, my name is ${this.name} and I am ${this.age} years old.`); } } \",\"创建对象：\",\"const person1 = new Person('Alice', 25); const person2 = new Person('Bob', 30); person1.sayHello(); // 输出：Hello, my name is Alice and I am 25 years old. person2.sayHello(); // 输出：Hello, my name is Bob and I am 30 years old. \",\"类继承：\",\"class Student extends Person { constructor(name, age, grade) { super(name, age); this.grade = grade; } study() { console.log(`I am studying in grade ${this.grade}.`); } } const student1 = new Student('Alice', 15, 9); student1.sayHello(); // 输出：Hello, my name is Alice and I am 15 years old. student1.study(); // 输出：I am studying in grade 9. \",\"静态方法和静态属性：\",\"class MathUtils { static add(a, b) { return a + b; } static PI = 3.14159; } console.log(MathUtils.add(2, 3)); // 输出：5 console.log(MathUtils.PI); // 输出：3.14159 \",\"Getter 和 Setter 方法：类可以定义用于访问和修改属性的特殊方法，称为 Getter 和 Setter。\",\"class Circle { constructor(radius) { this.radius = radius; } get area() { return Math.PI * this.radius ** 2; } set diameter(diameter) { this.radius = diameter / 2; } } const circle = new Circle(5); console.log(circle.area); // 输出：78.53981633974483 circle.diameter = 10; console.log(circle.radius); // 输出：5 \",\"类表达式：类可以以表达式的形式创建，可以将类赋值给变量。\",\"const Rectangle = class { constructor(length, width) { this.length = length; this.width = width; } get area() { return this.length * this.width; } }; const rectangle = new Rectangle(5, 10); console.log(rectangle.area); // 输出：50 \",\"三大特性\",\"在面向对象编程中，类具有三个重要的特性：封装、继承和多态。这些特性被认为是面向对象编程的基石，下面对每个特性进行详细说明：\",\"封装（Encapsulation）：封装是将数据和操作数据的方法捆绑在一起，形成一个独立的单元的过程。通过封装，我们可以将数据隐藏在对象内部，只暴露有限的接口来访问和操作数据。这样可以提高代码的安全性、可维护性和可重用性。\",\"示例：\",\"class Person { constructor(name, age) { this.name = name; this.age = age; } sayHello() { console.log(`Hello, my name is ${this.name} and I am ${this.age} years old.`); } } const person = new Person('Alice', 25); person.sayHello(); // 输出：Hello, my name is Alice and I am 25 years old. \",\"在上面的示例中，name 和 age 属性被封装在 Person 类的内部，并通过 sayHello 方法暴露给外部访问。\",\"继承（Inheritance）：继承是指一个类（子类）可以继承另一个类（父类）的属性和方法。通过继承，子类可以获得父类的特性，并可以在此基础上添加自己独有的属性和方法。继承实现了代码的重用和层次化的组织。\",\"示例：\",\"class Animal { constructor(name) { this.name = name; } speak() { console.log(`${this.name} makes a sound.`); } } class Dog extends Animal { constructor(name, breed) { super(name); this.breed = breed; } fetch() { console.log(`${this.name} fetches the ball.`); } } const dog = new Dog('Buddy', 'Labrador'); dog.speak(); // 输出：Buddy makes a sound. dog.fetch(); // 输出：Buddy fetches the ball. \",\"在上面的示例中，Dog 类继承了 Animal 类，因此它拥有 Animal 类的属性和方法，并添加了自己的 fetch 方法。\",\"多态（Polymorphism）：多态是指在不同的对象上调用相同的方法，实现不同的行为。多态允许我们使用统一的接口来处理不同的对象，并根据对象类型的不同而执行不同的操作。多态提高了代码的灵活性、可扩展性和可维护性。\",\"示例：\",\"class Shape { calculateArea() { throw new Error(\\\"This method should be implemented in subclasses.\\\"); } } class Rectangle extends Shape { constructor(width, height) { super(); this.width = width; this.height = height; } calculateArea() { return this.width * this.height; } } class Circle extends Shape { constructor(radius) { super(); this.radius = radius; } calculateArea() { return Math.PI * this.radius ** 2; } } const rectangle = new Rectangle(5, 10); const circle = new Circle(7); console.log(rectangle.calculateArea()); // 输出：50 console.log(circle.calculateArea()); // 输出：153.93804002589985 \",\"在上面的示例中，Shape 类定义了一个抽象方法 calculateArea，Rectangle 和 Circle 类都继承了 Shape 类，并实现了各自的 calculateArea 方法。通过多态，我们可以统一地调用 calculateArea 方法，但每个对象根据自身的类型来执行不同的计算。\",\"封装、继承和多态是面向对象编程的核心特性，它们有助于构建灵活、可扩展和易于维护的代码。理解和合理运用这些特性对于设计和实现面向对象的系统非常重要。\"]},\"184\":{\"h\":\"迭代器（Iterator）\",\"t\":[\"在ES6中，迭代器（Iterator）是一个对象，它提供了一种统一的访问方式，用于遍历数据集合中的每个元素。迭代器必须实现迭代器协议（Iterator Protocol），即具有一个next()方法，该方法返回一个包含value和done属性的对象，value表示当前迭代的值，done表示迭代是否已结束。以下是在ES6中使用迭代器的示例：\",\"const iterable = [1, 2, 3]; const iterator = iterable[Symbol.iterator](); console.log(iterator.next()); // 输出：{ value: 1, done: false } console.log(iterator.next()); // 输出：{ value: 2, done: false } console.log(iterator.next()); // 输出：{ value: 3, done: false } console.log(iterator.next()); // 输出：{ value: undefined, done: true } \",\"在上面的示例中，我们使用数组的Symbol.iterator方法获取迭代器对象，然后通过调用迭代器的next()方法逐个访问数组中的元素。每次调用next()方法时，迭代器会返回一个对象，其中value属性表示当前迭代的值，done属性表示迭代是否已结束。\",\"迭代器具有非常广泛的应用，不仅可以对数组进行迭代，还可以对字符串、Set、Map等数据结构进行迭代。你还可以使用自定义对象实现迭代器协议，以便可以像处理数组一样处理自定义对象。\",\"以下是自定义对象实现迭代器的示例：\",\"const obj = { data: ['a', 'b', 'c'], [Symbol.iterator]() { let index = 0; return { next: () => { if (index < this.data.length) { return { value: this.data[index++], done: false }; } else { return { value: undefined, done: true }; } } }; } }; const iterator = obj[Symbol.iterator](); console.log(iterator.next()); // 输出：{ value: 'a', done: false } console.log(iterator.next()); // 输出：{ value: 'b', done: false } console.log(iterator.next()); // 输出：{ value: 'c', done: false } console.log(iterator.next()); // 输出：{ value: undefined, done: true } \",\"在上面的示例中，我们定义了一个obj对象，通过Symbol.iterator方法返回一个迭代器对象。在迭代器对象中，我们实现了next()方法，用于逐个返回data数组中的元素。\",\"通过迭代器，我们可以以统一的方式遍历不同类型的数据集合，使数据处理更加灵活和便捷。迭代器的应用可以在各种场景中发挥作用，如迭代器模式、迭代器生成器等。\"]},\"185\":{\"h\":\"用法\",\"t\":[\"for...of 循环：ES6引入了 for...of 循环，用于遍历可迭代对象，提供了一种简洁地遍历迭代器的方法。\",\"const iterable = [1, 2, 3]; for (const value of iterable) { console.log(value); } // 输出： // 1 // 2 // 3 \",\"内置可迭代对象：ES6中的一些内置对象，默认实现了迭代器协议，因此可以直接使用 for...of 循环进行遍历，如字符串、数组、Set、Map等。\",\"const str = 'Hello'; for (const char of str) { console.log(char); } // 输出： // 'H' // 'e' // 'l' // 'l' // 'o' const set = new Set([1, 2, 3]); for (const value of set) { console.log(value); } // 输出： // 1 // 2 // 3 \",\"自定义可迭代对象：可以自定义对象实现迭代器协议，使其可以被 for...of 循环遍历。\",\"const obj = { values: [1, 2, 3], [Symbol.iterator]() { let index = 0; return { next: () => { if (index < this.values.length) { return { value: this.values[index++], done: false }; } else { return { value: undefined, done: true }; } } }; } }; for (const value of obj) { console.log(value); } // 输出： // 1 // 2 // 3 \"]},\"186\":{\"h\":\"生成器（Generator ）\",\"t\":[\"ES6引入了生成器（Generator）函数作为一种特殊的函数类型，用于生成迭代器。生成器函数通过使用 function* 声明，并包含一个或多个 yield 语句，来控制迭代器的行为。生成器函数返回一个迭代器对象，可以通过调用 next() 方法逐步执行生成器函数，并在每个 yield 语句处暂停执行。以下是生成器函数的基本概念和用法：\",\"function* generatorFunction() { yield 'Hello'; yield 'World'; yield '!'; } const generator = generatorFunction(); // 创建生成器对象 console.log(generator.next()); // 输出：{ value: 'Hello', done: false } console.log(generator.next()); // 输出：{ value: 'World', done: false } console.log(generator.next()); // 输出：{ value: '!', done: false } console.log(generator.next()); // 输出：{ value: undefined, done: true } \",\"在上面的示例中，generatorFunction 是一个生成器函数，包含三个 yield 语句。通过调用 generatorFunction() 创建生成器对象 generator。使用 generator.next() 方法逐步执行生成器函数，每次执行到 yield 语句时会返回一个包含 value 和 done 属性的对象，value 表示生成器当前暂停的值，done 表示生成器是否已完成。\",\"除了生成器函数返回的迭代器对象具有 next() 方法外，它还可以通过 return() 方法提前终止生成器。可以在生成器函数内部使用 try...finally 块来处理清理和善后的逻辑。\",\"function* generatorFunction() { try { yield 'Hello'; yield 'World'; yield '!'; } finally { console.log('Cleanup'); } } const generator = generatorFunction(); console.log(generator.next()); // 输出：{ value: 'Hello', done: false } console.log(generator.next()); // 输出：{ value: 'World', done: false } console.log(generator.return('Early Termination')); // 输出：{ value: 'Early Termination', done: true } // 输出：Cleanup \",\"在上面的示例中，调用 generator.return() 方法提供了一个参数，用于指定生成器终止时要返回的值。同时，在 finally 块中的代码会在生成器终止前被执行。\",\"生成器函数的特点是可以生成可迭代的序列，可以通过 yield 语句逐个产生值，并通过迭代器的 next() 方法进行遍历。生成器函数在处理需要逐步执行、懒加载或大量数据的场景中非常有用。\"]},\"187\":{\"h\":\"用法\",\"t\":[\"生成器函数表达式：除了使用 function* 声明生成器函数外，还可以使用生成器函数表达式创建生成器函数。\",\"const generatorFunction = function* () { yield 'Hello'; yield 'World'; yield '!'; }; const generator = generatorFunction(); console.log(generator.next()); // 输出：{ value: 'Hello', done: false } console.log(generator.next()); // 输出：{ value: 'World', done: false } console.log(generator.next()); // 输出：{ value: '!', done: false } console.log(generator.next()); // 输出：{ value: undefined, done: true } \",\"生成器函数参数：生成器函数可以接受参数，并在生成器的执行过程中进行处理。\",\"function* generatorFunction(param) { yield `Hello, ${param}`; yield 'World!'; } const generator = generatorFunction('John'); console.log(generator.next()); // 输出：{ value: 'Hello, John', done: false } console.log(generator.next()); // 输出：{ value: 'World!', done: false } console.log(generator.next()); // 输出：{ value: undefined, done: true } \",\"yield* 语句：在生成器函数中，可以使用 yield* 语句来代理（delegate）另一个生成器函数或可迭代对象的迭代。\",\"function* generatorFunction1() { yield 'Hello'; yield 'World'; } function* generatorFunction2() { yield* generatorFunction1(); yield '!'; } const generator = generatorFunction2(); console.log(generator.next()); // 输出：{ value: 'Hello', done: false } console.log(generator.next()); // 输出：{ value: 'World', done: false } console.log(generator.next()); // 输出：{ value: '!', done: false } console.log(generator.next()); // 输出：{ value: undefined, done: true } \",\"生成器函数与异步操作：生成器函数与异步操作的结合可以简化异步编程，例如使用生成器函数和 Promises 进行协同操作，实现更易读、更可维护的异步代码。\",\"function fetchUser() { return new Promise((resolve) => { setTimeout(() => { resolve('John'); }, 1000); }); } function* generatorFunction() { const user = yield fetchUser(); yield `Hello, ${user}!`; } const generator = generatorFunction(); const promise = generator.next().value; promise.then((result) => { const greeting = generator.next(result).value; console.log(greeting); // 输出：Hello, John! }); \",\"生成器与错误处理：生成器函数可以通过 try/catch 语句捕获和处理错误。\",\"function* generatorFunction() { try { yield 'Hello'; throw new Error('Something went wrong'); } catch (error) { yield error.message; } } const generator = generatorFunction(); console.log(generator.next()); // 输出：{ value: 'Hello', done: false } console.log(generator.next()); // 输出：{ value: 'Something went wrong', done: false } console.log(generator.next()); // 输出：{ value: undefined, done: true } \",\"生成器函数提供了一种简洁、可控的方式来处理异步操作和迭代过程。通过生成器函数，可以编写清晰、可读性强的代码逻辑。\"]},\"188\":{\"h\":\"代理（Proxy）\",\"t\":[\"代理（Proxy）是ES6中引入的一种元编程机制，允许你拦截和自定义对象的操作。通过使用代理，你可以修改对象的默认行为，例如拦截属性的读取、写入操作，添加额外的操作等。其中，Proxy 对象用于创建代理，handler 对象用于定义代理对象的行为。\",\"以下是使用 Proxy 的基本概念和示例：\",\"const target = { name: 'John' }; // 被代理的对象 const handler = { get: function(target, prop) { // 拦截属性的读取 console.log(`Getting ${prop}`); return target[prop]; }, set: function(target, prop, value) { // 拦截属性的写入 console.log(`Setting ${prop} to ${value}`); target[prop] = value; } }; const proxy = new Proxy(target, handler); // 创建代理对象 console.log(proxy.name); // 拦截属性的读取，输出：Getting name，John proxy.age = 25; // 拦截属性的写入，输出：Setting age to 25 console.log(proxy.age); // 拦截属性的读取，输出：Getting age，25 \",\"在上面的示例中，创建了一个名为 target 的对象，然后通过 Proxy 创建了一个代理对象 proxy。通过在 handler 对象中定义 get 和 set 方法，我们可以拦截属性的读取和写入操作，并在控制台输出相应的信息。\",\"除了拦截属性的读取和写入，代理还可以拦截一系列操作，例如函数调用、构造函数、in运算符等。以下是一些常用的代理拦截操作：\",\"get(target, prop, receiver): 拦截属性的读取操作。\",\"set(target, prop, value, receiver): 拦截属性的写入操作。\",\"apply(target, thisArg, argumentsList): 拦截函数调用操作。\",\"construct(target, argumentsList, newTarget): 拦截构造函数调用操作。\",\"has(target, prop): 拦截 in 运算符的操作。\",\"const target = { name: 'John', greeting: function() { return `Hello, ${this.name}!`; } }; const handler = { get: function(target, prop) { if (prop === 'age') { return 25; } return target[prop]; }, apply: function(target, thisArg, argumentsList) { console.log('Calling greeting()'); return target.greeting.apply(thisArg, argumentsList); } }; const proxy = new Proxy(target, handler); console.log(proxy.name); // 输出：John console.log(proxy.age); // 输出：25 console.log(proxy.greeting()); // 输出：Calling greeting()，Hello, John! \",\"在上面的示例中，我们通过在 handler 对象中定义 get 和 apply 方法，实现了对属性读取和函数调用的拦截。get 方法可以在读取属性时返回特定的值，apply 方法可以在调用函数时添加额外的操作。\",\"代理是一个强大的特性，它提供了修改和控制对象行为的灵活性。通过使用代理，你可以在不改变原始对象的情况下进行自定义操作和增加功能。\"]},\"189\":{\"h\":\"用法\",\"t\":[\"deleteProperty：拦截属性的删除操作。\",\"const target = { name: 'John' }; const handler = { deleteProperty: function(target, prop) { console.log(`Deleting ${prop}`); delete target[prop]; return true; } }; const proxy = new Proxy(target, handler); console.log(proxy.name); // 输出：John delete proxy.name; // 拦截属性的删除操作，输出：Deleting name console.log(proxy.name); // 输出：undefined \",\"getPrototypeOf 和 setPrototypeOf：拦截获取和设置原型操作。\",\"const target = { name: 'John' }; const handler = { getPrototypeOf: function(target) { console.log('Getting prototype'); return Object.getPrototypeOf(target); }, setPrototypeOf: function(target, prototype) { console.log('Setting prototype'); Object.setPrototypeOf(target, prototype); return true; } }; const proxy = new Proxy(target, handler); console.log(Object.getPrototypeOf(proxy)); // 输出：Getting prototype，{} Object.setPrototypeOf(proxy, {}); // 拦截设置原型操作，输出：Setting prototype \",\"has 和 ownKeys：拦截 in 运算符和 Object.getOwnPropertyNames、Object.getOwnPropertySymbols 的操作。\",\"const target = { name: 'John' }; const handler = { has: function(target, prop) { console.log(`Checking property existence: ${prop}`); return prop in target; }, ownKeys: function(target) { console.log('Getting own property keys'); return Reflect.ownKeys(target); } }; const proxy = new Proxy(target, handler); console.log('name' in proxy); // 拦截 `in` 运算符的操作，输出：Checking property existence: name，true console.log(Object.getOwnPropertyNames(proxy)); // 输出：Getting own property keys，[ 'name' ] \",\"更多用途：除了上述示例外，代理还可以拦截其他操作，例如拦截原始值与对象的操作，拦截属性描述符、构造函数调用等。\",\"const handler = { get: function(target, prop, receiver) { if (typeof target[prop] === 'function') { return new Proxy(target[prop], { apply: function(target, thisArg, argumentsList) { console.log(`Calling ${prop}()`); return Reflect.apply(target, thisArg, argumentsList); } }); } return target[prop]; }, defineProperty: function(target, prop, descriptor) { console.log(`Defining property: ${prop}`); return Object.defineProperty(target, prop, descriptor); } }; const obj = { name: 'John', greet: function() { console.log(`Hello, ${this.name}!`); } }; const proxy = new Proxy(obj, handler); proxy.greet(); // 输出：Calling greet()，Hello, John! proxy.age = 25; // 拦截属性的定义操作，输出：Defining property: age console.log(proxy.age); // 输出：25 \",\"apply：拦截函数的调用操作。\",\"const target = function(name) { console.log(`Hello, ${name}!`); }; const handler = { apply: function(target, thisArg, argumentsList) { console.log('Calling target function'); return Reflect.apply(target, thisArg, argumentsList); } }; const proxy = new Proxy(target, handler); proxy('John'); // 拦截函数的调用操作，输出：Calling target function，Hello, John! \",\"construct：拦截构造函数的调用操作。\",\"class Person { constructor(name) { this.name = name; } } const handler = { construct: function(target, argumentsList, newTarget) { console.log('Calling Person constructor'); return Reflect.construct(target, argumentsList, newTarget); } }; const proxy = new Proxy(Person, handler); const john = new proxy('John'); // 拦截构造函数的调用操作，输出：Calling Person constructor console.log(john instanceof Person); // 输出：true console.log(john.name); // 输出：John \",\"isExtensible、preventExtensions、getOwnPropertyDescriptor：拦截对象的可扩展性、阻止扩展和获取属性描述符的操作。\",\"const target = {}; const handler = { isExtensible: function(target) { console.log('Checking extensible'); return Reflect.isExtensible(target); }, preventExtensions: function(target) { console.log('Preventing extensions'); return Reflect.preventExtensions(target); }, getOwnPropertyDescriptor: function(target, prop) { console.log(`Getting property descriptor: ${prop}`); return Reflect.getOwnPropertyDescriptor(target, prop); } }; const proxy = new Proxy(target, handler); console.log(Object.isExtensible(proxy)); // 拦截对象的可扩展性操作，输出：Checking extensible，true Object.preventExtensions(proxy); // 拦截阻止扩展操作，输出：Preventing extensions console.log(Object.getOwnPropertyDescriptor(proxy, 'name')); // 拦截获取属性描述符操作，输出：Getting property descriptor: name，undefined \",\"getOwnPropertyNames：拦截 Object.getOwnPropertyNames() 的操作。\",\"const target = { name: 'John', age: 25 }; const handler = { getOwnPropertyNames: function(target) { console.log('Getting own property names'); return Reflect.ownKeys(target); } }; const proxy = new Proxy(target, handler); console.log(Object.getOwnPropertyNames(proxy)); // 拦截 `Object.getOwnPropertyNames()` 的操作，输出：Getting own property names，[ 'name', 'age' ] \",\"getPrototypeOf 和 setPrototypeOf：拦截获取和设置原型操作。\",\"const target = { name: 'John' }; const handler = { getPrototypeOf: function(target) { console.log('Getting prototype'); return Object.getPrototypeOf(target); }, setPrototypeOf: function(target, prototype) { console.log('Setting prototype'); Object.setPrototypeOf(target, prototype); return true; } }; const proxy = new Proxy(target, handler); console.log(Object.getPrototypeOf(proxy)); // 输出：Getting prototype，{} Object.setPrototypeOf(proxy, {}); // 拦截设置原型操作，输出：Setting prototype \",\"construct 和 apply：拦截构造函数和函数的调用操作。\",\"function Person(name) { this.name = name; } const handler = { construct: function(target, argumentsList) { console.log('Calling Person constructor'); return Reflect.construct(target, argumentsList); }, apply: function(target, thisArg, argumentsList) { console.log('Calling function'); return Reflect.apply(target, thisArg, argumentsList); } }; const proxyConstructor = new Proxy(Person, handler); const proxyFunction = new Proxy(function() {}, handler); const john = new proxyConstructor('John'); // 拦截构造函数的调用操作，输出：Calling Person constructor proxyFunction(); // 拦截函数的调用操作，输出：Calling function \",\"Proxy.revocable：创建可撤销的代理对象。\",\"const target = { name: 'John' }; const handler = { get: function(target, prop) { console.log(`Getting ${prop}`); return target[prop]; } }; const { proxy, revoke } = Proxy.revocable(target, handler); console.log(proxy.name); // 输出：Getting name，John revoke(); // 撤销代理 console.log(proxy.name); // 抛出 TypeError：Cannot perform 'get' on a proxy that has been revoked \",\"proxy陷阱的嵌套使用：可以在一个陷阱中使用另一个代理。\",\"const target = {}; const handler1 = { get: function(target, prop) { console.log('Inside handler 1'); return target[prop]; } }; const handler2 = { get: function(target, prop) { console.log('Inside handler 2'); return 'Value from handler 2'; } }; const proxy1 = new Proxy(target, handler1); const proxy2 = new Proxy(proxy1, handler2); console.log(proxy2.name); // 先调用 handler2 的 get 陷阱，输出：Inside handler 2，Value from handler 2 \"]},\"190\":{\"h\":\"反映（Reflect）\",\"t\":[\"ES6 中的 Reflect 是一个内置对象，提供了一组静态方法，用于对对象进行操作。Reflect 的目的是将一些常见的对象操作功能从原始对象上分离出来，使代码更加清晰、简洁和易于理解。\"]},\"191\":{\"h\":\"常用方法：\",\"t\":[\"Reflect.get(target, propertyKey [, receiver])：获取目标对象中指定属性的值，类似于 target[propertyKey]。\",\"const person = { name: 'John' }; const name = Reflect.get(person, 'name'); console.log(name); // 输出：John \",\"Reflect.set(target, propertyKey, value [, receiver])：将值赋给目标对象的指定属性，类似于 target[propertyKey] = value。\",\"const person = { name: 'John' }; Reflect.set(person, 'name', 'Jane'); console.log(person.name); // 输出：Jane \",\"Reflect.has(target, propertyKey)：检查目标对象是否具有指定的属性，类似于 propertyKey in target。\",\"const person = { name: 'John' }; const hasName = Reflect.has(person, 'name'); console.log(hasName); // 输出：true \",\"Reflect.deleteProperty(target, propertyKey)：从目标对象中删除指定的属性，类似于 delete target[propertyKey]。\",\"const person = { name: 'John' }; Reflect.deleteProperty(person, 'name'); console.log(person.name); // 输出：undefined \",\"Reflect.apply(target, thisArg, argumentsList)：调用目标对象中的函数，并传递指定的参数列表。\",\"function greet(name) { console.log(`Hello, ${name}!`); } Reflect.apply(greet, null, ['John']); // 输出：Hello, John! \",\"Reflect.defineProperty(target, propertyKey, attributes)：定义或修改目标对象的属性，类似于Object.defineProperty()。返回一个布尔值，表示属性是否成功定义或修改。\",\"const person = {}; Reflect.defineProperty(person, 'name', { value: 'John', writable: false, enumerable: true, configurable: true }); console.log(person.name); // 输出：John person.name = 'Jane'; // 由于writable为false，赋值不生效 console.log(person.name); // 输出：John \",\"Reflect.construct(target, argumentsList [, newTarget])：使用指定的参数列表调用构造函数，创建一个新的实例对象。第三个参数newTarget可选，用于在构造函数内部使用new.target。\",\"class Person { constructor(name) { this.name = name; } } const john = Reflect.construct(Person, ['John']); console.log(john instanceof Person); // 输出：true console.log(john.name); // 输出：John \",\"Reflect.getPrototypeOf(target)：获取目标对象的原型对象，类似于Object.getPrototypeOf()。\",\"const person = { name: 'John' }; const prototype = Reflect.getPrototypeOf(person); console.log(prototype); // 输出：{} \",\"Reflect.setPrototypeOf(target, prototype)：设置目标对象的原型对象，类似于Object.setPrototypeOf()。如果设置成功，返回true，否则返回false。\",\"const person = { name: 'John' }; const prototype = { greet() { console.log(`Hello, ${this.name}!`); } }; Reflect.setPrototypeOf(person, prototype); person.greet(); // 输出：Hello, John! \",\"Reflect.ownKeys(target)：返回目标对象的所有自身属性键（包括不可枚举属性），类似于Object.getOwnPropertyNames()和Object.getOwnPropertySymbols()的组合。\",\"const person = { name: 'John', [Symbol('age')]: 25 }; const keys = Reflect.ownKeys(person); console.log(keys); // 输出：['name', Symbol(age)] \",\"Reflect.preventExtensions(target)：阻止目标对象添加新属性和扩展现有属性。返回一个布尔值，表示是否成功将目标对象设置为不可扩展。\",\"const person = { name: 'John' }; Reflect.preventExtensions(person); person.age = 25; // 添加新属性无效 console.log(person); // 输出：{ name: 'John' } \",\"Reflect.isExtensible(target)：检查目标对象是否可扩展，类似于Object.isExtensible()。\",\"const person = { name: 'John' }; console.log(Reflect.isExtensible(person)); // 输出：true Reflect.preventExtensions(person); console.log(Reflect.isExtensible(person)); // 输出：false \",\"Reflect.getOwnPropertyDescriptor(target, propertyKey)：获取目标对象的指定属性的属性描述符，类似于Object.getOwnPropertyDescriptor()。\",\"const person = { name: 'John' }; const descriptor = Reflect.getOwnPropertyDescriptor(person, 'name'); console.log(descriptor); // 输出：{ value: 'John', writable: true, enumerable: true, configurable: true } \",\"Reflect.enumerate(target) (已废弃)：返回一个迭代器对象，用于遍历目标对象的字符串键属性。它与for...in循环的行为类似，但过时并不推荐使用。\",\"const person = { name: 'John', age: 25 }; for (const key of Reflect.enumerate(person)) { console.log(key); // 输出：'name' 和 'age' } \",\"需要注意的是，《ECMAScript 6》已经废弃了Reflect.enumerate() 方法，并且在ES6规范的最终版本中不再推荐使用。\"]},\"192\":{\"h\":\"Promise\",\"t\":[\"ES6 引入的 Promise 是一种用于处理异步操作的对象。它提供了一种更优雅的方式来管理和处理异步操作，避免了回调地狱（Callback Hell）的问题。\",\"Promise 对象表示一个异步操作的最终完成或失败，并且可以获取其结果。它有三种状态：pending（进行中）、fulfilled（已完成）和 rejected（已拒绝）。一旦 Promise 的状态变为 fulfilled 或 rejected，它就不可变更。\",\"以下是创建和使用 Promise 的基本语法：\",\"const promise = new Promise((resolve, reject) => { // 异步操作，比如发送网络请求、读取文件等 // 当操作成功完成时，调用 resolve，并传递结果 resolve(result); // 当操作失败时，调用 reject，并传递错误信息 reject(error); }); promise.then((result) => { // 操作成功完成的处理逻辑 }).catch((error) => { // 操作失败的处理逻辑 }); \",\"创建一个 Promise 对象时，我们传入一个执行器函数（executor function），它接收两个参数：resolve 和 reject。我们在这个函数中进行异步操作，并根据操作的结果调用 resolve 或 reject。\",\"then() 方法用于处理异步操作成功的情况，接收一个回调函数作为参数，回调函数的参数是异步操作的结果。\",\"catch() 方法用于处理异步操作失败的情况，接收一个回调函数作为参数，回调函数的参数是异步操作的错误信息。\",\"除了 then() 和 catch()，Promise 还提供了其他方法，如 finally()、all()、race() 等。这些方法可以帮助我们更好地控制和组合多个异步操作。\",\"下面是一个简单的示例，展示如何使用 Promise 处理异步操作：\",\"function fetchData() { return new Promise((resolve, reject) => { setTimeout(() => { const data = 'Hello, Promises!'; resolve(data); }, 2000); }); } fetchData() .then((result) => { console.log(result); // 输出：Hello, Promises! }) .catch((error) => { console.error(error); }); \"]},\"193\":{\"h\":\"常用方法\",\"t\":[\"处理多个Promise：可以使用 Promise.all() 方法组合多个 Promise 对象，返回一个新的 Promise 对象，它会在所有输入的 Promise 对象都成功完成后才会成功。\",\"Promise.all()接收一个可迭代对象（比如数组），并返回一个 Promise，当所有的 Promise 都完成时，它才会变为已完成状态，可以获得所有 Promise 的结果数组。如果任何一个 Promise 失败，它就会变为已拒绝状态。例如：\",\"const promise1 = fetchData1(); const promise2 = fetchData2(); const promise3 = fetchData3(); Promise.all([promise1, promise2, promise3]) .then((results) => { console.log(results); // 返回包含所有结果的数组 }) .catch((error) => { console.error(error); }); \",\"赛跑（Race）模式：可以使用 Promise.race() 方法组合多个 Promise 对象，返回一个新的 Promise 对象，它将在其中一个输入的 Promise 对象成功或失败后立即完成。\",\"Promise.race()接收一个可迭代对象（比如数组），并返回一个 Promise，当可迭代对象中的任何一个 Promise 完成（不论成功或失败）时，它就会变为已完成状态，并返回该 Promise 的结果。例如：\",\"const promise1 = fetchData1(); const promise2 = fetchData2(); const promise3 = fetchData3(); Promise.race([promise1, promise2, promise3]) .then((result) => { console.log(result); // 返回最先完成的 Promise 结果 }) .catch((error) => { console.error(error); }); \",\"Promise.resolve() 和 Promise.reject()：Promise 对象提供了两个静态方法来创建已经解决或已经拒绝的 Promise 对象。\",\"const resolvedPromise = Promise.resolve('Resolved'); const rejectedPromise = Promise.reject(new Error('Rejected')); resolvedPromise.then((result) => { console.log(result); // 输出：Resolved }); rejectedPromise.catch((error) => { console.error(error); // 输出：Error: Rejected }); \",\"异步操作的串行执行：可以通过返回 Promise 对象并在每个 then() 中继续进行下一个异步操作，从而实现异步操作的串行执行。\",\"fetchData1() .then((result1) => { console.log(result1); return fetchData2(); // 返回另一个 Promise 对象 }) .then((result2) => { console.log(result2); return fetchData3(); // 返回另一个 Promise 对象 }) .then((result3) => { console.log(result3); }) .catch((error) => { console.error(error); }); \",\"promise.then(onResolved, onRejected)：注册一个回调函数，用于处理 Promise 的异步操作完成或拒绝的情况。onResolved 是当 Promise 被解决（完成）时执行的回调函数，它接收解决（完成）的值作为参数；onRejected 是当 Promise 被拒绝（失败）时执行的回调函数，它接收拒绝（失败）的原因作为参数。例如：\",\"const promise = new Promise((resolve, reject) => { // 异步操作 setTimeout(() => { resolve(\\\"Success!\\\"); }, 1000); }); promise.then((value) => { console.log(value); // 输出 \\\"Success!\\\" }).catch((error) => { console.error(error); // 在这个例子中不会执行 }); \",\"promise.catch(onRejected)：注册一个回调函数，用于处理 Promise 的拒绝（失败）情况。这个方法与 promise.then(null, onRejected) 相同，用来捕获 Promise 的错误。例如：\",\"const promise = new Promise((resolve, reject) => { // 异步操作 setTimeout(() => { reject(new Error(\\\"Something went wrong.\\\")); }, 1000); }); promise.catch((error) => { console.error(error); // 输出错误信息 }); \",\"promise.finally(onFinally)：注册一个回调函数，无论 Promise 是被解决还是被拒绝，都会执行该回调函数。通常用于无论如何都需要执行的清理操作。例如：\",\"const promise = new Promise((resolve, reject) => { // 异步操作 setTimeout(() => { resolve(\\\"Success!\\\"); }, 1000); }); promise.finally(() => { console.log(\\\"Cleanup\\\"); // 无论如何都会执行 }); \"]},\"194\":{\"h\":\"async 函数\",\"t\":[\"ES6 中的 async 函数是一种特殊的函数，用于更方便地处理异步操作。函数前加上 async 关键字表示该函数是一个异步函数，并且它的返回值会被封装在一个 Promise 对象中。\"]},\"195\":{\"h\":\"实现原理\",\"t\":[\"async/await 的实现原理可以通过理解异步生成器（Async Generator）和 Promise 的工作原理来了解。下面是 async/await 的实现原理的简要解释：\",\"async 函数的实现原理：\",\"当定义一个 async 函数时，它会被转化为一个返回 Promise 的普通函数。\",\"async 函数内部的 await 关键字会将其后面的表达式转化为一个 Promise 对象，并暂停函数执行，直到这个 Promise 对象被解决（完成）。\",\"在函数暂停时，它会将控制权交回给调用方。\",\"当 Promise 解决后，async 函数将从之前暂停的地方恢复执行，并返回解决的值。\",\"await 表达式的实现原理：\",\"await 表达式会暂停函数执行，直到传递给它的 Promise 对象被解决。\",\"如果被传递的是一个原始值（非 Promise），它会被包装成一个已解决的 Promise 对象。\",\"在等待期间，await 表达式的控制权会被传递回调用方。\",\"一旦 Promise 被解决，await 表达式会从解决的 Promise 中提取结果，并将结果返回给调用方。\",\"综上所述，async/await 通过将异步操作转化为 Promise，并使用 Promise 的解决（完成）机制来实现异步操作的流程控制。这样，我们可以将异步操作的代码看起来像是同步的，使得异步操作的编写和阅读更加直观、易懂。在内部，它仍然使用了事件循环和回调函数，但是通过 await 的语法糖，使得代码更具可读性和可维护性。\",\"需要注意的是，async/await 是在 ES2017（ES8）引入的，它依赖于 Promise 和生成器功能，因此在运行环境中需要支持这些特性才能正常使用。\"]},\"196\":{\"h\":\"特点和用法\",\"t\":[\"async 函数始终返回一个 Promise 对象：无论 async 函数的返回值是一个原始值、一个对象还是一个 Promise，它都会被自动封装在一个 Promise 对象中。如果 async 函数显式地使用 return 关键字返回一个值，该值将作为 Promise 对象的解决值；如果 async 函数抛出一个异常，那么 Promise 对象将会被拒绝，并将异常作为拒绝原因。\",\"await 关键字用于等待一个 Promise 对象的解决：在 async 函数内部，可以使用 await 关键字来等待一个异步操作的结果。await 关键字只能在异步函数内部使用，并且它会暂停函数的执行，等待 Promise 对象的解决（完成），然后返回 Promise 对象的值。在 await 关键字后面的表达式可以是一个 Promise 对象，也可以是一个非 Promise 值，如果是非 Promise 值，它会被包装为一个已解决（已完成）的 Promise 对象。\",\"async 函数内部可以包含一系列的异步操作：在 async 函数内部，可以使用常规的控制流语句（如 if/else、for 循环等），并使用 await 关键字来等待异步操作的结果。这使得异步代码的编写更加直观、易读。\",\"下面是一个使用 async 函数的示例：\",\"function delay(ms) { return new Promise(resolve => setTimeout(resolve, ms)); } async function fetchData() { console.log(\\\"Fetching data...\\\"); // 模拟异步操作延迟 await delay(2000); // 模拟异步操作返回结果 return \\\"Data fetched!\\\"; } async function main() { try { const result = await fetchData(); console.log(\\\"Result:\\\", result); } catch (error) { console.error(\\\"Error:\\\", error); } } main(); \",\"在上面的代码中，fetchData 是一个 async 函数，它使用 await 关键字等待异步操作的结果。main 函数也是一个 async 函数，它调用了 fetchData 并处理可能发生的异常。在 main 函数中，我们可以像同步代码一样使用 await 关键字来等待异步操作的结果。\",\"async 函数提供了一种更加优雅且易读的方式来编写和处理异步操作，使得代码的流程更加直观和易于维护。\",\"异步函数的错误处理：在异步函数中，可以使用 try-catch 块来捕获并处理异步操作中的错误。如果在异步函数中的任何地方抛出了一个异常，那么该异常将会被 Promise 对象拒绝，并可以通过 catch 块进行处理。\",\"async function fetchData() { try { const response = await fetch(\\\"https://api.example.com/data\\\"); const data = await response.json(); return data; } catch (error) { console.error(\\\"An error occurred:\\\", error); throw error; } } // 在调用异步函数时，可以使用 catch 块来捕获错误 fetchData() .then(data => { console.log(\\\"Data:\\\", data); }) .catch(error => { console.error(\\\"Error:\\\", error); }); \",\"在上面的示例中，如果发生了错误，fetchData 函数中的 catch 块将捕获错误并进行处理。然后，通过使用 then 方法和相应的回调函数，以及 catch 方法捕获错误，从 Promise 对象中获得数据或者处理错误。\",\"多个异步操作的并行与顺序执行：使用 await 关键字，可以实现多个异步操作的并行或顺序执行。可以使用 Promise.all 方法将多个 Promise 对象封装成一个新的 Promise 对象，在 await 关键字后面等待这个新的 Promise 对象解决（即所有操作完成）。\",\"async function fetchMultipleData() { const [data1, data2, data3] = await Promise.all([ fetchDataFromAPI1(), fetchDataFromAPI2(), fetchDataFromAPI3() ]); return [data1, data2, data3]; } \",\"在上面的示例中，fetchMultipleData 函数使用 Promise.all 将多个异步操作封装成一个 Promise 对象，并使用 await 关键字等待所有操作完成。然后，将每个异步操作的结果存储在变量中并返回。\"]},\"197\":{\"h\":\"Generator函数的异步应用\",\"t\":[\"生成器函数（Generator Function）可以用于实现异步编程，它结合使用生成器的特性和 Promise 对象，可以创建可暂停和可恢复的异步操作。\",\"下面是一个示例，展示了生成器函数的异步应用：\",\"function delay(ms) { return new Promise(resolve => setTimeout(resolve, ms)); } function* asyncGenerator() { console.log(\\\"Start\\\"); yield delay(2000); console.log(\\\"Middle\\\"); yield delay(1000); console.log(\\\"End\\\"); } const generator = asyncGenerator(); function runGenerator() { const { value, done } = generator.next(); if (!done) { value.then(() => { runGenerator(); }); } } runGenerator(); \",\"在上面的代码中，asyncGenerator 是一个生成器函数，通过 yield 关键字暂停函数的执行，并使用 Promise 对象实现异步操作的延迟。delay 函数用于创建一个延迟一定时间的 Promise 对象。\",\"generator 是通过调用 asyncGenerator 获取的生成器对象，它可以通过 next 方法前进到下一个 yield 表达式。runGenerator 函数用于驱动生成器函数的执行，每次调用 next 方法后，通过检查 done 属性来判断生成器是否已经完成。\",\"当开始执行 runGenerator 函数时，生成器函数会执行到第一个 yield 表达式，value 对象是一个 Promise 对象，通过调用 then 方法来等待异步操作的解决。一旦 Promise 对象解决，runGenerator 函数再次被调用，继续执行生成器函数的下一个 yield 表达式。\",\"通过交替使用 yield 和 Promise 对象，生成器函数可以在异步操作中暂停和恢复，实现了更细粒度的控制和异步操作的顺序性。\",\"需要注意的是，上述示例是以 ES6 中的生成器函数为基础，通过手动驱动生成器的方式来实现异步操作。随着 async/await 的引入，异步生成器（Async Generator）的概念也出现了，它在生成器函数中结合了 async/await 的语法糖，更简单和直观地进行异步编程。\"]},\"198\":{\"h\":\"常见场景\",\"t\":[\"数据流处理：生成器函数可以用于处理大型或无限数据流。通过生成器函数，可以逐步地从数据源中获取数据，并进行处理或筛选，而不需要一次性加载整个数据集到内存中。\",\"function* streamData(data) { for (let item of data) { yield item; } } async function processData(data) { for await (let item of streamData(data)) { // 处理数据 } } const data = [1, 2, 3, 4, 5]; processData(data); \",\"在上面的示例中，streamData 是一个生成器函数，它逐步返回数据源中的每一项数据。processData 函数使用 for await...of 循环遍历生成器函数的结果，并对每一项数据进行处理。\",\"异步迭代器：生成器函数可以实现异步迭代器，用于遍历异步数据集合或处理需要异步操作的迭代任务。\",\"async function* asyncGenerator() { yield await fetchDataFromAPI(); yield await fetchDataFromDatabase(); yield await fetchDataFromFile(); } const generator = asyncGenerator(); (async () => { for await (let data of generator) { // 处理数据 } })(); \",\"在上述示例中，asyncGenerator 是一个生成器函数，它使用 yield 关键字和 await 关键字暂停和恢复函数的执行，每次返回一个异步操作的结果。通过 for await...of 循环，可以遍历异步生成器函数返回的数据，并对每一项进行操作。\",\"并发执行异步任务：生成器函数可以与 Promise.all 组合，实现并发执行多个异步任务并等待它们全部完成。\",\"function* asyncTasks() { // 定义异步任务 const task1 = fetchDataFromAPI1(); const task2 = fetchDataFromAPI2(); const task3 = fetchDataFromAPI3(); // 并发执行异步任务 const results = yield Promise.all([task1, task2, task3]); // 返回结果 return results; } const generator = asyncTasks(); const promise = generator.next().value; promise.then(results => { // 处理结果 }).catch(error => { // 处理错误 }); \",\"在上述示例中，asyncTasks 是一个生成器函数，它定义了三个异步任务并将它们存储在变量中。然后，使用 Promise.all 将这些任务封装为一个新的 Promise 对象，并通过 yield 关键字等待它们全部完成。\",\"在调用 generator.next().value 后，返回的是一个 Promise 对象，可以使用 then 方法和相应的回调函数处理结果，或使用 catch 方法捕获错误。\",\"通过并发执行多个异步任务，可以提高整体的执行效率，并等待它们全部完成后再进行下一步操作。\",\"快速失败并发执行异步任务：如果某个异步任务失败，我们可能希望立即中止其他任务的执行，并抛出或处理失败的任务。\",\"function* asyncTasks() { const task1 = fetchDataFromAPI1(); const task2 = fetchDataFromAPI2(); const task3 = fetchDataFromAPI3(); try { const results = yield Promise.all([task1, task2, task3]); return results; } catch (error) { // 处理错误 return error; } } const generator = asyncTasks(); const promise = generator.next().value; promise.then(results => { // 处理结果 }).catch(error => { // 处理错误 }); \",\"在上述示例中，asyncTasks 生成器函数中添加了一个 try-catch 块来捕获可能发生的错误。当其中任一异步任务发生错误时，代码会立即进入 catch 块，执行错误处理逻辑。\",\"这种方式可以快速检测到错误并中止其他任务的执行，对于某些情况下需要迅速失败的并发任务执行非常有用。\",\"处理操作取消：生成器函数可以结合使用生成器对象和状态标记来实现操作的取消功能。\",\"function* asyncTask() { let cancelled = false; try { while (!cancelled) { // 执行异步操作 yield fetchData(); } } catch (error) { // 处理错误 console.log(error); } } const generator = asyncTask(); const result = generator.next(); // 取消操作 generator.return(); if (result.done) { console.log(\\\"Task completed.\\\"); } else { console.log(\\\"Task cancelled.\\\"); } \",\"在上述示例中，asyncTask 生成器函数中使用一个 cancelled 变量来标记操作是否被取消。通过 while 循环，在循环体内部执行异步操作，同时在每次迭代开始前检查 cancelled 变量的状态。\",\"通过调用 generator.return() 方法，生成器对象会立即结束迭代，并进入 catch 块执行错误处理逻辑。\",\"这种方法为异步操作提供了一个手动的取消机制，适用于一些需要控制异步操作生命周期的场景。\",\"遍历事件流：生成器函数可以结合使用 yield 表达式和事件监听器，用于异步事件流的遍历和处理。\",\"function* eventStream() { const emitter = createEventEmitter(); // 遍历事件流 while (true) { const nextEvent = yield new Promise(resolve => { emitter.on('event', resolve); }); // 处理事件 console.log(nextEvent); } } const generator = eventStream(); const promise = generator.next().value; promise.then(() => { // 触发事件 emitter.emit('event', 'Event 1'); }).catch(error => { // 处理错误 console.log(error); }); \",\"在上述示例中，eventStream 生成器函数通过生成器对象创建了一个 EventEmitter，并使用 yield 表达式暂停函数的执行，等待事件被触发。\",\"通过调用 generator.next().value 获取一个 Promise 对象，当 Promise 对象被解决后，生成器函数会从之前的暂停点继续执行，并处理接收到的事件。\",\"这种方法允许我们以同步的方式遍历异步事件流，实现了处理事件的逻辑和控制流的分离。\"]},\"199\":{\"h\":\"模块化\",\"t\":[\"模块化是一种将代码拆分为独立的功能单元并进行组织的编程概念。它使代码更易于维护、测试和重用，并提供了更好的代码组织和封装。\",\"在JavaScript中，有多种模块化的实现方式。下面介绍两种常用的模块化方案：\"]},\"200\":{\"h\":\"CommonJS模块化\",\"t\":[\"CommonJS模块化是一种用于服务器端和非浏览器环境的模块化规范，广泛用于Node.js生态系统中。它提供了一种简单且易于使用的模块化方案，用于组织、导入和导出模块的内容。\",\"在CommonJS模块化中，每个模块都有独立的作用域，模块之间通过require关键字导入依赖关系，使用module.exports或exports关键字导出模块的内容。\",\"下面是使用CommonJS模块化的示例：\",\"导出模块内容：\",\"// calculator.js function add(a, b) { return a + b; } function subtract(a, b) { return a - b; } module.exports = { add, subtract }; \",\"在上述示例中，使用module.exports将add和subtract函数作为一个对象导出。\",\"导入模块内容：\",\"// index.js const calculator = require('./calculator'); console.log(calculator.add(2, 3)); // 输出: 5 console.log(calculator.subtract(5, 3)); // 输出: 2 \",\"在上述示例中，通过require关键字导入calculator.js模块的内容，并将其赋值给变量calculator，然后就可以使用导入的模块内容。\",\"CommonJS模块化的特点和优势包括：\",\"简单易用：CommonJS模块化规范非常简单，容易上手和理解，无需额外的构建工具就可以直接使用。\",\"动态导入：CommonJS模块支持在运行时动态导入模块，可以根据需要异步加载依赖的模块。\",\"同步加载：默认情况下，CommonJS模块是同步加载的，模块中的代码会立即执行并导出结果。\",\"适用于服务器端：CommonJS模块化最初是为服务器端开发而设计，适用于在Node.js中使用，方便管理服务器端的模块依赖和代码复用。\",\"需要注意的是，CommonJS模块化一般用于服务器端开发和构建工具中，而在浏览器端，通常使用ES6模块化或其他前端打包工具进行模块化开发。\",\"CommonJS模块化提供了一种简单和常用的模块化方案，对于开发Node.js应用程序和构建工具来说非常实用。然而，在前端开发中，尤其是现代前端开发，ES6模块化已成为主流，并提供了更丰富和强大的模块化功能和语法。\"]},\"201\":{\"h\":\"ES模块化\",\"t\":[\"ES6模块化是JavaScript的官方模块化标准，在现代浏览器和各种JavaScript环境中广泛支持。它提供了一种简洁而强大的模块化语法，用于组织、导入和导出模块的内容。\",\"ES6模块使用import和export关键字来导入和导出模块。下面是使用ES6模块化的示例：\",\"导出模块内容：\",\"// calculator.js export function add(a, b) { return a + b; } export function subtract(a, b) { return a - b; } \",\"导入模块内容：\",\"// index.js import { add, subtract } from './calculator'; console.log(add(2, 3)); // 输出: 5 console.log(subtract(5, 3)); // 输出: 2 \",\"ES6模块化的特点和优势包括：\",\"显式导入和导出：使用import和export关键字可以清晰地指定要导入和导出的模块内容，使得代码更具可读性和可理解性。\",\"块级作用域：每个模块都有自己的作用域，模块中的变量和函数默认是在模块内部作用域中，不会污染全局作用域。\",\"异步加载：ES6模块支持运行时动态加载模块，可以根据需要异步加载依赖的模块，提高性能和加载速度。\",\"静态解析：ES6模块在编译阶段就可以确定模块的依赖关系，使得编译器可以进行静态优化和分析，提供更好的工具支持和开发体验。\",\"需要注意的是，ES6模块化在浏览器中的使用需要使用<script type=\\\"module\\\">标签将脚本文件标记为模块。\",\"当使用ES6模块化时，可以根据具体项目和需求，灵活选择合适的打包工具（如Webpack、Rollup等）来将模块打包为可在浏览器中运行的代码。这样可以更好地管理模块依赖和优化项目的性能。\",\"ES6模块化提供了一种强大且标准的方式来开发和组织JavaScript代码，它已成为现代前端开发的主流模块化方案，推荐在项目中使用。\"]},\"202\":{\"h\":\"用法\",\"t\":[\"默认导出和导入： 除了通过export和import关键字导入和导出具名的模块内容，ES6模块化还支持默认导出和导入。\",\"// calculator.js export default function add(a, b) { return a + b; } // index.js import add from './calculator'; console.log(add(2, 3)); // 输出: 5 \",\"在上述示例中，export default语法用于导出默认的模块内容，而import add from './calculator'语法用于导入默认导出的内容。\",\"导入整个模块： 除了按需导入具名的模块内容，ES6模块化还支持导入整个模块。\",\"// calculator.js export function add(a, b) { return a + b; } export function subtract(a, b) { return a - b; } // index.js import * as calculator from './calculator'; console.log(calculator.add(2, 3)); // 输出: 5 console.log(calculator.subtract(5, 3)); // 输出: 2 \",\"在上述示例中，import * as calculator from './calculator'语法用于将整个模块导入到变量calculator中，我们可以通过该变量访问模块中的所有导出内容。\",\"重命名导入和导出： 如果导入的模块内容在当前模块中有命名冲突，可以使用as关键字进行重命名。\",\"// calculator.js export function add(a, b) { return a + b; } // index.js import { add as addition } from './calculator'; console.log(addition(2, 3)); // 输出: 5 \",\"在上述示例中，通过import { add as addition }语法将add函数导入，并将导入的函数重命名为addition，以避免与当前模块中的同名变量冲突。\",\"动态导入： ES6模块化支持使用import()函数进行动态导入，可以在运行时根据需要异步加载模块。\",\"// index.js import('./calculator').then(calculatorModule => { console.log(calculatorModule.add(2, 3)); // 输出: 5 }); \",\"在上述示例中，通过import('./calculator')语法返回一个Promise，我们可以通过then方法获取导入的模块，并在模块加载完成后使用模块的导出内容。\",\"动态导入对于按需加载模块或根据条件加载模块非常有用，可以提高应用的性能和资源利用率。\",\"嵌套导入和导出： ES6模块化允许在一个模块中嵌套导入和导出其他模块内容。\",\"// math.js export { add, subtract } from './calculator'; export { multiply, divide } from './calculator'; \",\"在上述示例中，math.js模块中同时导入和导出了calculator.js模块中的多个函数。\",\"导入并执行模块： ES6模块化允许导入并执行其他模块中的代码。这在需要在导入时执行某些初始化逻辑的情况下非常有用。\",\"// app.js import './initialize'; // initialize.js console.log(\\\"Initializing...\\\"); // 输出: Initializing... \",\"在上述示例中，app.js模块导入了initialize.js模块，导入时会立即执行initialize.js模块中的代码。\"]},\"203\":{\"h\":\"CommonJs和ES模块的区别\",\"t\":[\"语法差异：\",\"CommonJS采用require和module.exports关键字进行模块的导入和导出。\",\"ES模块化采用import和export关键字进行模块的导入和导出。\",\"加载时机：\",\"CommonJS模块是同步加载的，模块中的代码会立即执行并导出结果。\",\"ES模块化支持编译时静态分析，模块的导入和导出在编译阶段就可以确定，并且支持异步加载。\",\"作用域：\",\"CommonJS模块的导入和导出都是值拷贝，每次导入会生成一个新的拷贝。\",\"ES模块化采用的是实时绑定，导入的模块指向原始的引用，保持了引用的一致性。\",\"动态导入：\",\"CommonJS模块化不直接支持动态导入，只能在运行时通过require动态加载模块。\",\"ES模块化支持使用import()函数进行动态导入，可以在运行时根据需要异步加载模块。\",\"浏览器兼容性：\",\"CommonJS模块化最初是为服务器端开发而设计，不直接适用于浏览器环境。但在使用构建工具（如Browserify、Webpack等）的帮助下，可以在浏览器中使用CommonJS模块化。\",\"ES模块化是JavaScript的官方模块化标准，现代浏览器原生支持ES模块化，无需额外的构建工具。可以直接在浏览器中使用<script type=\\\"module\\\">标签加载和运行ES模块。\",\"开发语法：\",\"CommonJS模块化的语法设计比较简洁，容易上手，可以直接在Node.js环境中使用。\",\"ES模块化的语法更加丰富和强大，提供了更多的特性和灵活性，对于现代前端开发非常有用。\",\"总之，CommonJS模块化适用于服务器端和构建工具，而ES模块化适用于现代前端开发，在浏览器中具有原生支持。使用哪种模块化取决于项目的需求和环境，可以根据具体情况选择最合适的模块化方案。在实际开发中，常见的做法是使用构建工具（如Webpack、Rollup等）来处理模块化代码，使得CommonJS模块和ES模块能够共存和互相转换。\"]},\"204\":{\"h\":\"装饰器\",\"t\":[\"ES6装饰器是一种用于增强或修改类、方法、属性等的语法特性。它是一种元编程的概念，通过在声明或定义时为目标对象应用装饰器来改变其行为或功能。\",\"装饰器通过使用特殊的语法@，紧接着是装饰器函数，将装饰器应用于目标对象。\",\"下面是一些常见的使用ES6装饰器的示例：\",\"类装饰器： 类装饰器用于增强类的行为或功能。它在类声明之前应用，并且接收一个参数，代表目标类本身。\",\"function logger(target) { target.prototype.log = function(message) { console.log(message); } } @logger class Example { // 示例类的定义 } const instance = new Example(); instance.log('Hello, decorator!'); // 输出: Hello, decorator! \",\"在上述示例中，logger装饰器通过在目标类的原型上添加了一个log方法，该方法可以在类的实例上使用。\",\"方法装饰器： 方法装饰器用于增强或修改类的方法。它在方法声明之前应用，并且接收三个参数：目标类的原型，方法名和方法描述符。\",\"function uppercase(target, name, descriptor) { const originalMethod = descriptor.value; descriptor.value = function(...args) { const result = originalMethod.apply(this, args); if (typeof result === 'string') { return result.toUpperCase(); } return result; } return descriptor; } class Example { @uppercase greet(name) { return `Hello, ${name}!`; } } const instance = new Example(); console.log(instance.greet('decorator')); // 输出: HELLO, DECORATOR! \",\"在上述示例中，uppercase装饰器修改了greet方法，将方法的返回值转换为大写。\",\"属性装饰器： 属性装饰器用于增强或修改类的属性。它在属性声明之前应用，并且接收两个参数：目标类的原型和属性名。\",\"function readonly(target, name) { const descriptor = { writable: false }; Object.defineProperty(target, name, descriptor); } class Example { @readonly property = 'Read Only Property'; } const instance = new Example(); instance.property = 'Modified'; // 抛出错误：Cannot assign to read only property \",\"在上述示例中，readonly装饰器修改了property属性，使其成为只读属性，无法修改。\",\"参数装饰器： 参数装饰器用于装饰函数或方法的参数。它在参数声明之前应用，并且接收三个参数：目标类的原型、方法名或 undefined（如果装饰器应用于构造函数的参数），以及参数在函数参数列表中的索引。\",\"function required(target, methodName, parameterIndex) { // 在这里可以对目标类上的方法的指定参数进行检查或修改 console.log(`Parameter \\\"${parameterIndex}\\\" of method \\\"${methodName}\\\" is required.`); } class Example { greet(@required name) { console.log(`Hello, ${name}!`); } } const instance = new Example(); instance.greet(); // 输出: Parameter \\\"0\\\" of method \\\"greet\\\" is required. \",\"在上述示例中，required装饰器应用于greet方法的name参数。装饰器可以在运行时对参数进行检查或修改。\",\"装饰器组合： 多个装饰器可以按照从上到下的顺序应用于目标对象。装饰器组合可以通过将多个装饰器放置在同一行，并按照从上到下的顺序依次应用。\",\"function logger(target) { console.log('Logging...'); } function sanitizer(target) { console.log('Sanitizing...'); } @logger @sanitizer class Example { // 示例类的定义 } // 输出: // Sanitizing... // Logging... \",\"在上述示例中，logger装饰器和sanitizer装饰器按照从上到下的顺序依次应用于Example类。\",\"装饰器是一种强大的元编程特性，可以用于扩展、修改或定制类、方法、属性等的行为。它提供了一种声明式的方式来添加功能或改变逻辑，使代码更加清晰、可维护和可复用。然而，需要注意的是，装饰器目前仍处于提案阶段，在某些环境或工具中可能需要使用附加的插件、转译器或构建工具来支持装饰器的使用。\",\"参考网站：\",\"阮一峰Es6入门教程\"]},\"205\":{\"h\":\"HTML\"},\"206\":{\"h\":\"介绍\",\"t\":[\"HTML（HyperText Markup Language）是一种用于创建网页的标记语言。它使用标记（tag）来描述网页的结构和内容。\"]},\"207\":{\"h\":\"基本结构\",\"t\":[\"一个基本的 文件包含以下几个部分：\",\"<!DOCTYPE html> <html> <head> <title>页面标题</title> </head> <body> 页面内容 </body> </html> \",\"<!DOCTYPE html>：声明文档类型为 HTML5。\",\"<html>：文档的根元素，包含了整个 页面的内容。\",\"<head>：头部区域，用于定义页面的元数据和引用外部资源。\",\"<title>：定义网页的标题，会显示在浏览器的标题栏上。\",\"<body>：网页的主体部分，包含显示在浏览器窗口中的内容。\"]},\"208\":{\"h\":\"元数据\",\"t\":[\"元数据用于提供关于文档的额外信息，如文档的字符编码、作者、描述等。以下是一些常见的元数据标签：\",\"<meta charset=\\\"UTF-8\\\">：指定文档使用 UTF-8 字符编码。\",\"<meta name=\\\"author\\\" content=\\\"John Doe\\\">：指定文档的作者。\",\"<meta name=\\\"description\\\" content=\\\"这是网页的描述\\\">：指定网页的描述信息。\",\"可以使用更多的 <meta> 标签来提供其他元数据，以便搜索引擎和浏览器正确解析并显示相关信息。\"]},\"209\":{\"h\":\"标记元素\",\"t\":[\"使用标记元素来表示不同的内容和结构。以下是一些常用的标记元素：\",\"<h1> 到 <h6>：标题元素，用于定义不同级别的标题。\",\"<p>：段落元素，用于定义文本段落。\",\"<a>：锚点元素，用于创建链接。\",\"<img>：图像元素，用于插入图片。\",\"<ul> 和 <ol>：无序列表和有序列表，用于显示一组项目。\",\"<li>：列表项元素，用于定义列表中的每个项目。\",\"<strong>: 加粗标签，用于加粗文本\"]},\"210\":{\"h\":\"块级元素与内联元素\",\"t\":[\"元素根据其在页面上显示的方式被分为块级元素和内联元素。\",\"块级元素（Block-level Elements）：在页面中独占一行，顶部和底部会有额外的空白。常见的块级元素包括 <p>、<h1>、<div> 等。\",\"内联元素（Inline Elements）：与其他元素共享同一行，在顶部和底部不会有额外的空白。常见的内联元素包括 <span>、<a>、<strong> 等。\",\"通过给块级元素和内联元素设置 CSS 样式，可以控制它们的外观和行为。\"]},\"211\":{\"h\":\"属性\",\"t\":[\"元素可以包含属性，属性为元素提供了更多的信息和控制。以下是一些常见的 属性：\",\"id：为元素指定唯一的标识符。\",\"class：为元素指定一个或多个样式类。\",\"src：指定图像、音频或视频的 URL。\",\"href：指定链接的目标 URL。\",\"style：为元素指定样式信息（如颜色、字体、大小等）。\",\"alt：指定图像无法显示时的替代文本。\"]},\"212\":{\"h\":\"注释\",\"t\":[\"注释是用来给开发人员添加注解和说明的。注释不会在浏览器中显示，而是只在代码中可见。示例如下：\",\"<!-- 这是一个注释 --> \"]},\"213\":{\"h\":\"实体字符\",\"t\":[\"在 中，某些字符具有特殊的含义，如 <、> 和 &。为了在文本中显示这些字符，可以使用实体字符表示。以下是一些常见的实体字符示例：\",\"&lt;：小于号 (<)\",\"&gt;：大于号 (>)\",\"&amp;：和号 (&)\",\"&quot;：双引号 (\\\")\",\"&nbsp;：空格\"]},\"214\":{\"h\":\"表格\",\"t\":[\"表格用于在网页中展示数据，通常包含行和列。以下是一个简单的表格示例：\",\"<table> <tr> <th>姓名</th> <th>年龄</th> <th>城市</th> </tr> <tr> <td>John</td> <td>25</td> <td>New York</td> </tr> <tr> <td>Jane</td> <td>30</td> <td>London</td> </tr> </table> \"]},\"215\":{\"h\":\"语义化表格\",\"t\":[\"<table>：定义一个表格。\",\"<tr>：定义表格中的一行。\",\"<th>：定义表头单元格。\",\"<td>：定义数据单元格。\",\"<table>：定义表格元素。\",\"<caption>：定义表格标题。\",\"<thead>：定义表格的表头内容。\",\"<tbody>：定义表格的主体内容。\",\"<tfoot>：定义表格的页脚内容。\",\"<th>：定义表格的表头单元格。\",\"<tr>：定义表格的行。\",\"<td>：定义表格的数据单元格。\"]},\"216\":{\"h\":\"表单\",\"t\":[\"表单允许用户在网页上输入和提交数据。以下是一个简单的表单示例：\",\"<form> <label for=\\\"name\\\">姓名：</label> <input type=\\\"text\\\" id=\\\"name\\\" name=\\\"name\\\"><br><br> <label for=\\\"email\\\">邮箱：</label> <input type=\\\"email\\\" id=\\\"email\\\" name=\\\"email\\\"><br><br> <input type=\\\"submit\\\" value=\\\"提交\\\"> </form> \",\"<form>：定义一个表单。\",\"<label>：定义表单字段的标签。\",\"<input>：用于创建输入字段，如文本框、按钮等。\",\"type 属性：指定输入字段的类型，如 text、email 等。\",\"id 属性：为字段定义唯一标识符。\",\"name 属性：为字段定义名称。\"]},\"217\":{\"h\":\"表单验证\",\"t\":[\"HTML5 引入了一些内置的表单验证功能，可以使用这些功能对用户输入进行验证。例如，可以使用以下属性：\",\"required：指定字段为必填项。\",\"pattern：使用正则表达式定义输入字段的模式。\",\"maxlength：限制输入字段的最大长度。\",\"min 和 max：定义输入字段的最小值和最大值。\",\"这些验证属性可以在客户端进行验证，减少了对服务器端验证的依赖。\"]},\"218\":{\"h\":\"框架\",\"t\":[\"框架允许将网页分割为独立的区域，每个区域可以显示不同的内容。以下是一个简单的框架示例：\",\"<frameset cols=\\\"25%, 75%\\\"> <frame src=\\\"menu.html\\\"> <frame src=\\\"content.html\\\"> </frameset> \",\"<frameset>：定义框架集。\",\"<frame>：定义单个框架。\",\"请注意，使用框架已经不推荐，而是使用更现代化的技术，如 CSS 和 JavaScript 进行布局和交互。\"]},\"219\":{\"h\":\"框架和嵌入内容\",\"t\":[\"提供了多种标签和方式来嵌入外部内容，如框架、标记列表、嵌入式视频等。以下是一些示例：\",\"<iframe src=\\\"https://www.example.com\\\"></iframe>：嵌入其他网页或文档。\",\"<ul><li>项目1</li><li>项目2</li></ul>：创建无序列表。\",\"<ol><li>项目1</li><li>项目2</li></ol>：创建有序列表。\",\"<embed src=\\\"video.mp4\\\">：嵌入视频文件。\",\"<object data=\\\"document.pdf\\\">：嵌入 PDF 文档。\",\"这些标签可以用于在网页中嵌入其他资源和内容，并增强用户体验。\"]},\"220\":{\"h\":\"多媒体\",\"t\":[\"提供了多种元素来嵌入多媒体内容，如图像、音频和视频。以下是一些示例：\"]},\"221\":{\"h\":\"图像\",\"t\":[\"<img src=\\\"image.jpg\\\" alt=\\\"图片描述\\\"> \",\"<img>：用于插入图像文件。\",\"src 属性：指定图像的文件路径。\",\"alt 属性：定义图像无法显示时的替代文本。\"]},\"222\":{\"h\":\"音频\",\"t\":[\"<audio src=\\\"audio.mp3\\\" controls></audio> \",\"<audio>：用于插入音频文件。\",\"src 属性：指定音频的文件路径。\",\"controls 属性：在页面中显示音频控制器。\"]},\"223\":{\"h\":\"视频\",\"t\":[\"<video src=\\\"video.mp4\\\" controls></video> \",\"<video>：用于插入视频文件。\",\"src 属性：指定视频的文件路径。\",\"controls 属性：在页面中显示视频控制器。\",\"当然！这里还有一些其他的 相关主题：\"]},\"224\":{\"h\":\"链接\",\"t\":[\"在 中，可以使用 <a> 元素创建链接。以下是一些示例：\",\"<a href=\\\"https://www.example.com\\\">点击这里</a> \",\"<a>：创建链接的元素。\",\"href 属性：指定链接的目标 URL。\",\"可以在 href 属性中指定不同的 URL 类型，如绝对路径、相对路径、内部锚点等。\"]},\"225\":{\"h\":\"HTML5 新特性\",\"t\":[\"HTML5 是 的最新版本，引入了许多新特性和改进。一些 HTML5 新特性包括语义化元素、表单增强、多媒体支持、Canvas 绘图等。以下是一些 HTML5 新特性示例：\",\"<header>：定义文档或区域的页眉。\",\"<nav>：定义导航链接的容器。\",\"<main>：定义文档的主要内容。\",\"<video>：用于插入视频。\",\"<canvas>：用于绘制图形。\",\"<input type=\\\"email\\\">：用于输入邮箱地址的表单字段。\",\"HTML5 提供了更多强大和丰富的功能，以及更好的语义化支持。\"]},\"226\":{\"h\":\"语义化\",\"t\":[\"语义化是指使用合适的标记元素来正确表示内容的结构和含义，使其在没有样式和脚本的情况下也能够良好地呈现和理解。通过正确使用标签元素，搜索引擎和辅助技术可以更好地理解和解析网页内容。\",\"例如，使用 <h1> 到 <h6> 标签来表示标题的层级，<nav> 定义导航链接，<article> 表示文章等等。合理使用这些语义化标签将提高网页的可读性、可访问性和可维护性。\"]},\"227\":{\"h\":\"语义化表单\",\"t\":[\"表单用于收集用户输入，HTML5 引入了一些新的表单元素和属性，使表单更强大和易于使用。以下是一些语义化表单的示例：\",\"<input type=\\\"email\\\">：用于输入电子邮件地址。\",\"<input type=\\\"url\\\">：用于输入 URL 地址。\",\"<input type=\\\"date\\\">：用于选择日期。\",\"<input type=\\\"range\\\">：用于选择范围。\",\"<textarea>：用于多行文本输入。\",\"还有其他许多表单元素和属性，可以根据需要选择合适的类型来创建表单。\"]},\"228\":{\"h\":\"语义化图表\",\"t\":[\"HTML5 引入了 <canvas> 元素，用于创建图表、绘制图形和动画效果。可以使用 JavaScript 来操作和绘制 <canvas> 元素。以下是一个简单的例子：\",\"<canvas id=\\\"myCanvas\\\" width=\\\"200\\\" height=\\\"100\\\"></canvas> <script> var canvas = document.getElementById(\\\"myCanvas\\\"); var ctx = canvas.getContext(\\\"2d\\\"); ctx.fillStyle = \\\"red\\\"; ctx.fillRect(0, 0, 200, 100); </script> \",\"在上面的示例中，创建了一个红色的矩形图形。\"]},\"229\":{\"h\":\"地理定位\",\"t\":[\"HTML5 引入了地理定位 API，允许网页获取用户的地理位置信息。以下是一个简单的示例：\",\"<button onclick=\\\"getLocation()\\\">获取位置</button> <script> function getLocation() { if (navigator.geolocation) { navigator.geolocation.getCurrentPosition(showPosition); } else { alert(\\\"该浏览器不支持地理定位。\\\"); } } function showPosition(position) { var latitude = position.coords.latitude; var longitude = position.coords.longitude; alert(\\\"您的位置是：\\\" + latitude + \\\", \\\" + longitude); } </script> \",\"点击按钮后，浏览器将请求用户的位置信息，并在弹出对话框中显示经纬度。请注意，为了获取位置信息，用户需要在浏览器中授权。\"]},\"230\":{\"h\":\"语义化标记\",\"t\":[\"语义化标记是指使用适当的语义元素来描述内容的结构和含义，以提高可访问性和搜索引擎优化。以下是一些常见的语义化标记示例：\",\"<header>：定义文档或区域的页眉。\",\"<nav>：定义导航链接的容器。\",\"<main>：定义文档的主要内容。\",\"<article>：定义一个独立的文章或内容块。\",\"<section>：定义文档中的一个区域。\",\"<aside>：定义与主要内容相关但不属于主要流的部分。\",\"语义化标记可以使页面结构更清晰，并帮助辅助技术和搜索引擎更好地理解和处理页面内容。\"]},\"231\":{\"h\":\"微数据\",\"t\":[\"微数据（Microdata）是用于在 中表示语义信息的一种机制，使搜索引擎能够更准确地理解和解释页面内容。以下是一个示例：\",\"<div itemscope itemtype=\\\"http://schema.org/Person\\\"> <h1 itemprop=\\\"name\\\">John Doe</h1> <p>年龄: <span itemprop=\\\"age\\\">25</span>岁</p> <p>职业: <span itemprop=\\\"jobTitle\\\">Web Developer</span></p> </div> \",\"在上面的示例中，使用 Microdata 定义了一个人物信息的结构，包括姓名、年龄和职业。这有助于搜索引擎更好地理解和显示页面内容。\"]},\"232\":{\"h\":\"访问键盘导航\",\"t\":[\"通过在 元素中添加快捷键，可以提供访问键盘导航的功能。以下是一个示例：\",\"<a href=\\\"#\\\" accesskey=\\\"h\\\">主页</a> <a href=\\\"#\\\" accesskey=\\\"a\\\">关于我们</a> <a href=\\\"#\\\" accesskey=\\\"c\\\">联系我们</a> \",\"在上面的示例中，accesskey 属性指定了在按下相应快捷键时激活链接。不同浏览器可能有不同的快捷键触发方式。\"]},\"233\":{\"h\":\"响应式框架\",\"t\":[\"响应式框架是用于创建适应不同屏幕大小和设备的网页布局的工具。这些框架提供了预定义的 CSS 样式和栅格系统，使网页能够自动适应不同的屏幕宽度。\",\"一些流行的响应式框架包括 Bootstrap、Foundation、Bulma 等。使用这些框架可以快速开发具有响应式布局的网页。\"]},\"234\":{\"h\":\"语义化表单验证与 AJAX\",\"t\":[\"表单验证用于确保用户输入的合法性，但默认情况下验证是在客户端完成的。如果需要与服务器进行交互或执行更复杂的验证逻辑，可以使用 JavaScript 和 AJAX 技术。\",\"使用 AJAX，可以在用户填写完表单之后，通过异步请求将表单数据发送到服务器端，并对响应进行处理。这样可以实现更高级的表单验证和交互效果。 当然！这里还有更多关于 HTML 的内容：\"]},\"235\":{\"h\":\"全球化（Internationalization, i18n）\",\"t\":[\"HTML 提供了一些功能来支持全球化，使网页能够适应不同的语言和地区。以下是一些常用的全球化相关的功能：\",\"<html lang=\\\"en\\\">：使用 lang 属性指定网页的语言。\",\"字符编码：使用 <meta charset=\\\"UTF-8\\\"> 指定字符编码，使网页能够正确显示各种字符。\",\"文字方向：使用 dir 属性指定文字方向，如 dir=\\\"rtl\\\" 表示从右到左的文字方向（如阿拉伯语、希伯来语）。\",\"日期和时间格式：使用 <time> 元素和 datetime 属性指定日期和时间的格式。\",\"这些功能有助于确保网页在全球范围内能够正确地显示和交互。\"]},\"236\":{\"h\":\"Web 存储\",\"t\":[\"HTML5 引入了一些用于在客户端存储数据的机制，称为 Web 存储。以下是几种常见的 Web 存储方式：\",\"localStorage：用于在客户端保留持久化数据，并且可以跨会话保留。\",\"sessionStorage：用于在客户端保留会话级别的数据，当会话结束时会被清除。\",\"IndexedDB：用于在客户端存储结构化数据。\",\"Web SQL Database：弃用的技术，用于在客户端创建和管理数据库。\",\"这些机制可以用于在客户端存储和管理数据，适用于离线应用、本地缓存等场景。\"]},\"237\":{\"h\":\"图形化与绘图\",\"t\":[\"HTML5 提供了几种响应式的图形化和绘图功能，如 <canvas> 和 SVG（Scalable Vector Graphics）。以下是一些示例：\",\"<canvas>：通过使用 JavaScript 绘制 2D 和 3D 图形。\",\"SVG: 使用 XML 格式定义矢量图形，可缩放且保持清晰。\",\"这些功能允许开发人员在网页中创建交互式的图形和绘图效果。\"]},\"238\":{\"h\":\"跨文档通信\",\"t\":[\"在 HTML 页面之间进行跨文档通信是很常见的需求，HTML5 提供了一些方法来实现这一目的：\",\"postMessage() 方法：允许在不同的窗口或框架之间发送消息，以实现跨文档通信。\",\"跨域资源共享（CORS）：允许在不同域之间进行跨域请求，以实现数据交换。\",\"这些方法允许不同的 HTML 页面之间进行安全的通信和数据共享。\"]},\"239\":{\"h\":\"响应式图片\",\"t\":[\"在不同的设备上显示适应性的图片是一种常见的需求，HTML 提供了一些方法来实现响应式图片：\",\"<picture> 元素：可以根据不同的屏幕尺寸和像素密度选择不同的图片资源。\",\"srcset 和 sizes 属性：用于指定不同宽度的图片源和显示尺寸。\",\"使用这些方法，可以根据设备的特性自动选择最适合的图片，并提供更好的用户体验。\"]},\"240\":{\"h\":\"浏览器存储\",\"t\":[\"除了 Web 存储之外，HTML 还提供了其他一些用于在客户端存储数据的机制：\",\"Cookies：用于在客户端存储小量的数据，并且在每次请求时都会发送到服务器。\",\"Application Cache：允许网页在离线状态下访问和加载资源。\",\"这些机制可以在客户端存储和管理数据，并提供离线访问和其他功能。\"]},\"241\":{\"h\":\"后端集成\",\"t\":[\"虽然 HTML 主要是一种前端语言，但它也可以与后端技术进行集成，以实现更复杂的功能。常见的后端集成方式包括：\",\"使用表单和服务器端脚本语言（如 PHP、Python、Node.js 等）进行数据交互和处理。\",\"使用 AJAX 和服务器端 API 进行异步数据交互。\",\"使用服务器端模板引擎生成 HTML 内容。\",\"这些方法使 HTML 能够与后端技术无缝集成，实现更丰富和动态的网页功能。\"]},\"242\":{\"h\":\"拖放功能\",\"t\":[\"HTML5 引入了拖放功能，使用户可以拖动元素并将其放置到指定的位置。以下是一些相关的 HTML 拖放事件：\",\"dragstart：拖动开始时触发。\",\"drag：正在拖动时触发。\",\"dragenter：拖动元素进入目标元素时触发。\",\"dragover：拖动元素在目标元素上方时触发。\",\"dragleave：拖动元素离开目标元素时触发。\",\"drop：拖动元素在目标元素上释放时触发。\",\"dragend：拖动结束时触发。\",\"通过处理这些事件，可以实现自定义的拖放交互和行为。\"]},\"243\":{\"h\":\"渐进式网络应用（Progressive Web Apps, PWA）\",\"t\":[\"渐进式网络应用是一种结合了传统网页和原生应用功能的应用程序。HTML 提供了一些功能来支持 PWA 的开发：\",\"Service Workers：允许使用离线缓存和后台同步功能，使应用能够在离线状态下运行并具有更好的性能。\",\"Web App Manifest：允许定义应用的元数据，如图标、名称、主题色等，从而使应用能够以原生应用的方式显示。\",\"Push Notifications：允许应用向用户发送推送通知。\",\"这些功能使得基于 HTML 的 Web 应用能够更接近原生应用的体验，具有更好的离线访问和交互特性。\"]},\"244\":{\"h\":\"Web 组件\",\"t\":[\"HTML Web 组件是一种用于封装可重用和独立功能的自定义 HTML 元素。通过使用 HTML 标记、样式和脚本，可以创建自定义的 Web 组件。\",\"使用 Web 组件，可以将复杂的用户界面拆分成多个独立和可重用的组件，从而提高代码的可维护性和可复用性。\"]},\"245\":{\"h\":\"模板\",\"t\":[\"HTML5 引入了 <template> 元素，用于定义页面中可以复制和重用的 HTML 内容。使用模板，可以创建可复用的结构和内容，并在需要时进行克隆和插入。\",\"模板可以通过 JavaScript 脚本来操纵和填充数据，从而实现动态内容的生成。\"]},\"246\":{\"h\":\"访问性（Accessibility）\",\"t\":[\"HTML 提供了一些功能来提高网页的可访问性，以确保所有用户，包括视力、听力或移动功能受限的用户，都能够访问和使用网页。以下是一些常见的访问性功能：\",\"alt 属性：在 <img> 元素中使用 alt 属性提供图像的替代文本，以便屏幕阅读器能够理解图像的内容。\",\"aria-* 属性：用于提供更详细的语义信息，以改善网页在辅助技术中的表现。\",\"tabindex 属性：指定元素的焦点可以通过键盘导航到达，以使页面可访问性更好。\",\"<label> 元素：与表单元素结合使用，提供关联文本以增加可用性。\"]},\"247\":{\"h\":\"Javascript\"},\"248\":{\"h\":\"介绍\",\"t\":[\"javaScript（简称JS）是一种非常有用的编程语言。它可以用来为网页添加交互性、处理用户输入、操作网页元素以及与服务器进行通信等。\"]},\"249\":{\"h\":\"变量\",\"t\":[\"变量用于存储数据值或引用对象。下面是关于变量的一些重要概念：\",\"变量声明：在使用变量之前，需要通过关键字var、let或const声明它们。例如：\",\"var name; let age; const PI = 3.1415; \",\"在上述示例中，name、age和PI分别是变量的名称，通过关键字var、let或const进行声明。\",\"变量赋值：在声明变量后，可以给它们赋值。例如：\",\"name = \\\"John\\\"; age = 25; \",\"可以将值直接赋给变量，也可以从其他变量中获取值赋给新变量。\",\"变量命名规则：变量名可以包含字母、数字、美元符号($)和下划线(_)，但不能以数字开头。变量名区分大小写，且不能使用JavaScript的关键字或保留字作为变量名。例如：\",\"var myVariable; var data1; \",\"变量作用域：变量的作用域指的是该变量在代码中可访问的范围。在函数内部声明的变量具有局部作用域，而在函数外部声明的变量具有全局作用域。例如：\",\"var globalVariable = \\\"Global\\\"; // 全局变量 function myFunction() { var localVariable = \\\"Local\\\"; // 局部变量 console.log(globalVariable); // 可以访问全局变量 console.log(localVariable); // 可以访问局部变量 } myFunction(); console.log(globalVariable); // 可以在函数外访问全局变量 console.log(localVariable); // 无法在函数外访问局部变量，会报错 \",\"变量类型：JavaScript是一种动态类型语言，变量的类型可以根据赋给它们的值自动推断和改变。例如：\",\"var name = \\\"John\\\"; // 字符串类型 var age = 25; // 数字类型 var isStudent = true; // 布尔类型 \",\"可以随时修改变量的值和类型，例如将age变量的类型从数字改为字符串。\",\"变量提升：变量和函数的声明会被提前到其所在作用域的顶部。这意味着可以在声明之前使用变量或调用函数，而不会报错。然而，只有声明被提前，而不是赋值。例如：\",\"console.log(name); // undefined var name = \\\"John\\\"; \"]},\"250\":{\"h\":\"数据类型\",\"t\":[\"JavaScript中有许多内置的数据类型，每种类型用于存储不同类型的数据。\"]},\"251\":{\"h\":\"常见数据类型：\",\"t\":[\"字符串（String）：用于存储文本数据。字符串使用引号（单引号或双引号）将文本括起来。例如：\",\"var name = \\\"John\\\"; var message = 'Hello, world!'; \",\"数字（Number）：用于存储数值数据。它可以是整数或浮点数。例如：\",\"var age = 25; var pi = 3.14; \",\"布尔值（Boolean）：表示逻辑上的 true 或 false。用于进行条件测试和控制程序流程。例如：\",\"var isStudent = true; var isAdult = false; \",\"数组（Array）：用于存储多个值的有序集合。数组中的每个值称为元素，可以通过索引访问。数组可以包含不同类型的元素。例如：\",\"var numbers = [1, 2, 3, 4, 5]; var fruits = [\\\"apple\\\", \\\"banana\\\", \\\"orange\\\"]; \",\"对象（Object）：用于存储键值对形式的数据，可以通过键来访问值。对象可以包含不同类型的属性。例如：\",\"var person = { name: \\\"John\\\", age: 25, isStudent: true }; \",\"空值（Null）：表示一个空值或空对象引用。例如：\",\"var data = null; \",\"未定义（Undefined）：使用未初始化的变量或未声明的变量时，其值为 undefined。例如：\",\"var x; console.log(x); // 输出：undefined \",\"函数（Function）：函数是可执行的代码块，用于执行特定的任务或计算结果。函数可以接收参数，并可以返回一个值。例如：\",\"function sayHello(name) { console.log(\\\"Hello, \\\" + name + \\\"!\\\"); } sayHello(\\\"John\\\"); // 调用函数，输出：Hello, John! \"]},\"252\":{\"h\":\"类型转换\",\"t\":[\"类型转换是将一个数据类型转换为另一个数据类型的过程。在 JavaScript 中，有两种类型转换方式：显式转换和隐式转换。\",\"显式转换（Explicit Conversion）：也称为强制类型转换（Type Casting），是通过使用内置的转换函数来显式地将一个数据类型转换为另一个数据类型。以下是一些常见的显式转换函数：\",\"Number(value)：将value转换为数字类型。如果不能转换，返回NaN。\",\"String(value)：将value转换为字符串类型。\",\"Boolean(value)：将value转换为布尔类型。将Falsy值（如0、空字符串、null、undefined、NaN）转换为false，其他值转换为true。\",\"隐式转换（Implicit Conversion）：也称为自动类型转换或强制类型转换，是在某些特定的操作或上下文中，JavaScript 自动执行的类型转换。以下是一些常见的隐式转换场景：\",\"数值与字符串的加法操作：如果其中一个操作数是字符串，JavaScript会将其他操作数隐式地转换为字符串并执行字符串拼接。\",\"字符串与布尔值的比较：JavaScript会将布尔值转换为数字（true为1，false为0）再进行比较。\",\"字符串与数字的比较：JavaScript会将字符串转换为数字再进行比较。\",\"var num = 10; var str = \\\"20\\\"; // 显式类型转换 var convertedNum = Number(str); console.log(convertedNum); // 输出：20（数字类型） var convertedStr = String(num); console.log(convertedStr); // 输出：\\\"10\\\"（字符串类型） var convertedBool = Boolean(\\\"\\\"); console.log(convertedBool); // 输出：false（布尔类型） // 隐式类型转换 var result = num + str; console.log(result); // 输出：\\\"1020\\\"（字符串的拼接） \",\"在进行类型转换时，需要注意原始值和转换结果之间的关系，以避免产生不可预期的结果。了解数据类型之间的隐式转换规则可以帮助编写更清晰、可读性更好的代码。\"]},\"253\":{\"h\":\"类型检测\",\"t\":[\"在 JavaScript 中，可以使用 typeof 运算符和 instanceof 运算符进行类型检测。\",\"typeof 运算符：typeof 运算符可以用来检测一个值的数据类型。它返回一个表示数据类型的字符串。\",\"console.log(typeof 42); // 输出: \\\"number\\\" console.log(typeof \\\"Hello\\\"); // 输出: \\\"string\\\" console.log(typeof true); // 输出: \\\"boolean\\\" console.log(typeof undefined); // 输出: \\\"undefined\\\" console.log(typeof null); // 输出: \\\"object\\\"（这是一个 JavaScript 的历史遗留问题） console.log(typeof [1, 2, 3]); // 输出: \\\"object\\\" console.log(typeof { name: \\\"John\\\" }); // 输出: \\\"object\\\" console.log(typeof function() {}); // 输出: \\\"function\\\" \",\"instanceof 运算符：instanceof 运算符可以用来判断一个对象是否是某个类的实例。它检查给定对象的原型链是否存在于指定类的原型链中。\",\"class MyClass {} var obj1 = new MyClass(); console.log(obj1 instanceof MyClass); // 输出: true var obj2 = {}; console.log(obj2 instanceof Object); // 输出: true var arr = [1, 2, 3]; console.log(arr instanceof Array); // 输出: true console.log(arr instanceof Object); // 输出: true console.log(arr instanceof String); // 输出: false \",\"使用适当的类型检测运算符可以帮助你在代码中准确地判断数据类型，并根据需要进行操作。请注意，typeof 运算符返回的结果是一个字符串，而 instanceof 运算符返回的结果是一个布尔值。\",\"虽然这些运算符对于大多数情况下进行类型检测会很有用，但有时可能需要更高级的检测方法（如使用 Object.prototype.toString.call()）。这样可以覆盖一些特殊情况和继承关系。\"]},\"254\":{\"h\":\"运算符\",\"t\":[\"JavaScript提供了各种运算符，用于执行各种数学和逻辑操作。下面是一些常见的运算符：\",\"算术运算符：用于执行基本的算术操作，如加法、减法、乘法和除法。\",\"加法运算符（+）：将两个值相加。\",\"减法运算符（-）：从第一个值中减去第二个值。\",\"乘法运算符（*）：将两个值相乘。\",\"除法运算符（/）：将第一个值除以第二个值。\",\"模运算符（%）：返回两个值相除的余数。\",\"var x = 10; var y = 5; var sum = x + y; // 加法运算符 console.log(sum); // 输出：15 var difference = x - y; // 减法运算符 console.log(difference); // 输出：5 var product = x * y; // 乘法运算符 console.log(product); // 输出：50 var quotient = x / y; // 除法运算符 console.log(quotient); // 输出：2 var remainder = x % y; // 模运算符 console.log(remainder); // 输出：0 \",\"赋值运算符：用于将值赋给变量。\",\"等号运算符（=）：将右侧的值赋给左侧的变量。\",\"复合赋值运算符（+=、-=、*=、/=）：执行运算并将结果赋给左侧的变量。\",\"var x = 5; x += 10; // 复合赋值运算符（相当于 x = x + 10） console.log(x); // 输出：15 x -= 3; // 复合赋值运算符（相当于 x = x - 3） console.log(x); // 输出：12 x *= 2; // 复合赋值运算符（相当于 x = x * 2） console.log(x); // 输出：24 x /= 6; // 复合赋值运算符（相当于 x = x / 6） console.log(x); // 输出：4 \",\"比较运算符：用于比较两个值并返回布尔值（true或false）。\",\"相等运算符（==）：检查两个值是否相等。\",\"不等运算符（!=）：检查两个值是否不相等。\",\"全等运算符（===）：检查两个值是否严格相等（包括值和类型）。\",\"不全等运算符（!==）：检查两个值是否不严格相等。\",\"大于运算符（>）：检查第一个值是否大于第二个值。\",\"小于运算符（<）：检查第一个值是否小于第二个值。\",\"大于等于运算符（>=）：检查第一个值是否大于或等于第二个值。\",\"小于等于运算符（<=）：检查第一个值是否小于或等于第二个值。\",\"var x = 10; var y = 5; console.log(x == y); // 相等运算符，输出：false console.log(x != y); // 不等运算符，输出：true console.log(x === y); // 全等运算符，输出：false console.log(x !== y); // 不全等运算符，输出：true console.log(x > y); // 大于运算符，输出：true console.log(x < y); // 小于运算符，输出：false console.log(x >= y); // 大于等于运算符，输出：true console.log(x <= y); // 小于等于运算符，输出：false \",\"逻辑运算符：用于对布尔值进行逻辑操作并返回布尔值。\",\"逻辑与运算符（&&）：当两个值都为真时返回真。\",\"逻辑或运算符（||）：当两个值至少有一个为真时返回真。\",\"逻辑非运算符（!）：对一个值取反。\",\"var x = 10; var y = 5; console.log(x > 0 && y > 0); // 逻辑与运算符，输出：true console.log(x > 0 || y > 0); // 逻辑或运算符，输出：true console.log(!(x > 0)); // 逻辑非运算符，输出：false \",\"三元条件运算符：根据条件返回不同的值。\",\"三元条件运算符（?:）：基于条件返回一个值。它的语法是条件 ? 值1 : 值2，如果条件为真，返回值1，否则返回值2。\",\"var age = 15; var result = age >= 18 ? \\\"成年人\\\" : \\\"未成年人\\\"; console.log(result); // 根据条件输出：未成年人 \",\"除了以上列举的运算符，JavaScript还有位运算符、逗号运算符、typeof运算符、instanceof运算符等。这些运算符在不同的情况下有不同的用途，可以根据具体需求进行学习和使用。\"]},\"255\":{\"h\":\"控制流程\",\"t\":[\"控制流程用于控制程序执行的顺序和条件。以下是一些常见的控制流程语句：\",\"条件语句（Conditional statements）:\",\"if语句：在条件满足时执行特定的代码块。\",\"if...else语句：在条件满足时执行一个代码块，否则执行另一个代码块。\",\"if...else if...else语句：根据多个条件执行不同的代码块。\",\"if (condition) { // 条件满足时执行的代码 } else { // 条件不满足时执行的代码 } if (condition1) { // 条件1满足时执行的代码 } else if (condition2) { // 条件2满足时执行的代码 } else { // 以上条件都不满足时执行的代码 } \",\"循环语句（Loop statements）:\",\"while循环：在条件满足时重复执行一段代码。\",\"for循环：在指定的条件下重复执行一段代码，循环前会进行初始化、判断和增量操作。\",\"var i = 0; while (condition) { // 在条件满足时执行的代码 i++; } for (var i = 0; i < length; i++) { // 在每次循环时执行的代码 } \",\"选择语句（Switch statement）:\",\"switch语句：根据不同的情况执行不同的代码块。\",\"switch (expression) { case value1: // 当expression等于value1时执行的代码块 break; case value2: // 当expression等于value2时执行的代码块 break; default: // 当expression不匹配任何case时执行的代码块 break; } \",\"异常处理语句（Exception handling statements）:\",\"try...catch语句：捕获并处理代码块中的异常。\",\"try { // 可能会抛出异常的代码块 } catch (error) { // 捕获并处理异常的代码块 } \",\"这些控制流程语句可帮助你根据不同的条件和需求控制程序的执行流程。通过结合使用这些语句，你可以实现更复杂的程序逻辑和流程控制。\"]},\"256\":{\"h\":\"字符串（String）\",\"t\":[\"字符串是由零个或多个字符组成的文本数据。字符串可以包含字母、数字、符号和空格等字符。以下是一些常见的 JavaScript 字符串操作：\",\"创建字符串：\",\"使用单引号或双引号创建字符串。\",\"使用反引号（`）创建模板字符串（支持多行文本和插入表达式）。\",\"var str1 = 'Hello'; var str2 = \\\"World\\\"; var str3 = `Hello, ${name}!`; // 模板字符串 \",\"字符串长度：\",\"使用 length 属性获取字符串的字符数。\",\"console.log(str.length); // 输出字符串的长度 \",\"访问字符：\",\"使用索引访问字符串中的特定字符（从0开始计数）。\",\"var char = str[0]; // 获取字符串中的第一个字符 \",\"字符串拼接：\",\"使用 + 运算符将字符串拼接在一起。\",\"使用模板字符串中的插入表达式来组合字符串。\",\"var fullName = firstName + ' ' + lastName; // 字符串拼接 var greeting = `Hello, ${name}!`; // 模板字符串 \",\"字符串方法：\",\"字符串访问方法：\",\"charAt(index)：返回给定索引位置的字符。\",\"charCodeAt(index)：返回给定索引位置字符的 Unicode 值。\",\"[] 运算符：使用索引访问字符串中的特定字符（从0开始计数）。\",\"length 属性：返回字符串的字符数。\",\"var str = \\\"Hello, World!\\\"; console.log(str.charAt(0)); // 返回第一个字符 \\\"H\\\" console.log(str.charCodeAt(0)); // 返回字符 \\\"H\\\" 的 Unicode 值 console.log(str[0]); // 使用 [] 运算符访问第一个字符 \\\"H\\\" console.log(str.length); // 输出字符串的长度 13 \",\"字符串搜索方法：\",\"indexOf(substring)：返回指定子字符串第一次出现的索引。\",\"lastIndexOf(substring)：返回指定子字符串最后一次出现的索引。\",\"includes(substring)：检查字符串是否包含指定子字符串。\",\"startsWith(substring)：检查字符串是否以指定的子字符串开头。\",\"endsWith(substring)：检查字符串是否以指定的子字符串结尾。\",\"match(regexp)：返回一个数组，其中包含与正则表达式匹配的所有子字符串。\",\"search(regexp)：返回与正则表达式匹配的第一个子字符串的索引。\",\"var str = \\\"Hello, World!\\\"; console.log(str.indexOf(\\\"o\\\")); // 返回第一个 \\\"o\\\" 出现的索引 console.log(str.lastIndexOf(\\\"o\\\")); // 返回最后一个 \\\"o\\\" 出现的索引 console.log(str.includes(\\\"World\\\")); // 检查字符串是否包含 \\\"World\\\" console.log(str.startsWith(\\\"Hello\\\")); // 检查字符串是否以 \\\"Hello\\\" 开头 console.log(str.endsWith(\\\"!\\\")); // 检查字符串是否以 \\\"!\\\" 结尾 console.log(str.match(/[A-Za-z]+/g)); // 返回匹配的字母子字符串数组 [\\\"Hello\\\", \\\"World\\\"] console.log(str.search(/World/)); // 返回 \\\"World\\\" 第一次出现的索引 7 \",\"字符串切割方法：\",\"substring(start, end)：返回从起始索引到结束索引（不包括）之间的子字符串。\",\"slice(start, end)：返回从起始索引到结束索引（不包括）之间的子字符串。\",\"split(separator)：将字符串拆分为子字符串数组。\",\"substr(start, length)：返回从指定起始索引开始的指定长度的子字符串。\",\"substring(start, end)：返回从起始索引到结束索引（不包括）之间的子字符串。\",\"var str = \\\"Hello, World!\\\"; console.log(str.substring(7, 12)); // 返回 \\\"World\\\" console.log(str.slice(7, 12)); // 返回 \\\"World\\\" console.log(str.split(\\\",\\\")); // 将字符串以逗号分割成数组 console.log(str.substr(7, 5)); // 返回子字符串 \\\"World\\\" console.log(str.substring(7, 12)); // 返回子字符串 \\\"World\\\" \",\"字符串转换方法：\",\"toUpperCase()：将字符串转换为大写。\",\"toLowerCase()：将字符串转换为小写。\",\"toString()：将其他数据类型转换为字符串。\",\"toLocaleUpperCase()：将字符串转换为根据当前环境区域设置的大写形式。\",\"toLocaleLowerCase()：将字符串转换为根据当前环境区域设置的小写形式。\",\"var str = \\\"Hello, World!\\\"; console.log(str.toUpperCase()); // 输出全大写字符串 \\\"HELLO, WORLD!\\\" console.log(str.toLowerCase()); // 输出全小写字符串 \\\"hello, world!\\\" var num=42; console.log(num.toString()); // 将数字转换为字符串 \\\"42\\\" console.log(\\\"Hello, World!\\\".toLocaleUpperCase()); // 输出地域设置的大写字符串 console.log(\\\"Hello, World!\\\".toLocaleLowerCase()); // 输出地域设置的小写字符串 \",\"字符串替换方法：\",\"replace(oldSubstring, newSubstring)：将指定的子字符串替换为新的子字符串。\",\"var str = \\\"Hello, World!\\\"; console.log(str.replace(\\\"Hello\\\", \\\"Hi\\\")); // 替换子字符串为 \\\"Hi, World!\\\" \",\"字符串裁剪方法：\",\"trim()：去除字符串开头和结尾的空白字符。\",\"var str = \\\" Hello, World! \\\"; console.log(str.trim()); // 返回去除开头和结尾空白字符的字符串 \\\"Hello, World!\\\" \"]},\"257\":{\"h\":\"数组（Array）\",\"t\":[\"数组是一种用于存储多个值的有序集合。数组可以包含任何类型的数据，包括数字、字符串、对象等。以下是一些关于 JavaScript 数组的基本操作和常见方法：\",\"创建数组：\",\"使用数组字面量 [] 创建一个空数组。\",\"在数组字面量中添加元素来创建一个包含初始值的数组。\",\"var arr1 = []; // 空数组 var arr2 = [1, 2, 3]; // 包含初始值的数组 \",\"访问数组元素：\",\"使用索引来访问数组中特定位置的元素（从0开始计数）。\",\"var arr = [1, 2, 3]; console.log(arr[0]); // 输出第一个元素 1 console.log(arr[2]); // 输出第三个元素 3 \",\"修改数组元素：\",\"通过索引修改数组中特定位置的元素。\",\"var arr = [1, 2, 3]; arr[1] = 5; // 将第二个元素修改为 5 console.log(arr); // 输出 [1, 5, 3] \",\"数组长度：\",\"使用 length 属性来获取数组的长度（即元素的个数）。\",\"var arr = [1, 2, 3]; console.log(arr.length); // 输出数组的长度 3 \",\"数组方法： JavaScript 提供了一系列的数组方法，用于执行各种操作，如添加、删除、查找、排序、切片等。一些常用的方法包括：\",\"push(element1, element2, ...): 将一个或多个元素添加到数组的末尾。这个方法会修改原数组，并返回数组的新长度。\",\"var arr = [1, 2, 3]; arr.push(4, 5); // 在数组末尾添加元素 console.log(arr); // 输出 [1, 2, 3, 4, 5] \",\"pop(): 从数组中删除最后一个元素，并返回删除的元素。这个方法会修改原数组。\",\"var arr = [1, 2, 3]; var deletedElement = arr.pop(); // 删除数组的最后一个元素 console.log(deletedElement); // 输出被删除的元素 3 console.log(arr); // 输出 [1, 2] \",\"shift(): 从数组中删除第一个元素，并返回删除的元素。这个方法会修改原数组。\",\"var arr = [1, 2, 3]; var deletedElement = arr.shift(); // 删除数组的第一个元素 console.log(deletedElement); // 输出被删除的元素 1 console.log(arr); // 输出 [2, 3] \",\"unshift(element1, element2, ...): 将一个或多个元素添加到数组的开头。这个方法会修改原数组，并返回数组的新长度。\",\"var arr = [1, 2, 3]; arr.unshift(0, -1); // 在数组开头添加元素 console.log(arr); // 输出 [-1, 0, 1, 2, 3] \",\"concat(array1, array2, ...): 合并两个或多个数组，并返回一个新数组，而不修改原来的数组。\",\"var arr1 = [1, 2]; var arr2 = [3, 4]; var newArr = arr1.concat(arr2); // 合并两个数组 console.log(newArr); // 输出 [1, 2, 3, 4] \",\"join(separator): 将数组的所有元素连接成一个字符串，使用指定的分隔符。这个方法不会修改原数组。\",\"var arr = [1, 2, 3]; var str = arr.join(\\\"-\\\"); // 用分隔符连接数组的元素 console.log(str); // 输出 \\\"1-2-3\\\" \",\"indexOf(element): 返回指定元素在数组中首次出现的索引，如果找不到则返回 -1。\",\"var arr = [1, 2, 3, 2]; console.log(arr.indexOf(2)); // 输出 1，因为 2 第一次出现在索引 1 的位置 console.log(arr.indexOf(4)); // 输出 -1，因为 4 不在数组中 \",\"slice(start, end): 返回从起始索引到结束索引（不包括）之间的子数组。这个方法不会修改原数组。\",\"var arr = [1, 2, 3, 4, 5]; var subArray = arr.slice(1, 4); // 获取索引 1 到 3 的元素 console.log(subArray); // 输出 [2, 3, 4] \",\"splice(start, deleteCount, item1, item2, ...): 从数组中删除指定数量的元素，并可选地插入新的元素。这个方法会修改原数组，并返回被删除的元素组成的数组。\",\"var arr = [1, 2, 3, 4, 5]; var deletedElements = arr.splice(1, 2, 6, 7); // 从索引 1 开始删除 2 个元素，并插入 6 和 7 console.log(deletedElements); // 输出被删除的元素组成的数组 [2, 3] console.log(arr); // 输出 [1, 6, 7, 4, 5] \",\"sort(): 对数组进行原地排序（默认按照字符串排序）。排序会修改原数组。\",\"var arr = [3,6,7,2,4] arr=arr.sort(function(a,b){ return a-b;//从小到大 }) console.log(arr)//[2,3,4,6,7] \"]},\"258\":{\"h\":\"函数（Function）\",\"t\":[\"函数是一个可重复使用的代码块，用于执行特定任务或计算结果。函数可以接受参数，并可以返回一个值。\",\"函数的基本语法如下：\",\"function functionName(parameter1, parameter2, ...) { // 函数体 // 执行特定任务的代码 return result; // 可选的返回值 } \",\"functionName 是函数的名称，可以自己起一个有意义的名称。\",\"parameter1, parameter2, ... 是函数的参数列表，用于接受传递给函数的值。\",\"函数体 是函数的具体实现，包含执行特定任务的代码。\",\"result 是可选的返回值，用于返回函数的结果给调用者。\",\"以下是一个计算两个数字之和的函数的例子：\",\"function addNumbers(num1, num2) { var sum = num1 + num2; return sum; } var result = addNumbers(2, 3); console.log(result); // 输出：5 \",\"在该例子中，函数名为addNumbers，它接受两个参数num1和num2，将它们相加并返回结果。通过调用addNumbers(2, 3)，将参数值传递给函数，并将结果保存在result变量中，最后通过console.log打印结果。\",\"函数种类：\",\"匿名函数（Anonymous Functions）： 可以创建没有名称的函数，并将其赋值给一个变量或作为其他函数的参数传递。例如：\",\"var add = function(num1, num2) { return num1 + num2; }; var result = add(2, 3); console.log(result); // 输出：5 \",\"在这个例子中，我们使用一个没有名称的函数将两个数字相加，并将其赋值给变量add。\",\"箭头函数（Arrow Functions）： 箭头函数提供了一种简洁的语法来定义函数，并且自动绑定了this关键字。例如：\",\"var add = (num1, num2) => num1 + num2; var result = add(2, 3); console.log(result); // 输出：5 \",\"在这个例子中，箭头函数add接受两个参数，并直接返回它们的和。\",\"默认参数（Default Parameters）： 可以为函数的参数设置默认值，当调用函数时，如果没有传递相应参数的值，将使用默认值。例如：\",\"function greet(name = 'Guest') { console.log('Hello, ' + name + '!'); } greet(); // 输出：Hello, Guest! greet('John'); // 输出：Hello, John! \",\"在这个例子中，如果没有传递参数给greet函数，将使用默认值'Guest'。\",\"高阶函数（Higher-Order Functions）：\",\"高阶函数是那些接受一个或多个函数作为参数，并/或返回一个新函数的函数。JavaScript中函数可以像其他值一样被传递和操作。例如：\",\"function multiplyBy(factor) { return function(number) { return number * factor; }; } var double = multiplyBy(2); var triple = multiplyBy(3); console.log(double(5)); // 输出：10 console.log(triple(5)); // 输出：15 \",\"在这个例子中，multiplyBy函数接受一个因子(factor)并返回一个新函数，该新函数将传递的数值(number)与因子相乘。\",\"函数表达式（Function Expressions）： 可以将函数作为表达式赋值给变量，这被称为函数表达式。函数表达式可以匿名或具名，并且具有类似于普通函数的特性。例如：\",\"// 匿名函数表达式 var greet = function() { console.log('Hello!'); }; greet(); // 输出：Hello! // 具名函数表达式 var multiply = function multiplyNumbers(num1, num2) { return num1 * num2; }; var result = multiply(2, 3); console.log(result); // 输出：6 \",\"在这个例子中，我们将匿名函数表达式赋值给变量greet，并调用它。另外，我们还将具名函数表达式赋值给变量multiply，并使用它进行数值的乘法计算。\",\"IIFE（立即调用的函数表达式）： IIFE是一种在声明时立即调用函数的技术，它可以用于创建函数作用域，并防止变量泄漏到全局作用域。例如：\",\"(function() { var name = 'John'; console.log('Hello, ' + name + '!'); })(); // 输出：Hello, John! \",\"在这个例子中，我们使用匿名函数创建一个函数作用域，并立即调用它。这样，函数内部声明的变量name只在函数作用域内部可访问，不会污染全局作用域。\",\"闭包（Closures）： 闭包是指一个函数可以访问和操作在其父函数作用域之外定义的变量。使用闭包，可以创建一些有状态的函数或实现私有变量的概念。例如：\",\"function counter() { var count = 0; return function() { count++; console.log(count); }; } var increment = counter(); increment(); // 输出：1 increment(); // 输出：2 \",\"在这个例子中，counter函数返回一个内部函数，并且内部函数可以访问外部函数的变量count，形成了一个闭包。每次调用内部函数，都会增加count的值，并打印出结果。\",\"回调函数（Callback Functions）： 回调函数是在异步操作完成后被调用的函数。它是处理异步代码的一种常见模式，用于处理回调结果或执行其他操作。例如：\",\"function fetchData(callback) { // 模拟异步操作 setTimeout(function() { var data = 'Hello, world!'; callback(data); }, 2000); } function processData(data) { console.log('Data received:', data); } fetchData(processData); // 输出：Data received: Hello, world! \",\"在这个例子中，fetchData函数模拟一个异步操作，并在操作完成后调用传递的回调函数callback来处理结果。\"]},\"259\":{\"h\":\"对象（Object）\",\"t\":[\"对象是一种复合数据类型，它可以存储相关数据和功能（方法）。对象由键值对的集合组成，其中每个键（属性）都有对应的值。\",\"对象的基本语法如下：\",\"var objectName = { key1: value1, key2: value2, // ... }; \",\"objectName 是对象的名称，可以自己起一个有意义的名称。\",\"key1, key2, ... 是对象的属性名称（键），可以是字符串或标识符（不推荐使用数字作为属性名称）。\",\"value1, value2, ... 是对象的属性值，可以是任何有效的JavaScript表达式。\",\"以下是一个表示一个人的JavaScript对象的例子：\",\"var person = { name: 'John', age: 25, gender: 'Male', sayHello: function() { console.log('Hello, my name is ' + this.name + '.'); } }; console.log(person.name); // 输出：John console.log(person.age); // 输出：25 person.sayHello(); // 输出：Hello, my name is John. \",\"在该例子中，我们定义了一个person对象，它有三个属性name、age和gender，以及一个方法sayHello。通过.操作符，我们可以访问并操作对象的属性和方法。例如，person.name返回John，person.sayHello()调用sayHello方法。\",\"除了直接在对象字面量中定义属性和方法，我们还可以使用点号或方括号运算符动态添加、访问和更新对象的属性。例如：\",\"person.height = 180; // 添加一个新属性 console.log(person.height); // 输出：180 person['weight'] = 75; // 使用方括号运算符添加一个新属性 console.log(person['weight']); // 输出：75 var propertyName = 'name'; console.log(person[propertyName]); // 输出：John person.age = 26; // 更新属性的值 console.log(person.age); // 输出：26 \",\"在这个例子中，我们通过点号和方括号运算符动态添加、访问和更新person对象的属性。\"]},\"260\":{\"h\":\"定时器\",\"t\":[\"定时器（Timer）是 JavaScript 中用于延迟执行或周期性执行代码的机制。在 JavaScript 中常见的定时器函数有 setTimeout 和 setInterval。\",\"setTimeout 函数：\",\"setTimeout 函数用于在指定的时间延迟后执行一次特定的代码。\",\"语法：setTimeout(callback, delay, ...args)\",\"参数： \",\"callback：要执行的函数或要执行的代码块。\",\"delay：延迟的时间，单位是毫秒。\",\"args：要传递给回调函数的可选参数（可选）。\",\"返回值：一个唯一的标识符（timeout ID），可用于在需要时取消延迟执行。\",\"示例：\",\"setTimeout(function() { console.log('延迟执行'); }, 2000); // 2秒后输出 '延迟执行' \",\"setInterval 函数：\",\"setInterval 函数用于按指定的时间间隔周期性执行一段代码。\",\"语法：setInterval(callback, delay, ...args)\",\"参数： \",\"callback：要执行的函数或要执行的代码块。\",\"delay：执行之间的时间间隔，单位是毫秒。\",\"args：要传递给回调函数的可选参数（可选）。\",\"返回值：一个唯一的标识符（interval ID），可用于在需要时停止周期性执行。\",\"示例：\",\"var count = 0; var intervalId = setInterval(function() { console.log('周期性执行'); count++; if (count === 5) { clearInterval(intervalId); // 停止执行 } }, 1000); // 每1秒输出一次，共输出5次 \",\"需要注意的是，延迟时间和时间间隔都是以毫秒为单位。在使用定时器时，需要小心处理回调函数中的操作，以免影响应用程序的性能和用户体验。此外，确保在不再需要定时器时及时取消或停止定时器的执行，以避免浪费资源和潜在的内存泄漏问题。\"]},\"261\":{\"h\":\"作用域及作用域链\",\"t\":[\"作用域（Scope）是指在程序中定义变量的区域，它决定了变量的可访问性和生命周期。作用域具有层级结构，被称为作用域链（Scope Chain）。\",\"作用域链是由多个作用域对象组成的链式结构，用于解析变量和函数标识符的访问权限。当访问一个变量时，JavaScript引擎会从当前作用域开始，逐级向上查找，直到找到匹配的标识符或达到全局作用域。\",\"详细来说，作用域链的构成如下：\",\"全局作用域(Global Scope)： 全局作用域是指在函数外部声明的变量，它在整个程序执行期间都是可访问的。\",\"函数作用域(Function Scope)： 函数作用域是指在函数内部声明的变量，它在函数内部是可访问的，但在函数外部是无法访问的。每当创建一个新的函数，就会创建一个新的函数作用域。\",\"块级作用域(Block Scope)： 块级作用域是指由一对花括号（{}）包围的代码块内部声明的变量。在ES6以前的JavaScript版本中，不存在块级作用域，但可以通过使用立即执行函数表达式(IIFE)来模拟块级作用域。\",\"作用域链的工作原理如下：\",\"在当前作用域中查找标识符。\",\"如果找到了匹配的标识符，就使用它。\",\"如果没有找到匹配的标识符，则将查找转移到上一级作用域。\",\"重复上述步骤，直到找到匹配的标识符或达到全局作用域。\",\"这种层级结构的作用域链允许内部作用域访问外部作用域的变量，但外部作用域无法访问内部作用域的变量。这种机制确保了变量的封装性和隔离性。\",\"特别要注意的是，函数可以形成闭包（Closure），闭包可以访问外部函数作用域的变量，并将其保持在内存中。这是由于闭包包含了对外部作用域的引用，使得外部作用域的变量在函数执行完毕后依然存在。\",\"当访问一个变量时，作用域链决定了在哪个作用域范围内进行变量查找。\",\"举个例子说明作用域链的工作原理：\",\"var globalVariable = 'Global'; // 全局变量 function outerFunction() { var outerVariable = 'Outer'; // 外部函数作用域的变量 function innerFunction() { var innerVariable = 'Inner'; // 内部函数作用域的变量 console.log(innerVariable); // 输出 'Inner' console.log(outerVariable); // 输出 'Outer' console.log(globalVariable); // 输出 'Global' } innerFunction(); } outerFunction(); \",\"在上面的例子中，我们有一个全局变量globalVariable，一个外部函数outerFunction，以及一个内部函数innerFunction。它们各自创建了不同的作用域。\",\"当执行innerFunction时，JavaScript引擎首先在内部函数作用域中查找变量innerVariable，找到后输出其值为'Inner'。\",\"接下来，由于无法在内部函数作用域找到变量outerVariable，JavaScript引擎将沿着作用域链向外查找，上一级作用域是外部函数作用域。在外部函数作用域中找到变量outerVariable，输出其值为'Outer'。\",\"最后，由于无法在外部函数作用域找到变量globalVariable，JavaScript引擎继续向上查找，直到找到全局作用域。在全局作用域中找到变量globalVariable，输出其值为'Global'。\",\"这个例子展示了作用域链的工作过程，内部作用域可以访问外部作用域的变量，但外部作用域无法访问内部作用域的变量。理解作用域链对于正确编写和理解JavaScript代码至关重要。\"]},\"262\":{\"h\":\"this指向\",\"t\":[\"关键字this用于引用当前执行代码的上下文对象。它在不同的上下文中指向不同的值，具体取决于代码的执行方式和使用场景。下面是一些常见情况下的this指向：\",\"全局作用域： 在全局作用域中，this指向全局对象。在浏览器环境中，全局对象是window对象。\",\"console.log(this === window); // 输出：true function globalFunc() { console.log(this === window); // 输出：true } globalFunc(); \",\"函数： 在函数内部，this的指向取决于函数的调用方式。有以下几种常见情况：\",\"函数作为方法调用： 当一个函数作为对象的方法调用时，this指向该对象。\",\"var person = { name: 'John', sayHello: function() { console.log('Hello, ' + this.name + '!'); } }; person.sayHello(); // 输出：Hello, John! \",\"函数作为普通函数调用： 当一个函数作为普通函数调用时，this指向全局对象（在非严格模式下）或undefined（在严格模式下）。\",\"function regularFunc() { console.log(this === window); // 输出：true（非严格模式） console.log(this === undefined); // 输出：true（严格模式） } regularFunc(); \",\"函数作为构造函数调用： 当一个函数作为构造函数使用new关键字创建对象时，this指向新创建的对象。\",\"function Person(name) { this.name = name; } var john = new Person('John'); console.log(john.name); // 输出：John \",\"函数使用call、apply或bind方法调用： 使用call、apply或bind方法可以显式地指定函数执行时的上下文对象。\",\"function greet() { console.log('Hello, ' + this.name + '!'); } var person = { name: 'John' }; greet.call(person); // 输出：Hello, John! greet.apply(person); // 输出：Hello, John! var boundGreet = greet.bind(person); boundGreet(); // 输出：Hello, John! \",\"对象方法中的嵌套函数： 在对象方法内部定义的函数，如果被该方法调用，this通常指向调用该方法的对象。但是需要注意的是，在嵌套函数中，this的指向可能会发生变化，此时可以使用其他变量（如self或that）来捕获正确的this值。\",\"var person = { firstName: 'John', lastName: 'Doe', fullName: function() { console.log(this.firstName + ' ' + this.lastName); // 此处的this指向person对象 function nestedFunc() { console.log(this.firstName + ' ' + this.lastName); // 此处的this可能指向全局对象（非严格模式） var self = this; console.log(self.firstName + ' ' + self.lastName); // 使用self变量捕获正确的this值 } nestedFunc(); } }; person.fullName(); // 输出：John Doe \",\"this的指向是根据函数执行时的上下文而动态确定的，并且可以通过函数调用方式和使用特定方法来显式地控制this的值。理解this的指向对于编写复杂的JavaScript代码和避免常见错误非常重要。\"]},\"263\":{\"h\":\"事件处理\",\"t\":[\"事件处理允许你对网页上发生的事件（比如点击、鼠标移动、按键按下等）进行响应和处理。以下是JavaScript中常见的事件处理机制和相应的代码示例：\",\"HTML属性中的事件处理： 可以直接在HTML标签的属性中指定事件处理函数，当事件发生时触发该函数。例如：\",\"<button onclick=\\\"alert('Button clicked!')\\\">Click me</button> \",\"在这个例子中，当按钮被点击时，触发onclick事件，并执行指定的函数。\",\"DOM元素属性上的事件处理： 可以通过JavaScript代码为DOM元素的属性赋值事件处理函数，实现对事件的响应。例如：\",\"var button = document.getElementById('myButton'); button.onclick = function() { alert('Button clicked!'); }; \",\"在这个例子中，我们通过JavaScript获取了一个具有特定id（myButton）的按钮元素，并为其onclick属性赋值了一个匿名函数作为事件处理函数。\",\"addEventListener 方法： 可以使用addEventListener方法为DOM元素添加事件监听器，以实现对事件的响应。该方法可以添加多个事件监听器，并提供更灵活的控制。例如：\",\"var button = document.getElementById('myButton'); button.addEventListener('click', function() { alert('Button clicked!'); }); \",\"在这个例子中，我们使用addEventListener方法为指定的按钮元素添加了一个点击事件的监听器，并指定了要执行的函数。\",\"事件对象（Event Object）： 当事件发生时，浏览器会自动生成一个事件对象，该对象携带有关事件的信息，如事件类型、目标元素等。可以通过事件处理函数的参数来访问事件对象。例如：\",\"var button = document.getElementById('myButton'); button.addEventListener('click', function(event) { console.log(event.type); // 输出：click console.log(event.target); // 输出：被点击的按钮元素 }); \",\"在这个例子中，事件处理函数的参数event包含了事件的相关信息，我们可以通过event.type来获取事件类型（即click）；通过event.target来获取触发事件的目标元素。\",\"事件冒泡（Event Bubbling）： 事件冒泡是指当一个特定元素上的事件被触发时，会先执行该元素的事件处理函数，然后事件会向上冒泡至父级元素，继续执行父级元素的事件处理函数，最终可能冒泡到文档的根元素。可以通过调用event.stopPropagation()方法来阻止事件冒泡。例如：\",\"var button = document.getElementById('myButton'); var container = document.getElementById('container'); button.addEventListener('click', function(event) { console.log('Button clicked'); event.stopPropagation(); }); container.addEventListener('click', function(event) { console.log('Container clicked'); }); // 当点击按钮时，只会输出'Button clicked'，而'Container clicked'不会被执行 \",\"在这个例子中，当点击按钮时，只会执行按钮元素的点击事件处理函数，并且通过event.stopPropagation()阻止了事件继续向上冒泡到容器元素。\",\"事件委托（Event Delegation）： 事件委托是将事件处理器绑定到父级元素而不是每个子级元素上，以简化代码并提高性能。当事件发生时，事件委托利用事件冒泡的特性，在父级元素上捕获并处理事件。这对于动态添加的子元素特别有用。例如：\",\"var container = document.getElementById('container'); container.addEventListener('click', function(event) { if (event.target.tagName === 'LI') { console.log('List item clicked'); } }); \",\"在这个例子中，事件委托机制将事件处理器绑定到容器元素上，当点击容器内的任何列表项（<li>）时，会输出’List item clicked’。\"]},\"264\":{\"h\":\"事件流（Event Loop）\",\"t\":[\"事件循环（Event Loop）是JavaScript中处理异步操作的机制，它负责管理和调度事件、回调函数和其他任务的执行顺序。理解事件循环是理解JavaScript异步编程的关键。\",\"JavaScript是单线程的，意味着只有一个主线程负责执行代码。但是，有些操作可能需要耗时较长或是需要等待外部资源的结果（比如网络请求），如果在主线程中同步执行这些操作，就会导致页面卡顿和阻塞用户界面。\",\"为了解决这个问题，JavaScript引入了异步回调和事件循环的概念。当遇到异步操作时，它会被放入事件队列中，等待主线程执行完当前任务后再去处理队列中的异步操作。\",\"事件循环的工作原理如下：\",\"执行全局同步代码，此时没有异步任务。\",\"检查任务队列（即事件队列）是否为空。\",\"如果队列为空，那么等待新的任务进入队列。\",\"如果队列不为空，从队列中取出最早的一个任务，将其称为\\\"当前任务\\\"，并执行相关的回调函数。\",\"当前任务执行完毕后，回到步骤2，重复整个过程。\",\"需要注意的是，事件循环采用了一种非常鲜明的\\\"先进先出\\\"（FIFO）的顺序，即先进入队列的任务先被执行。\",\"在事件循环的过程中，异步操作通常会使用回调函数、Promise、async/await等方式来处理。当异步操作完成后，结果会被放入事件队列中，等待主线程执行到对应的位置时调用相应的回调函数。\",\"通过事件循环，JavaScript可以实现非阻塞的异步编程，提升了代码的性能和用户体验。但同时也需要小心处理异步操作的回调函数，以避免出现回调地狱（Callback Hell）和其他的异步编程陷阱。\",\"让我们来看一个使用事件循环的例子，假设我们需要异步加载两个图片并在加载完成后执行一些操作：\",\"function loadImage(url) { return new Promise((resolve, reject) => { const image = new Image(); image.onload = function() { resolve(image); }; image.onerror = function() { reject(new Error('Failed to load image: ' + url)); }; image.src = url; }); } function loadImageAsync() { const imageUrls = ['image1.jpg', 'image2.jpg']; imageUrls.forEach(url => { loadImage(url) .then(image => { console.log('Loaded image:', image.src); // 执行其他操作... }) .catch(error => { console.error(error); }); }); } loadImageAsync(); \",\"在上面的例子中，我们定义了一个loadImage函数，它返回一个Promise对象，用于加载图片。在加载完成后，Promise会被解决（resolved），并提供加载好的图片作为结果。如果加载过程中出现错误，Promise会被拒绝（rejected），并提供错误信息。\",\"然后，我们定义了一个loadImageAsync函数，它调用了loadImage函数来异步加载一组图片。使用forEach循环遍历图片URL数组，对于每个URL，我们调用loadImage函数，并通过Promise的then方法指定成功回调函数，以及通过catch方法指定错误处理函数。\",\"在loadImageAsync函数中，当所有图片的加载都完成时，它们的回调函数会被放入事件队列中，等待主线程执行完当前任务后执行。\",\"这样，通过事件循环，我们可以实现并发加载多张图片，而不会阻塞主线程。一旦图片加载完成，我们可以执行其他操作（如显示图片、更新页面等）。\",\"这个例子展示了如何使用事件循环处理异步操作，并利用Promise来管理异步操作的状态和结果。通过合理地利用事件循环，我们可以实现高效的异步编程。\"]},\"265\":{\"h\":\"DOM操作\",\"t\":[\"DOM（文档对象模型）操作提供了许多方法来操纵网页的内容、结构和样式。下面是一些常见的DOM操作：\",\"选择元素: 你可以使用各种选择器方法来选择元素，例如getElementById、querySelector、getElementsByClassName、getElementsByTagName等。例如：\",\"var element = document.getElementById('myElement'); var elements = document.querySelectorAll('.myClass'); \",\"这个例子中，通过元素的ID或类名选择元素。\",\"创建元素: 可以使用createElement方法创建新的元素节点，然后使用appendChild方法将其添加到DOM中。例如：\",\"var newElement = document.createElement('div'); newElement.textContent = 'Hello World'; var parentElement = document.getElementById('parent'); parentElement.appendChild(newElement); \",\"这个例子中，我们创建了一个新的div元素，设置了文本内容，然后将它添加为父元素的子元素。\",\"修改元素内容和属性: 你可以使用DOM属性来修改元素的文本内容、HTML内容和属性。例如：\",\"var element = document.getElementById('myElement'); element.textContent = 'New text'; element.innerHTML = '<strong>New HTML</strong>'; element.setAttribute('class', 'newClass'); \",\"这个例子中，我们修改了元素的文本内容、HTML内容和class属性。\",\"移除元素: 可以使用removeChild方法从DOM中移除一个元素。例如：\",\"var parentElement = document.getElementById('parent'); var childElement = document.getElementById('child'); parentElement.removeChild(childElement); \",\"这个例子中，我们从父元素中移除了一个子元素。\",\"修改元素样式: 你可以使用style属性来修改元素的CSS样式。例如：\",\"var element = document.getElementById('myElement'); element.style.color = 'red'; element.style.fontSize = '20px'; \",\"这个例子中，我们修改了元素的颜色和字体大小。\",\"添加和移除CSS类: 你可以使用classList属性来添加和移除元素的CSS类。例如：\",\"var element = document.getElementById('myElement'); element.classList.add('highlight'); element.classList.remove('active'); \",\"这个例子中，我们添加了一个CSS类\\\"highlight\\\"，并移除了\\\"active\\\"类。\",\"监听事件: 可以使用addEventListener方法来为元素添加事件监听器，以响应特定事件的触发。例如：\",\"var element = document.getElementById('myElement'); element.addEventListener('click', function() { console.log('Element clicked!'); }); \",\"这个例子中，我们为元素添加了一个点击事件的监听器，并在事件触发时打印一条消息。\",\"遍历和操作子元素: 可以使用childNodes、children、firstChild、lastChild等属性和方法来访问和操作元素的子元素。例如：\",\"var parentElement = document.getElementById('parent'); var childCount = parentElement.childElementCount; var firstChild = parentElement.firstElementChild; var lastChild = parentElement.lastElementChild; \",\"这个例子中，我们获取了父元素的子元素数量、第一个子元素和最后一个子元素。\",\"获取和修改元素的属性: 可以使用getAttribute和setAttribute方法来获取和修改元素的属性。例如：\",\"var element = document.getElementById('myElement'); var value = element.getAttribute('data-value'); element.setAttribute('data-value', 'newValue'); \",\"这个例子中，我们获取了元素的自定义属性\\\"data-value\\\"的值，并将其设置为新值。\",\"替换元素: 可以使用replaceChild方法替换一个子元素。例如：\",\"var parentElement = document.getElementById('parent'); var newElement = document.createElement('div'); newElement.textContent = 'New Element'; var oldElement = document.getElementById('oldElement'); parentElement.replaceChild(newElement, oldElement); \",\"这个例子中，我们创建一个新的div元素，并替换父元素中的旧子元素。\",\"克隆元素: 可以使用cloneNode方法复制一个元素。例如：\",\"var originalElement = document.getElementById('original'); var clonedElement = originalElement.cloneNode(true); var container = document.getElementById('container'); container.appendChild(clonedElement); \",\"这个例子中，我们克隆了一个元素，并将克隆的元素添加到另一个容器中。\",\"检查和修改元素的可见性: 可以使用style属性中的display属性来检查和修改元素的可见性。例如：\",\"var element = document.getElementById('myElement'); var isVisible = element.style.display !== 'none'; element.style.display = 'none'; \",\"这个例子中，我们检查元素是否可见，然后将其隐藏。\"]},\"266\":{\"h\":\"BOM操作\",\"t\":[\"BOM（Browser Object Model，浏览器对象模型）是JavaScript提供的用于操作浏览器窗口和浏览器相关功能的API集合。BOM提供了一系列对象来访问和操作浏览器窗口、页面历史记录、定时器、浏览器信息等。\",\"下面是一些常见的BOM操作：\",\"浏览器窗口操作：\",\"window.open(url)：打开一个新窗口或标签页。\",\"window.close()：关闭当前窗口。\",\"window.resizeTo(width, height)：调整窗口大小。\",\"window.moveTo(x, y)：移动窗口的位置。\",\"页面导航和历史操作：\",\"window.location.href：获取或设置当前页面的URL。\",\"window.location.reload()：重新加载当前页面。\",\"window.history.back()：回退到上一个页面。\",\"window.history.forward()：前进到下一个页面。\",\"定时器操作：\",\"window.setTimeout(function, delay)：在指定延迟后执行一次函数。\",\"window.setInterval(function, interval)：每隔一定时间重复执行函数。\",\"window.clearTimeout(timeout)：取消由setTimeout创建的定时器。\",\"window.clearInterval(interval)：取消由setInterval创建的定时器。\",\"浏览器信息操作：\",\"window.navigator.userAgent：获取当前浏览器的用户代理信息。\",\"window.navigator.language：获取当前浏览器的语言设置。\",\"window.screen.width：获取当前屏幕的宽度。\",\"window.screen.height：获取当前屏幕的高度。\",\"这只是BOM提供的一小部分功能，还有许多其他的API可以用于与浏览器进行交互。请注意，BOM的具体实现可能会因浏览器而异，一些属性和方法可能只在特定的浏览器中可用。\",\"值得一提的是，随着Web标准的推动，现代前端开发更倾向于使用操作DOM的API（如Document Object Model，文档对象模型）和进行网络通信的API（如Fetch API或Axios）来实现前端功能，而尽量避免直接依赖BOM相关的操作。\"]},\"267\":{\"h\":\"原型与原型链\",\"t\":[\"原型（Prototype）和原型链（Prototype Chain）是 JavaScript 中实现对象继承的重要概念。\",\"原型（Prototype）是 JavaScript 中每个对象都具有的一个特殊属性。它指向一个原型对象，并且可以通过该原型对象共享属性和方法。当我们访问对象的属性或方法时，如果对象本身没有定义这些属性或方法，JavaScript 就会沿着原型链向上查找。\",\"基本上，每个对象都有一个内部的 [[Prototype]] 属性，指向它的原型对象。你可以通过 Object.getPrototypeOf(obj) 方法访问一个对象的原型。\",\"原型链（Prototype Chain）是由一系列对象的原型组成的链式结构。当我们访问对象的属性时，如果对象本身没有定义这个属性，JavaScript 就会沿着原型链向上查找，直到找到这个属性或到达原型链的末尾（即 null）。默认情况下，每个对象的原型都是上一级对象的实例，因此每个对象都可以通过原型链访问到它的上一级对象的属性和方法。\",\"下面是一个示例来说明原型和原型链的概念：\",\"// 创建一个对象 const person = { name: 'Alice', sayHello() { console.log(`Hello, my name is ${this.name}.`); } }; // 创建一个新的对象，使用 person 对象作为原型 const student = Object.create(person); student.name = 'Bob'; // 访问属性和方法 console.log(student.name); // 输出: \\\"Bob\\\" student.sayHello(); // 输出: \\\"Hello, my name is Bob.\\\" \",\"在上面的例子中，我们通过 Object.create() 方法来创建了一个新的对象 student，并将 person 对象作为它的原型。这意味着 student 对象可以继承 person 对象的属性和方法。虽然 student 对象本身没有定义 sayHello 方法，但它可以通过原型链找到 person 对象上的 sayHello 方法，并成功执行。\",\"这就是原型和原型链的基本概念。利用原型和原型链的机制，我们可以实现对象之间的继承和共享，提高代码的复用性和灵活性。\",\"当涉及到原型和原型链时，还有一些关键的概念和用法值得探讨：\",\"构造函数： 构造函数是一种用于创建特定类型对象的函数。构造函数通常以大写字母开头，通过 new 关键字来调用，并且在内部使用 this 关键字来指向正在创建的对象。构造函数可以定义对象的属性和方法，并可以使用 new 关键字创建新的实例。\",\"function Person(name) { this.name = name; } Person.prototype.greet = function() { console.log(`Hello, my name is ${this.name}.`); }; const person = new Person('Alice'); person.greet(); // 输出: \\\"Hello, my name is Alice.\\\" \",\"原型继承： 原型继承是一种通过指定对象的原型来实现继承的方式。可以使用 Object.create() 方法来创建一个新对象，并将指定对象作为新对象的原型。这样，新对象就可以继承原型对象的属性和方法。\",\"const parent = { name: 'Alice', greet() { console.log(`Hello, my name is ${this.name}.`); } }; const child = Object.create(parent); child.name = 'Bob'; child.greet(); // 输出: \\\"Hello, my name is Bob.\\\" \",\"原型的改变和继承的动态性： 原型对象是可以随时改变的，当原型对象发生改变时，所有继承自该原型的对象都会受到影响。这种动态性使得我们可以在运行时对对象属性和方法进行扩展或修改。\",\"function Person(name) { this.name = name; } const person1 = new Person('Alice'); const person2 = new Person('Bob'); Person.prototype.greet = function() { console.log(`Hello, my name is ${this.name}.`); }; person1.greet(); // 输出: \\\"Hello, my name is Alice.\\\" person2.greet(); // 输出: \\\"Hello, my name is Bob.\\\" \",\"在上面的例子中，我们在创建实例 person1 和 person2 后修改了 Person 构造函数的原型，添加了 greet 方法。由于原型的动态性，person1 和 person2 仍然可以访问到新添加的方法。\",\"当涉及到原型和原型链时，还有一些进阶的概念和用法：\",\"原型属性和方法： 在 JavaScript 中，每个对象都有一个原型，原型可以包含属性和方法。我们可以将共享的属性和方法定义在原型上，这样所有由该原型创建的实例都可以共享这些属性和方法。\",\"function Person(name) { this.name = name; } Person.prototype.greet = function() { console.log(`Hello, my name is ${this.name}.`); }; const person1 = new Person('Alice'); const person2 = new Person('Bob'); person1.greet(); // 输出: \\\"Hello, my name is Alice.\\\" person2.greet(); // 输出: \\\"Hello, my name is Bob.\\\" \",\"上述例子中，greet 方法被定义在 Person.prototype 上，它是由 Person 构造函数创建的所有实例所共享的。\",\"原型链的终点： 原型链的终点通常是 Object.prototype，它是 JavaScript 对象继承链的顶端。Object.prototype 是一个空对象，也可以包含一些常用的属性和方法，例如 toString、valueOf 等。\",\"const obj = {}; console.log(obj.toString()); // 输出: \\\"[object Object]\\\" console.log(obj.valueOf() === obj); // 输出: true \",\"在上述例子中，当我们调用 obj.toString() 和 obj.valueOf() 时，由于 obj 对象本身没有定义这些方法，JavaScript 会沿着原型链向上查找，并找到 Object.prototype 上的这些方法。\",\"__proto__ 属性： __proto__ 是一个非标准的属性，它允许我们直接访问和修改对象的原型。尽管它不是标准属性，但现代浏览器中基本上都支持使用这个属性来操作原型链。\",\"const person = { name: 'Alice', greet() { console.log(`Hello, my name is ${this.name}.`); } }; const student = { __proto__: person, name: 'Bob' }; student.greet(); // 输出: \\\"Hello, my name is Bob.\\\" \",\"在上述例子中，我们使用 __proto__ 属性将 student 对象的原型设置为 person 对象，从而实现对象之间的原型继承。\"]},\"268\":{\"h\":\"闭包\",\"t\":[\"闭包（closure）指的是在函数内部创建并返回另一个函数，内部函数可以访问它所在的外部函数的作用域和变量，即使外部函数已经执行完毕并离开了作用域。\",\"闭包在 JavaScript 中具有以下特点：\",\"内部函数可以访问外部函数的变量和参数：闭包可以捕获并存储在其作用域链中的外部函数的变量和参数。即使外部函数已经执行完毕，这些变量和参数的值仍然可以通过内部函数进行访问。\",\"闭包可以保持对外部作用域的引用：由于闭包的存在，外部函数的作用域不会被销毁，而是保持在内存中。这意味着闭包可以继续访问和操作外部作用域中的变量和函数。\",\"闭包的使用场景和优点包括：\",\"封装数据和行为：闭包可以创建私有化的作用域，将一些变量和函数封装起来，只暴露对外部可见的接口。这样可以避免全局作用域的污染和变量名冲突。\",\"实现模块化：通过闭包可以模拟类似于模块的功能，组织和管理代码。将一组相关的变量和函数封装在闭包中，只向外部暴露必要的接口，提高代码的可维护性和复用性。\",\"保持状态：由于闭包可以捕获外部作用域的变量，可以用于保持状态。内部函数可以访问和修改外部函数中的变量，以实现持久化的状态管理。\",\"以下是一个使用闭包的示例：\",\"function outerFunction() { var outerVariable = 'Hello'; function innerFunction() { console.log(outerVariable); } return innerFunction; } var closure = outerFunction(); closure(); // 输出 'Hello' \",\"在上面的示例中，innerFunction 是在 outerFunction 中定义的内部函数，它可以访问并打印 outerVariable 的值。尽管 outerFunction 已经执行完毕，但通过在 outerFunction 中调用 innerFunction 并返回它，我们创建了一个闭包。闭包中的 innerFunction 仍然可以访问和引用 outerVariable。\",\"需要注意的是，闭包可能会引发内存泄漏问题。由于闭包中引用了外部作用域的变量，即使外部函数执行完毕，这些变量也无法被垃圾回收。因此，在使用闭包时，需要注意避免过度使用和循环引用，及时释放不再需要的资源。\"]},\"269\":{\"h\":\"递归\",\"t\":[\"递归（Recursion）是一种函数调用自身的技术。递归函数通常用于解决可以被拆分成更小、相同结构的子问题的问题。使用递归的关键是确定递归的终止条件，以避免无限递归调用。\",\"以下是一个使用 JavaScript 递归的示例，计算一个数字的阶乘：\",\"function factorial(n) { // 终止条件 if (n === 0) { return 1; } // 递归调用 return n * factorial(n - 1); } // 调用递归函数 console.log(factorial(5)); // 输出 120 \",\"在上面的例子中，factorial 函数计算给定数字 n 的阶乘。当 n 达到终止条件时（即 n 等于 0），递归停止并返回 1。否则，函数会调用自身，并将结果与当前的 n 相乘，实现阶乘的递归计算。\",\"需要注意的是，在使用递归时，要确保递归调用能够最终达到终止条件，否则会导致无限递归调用，导致堆栈溢出错误。另外，递归可能会占用大量的堆栈空间，如果递归过深，可能会导致性能问题。因此，在使用递归时，需要谨慎设计和控制递归的层级和终止条件。\",\"递归在解决某些问题上非常有用，如树的遍历、复杂算法的实现等。然而，在一些情况下，迭代（循环）可能更简单和高效。因此，在使用递归之前，要仔细权衡使用递归和迭代的优缺点，并根据具体问题选择合适的方法。\"]},\"270\":{\"h\":\"任务队列\",\"t\":[\"任务队列是用于管理和调度异步任务的一种数据结构。在 JavaScript 中，任务队列通常与事件循环搭配使用，用于处理异步操作和事件回调函数。\",\"任务队列的基本概念如下：\",\"任务队列： 任务队列是一种先进先出（FIFO）的数据结构，用于存储待执行的任务。每个任务都是一个回调函数，表示一个需要在将来某个时刻执行的操作。\",\"事件循环（Event Loop）： 事件循环是 JavaScript 运行时环境的一部分，用于管理和调度任务队列中的任务。它不断地从任务队列中取出任务，执行任务的回调函数，并保持不停地运行。\",\"基本的事件循环工作流程如下：\",\"执行同步代码： JavaScript 首先执行主线程中的同步代码，直到遇到异步操作。\",\"将异步任务添加到任务队列： 当遇到异步操作时，将其回调函数添加到任务队列中，并在合适的时机执行。\",\"等待主线程为空： 当主线程中的同步代码执行完毕后，JavaScript 进入等待状态，等待任务队列中的任务被执行。\",\"从任务队列中取出任务执行： 当任务队列中有任务时，事件循环会按照 FIFO 的顺序取出任务，并执行对应的回调函数。\",\"重复执行事件循环： 当一个任务执行完毕后，回到第 3 步，继续从任务队列中取出任务执行，直至任务队列为空。\",\"这个事件循环的过程使得 JavaScript 可以在单线程的环境下处理异步操作，并保持其非阻塞特性。\",\"在浏览器环境中，常见的异步任务包括定时器（setTimeout、setInterval）、网络请求（Ajax、fetch）、事件回调函数等。这些任务会被添加到任务队列中，在适当的时间被执行。\",\"在 Node.js 环境中，除了浏览器环境的异步任务外，还有一些特定于 Node.js 的异步任务，如文件 I/O、数据库操作等。这些任务同样也会被添加到任务队列中，并按照事件循环的顺序被执行。\",\"当涉及到任务队列和事件循环时，下面是一个简单的示例，展示了如何使用任务队列来处理异步任务：\",\"console.log('Start'); // 添加异步任务到任务队列（定时器） setTimeout(() => { console.log('Async task 1'); }, 2000); // 添加异步任务到任务队列（网络请求模拟） setTimeout(() => { console.log('Async task 2'); }, 1000); console.log('End'); \",\"在上述示例中，我们通过 setTimeout 函数添加了两个异步任务到任务队列中。这两个任务是模拟了定时器和网络请求。同时，我们也输出了一些同步代码。\",\"当我们运行上述代码时，它的输出结果将是：\",\"Start End Async task 2 Async task 1 \",\"解释执行过程如下：\",\"首先，同步代码 console.log('Start') 和 console.log('End') 被执行，它们在主线程上同步执行并立即输出。\",\"然后，两个异步任务被添加到任务队列中，它们分别是 setTimeout 的回调函数。\",\"主线程中的同步代码执行完毕后，进入等待状态，等待任务队列中的任务被执行。\",\"随着时间的推移，时间达到定时器设定的延迟时间（这里是1秒和2秒）。\",\"第一个异步任务的延迟时间到达，它被移出任务队列，并在主线程中执行其对应的回调函数 console.log('Async task 2')。输出结果为 'Async task 2'。\",\"第二个异步任务的延迟时间也到达，同样被移出任务队列，并执行其回调函数 console.log('Async task 1')。输出结果为 'Async task 1'。\",\"通过这个例子，我们可以看到异步任务是如何通过任务队列和事件循环来进行管理和调度的。任务队列确保异步任务按照它们添加到队列中的顺序被执行，而不会阻塞主线程的执行。\",\"请注意，任务队列并非仅限于定时器和网络请求，还可以包括其他异步任务，如用户交互事件、Promise 的异步操作、动画回调等。任务队列使我们能够以一种有序和非阻塞的方式处理这些异步任务。\"]},\"271\":{\"h\":\"消息队列\",\"t\":[\"JavaScript消息队列是一种处理异步操作的机制，用于管理和调度待处理的任务。以下是关于JavaScript消息队列的一些基本概念：\",\"事件循环(Event Loop)：JavaScript是单线程的，事件循环是管理JavaScript引擎如何处理事件的机制。它负责处理消息队列中的任务，并将它们依次放入执行栈中进行处理。\",\"执行栈(Execution Stack)：执行栈是一种数据结构，用于存储要执行的函数调用。JavaScript代码在执行时，会按顺序将函数调用添加到执行栈中，并在完成执行后从栈顶弹出。\",\"消息队列(Message Queue)：消息队列是一个FIFO（先进先出）的数据结构，用于存储待处理的任务。当异步操作完成或事件触发时，相关的回调函数会被添加到消息队列中。\",\"宏任务(Macro Task)：宏任务代表一组要在事件循环中处理的任务，它们被添加到消息队列中。例如，setTimeout和setInterval中的回调函数、DOM事件处理函数等都属于宏任务。\",\"微任务(Micro Task)：微任务是一个细粒度的任务，它们比宏任务优先级更高，会在当前宏任务执行完成后立即执行。常见的微任务包括Promise的回调函数和使用MutationObserver监听DOM变化的回调函数。\",\"在事件循环中，当执行栈为空时，事件循环会从消息队列中取出一个任务，将其添加到执行栈中执行。先执行所有的微任务，然后执行一个宏任务，再回到执行微任务的阶段。\",\"JavaScript消息队列的机制确保异步任务能够以正确的顺序执行，避免阻塞主线程。这是JavaScript处理异步操作的关键部分，使得我们能够编写更高效和响应性的代码。\",\"以下是一个基本的JavaScript消息队列的示例代码：\",\"// 定义一个异步任务，模拟一个Ajax请求 function fetchData(url) { return new Promise((resolve) => { setTimeout(() => { const data = `Data from ${url}`; resolve(data); }, 2000); }); } console.log('Start'); // 添加一个宏任务 setTimeout(() => { console.log('Timeout callback'); }, 0); // 添加一个微任务 Promise.resolve().then(() => { console.log('Promise callback'); }); // 发起异步任务，并设置回调函数 fetchData('https://example.com/api/data').then((data) => { console.log('Received data:', data); }); console.log('End'); \",\"输出结果将是：\",\"Start End Promise callback Received data: Data from https://example.com/api/data Timeout callback \",\"解释示例代码的执行过程：\",\"首先，打印出 \\\"Start\\\" 和 \\\"End\\\"。\",\"通过setTimeout添加一个宏任务，设置延迟为0毫秒。\",\"通过Promise.resolve().then()添加一个微任务。\",\"调用fetchData函数发起一个模拟的异步任务，设置一个回调函数。注意，由于模拟的异步操作具有2秒的延迟，因此在此期间事件循环可以做其他事情。\",\"打印出 \\\"Promise callback\\\"，这是微任务在当前宏任务执行完成后立即执行的结果。\",\"2秒后，异步任务完成，打印出 \\\"Received data: Data from https://example.com/api/data\\\"。\",\"打印出 \\\"Timeout callback\\\"，这是之前设置的宏任务。\",\"这个示例展示了消息队列如何处理宏任务和微任务，并且说明了它们的执行顺序。\"]},\"272\":{\"h\":\"异步编程\",\"t\":[\"JavaScript 异步编程是一种处理非阻塞操作的编程范式。它允许在执行时间较长的操作（如网络请求、文件读写等）时，不会阻塞后续的代码执行，从而提高程序的性能和响应能力。\",\"在 JavaScript 中，常用的实现异步编程的机制有以下几种：\",\"回调函数（Callbacks）： 回调函数是最早用于处理异步操作的方式之一。它通过将一个函数作为参数传递给异步操作，当操作完成后，该函数就会被调用，从而处理异步操作的结果。\",\"function fetchData(callback) { setTimeout(() => { const data = 'Some data from server'; callback(data); }, 2000); } function processData(data) { console.log(`Received data: ${data}`); } fetchData(processData); \",\"在上述例子中，fetchData 函数模拟了一个异步操作，2 秒后返回数据。通过将 processData 函数作为回调函数传递给 fetchData 函数，当数据返回时，processData 函数就会被调用。\",\"Promise： Promise 是一种用于处理异步操作的对象。它表示一个异步操作的最终完成或失败，并可以将回调函数的嵌套结构转换为链式调用的形式，增强代码的可读性和可维护性。\",\"function fetchData() { return new Promise((resolve, reject) => { setTimeout(() => { const data = 'Some data from server'; resolve(data); }, 2000); }); } fetchData().then((data) => { console.log(`Received data: ${data}`); }); \",\"在上述例子中，fetchData 函数返回一个 Promise 对象。当异步操作成功完成时，调用 resolve 方法并传递结果；当操作失败时，调用 reject 方法。通过调用 then 方法，我们可以在 Promise 对象成功完成时执行相应的逻辑。\",\"async/await： async/await 是 ES2017 引入的异步编程语法糖，它建立在 Promise 上，使得异步代码的写法更像同步代码，并提供了更好的错误处理机制。\",\"function fetchData() { return new Promise((resolve, reject) => { setTimeout(() => { const data = 'Some data from server'; resolve(data); }, 2000); }); } async function processData() { try { const data = await fetchData(); console.log(`Received data: ${data}`); } catch (error) { console.error('Error:', error); } } processData(); \",\"在上述例子中，processData 函数使用 async 关键字声明为异步函数，将 await 关键字用于 Promise 的前面，表示等待异步操作的完成。通过 try...catch 块，我们可以捕获和处理可能出现的错误。\",\"事件监听器（Event listeners）： 事件监听器是一种常见的异步编程模式，特别适用于处理用户交互、浏览器事件等场景。你可以通过给特定的事件注册监听器，以便在事件发生时执行相应的操作。\",\"const button = document.querySelector('button'); button.addEventListener('click', () => { console.log('Button clicked!'); }); \",\"在上述示例中，我们给选中的按钮注册了一个点击事件监听器。当按钮被点击时，监听器中的回调函数会被触发。\",\"发布-订阅模式（Publish-Subscribe Pattern）： 发布-订阅模式是一种用于多个部分间进行解耦的异步编程模式。其中，发布者（Publisher）负责发布事件，而订阅者（Subscriber）则负责订阅感兴趣的事件，并在事件发生时执行相应的操作。\",\"const pubSub = (function() { const subscribers = {}; function subscribe(event, callback) { if (!subscribers[event]) { subscribers[event] = []; } subscribers[event].push(callback); } function publish(event, data) { if (!subscribers[event]) return; subscribers[event].forEach((callback) => callback(data)); } return { subscribe, publish }; })(); function handleEvent(data) { console.log('Event received:', data); } pubSub.subscribe('customEvent', handleEvent); pubSub.publish('customEvent', 42); \",\"在上面的例子中，我们创建了一个简单的发布-订阅模式实现，使用 pubSub 对象作为中间人来进行事件的订阅和发布。当发布者发布一个事件时，所有订阅了该事件的回调函数都会被调用。\",\"异步库和框架： 除了原生的异步编程机制外，还有许多流行的第三方库和框架可以简化异步操作的处理，提供更高级的抽象和功能。其中一些包括 RxJS、Async.js、Bluebird 等。这些工具可以帮助你管理和组合异步操作，处理并发、流控制、错误处理等方面的问题。\"]},\"273\":{\"h\":\"堆和栈\",\"t\":[\"堆(heap)和栈(stack)是两个重要的内存管理区域，用于存储不同类型的数据。\",\"栈 (Stack)： \",\"栈是一种线性数据结构，遵循先进后出 (Last-In-First-Out, LIFO) 的原则。\",\"栈中存储的是简单数据类型的值，如数字、布尔值和指针等。\",\"栈的大小是固定的，通常较小。它由 JavaScript 引擎自动管理。\",\"栈操作速度较快，因为数据的分配和释放都是通过移动栈指针来完成的。\",\"过多的栈内存使用可能导致栈溢出 (Stack Overflow) 错误。\",\"下面是一个栈的示例：\",\"function foo() { var a = 10; var b = true; // 函数调用栈 } foo(); \",\"在上面的示例中，a 和 b 变量被创建在栈中，随着函数 foo() 的调用，它们会被压入栈中的函数调用栈帧中。当函数执行完毕后，栈将释放这些变量。\",\"堆 (Heap)： \",\"堆是动态分配内存的区域，存储的是复杂数据类型（引用类型）的值，如对象和数组等。\",\"堆的大小相对较大，并且它的容量不会自动扩展或缩小。因此，需要开发者手动处理内存的分配和释放。\",\"引用类型的值在堆中分配内存，并通过引用地址保存在栈指针中的变量中。\",\"引用类型的值可以共享和修改，因为多个变量可以引用相同的对象。\",\"下面是一个堆的示例：\",\"var obj = { name: 'John', age: 25 }; var arr = [1, 2, 3, 4, 5]; // obj 和 arr 的值存储在堆中，变量存储的是引用地址 \",\"在上面的示例中，obj 和 arr 变量存储的是对象和数组在堆中的引用地址。实际数据存储在堆中，而栈中的变量只是引用了堆中的数据。\",\"总结：\",\"栈用于存储简单数据类型，如数字、布尔值和指针等。它们在栈中直接分配和释放。\",\"堆用于存储复杂数据类型，如对象和数组等。数据在堆中动态分配和释放，而栈中的变量存储了堆中数据的引用地址。\",\"需要注意的是，JavaScript 的内存管理由垃圾回收器自动处理，不需要手动释放栈或堆中的内存。开发者只需关注数据的正确使用和内存的合理分配。\"]},\"274\":{\"h\":\"内存管理\",\"t\":[\"堆栈（Heap Stack）： 堆栈是栈和堆的组合概念。它是指存储 JavaScript 代码执行期间创建的所有对象和变量的总体内存。除了存储变量和简单数据类型的值的栈区域，还包括存储复杂数据类型值（对象、数组等）的堆区域。\",\"内存泄漏（Memory Leak）： 内存泄漏是指在程序中无意中保留对不再需要使用的内存的引用，导致该内存无法被垃圾回收机制回收释放的情况。这可能会导致内存占用不断增长，最终影响应用程序的性能和稳定性。开发者应该注意内存泄漏，及时释放不再需要的对象和资源。\",\"栈溢出（Stack Overflow）： 栈溢出是指当栈空间被超出其容量时，栈继续被写入数据，导致栈溢出的错误。这通常发生在递归调用或大量函数嵌套的情况下，其中栈没有足够的空间来处理函数调用。开发者应该注意栈的容量限制，避免出现栈溢出的情况。\",\"垃圾回收（Garbage Collection）： 垃圾回收是 JavaScript 引擎中的一项自动内存管理机制，用于检测不再被程序使用的内存并进行回收。垃圾回收器会定期扫描内存，找到不再被引用或无法访问的对象，并将其释放以供后续使用。这使开发者不需要手动分配和释放内存，但需要注意避免内存泄漏。\"]},\"275\":{\"h\":\"内存泄漏\",\"t\":[\"内存泄漏（Memory Leak）是指在程序中无意中保留对不再需要使用的内存的引用，导致该内存无法被垃圾回收机制回收释放的情况。内存泄漏可能会导致内存占用不断增加，最终影响应用程序的性能和稳定性。\",\"在 JavaScript 中，一些常见的内存泄漏情况包括以下几种：\",\"全局变量：如果在作用域中声明了一个全局变量，但不再需要使用它时，没有显式地将其删除或赋值为 null，该变量将一直存在于内存中，无法被垃圾回收。\",\"定时器未清除：使用 setTimeout 或 setInterval 创建的定时器，如果没有及时清除或停止，它们会持续引用回调函数，从而导致相关的变量和作用域无法被释放。\",\"事件监听器未移除：当向 DOM 元素添加事件监听器（如点击事件），但在元素被移除之前没有显式地移除这些事件监听器时，这些监听器会继续存在，从而导致元素无法被垃圾回收。\",\"循环引用：当两个或多个对象相互引用，并且不存在对它们的引用之外的引用时，它们将无法被垃圾回收。这种情况通常发生在对象之间的相互引用或闭包的使用中。\",\"为了避免内存泄漏，可以采取以下一些措施：\",\"显式释放不再需要的资源和引用，包括变量、定时器和事件监听器等。\",\"使用适当的引用管理和作用域控制，避免创建过多的全局变量和闭包。\",\"在不再需要时，及时移除事件监听器，特别是在动态生成和移除 DOM 元素时。\",\"当存在循环引用时，通过手动断开相关对象之间的引用，或使用弱引用来处理对对象的引用。\",\"使用开发者工具进行内存分析和性能测试，及时发现和解决潜在的内存泄漏问题。\",\"在编写代码时，需要留意内存管理方面的最佳实践，确保及时释放不再需要的资源，以维持应用程序的性能和稳定性。\"]},\"276\":{\"h\":\"垃圾回收\",\"t\":[\"垃圾回收（Garbage Collection）是指计算机程序自动管理内存的过程，用于释放不再使用的内存，并将其返回给操作系统或可用内存池供后续使用。垃圾回收器会自动追踪和回收不再被程序引用的内存，从而减少内存泄漏和程序错误。\",\"在 JavaScript 中，垃圾回收是由 JavaScript 运行时环境（如浏览器或 Node.js）负责执行的。JavaScript 使用了自动的垃圾回收机制来管理内存。下面是一些常见的垃圾回收算法：\",\"引用计数（Reference Counting）：这是一种简单的垃圾回收算法，它会在内存中维护每个对象的引用计数。当对象的引用计数为零时，说明该对象不再被访问，可以被回收。然而，引用计数算法无法处理循环引用的情况，会导致内存泄漏。\",\"标记-清除（Mark and Sweep）：这是一种常见的垃圾回收算法。它通过追踪对象之间的引用关系，并标记所有从根对象（如全局对象或活动执行上下文）可达的对象。之后，它遍历整个堆中的所有对象，清除未被标记的对象，并将它们的内存释放。\",\"分代回收（Generational Collection）：这是一种优化的垃圾回收策略，根据对象生命周期的特点将堆中的对象分成多个代（Generation）。通常将新创建的对象放入新生代（Young Generation），而经过多次回收仍然存活的对象则会被移到老年代（Old Generation）。针对不同代的对象采用不同的回收策略，以提高性能和效率。\",\"在 JavaScript 中，开发人员不需要显式地管理内存，因为垃圾回收机制会自动处理。但为了优化内存使用和性能，可以注意以下几点：\",\"及时释放不再使用的对象和资源，如清除定时器、关闭网络连接等。\",\"避免创建过多的全局变量，尽量使用局部变量和适当的作用域控制。\",\"尽量避免循环引用，当不再需要两个对象相互引用时，手动断开它们的引用。\",\"注意内存占用较大的操作，如大型数据集、循环和递归等，确保使用完毕后及时释放相关资源。\",\"综上所述，垃圾回收是一种自动管理内存的机制，使开发人员能够更专注于业务逻辑而无需手动处理内存管理的细节。\"]},\"277\":{\"h\":\"堆栈溢出\",\"t\":[\"堆栈溢出（Stack Overflow）是指在程序执行过程中，调用堆栈（Stack）的空间超过了系统分配给它的大小，导致堆栈内存溢出的情况。当函数调用嵌套层级太深或递归调用没有正确的终止条件时，堆栈溢出错误就会发生。\",\"在计算机中，堆栈是一种用于管理函数调用和局部变量的内存区域。每当一个函数被调用时，它的信息（如返回地址、参数和局部变量）都会被推入堆栈中。当函数执行结束后，它的信息会从堆栈中弹出，以便返回到调用点。当堆栈空间不足以容纳当前的函数调用链时，就会发生堆栈溢出错误。\",\"堆栈溢出通常是由以下几种情况引起的：\",\"无限递归：递归函数没有正确的终止条件，导致无限递归调用，最终导致堆栈溢出。\",\"嵌套调用层级过深：当函数调用层级过深时，堆栈中需要存储的信息也会随之增加，超过了系统分配给堆栈的空间大小。\",\"大量的局部变量：如果函数中声明了大量的局部变量，每个变量都需要在堆栈中分配内存空间，当变量过多时，也会造成堆栈溢出。\",\"针对堆栈溢出问题，可以考虑以下解决方法：\",\"检查递归函数并确保添加正确的终止条件，避免无限递归调用。\",\"减少嵌套函数调用的层级，尽量优化函数的设计和逻辑，避免层级过深的调用链。\",\"减少局部变量的使用，查看是否可以合并或优化变量的使用方式。\",\"增加系统堆栈大小的限制（但需要注意不要设置过大，以免造成其他问题）。\",\"对于特别复杂的问题或需要大量递归调用的场景，可以使用尾递归优化或迭代算法来避免堆栈溢出。\",\"需要注意的是，堆栈溢出错误通常是由代码逻辑错误或算法设计问题导致的，应该确保代码的正确性和效率，并及时处理和修复堆栈溢出问题，以保证程序的稳定性和可靠性。\"]},\"278\":{\"h\":\"开发模式\",\"t\":[\"当涉及到 JavaScript 开发模式时，下面是一些常见的开发模式和相应的示例：\",\"面向过程编程 (Procedural Programming)：\",\"面向过程编程是一种将代码组织为一系列函数的开发模式。它关注问题的解决步骤和功能，通过一系列的函数调用来处理和操作数据。这种模式更适合简单、直接的问题。\",\"以下是一个面向过程编程的示例：\",\"function calculateArea(length, width) { return length * width; } var result = calculateArea(5, 10); console.log(result); // 输出 50 \",\"面向对象编程 (Object-Oriented Programming, OOP)： 面向对象编程是一种将代码组织为对象的开发模式。对象是数据和操作数据的相关函数的集合，通过创建对象来模拟现实世界的实体和关系。OOP 提供了封装、继承和多态等概念，使代码更具可维护性和可扩展性以下是一个面向对象编程的示例：\",\"class Rectangle { constructor(length, width) { this.length = length; this.width = width; } calculateArea() { return this.length * this.width; } } var rectangle = new Rectangle(5, 10); var area = rectangle.calculateArea(); console.log(area); // 输出 50 \",\"函数式编程 (Functional Programming)： 函数式编程是一种将计算视为函数求值的开发模式。它强调使用纯函数（无副作用、无状态）来进行数据转换和操作。函数式编程更加注重代码的可测试性、可组合性，能够减少副作用和提高代码的健壮性。\",\"以下是一个函数式编程的示例：\",\"var numbers = [1, 2, 3, 4, 5]; var doubledNumbers = numbers.map(function(number) { return number * 2; }); console.log(doubledNumbers); // 输出 [2, 4, 6, 8, 10] \",\"响应式编程 (Reactive Programming)： 响应式编程是一种以数据流为基础的开发模式，它关注数据和数据流之间的关系。它使用观察者模式和数据订阅来处理异步数据流，通过响应式操作符进行数据的转换和组合。响应式编程适用于复杂的异步场景，如事件驱动的用户界面或实时数据流应用。\",\"以下是一个响应式编程的示例：\",\"import { fromEvent } from 'rxjs'; var button = document.getElementById('myButton'); var buttonClicks = fromEvent(button, 'click'); buttonClicks.subscribe(function() { console.log('Button clicked!'); }); \",\"命令式编程 (Imperative Programming)： 命令式编程是一种以编写明确指令的方式来描述计算过程和控制流程的开发模式。开发者按照执行的顺序编写代码，依次改变状态和执行操作。这种模式更接近机器的语言和底层的操作，但可能会产生复杂的控制流程和难以维护的代码。\",\"以下是一个命令式编程的示例：\",\"var count = 0; function incrementCount() { count++; } incrementCount(); console.log(count); // 输出 1 \",\"模块化开发 (Modular Development)： 模块化开发是一种将代码拆分为互相独立的模块来进行开发的方法。每个模块有自己的功能和责任，并且可以在需要时被导入和使用。这种模式鼓励代码的重用性和可维护性，使开发更加高效和灵活。\",\"以下是一个模块化开发的示例：\",\"// moduleA.js export function greet(name) { return 'Hello, ' + name + '!'; } // moduleB.js import { greet } from './moduleA.js'; var message = greet('John'); console.log(message); // 输出 'Hello, John!'xxxxxxxxxx // moduleA.jsexport function greet(name) { return '// moduleA.jsexport function greet(name) { return 'Hello, ' + name + '!';}// moduleB.jsimport { greet } from './moduleA.js';var message = greet('John');console.log(message); // 输出 'Hello, John!' \"]},\"279\":{\"h\":\"正则表达式\",\"t\":[\"正则表达式（Regular Expression）是一种用来进行文本匹配和查找的强大工具，在JavaScript中也可以使用正则表达式来处理字符串。以下是一些常用的JavaScript正则表达式相关操作：\",\"创建正则表达式：\",\"let regex = /pattern/; // 使用正斜杠（/）包裹模式字符串 let regex = new RegExp(\\\"pattern\\\"); // 使用RegExp对象构造函数创建正则表达式 \",\"测试匹配：\",\"let regex = /pattern/; let result = regex.test(\\\"string\\\"); // 检测字符串是否匹配正则表达式 \",\"查找匹配：\",\"let regex = /pattern/; let result = \\\"string\\\".match(regex); // 返回匹配到的结果数组，如果没有匹配则返回null \",\"替换匹配：\",\"let regex = /pattern/; let result = \\\"string\\\".replace(regex, \\\"replacement\\\"); // 用指定的替换字符串替换匹配到的部分 \",\"常用的正则表达式模式：\",\"/abc/: 匹配abc字符串\",\"/[a-z]/: 匹配任意小写字母\",\"/[0-9]/: 匹配任意数字\",\"/[A-Za-z0-9]/: 匹配任意字母或数字\",\"/^pattern/: 匹配以pattern开头的字符串\",\"/pattern$/: 匹配以pattern结尾的字符串\",\"/[aeiou]/: 匹配任意元音字母\",\"/[^aeiou]/: 匹配任意非元音字母\",\"/[0-9]+/: 匹配一个或多个数字\"]},\"280\":{\"h\":\"词法环境与作用域\",\"t\":[\"词法环境（Lexical Environment）和词法作用域（Lexical Scope）是两个相关的概念，用于描述变量和函数在代码中的可访问性和作用域规则。下面对它们进行简要说明：\",\"词法环境（Lexical Environment）： 词法环境是在执行 JavaScript 代码时用来存储变量和函数声明的容器。每次进入一个新的作用域（例如，函数或块级作用域），就会创建一个新的词法环境，并将其与该作用域相关联。词法环境由两个主要组成部分构成：\",\"环境记录器（Environment Record）：用于存储变量、函数和形参等标识符的具体定义和值。\",\"对外部环境的引用（Outer Environment Reference）：用于连接并形成一个词法环境链，以便在嵌套作用域中查找变量和函数。\",\"词法作用域（Lexical Scope）： 词法作用域是由代码中的变量和函数声明的位置决定的，也称为静态作用域。它指定了在函数被定义时变量和函数可被访问的范围。\",\"在词法作用域下，一个函数可以访问其外部作用域中定义的变量，但反之不行。这意味着函数可以访问它的父级作用域、全局作用域以及嵌套的内部作用域中的变量。这种作用域链的查找是在词法环境中进行的。\",\"总结来说，词法环境是变量和函数声明的存储位置和管理机制，而词法作用域则决定了代码中标识符的可见范围和访问规则。\",\"需要注意的是，词法环境和词法作用域是 JavaScript 引擎在代码解析和执行过程中的内部概念，对于我们开发者来说，主要关注的是如何在不同的作用域中定义和使用变量以及理解作用域链的机制。\"]},\"281\":{\"h\":\"拷贝\",\"t\":[\"拷贝（Copy）一个对象或数组有多种方法，具体使用哪种方法取决于你所需的拷贝方式。下面介绍几种常见的拷贝方法：\",\"浅拷贝（Shallow Copy）： 浅拷贝创建一个新的对象或数组，并复制原始对象或数组中的属性/元素的引用。这意味着如果原始对象或数组中的属性或元素是对象，那么拷贝后的对象或数组中的相应属性或元素仍然引用同一个对象。常用的浅拷贝方法包括：\",\"对象：使用 ES6 的展开运算符（Spread Operator）或 Object.assign() 方法：\",\"let originalObj = { a: 1, b: 2 }; let shallowCopyObj = { ...originalObj }; // 或 Object.assign({}, originalObj); \",\"数组：使用 Array.from() 方法或 slice() 方法：\",\"let originalArr = [1, 2, 3]; let shallowCopyArr = Array.from(originalArr); // 或 originalArr.slice(); \",\"深拷贝（Deep Copy）： 深拷贝创建一个全新的对象或数组，并复制原始对象或数组中的属性/元素的值，而不是引用。这样拷贝后的对象或数组与原始对象或数组完全独立，修改它们互不影响。常用的深拷贝方法包括：\",\"手写深拷贝，它可以对包含对象和数组的复杂数据结构进行深拷贝：\",\"function deepCopy(obj) { if (typeof obj !== \\\"object\\\" || obj === null) { return obj; // 如果是基本类型或 null，则直接返回 } let copy; if (Array.isArray(obj)) { copy = []; for (let i = 0; i < obj.length; i++) { copy[i] = deepCopy(obj[i]); // 递归拷贝数组元素 } } else { copy = {}; for (let key in obj) { if (obj.hasOwnProperty(key)) { copy[key] = deepCopy(obj[key]); // 递归拷贝对象属性 } } } return copy; } \",\"使用示例：\",\"let originalObj = { a: 1, b: { c: 2 } }; let deepCopyObj = deepCopy(originalObj); console.log(deepCopyObj); // { a: 1, b: { c: 2 } } console.log(deepCopyObj === originalObj); // false，不是同一个对象 console.log(deepCopyObj.b === originalObj.b); // false，嵌套对象也是深拷贝 \",\"该深拷贝函数会先检查传入的值的类型。如果是基本类型或 null，直接返回该值。如果是数组，则创建一个新的空数组，并递归地拷贝原数组的每个元素。如果是对象，则创建一个新的空对象，并递归地拷贝原对象的每个属性。在拷贝对象属性时，通过 hasOwnProperty() 方法过滤掉原型链上的属性。\",\"需要注意的是，该函数仅处理对象和数组的深拷贝，对于包含其他特殊类型（如函数、正则表达式等）或循环引用的对象，可能需要进行额外的处理。此外，对于非常大的数据结构，递归拷贝可能会导致栈溢出，需要使用更高级的算法或库来处理。\",\"使用 JSON 序列化和反序列化：\",\"let originalObj = { a: 1, b: { c: 2 } }; let deepCopyObj = JSON.parse(JSON.stringify(originalObj)); \",\"使用第三方库，如 Lodash 的 cloneDeep() 方法：\",\"let deepCopyObj = _.cloneDeep(originalObj); \",\"需要注意的是，深拷贝方法有时会有性能和限制方面的考量，特别是在处理包含循环引用、函数、正则表达式等特殊对象时。使用时要酌情选择。另外，对于拷贝大型对象或嵌套层级很深的对象，可能需要考虑性能和内存消耗。\"]},\"282\":{\"h\":\"API\",\"t\":[\"formData: FormData 是 JavaScript API 的一部分，用于收集和提交表单数据。它提供了一种简单的方式来构建表单数据，并通过 XMLHttpRequest 或 Fetch API 将其发送到服务器。\",\"要使用 FormData，首先需要创建一个空的 FormData 对象：\",\"var formdata = new FormData(); \",\"然后，可以使用 append() 方法添加表单数据。该方法接受两个参数，第一个参数是字段的名称，第二个参数是字段的值。可以多次调用 append() 来添加多个字段。\",\"formdata.append('username', 'John Doe'); formdata.append('email', 'johndoe@example.com'); \",\"如果要添加文件，可以使用 append() 方法的第三个参数，将文件对象传递给它。\",\"var fileInput = document.querySelector('input[type=\\\"file\\\"]'); formdata.append('avatar', fileInput.files[0]); \",\"FormData 对象还提供了其他方法来处理表单数据。以下是一些常用的方法：\",\"delete(name)：从 FormData 对象中删除指定名称的字段和值。\",\"get(name)：获取指定名称字段的第一个值。\",\"getAll(name)：获取指定名称字段的所有值，返回一个数组。\",\"has(name)：检查 FormData 对象中是否存在指定名称的字段。\",\"set(name, value)：设置指定名称字段的值，如果字段不存在，则创建一个新字段。\",\"FormData 对象可以与 XMLHttpRequest 或 Fetch API 一起使用，将其发送到服务器。下面是一个使用 XMLHttpRequest 发送 FormData 的示例：\",\"var request = new XMLHttpRequest(); request.open('POST', '/submit-form', true); request.onreadystatechange = function() { if (request.readyState === XMLHttpRequest.DONE) { if (request.status === 200) { console.log('Form submitted successfully!'); } else { console.error('Failed to submit form.'); } } }; request.send(formdata); \",\"这样，FormData 中的表单数据将作为请求的主体发送到服务器。在服务器端，您可以根据您的需求处理 FormData 数据。\"]},\"283\":{\"h\":\"jQuery\"},\"284\":{\"h\":\"引入jQuery库\",\"t\":[\"下载最新版本的jQuery库并将其引入到HTML文件中。例如：\",\"<script src=\\\"https://code.jquery.com/jquery-3.6.0.min.js\\\"></script> \"]},\"285\":{\"h\":\"文档加载事件\",\"t\":[\"使用$(document).ready()方法确保代码在文档加载完成后执行。例如：\",\"$(document).ready(function() { // 在这里编写你的代码 }); \"]},\"286\":{\"h\":\"选择器\",\"t\":[\"使用选择器来选取DOM元素，并对其进行操作或应用事件。例如：\",\"// 通过元素标签名选取元素 $(\\\"p\\\") // 选取所有的段落元素 // 通过ID选取元素 $(\\\"#myElement\\\") // 选取ID为\\\"myElement\\\"的元素 // 通过类名选取元素 $(\\\".example\\\") // 选取所有具有类名\\\"example\\\"的元素 // 通过属性选取元素 $(\\\"input[type='text']\\\") // 选取所有type为\\\"text\\\"的输入框元素 // 通过父子关系选取元素 $(\\\"#parentElement > #childElement\\\") //选取父元素下的子元素 \"]},\"287\":{\"h\":\"事件处理\",\"t\":[\"使用.on()方法来绑定事件处理程序。例如：\",\"// 点击事件 $(\\\"button\\\").on(\\\"click\\\", function() { // 在这里编写你的代码 }); // 鼠标悬停事件 $(\\\"div\\\").on(\\\"mouseover\\\", function() { // 在这里编写你的代码 }); \"]},\"288\":{\"h\":\"DOM操作\",\"t\":[\"使用jQuery对DOM元素进行操作。例如：\",\"// 修改元素内容 $(\\\"#myElement\\\").text(\\\"新的文本内容\\\"); // 获取或修改元素属性 $(\\\"#myElement\\\").attr(\\\"href\\\"); // 获取href属性 $(\\\"#myElement\\\").attr(\\\"href\\\", \\\"newLink\\\"); // 修改href属性为\\\"newLink\\\" // 添加或移除CSS类 $(\\\"#myElement\\\").addClass(\\\"highlight\\\"); // 添加CSS类 $(\\\"#myElement\\\").removeClass(\\\"highlight\\\"); // 移除CSS类 // 显示或隐藏元素 $(\\\"#myElement\\\").show(); $(\\\"#myElement\\\").hide(); // 插入新的元素 $(\\\"#myElement\\\").append(\\\"<p>新的段落</p>\\\"); // 在元素内部末尾添加新的段落 $(\\\"#myElement\\\").prepend(\\\"<p>新的段落</p>\\\"); // 在元素内部开头添加新的段落 $(\\\"#myElement\\\").after(\\\"<div>新的元素</div>\\\"); // 在元素后面添加新的元素 $(\\\"#myElement\\\").before(\\\"<div>新的元素</div>\\\"); // 在元素前面添加新的元素 \"]},\"289\":{\"h\":\"AJAX\",\"t\":[\"使用jQuery的AJAX方法与服务器进行数据交互。例如：\",\"// 发送GET请求获取JSON数据 $.get(\\\"data.json\\\", function(data) { // 在这里处理返回的数据 }); // 发送POST请求提交表单数据 $.post(\\\"submit.php\\\", $(\\\"#myForm\\\").serialize(), function(response) { // 在这里处理服务器响应 }); \"]},\"290\":{\"h\":\"动画效果\",\"t\":[\"jQuery提供了丰富的动画效果和方法，可以让元素以不同的方式显示、隐藏、移动和改变大小。\",\"使用.animate()方法可以创建自定义动画效果：\",\"// 淡入淡出效果 $(\\\"#myElement\\\").fadeIn(1000); $(\\\"#myElement\\\").fadeOut(1000); // 滑动效果 $(\\\"#myElement\\\").slideDown(1000); $(\\\"#myElement\\\").slideUp(1000); // 自定义动画效果 $(\\\"#myElement\\\").animate({ opacity: 0.5, left: '250px', height: '+=100px' }, 1000); \"]},\"291\":{\"h\":\"遍历和过滤\",\"t\":[\"使用.each()方法可以遍历集合中的每个元素，并对其执行相同的操作：\",\"$(\\\"li\\\").each(function() { // 在这里编写针对每个li元素的操作 }); \",\"使用过滤选择器可以根据特定的条件筛选元素：\",\"// 筛选第一个元素 $(\\\"li:first\\\") // 筛选最后一个元素 $(\\\"li:last\\\") // 筛选奇数位置的元素 $(\\\"li:odd\\\") // 筛选包含特定文本的元素 $(\\\"li:contains('apple')\\\") \"]},\"292\":{\"h\":\"AJAX的进一步使用\",\"t\":[\"使用$.ajax()方法可以更灵活地发送HTTP请求，并处理请求和响应的各个阶段。\",\"$.ajax({ url: \\\"data.json\\\", method: \\\"GET\\\", dataType: \\\"json\\\", success: function(data) { // 请求成功时的处理 }, error: function(xhr, status, error) { // 请求失败时的处理 }, complete: function(xhr, status) { // 请求完成时的处理 } }); \"]},\"293\":{\"h\":\"插件\",\"t\":[\"jQuery拥有大量的插件可供使用，可以扩展jQuery的功能和效果。\",\"插件通常由第三方开发者创建，并提供额外的功能和特性，从图像轮播器到表单验证等等。\",\"要使用插件，请先引入相应的插件脚本，并根据插件提供的文档进行配置和调用。\"]},\"294\":{\"h\":\"表单操作\",\"t\":[\"使用jQuery可以轻松地操作表单元素，包括获取和设置输入值，验证表单等。\",\"// 获取输入框的值 var inputValue = $(\\\"input\\\").val(); // 设置输入框的值 $(\\\"input\\\").val(\\\"New Value\\\"); // 验证表单 $(\\\"#myForm\\\").submit(function(event) { if ($(\\\"input\\\").val() === \\\"\\\") { alert(\\\"请输入内容\\\"); event.preventDefault(); // 阻止表单提交 } }); \"]},\"295\":{\"h\":\"样式操作\",\"t\":[\"使用.css()方法可以获取和设置元素的样式属性。\",\"// 获取元素的样式属性值 var color = $(\\\"#myElement\\\").css(\\\"color\\\"); // 设置元素的样式属性值 $(\\\"#myElement\\\").css(\\\"color\\\", \\\"red\\\"); \"]},\"296\":{\"h\":\"插入和移除元素\",\"t\":[\"使用.append()、.prepend()、.after()和.before()等方法可以插入新的元素到DOM中，或者移除现有的元素。\",\"// 在元素内部末尾添加新的元素 $(\\\"#myElement\\\").append(\\\"<p>新的段落</p>\\\"); // 在元素内部开头添加新的元素 $(\\\"#myElement\\\").prepend(\\\"<p>新的段落</p>\\\"); // 在元素后面添加新的元素 $(\\\"#myElement\\\").after(\\\"<div>新的元素</div>\\\"); // 在元素前面添加新的元素 $(\\\"#myElement\\\").before(\\\"<div>新的元素</div>\\\"); // 移除元素 $(\\\"#myElement\\\").remove(); \"]},\"297\":{\"h\":\"响应式设计\",\"t\":[\"使用.resize()方法可以在浏览器窗口大小改变时执行相应的操作。\",\"$(window).resize(function() { // 在窗口大小改变时执行的操作 }); \"]},\"298\":{\"h\":\"扩展jQuery\",\"t\":[\"如果你希望自定义功能或扩展已有的jQuery方法，可以使用.fn对象。\",\"// 自定义插件 $.fn.myPlugin = function() { // 在这里编写自定义插件的代码 }; // 使用自定义插件 $(\\\"div\\\").myPlugin(); \"]},\"299\":{\"h\":\"高级选择器\",\"t\":[\"jQuery提供了许多高级选择器来选择特定类型的元素、根据属性和内容筛选元素等。\",\"// 选择可见的元素 $(\\\":visible\\\") // 选择隐藏的元素 $(\\\":hidden\\\") // 选择第一个子元素 $(\\\"parent > :first-child\\\") // 根据属性选择元素 $(\\\"[name='username']\\\") // 根据文本内容选择元素 $(\\\"p:contains('Hello')\\\") \"]},\"300\":{\"h\":\"图片和多媒体操作\",\"t\":[\"使用jQuery可以轻松地加载、显示和操作图像和其他多媒体元素。\",\"// 图片加载完成事件 $(\\\"img\\\").on(\\\"load\\\", function() { // 图片加载完成后的处理 }); // 设置图像源 $(\\\"img\\\").attr(\\\"src\\\", \\\"image.jpg\\\"); // 显示/隐藏图像 $(\\\"img\\\").show(); $(\\\"img\\\").hide(); // 播放/暂停视频 $(\\\"video\\\")[0].play(); $(\\\"video\\\")[0].pause(); \"]},\"301\":{\"h\":\"滚动操作\",\"t\":[\"使用jQuery可以监听页面的滚动事件，并执行相应的操作。\",\"// 监听页面滚动事件 $(window).scroll(function() { // 在页面滚动时执行的操作 }); \",\"动态加载内容：\",\"使用jQuery的.load()方法可以通过AJAX从服务器加载HTML内容，并将其添加到页面中。\",\"// 加载并插入HTML内容 $(\\\"#myElement\\\").load(\\\"content.html\\\", function() { // 加载完成后的处理 }); \"]},\"302\":{\"h\":\"事件委托\",\"t\":[\"使用事件委托可以将事件处理程序绑定到祖先元素上，以处理子元素触发的事件。\",\"// 事件委托 $(\\\".parent\\\").on(\\\"click\\\", \\\".child\\\", function() { // 在这里编写处理子元素点击事件的代码 }); \"]},\"303\":{\"h\":\"父子关系和遍历\",\"t\":[\"使用.parent()方法可以获取元素的父元素，使用.children()方法可以获取元素的子元素。\",\"// 获取父元素 $(\\\"#myElement\\\").parent(); // 获取所有子元素 $(\\\"#myElement\\\").children(); // 获取特定子元素 $(\\\"#myElement\\\").children(\\\".child\\\"); \",\"使用.find()方法可以在后代元素中查找特定的元素。\",\"// 在后代元素中查找特定元素 $(\\\"#myElement\\\").find(\\\".child\\\"); \"]},\"304\":{\"h\":\"属性操作\",\"t\":[\"使用.prop()方法可以获取和设置元素的属性值。\",\"// 获取元素的属性值 $(\\\"#myElement\\\").prop(\\\"disabled\\\"); // 设置元素的属性值 $(\\\"#myElement\\\").prop(\\\"disabled\\\", true); \"]},\"305\":{\"h\":\"数据存储\",\"t\":[\"使用.data()方法可以在元素上存储和获取数据。\",\"// 存储数据 $(\\\"#myElement\\\").data(\\\"key\\\", \\\"value\\\"); // 获取数据 $(\\\"#myElement\\\").data(\\\"key\\\"); \"]},\"306\":{\"h\":\"Deferred对象和Promise\",\"t\":[\"jQuery中的Deferred对象和Promise是处理异步操作的强大工具。\",\"使用.Deferred()方法可以创建一个Deferred对象，使用.promise()方法可以创建一个Promise对象。\",\"// 创建Deferred对象 var deferred = $.Deferred(); // 创建Promise对象 var promise = deferred.promise(); // 异步操作完成时解决Deferred对象 deferred.resolve(); // 监听Promise对象的完成事件 promise.done(function() { // 在异步操作完成时执行的代码 }); \"]},\"307\":{\"h\":\"多库共存\",\"t\":[\"如果在同一个页面中同时使用多个JavaScript库（如jQuery和其他库），可以使用$.noConflict()方法来解决可能的冲突。\",\"var $j = $.noConflict(); // 将jQuery的$符号赋给变量$j，避免冲突 // 使用$j来代替$ $j(\\\"#myElement\\\").hide(); \"]},\"308\":{\"h\":\"TypeScript\"},\"309\":{\"h\":\"介绍\",\"t\":[\"typeScript是JavaScript的一个超集\",\"它扩展了JavaScript添加了静态类型、类和模块等特性，并且能够被编译成纯粹的JavaScript代码\",\"提供了更强大的类型检查和工具支持，使得开发者能够更加轻松地创建高质量的JavaScript应用程序\"]},\"310\":{\"h\":\"数据类型\",\"t\":[\"数据类型是指在编程语言中直接支持的基本数据类型，没有进行进一步组合或封装的类型。在 TypeScript 中，数据类型包括以下几种：\",\"number：表示数值类型，包括整数和浮点数。例如：\",\"let age: number = 25; let pi: number = 3.14; \",\"string：表示字符串类型，用于表示文本数据。例如：\",\"let name: string = \\\"Alice\\\"; let greeting: string = `Hello, ${name}!`; \",\"boolean：表示布尔类型，只有两个可能的值：true 和 false。例如：\",\"let isLogged: boolean = true; let isOpen: boolean = false; \",\"Array:一种用于存储多个相同类型的值的数据结构。可以使用数组来组织和操作一组数据。\",\"声明数组的方式有两种：\",\"类型后缀表示法：\",\"使用方括号 [] 在变量类型后面表示数组。例如：\",\"let numbers: number[] = [1, 2, 3, 4, 5]; \",\"上述代码中，numbers 是一个由数字组成的数组。\",\"数组泛型表示法：\",\"使用数组泛型 Array<elementType> 表示数组。例如：\",\"let numbers: Array<number> = [1, 2, 3, 4, 5]; \",\"上述代码与前面的例子效果相同，都声明了一个由数字组成的数组。\",\"可以对数组进行各种操作，如访问元素、添加新元素、修改元素或获取数组的长度。以下是一些常见的数组操作示例：\",\"let numbers: number[] = [1, 2, 3]; // 访问元素 console.log(numbers[0]); // 输出：1 // 修改元素 numbers[1] = 4; console.log(numbers); // 输出：[1, 4, 3] // 添加元素 numbers.push(5); console.log(numbers); // 输出：[1, 4, 3, 5] // 获取数组长度 console.log(numbers.length); // 输出：4 \",\"此外，还可以使用数组的各种内置方法，如 map()、filter()、reduce() 等，来对数组进行进一步的操作和转换。\",\"总结一下，数组是 TypeScript 中用于存储多个相同类型值的数据结构。可以使用类型后缀或数组泛型声明数组类型，并使用各种操作和方法对数组进行操作。\",\"symbol：表示唯一且不可变的值，用于创建对象属性的键。例如：\",\"let id: symbol = Symbol(\\\"id\\\"); let obj = { [id]: \\\"unique-id\\\" }; \",\"bigint：表示任意精度的整数，可以处理超出 JavaScript 数字类型范围的大整数。例如：\",\"let bigNumber: bigint = BigInt(9007199254740991); let hugeNumber: bigint = 9007199254740991n; \",\"tuple:是 TypeScript 中的一种特殊数组类型，它允许我们定义一个固定长度且每个元素类型可以不同的数组。\",\"元组使用 [] 来表示，并在其中指定每个元素的数据类型。例如：\",\"let person: [string, number, boolean] = [\\\"Alice\\\", 25, true]; \",\"上述代码中，person 是一个元组，其中包含三个元素，分别是一个字符串、一个数字和一个布尔值。元组的每个元素按照定义时的顺序进行访问。\",\"我们可以通过索引来访问元组的元素。例如：\",\"console.log(person[0]); // 输出 \\\"Alice\\\" console.log(person[1]); // 输出 25 console.log(person[2]); // 输出 true \",\"我们还可以对元组的元素进行解构赋值，将元素依次赋值给多个变量。例如：\",\"let [name, age, isActive] = person; console.log(name); // 输出 \\\"Alice\\\" console.log(age); // 输出 25 console.log(isActive); // 输出 true \",\"需要注意的是，元组的长度是固定的，并且每个元素的数据类型必须与定义时指定的类型一致。当我们访问元组中不存在的索引或使用错误的数据类型时，TypeScript 编译器会给出相应的错误提示。\",\"enum: TypeScript 中的一种数据类型，用于定义一组具有名称和相应值的常量集合。枚举可以为一组相关的常量赋予容易记忆的名字，提高代码的可读性和可维护性。\",\"要定义一个枚举，可以使用 enum 关键字，后面跟随枚举名称和花括号包裹的常量列表。每个常量都由一个名称和可选的初始值组成。例如：\",\"enum Direction { Up = 1, Down, Left, Right } \",\"在上述示例中，我们定义了一个名为 Direction 的枚举，其中包含了四个常量：Up、Down、Left 和 Right。在此枚举中，我们给第一个常量 Up 显式地指定了初始值为 1，后续的常量会自动递增，默认情况下从 0 开始递增。\",\"我们可以通过枚举的名称和常量名来访问枚举的成员。例如：\",\"let direction: Direction = Direction.Left; console.log(direction); // 输出 2 let oppositeDirection: Direction = Direction.Right; console.log(oppositeDirection); // 输出 3 \",\"枚举的成员可以通过值或名称进行访问。在上述示例中，Direction.Left 的值是 2，所以 direction 的值为 2。\",\"枚举还可以通过值来获取对应的名称。例如：\",\"console.log(Direction[1]); // 输出 \\\"Up\\\" console.log(Direction[3]); // 输出 \\\"Right\\\" \",\"any:表示变量可以具有任意类型的值。当我们将一个变量标记为 any 类型时，就相当于告诉 TypeScript 编译器可以对该变量的类型不进行检查，从而允许我们对它赋予任意类型的值，以及在不进行类型检查的情况下执行各种操作。\",\"使用 any 类型可以在需要灵活性的场景下使用，比如以下情况：\",\"当我们不确定变量的类型，或者它的类型可能是多种类型之一时。\",\"当我们需要与 JavaScript 代码进行交互，其中的值类型不受 TypeScript 类型系统的约束时。\",\"当我们使用动态类型的库或框架时，其返回值类型可能是不确定的。\",\"然而，需要注意的是，过度地使用 any 类型可能会破坏 TypeScript 的类型检查机制，导致潜在的类型错误无法被发现。因此，在编写 TypeScript 代码时，应尽量避免过度使用 any 类型，而是尽量明确地指定变量的具体类型，并利用 TypeScript 的类型系统来提供静态类型检查的好处。\",\"如果我们不希望禁用类型检查，但仍然需要处理不确定类型的值，可以使用更精确的类型，如联合类型（Union Types）或泛型（Generics）。这些类型可以提供更好的类型安全性和代码可读性。\",\"void:一种表示函数没有返回值的类型。当一个函数被标注为 void 类型时，意味着该函数执行结束后没有任何返回值。\",\"例如，下面是一个返回类型为 void 的函数的示例：\",\"function greet(): void { console.log(\\\"Hello!\\\"); } \",\"在上述示例中，greet 函数没有任何返回语句，因此其返回类型被指定为 void。\",\"当使用 void 类型来声明函数的返回类型时，我们告诉 TypeScript 编译器该函数不会返回任何值。如果在具有 void 返回类型的函数中尝试使用 return 语句返回一个值，TypeScript 将发出类型错误。\",\"除了函数的返回类型，void 还可以用作变量的类型注解。当将一个变量声明为 void 类型时，它只能被赋予 undefined 或 null，不能赋值为其他任意值。\",\"never:是一种表示永远不会发生的类型。它通常在以下两个场景中使用：\",\"函数的返回类型：当一个函数永远不会返回任何值（包括显式的返回语句、抛出异常或进入无限循环等情况）时，可以将该函数的返回类型标注为 never。例如：\",\"function throwError(message: string): never { throw new Error(message); } function infiniteLoop(): never { while (true) { // 执行无限循环 } } \",\"在上面的例子中，throwError 函数抛出了一个异常，而 infiniteLoop 函数进入了一个无限循环。这些函数永远不会返回，因此它们的返回类型被指定为 never。\",\"永远不会有可达的终点：当一个函数存在无法到达的终点（例如，位于无限循环之后的代码）时，可以将该代码的类型标注为 never。例如：\",\"function unreachableCode(): never { while (true) { // 执行无限循环 } console.log(\\\"This code is unreachable.\\\"); } \",\"在上述例子中，由于 while 循环是无限的，因此循环后面的 console.log 语句永远不会执行。因此，这段代码被标注为 never 类型。\",\"null和undefined: null 和 undefined 是特殊的值，用于表示缺少值或没有定义的情况。\",\"null 表示一个被赋予了空值的变量。它是一个 JavaScript 对象，可以用来明确指示某个变量没有值。例如：\",\"let myVariable: null = null; \",\"上述代码中，myVariable 被赋值为 null，表示该变量当前没有有效值。\",\"undefined 表示一个未定义的值或变量。它表示变量存在，但尚未被赋予具体的值。例如：\",\"let myVariable: undefined = undefined; \",\"上述代码中，myVariable 被赋值为 undefined，表示该变量尚未被赋予任何值。\",\"在实际使用中，null 和 undefined 有不同的用途和含义：\",\"null 通常用于主动将变量设置为空值，或作为函数的返回值来表示缺少值。\",\"undefined 则通常表示变量尚未初始化，或者对象中不存在某个属性。\",\"此外，TypeScript 还有一个独立的类型 null 和 undefined，它们可以用作变量的类型注解：\",\"let myVariable: null = null; let anotherVariable: undefined = undefined; \",\"需要注意的是，默认情况下，TypeScript 变量的类型是可以为 null 或 undefined 的，可以使用联合类型 null | undefined 来明确表示一个变量的类型可以为这两种值：\",\"let myVariable: null | undefined = null; \",\"Object: 一个内置的基础类型或构造函数。它用于表示任意对象类型。\",\"Object 构造函数：\",\"在 JavaScript 中，Object 是一个内置的构造函数，可以用来创建一个新的对象实例。例如：\",\"const obj = new Object(); \",\"上述代码中，使用 new Object() 创建了一个空对象 obj。\",\"Object 构造函数也可以接受一个参数，该参数将被用作新对象的属性和值。例如：\",\"const obj = new Object({ key: 'value' }); \",\"上述代码中，创建了一个新对象 obj，并向其添加了键值对 { key: 'value' }。\",\"Object 类型：\",\"在 TypeScript 中，Object 也是一种类型，用于表示任意对象类型。例如：\",\"const obj: Object = { key: 'value' }; \",\"上述代码中，变量 obj 被标注为类型为 Object 的对象。\",\"需要注意的是，使用 Object 类型时，它是一个非常宽松的类型，可以表示任何对象类型，但无法进行对象具体属性的操作。如果要具体描述对象的属性和类型，应该使用更具体的类型注解或接口。\",\"interface MyObject { key: string; } const obj: MyObject = { key: 'value' }; \",\"在上述代码中，使用接口 MyObject 来定义了 obj 对象的属性类型。\",\"Object 可以表示一个新创建的对象实例，也可以用作类型注解表示任意对象类型。但由于其宽松的特性，当需要对对象进行具体操作时，更好地指定对象的具体类型或使用接口进行描述。\"]},\"311\":{\"h\":\"变量\",\"t\":[\"变量是用于存储数据的名称。通过声明变量，我们可以在程序中使用和操作这些数据。\",\"声明\",\"声明变量的语法如下：\",\"let variableName: dataType = value; \",\"其中，variableName 是变量的名称，dataType 是变量的数据类型，value 是变量的初始值（可选）。\",\"以下是一些示例：\",\"let x: number; // 声明一个名为 x 的变量，类型为 number x = 5; // 赋值初始值为 5 let message: string = \\\"Hello\\\"; // 声明一个名为 message 的变量，类型为 string，并赋值为 \\\"Hello\\\" const PI: number = 3.14; // 声明一个名为 PI 的常量，类型为 number，并赋值为 3.14 let isActive: boolean = true; // 声明一个名为 isActive 的变量，类型为 boolean，并赋值为 true let numbers: number[] = [1, 2, 3]; // 声明一个名为 numbers 的变量，类型为 number 数组，并赋值为 [1, 2, 3] \",\"需要注意以下几点：\",\"在 TypeScript 中，通过使用 let 关键字可以声明可变的变量，而使用 const 关键字可以声明不可变的常量。\",\"可以在声明变量时直接给变量赋初始值，也可以在后续的代码中给变量赋值。\",\"TypeScript 是一种静态类型语言，每个变量都必须有一个明确的类型。可以使用基本数据类型（如 number、string、boolean）或自定义的类型来声明变量。\",\"TypeScript 的类型推断功能可以根据初始值自动推断变量的类型，因此可以省略变量的类型声明。\",\"变量的作用域规则与 JavaScript 相同，在特定的作用域内声明的变量只在该作用域内可见。\",\"作用域规则\",\"作用域规则是指在程序中定义变量时，这些变量的可见性和访问范围。在 TypeScript 中，有以下几种作用域规则：\",\"全局作用域（Global Scope）：\",\"全局作用域是整个程序范围内可见的作用域，可以在程序的任何位置访问全局作用域中定义的变量。\",\"在 TypeScript 中，全局作用域通常是在文件的顶层定义的变量。\",\"函数作用域（Function Scope）：\",\"函数作用域是在函数内部定义的变量的作用域范围。\",\"在函数作用域中定义的变量只能在该函数内部可见，无法在函数外部访问。\",\"使用 let 或 const 关键字在函数内部声明的变量具有块级作用域。\",\"块级作用域（Block Scope）：\",\"块级作用域是在大括号 {} 内定义的变量的作用域范围。\",\"块级作用域可以是函数、循环语句或条件语句中的大括号。\",\"使用 let 或 const 关键字在块级作用域内声明的变量只在该块级作用域内可见，超出该块级作用域后不可访问。\",\"在 TypeScript 中，遵循以下作用域规则：\",\"如果在内部作用域中定义了一个与外部作用域中相同名称的变量，则在内部作用域中该变量会覆盖外部作用域中的同名变量。\",\"变量在声明的位置之前是不可访问的，这被称为变量提升（Hoisting）。\",\"在嵌套的作用域中，内部作用域可以访问外部作用域中定义的变量，但外部作用域无法访问内部作用域中定义的变量。\",\"以下是一些示例来说明作用域规则：\",\"let globalVariable:string = \\\"Global\\\"; // 全局作用域 function foo():void { let functionVariable:string = \\\"Function\\\"; // 函数作用域 console.log(globalVariable); // 可以访问全局作用域中的变量 if (true) { let blockVariable:string = \\\"Block\\\"; // 块级作用域 console.log(functionVariable); // 可以访问函数作用域中的变量 } console.log(blockVariable); // 错误，无法访问块级作用域中的变量 } foo(); \"]},\"312\":{\"h\":\"接口和 类\",\"t\":[\"接口（Interface）和类（Class）是两个重要的概念，用于定义对象的结构和行为。\",\"接口（Interface）：\",\"接口是一种抽象的数据类型，用于描述对象的结构。它定义了对象应该具有的属性和方法，但并不提供实现细节。\",\"接口的声明使用 interface 关键字，可以包含属性、方法或索引签名等。通过实现（implement）接口，我们可以确保对象符合特定的结构。\",\"以下是一个接口的示例：\",\"interface Person { name: string; age: number; greet(): void; } class Student implements Person { name: string; age: number; constructor(name: string, age: number) { this.name = name; this.age = age; } greet() { console.log(`Hello, my name is ${this.name} and I'm ${this.age} years old.`); } } \",\"在上面的例子中，我们定义了一个 Person 接口，它具有 name 和 age 属性以及 greet 方法。然后，我们创建了一个 Student 类，并使用 implements 关键字来实现 Person 接口。Student 类必须提供 name、age 属性和 greet 方法的具体实现。\",\"类（Class）： 类是面向对象编程的基本概念，它是创建对象的蓝图或模板。类定义了对象的属性和行为，并提供了用于创建和操作对象的方法。 类的声明使用 class 关键字，可以包含构造函数、属性、方法等。\",\"以下是一个类的示例：\",\"class Rectangle { width: number; height: number; constructor(width: number, height: number) { this.width = width; this.height = height; } getArea(): number { return this.width * this.height; } } const rect = new Rectangle(5, 3); console.log(rect.getArea()); // 输出：15 \",\"在上面的例子中，我们定义了一个 Rectangle 类，它具有 width 和 height 属性，以及一个计算面积的 getArea 方法。通过 new 关键字创建了一个 Rectangle 类的实例，并调用了它的 getArea 方法。\",\"接口和类在 TypeScript 中经常一起使用，接口用于定义对象的结构，而类用于实现对象的行为。通过这种方式，我们可以明确指定对象应该具备的结构和行为，提高代码的可读性和可维护性。\",\"封装\",\"封装（Encapsulation）是面向对象编程的一项重要原则，它将数据和操作封装在一个单元内部，同时隐藏了内部实现的细节，只暴露出对外提供的接口。封装通过将相关的数据和方法组织在一起，提高了代码的可维护性、可读性和安全性。\",\"在 TypeScript 中，可以使用访问修饰符（Access Modifiers）来实现封装，主要有以下三种访问修饰符：\",\"public：默认的访问修饰符，表示属性或方法是公共的，可以被该类内部、子类和其他类访问。\",\"private：私有访问修饰符，表示属性或方法只能在该类内部访问，其他类和子类都不可以访问。\",\"protected：受保护的访问修饰符，表示属性或方法可以在该类内部和子类中访问，但不能在其他类中访问。\",\"以下是一个使用访问修饰符实现封装的示例：\",\"class Person { private name: string; protected age: number; constructor(name: string, age: number) { this.name = name; this.age = age; } public introduce(): void { console.log(`My name is ${this.name} and I'm ${this.age} years old.`); } } class Student extends Person { private studentId: number; constructor(name: string, age: number, studentId: number) { super(name, age); this.studentId = studentId; } public study(): void { console.log(`Student ${this.name} with ID ${this.studentId} is studying.`); } } const person = new Person(\\\"Alice\\\", 25); person.introduce(); // 输出：My name is Alice and I'm 25 years old. // 下面的代码在类外部会报错，因为 name 是私有属性 // console.log(person.name); const student = new Student(\\\"Bob\\\", 20, 12345); student.introduce(); // 输出：My name is Bob and I'm 20 years old. student.study(); // 输出：Student Bob with ID 12345 is studying. // 下面的代码在类外部会报错，因为 age 是受保护属性 // console.log(student.age); \",\"在上面的例子中，我们定义了一个 Person 类和一个 Student 类。Person 类有一个私有的 name 属性和一个受保护的 age 属性，同时有一个公共的 introduce 方法。Student 类继承自 Person 类，并添加了一个私有的 studentId 属性和一个公共的 study 方法。\",\"通过使用不同的访问修饰符，我们可以限制属性和方法的访问范围，确保数据的安全性和一致性。对外只暴露必要的接口，提高代码的可靠性和可维护性。\",\"继承\",\"继承是面向对象编程中的一种重要机制，它允许一个类继承另一个类的属性和方法。通过继承，子类可以复用父类的代码，并且可以添加自己的额外属性和方法。\",\"使用 extends 关键字来实现继承。\",\"class Animal { name: string; constructor(name: string) { this.name = name; } speak(): void { console.log(`${this.name} is making a sound.`); } } class Dog extends Animal { breed: string; constructor(name: string, breed: string) { super(name); this.breed = breed; } bark(): void { console.log(`${this.name} is barking.`); } } const dog = new Dog(\\\"Buddy\\\", \\\"Golden Retriever\\\"); dog.speak(); // 输出：Buddy is making a sound. dog.bark(); // 输出：Buddy is barking. \",\"在上面的例子中，我们定义了一个 Animal 类，它有一个 name 属性和一个 speak 方法。然后，我们创建了一个 Dog 类，并使用 extends 关键字将其继承自 Animal 类。Dog 类还有一个额外的 breed 属性和一个 bark 方法。我们通过 super 关键字调用了父类的构造函数，确保 name 属性得到正确初始化。\",\"多态\",\"多态是面向对象编程的一个重要特性，它允许不同的对象对相同的消息作出不同的响应。在 TypeScript 中，多态性通常与继承一起使用。 多态通过使用父类类型的引用来引用子类对象，然后根据实际的对象类型来调用相应的方法。\",\"class Animal { speak(): void { console.log(\\\"The animal makes a sound.\\\"); } } class Dog extends Animal { speak(): void { console.log(\\\"The dog barks.\\\"); } } class Cat extends Animal { speak(): void { console.log(\\\"The cat meows.\\\"); } } const animal: Animal = new Animal(); const dog: Animal = new Dog(); const cat: Animal = new Cat(); animal.speak(); // 输出：The animal makes a sound. dog.speak(); // 输出：The dog barks. cat.speak(); // 输出：The cat meows. \",\"在上面的例子中，我们定义了一个 Animal 类和它的两个子类 Dog 和 Cat。它们都有一个 speak 方法。通过将子类的实例赋值给父类类型的引用，我们可以调用相应子类的方法。\"]},\"313\":{\"h\":\"函数\",\"t\":[\"函数（Function）是一段可重复执行的代码块，它接收输入（参数），并返回一个输出结果。函数可以封装特定的功能，提高代码的可读性、可维护性和可重用性。\",\"在 TypeScript 中，我们可以通过以下方式定义和使用函数：\",\"函数声明（Function Declaration）： 使用 function 关键字来声明一个函数，并指定函数名、参数列表和返回类型（可选）。\",\"function add(a: number, b: number): number { return a + b; } const result = add(3, 5); console.log(result); // 输出：8 \",\"函数表达式（Function Expression）： 将函数赋值给一个变量，常用的方式是使用匿名函数。\",\"const add = function(a: number, b: number): number { return a + b; }; const result = add(3, 5); console.log(result); // 输出：8 \",\"箭头函数（Arrow Function）： 使用箭头函数的简洁语法来定义函数，适用于只有一个表达式的函数体。\",\"const add = (a: number, b: number): number => a + b; const result = add(3, 5); console.log(result); // 输出：8 \",\"可选参数和默认参数： 在函数声明中，使用问号 ? 表示可选参数，可以在调用函数时省略；使用等号 = 来指定默认参数值。\",\"function greet(name: string, message: string = \\\"Hello\\\"): void { console.log(`${message}, ${name}!`); } greet(\\\"Alice\\\"); // 输出：Hello, Alice! greet(\\\"Bob\\\", \\\"Hi\\\"); // 输出：Hi, Bob! \",\"剩余参数： 使用三个点 ... 来表示剩余参数，将多个参数收集为一个数组。\",\"function sum(...numbers: number[]): number { return numbers.reduce((acc, curr) => acc + curr, 0); } const result = sum(1, 2, 3, 4, 5); console.log(result); // 输出：15 \",\"函数可以执行任意的操作，包括处理数据、调用其他函数、控制逻辑流程等。在 TypeScript 中，可以为函数指定参数类型和返回类型，增加代码的可靠性和可读性。函数还可以作为参数传递给其他函数，或者作为返回值返回，实现更复杂的功能和灵活的代码组织。\",\"特性和方法\",\"递归函数（Recursive Function）： 函数可以调用自身，这种函数称为递归函数。递归函数常用于解决需要重复执行相同操作的问题，例如计算阶乘、斐波那契数列等。\",\"function factorial(n: number): number { if (n === 0) { return 1; } return n * factorial(n - 1); } const result = factorial(5); console.log(result); // 输出：120 \",\"高阶函数（Higher-Order Function）： 函数可以接收一个或多个函数作为参数，或者返回一个函数，这样的函数称为高阶函数。高阶函数可以用于实现函数的组合、延迟执行、装饰器模式等。\",\"function multiplyBy(factor: number): (value: number) => number { return function(value: number): number { return value * factor; }; } const double = multiplyBy(2); const triple = multiplyBy(3); console.log(double(5)); // 输出：10 console.log(triple(5)); // 输出：15 \",\"匿名函数（Anonymous Function）： 在不需要给函数命名时，可以使用匿名函数来定义函数。匿名函数通常会作为其他函数的参数或立即执行。\",\"// 作为函数参数 const numbers = [1, 2, 3, 4, 5]; numbers.forEach(function(number) { console.log(number); }); // 立即执行 (function() { console.log(\\\"I'm an immediately invoked function expression (IIFE).\\\"); })(); \",\"委托和回调函数（Delegation and Callback Functions）： 函数可以作为另一个函数的委托或回调函数，实现代码的复用和灵活性。委托函数是将特定的功能委托给其他函数来实现，回调函数是在某个操作完成后被调用的函数。\",\"function printUpperCase(value: string): void { console.log(value.toUpperCase()); } function processString(str: string, callback: (value: string) => void): void { // 其他处理操作... callback(str); } processString(\\\"hello\\\", printUpperCase); // 输出：HELLO \",\"这些是函数的一些重要特性和用法，通过合理运用这些特性，可以提高代码的灵活性、可复用性和可维护性。\"]},\"314\":{\"h\":\"枚举\",\"t\":[\"枚举（Enum）是一种用于定义命名常量集合的数据类型。它可以为数字、字符串或混合类型的常量赋予一个易于记忆和使用的名称。使用枚举可以使代码更加清晰、可读，并且可以减少错误。\",\"在 TypeScript 中，可以通过以下方式定义和使用枚举：\",\"enum Direction { North, South, East, West, } const myDirection: Direction = Direction.North; console.log(myDirection); // 输出：0 // 使用枚举值进行逻辑判断 if (myDirection === Direction.North) { console.log(\\\"Go north!\\\"); } \",\"在上面的例子中，我们定义了一个名为 Direction 的枚举类型，其中包含了四个枚举成员：North、South、East 和 West。默认情况下，枚举成员从0开始自动编号。然后，我们可以使用枚举类型来声明变量 myDirection，并将其赋值为 Direction.North。最后，我们可以通过比较枚举值来进行条件判断。\",\"除了默认编号，我们还可以手动指定枚举成员的值：\",\"enum Direction { North = 1, South = 2, East = 3, West = 4, } console.log(Direction.North); // 输出：1 console.log(Direction.West); // 输出：4 \",\"此外，枚举还有一些其他的特性：\",\"可以通过枚举成员的名称获取对应的值，也可以通过值获取对应的名称。例如：Direction[1] 返回 \\\"North\\\"，Direction[\\\"West\\\"] 返回 4。\",\"枚举成员可以包含字符串或数字值。例如：enum Color { Red = \\\"RED\\\", Green = \\\"GREEN\\\", Blue = \\\"BLUE\\\" }。\",\"可以使用 const 关键字将枚举对象标记为常量枚举，这样编译后的代码中不会生成实际的枚举对象，而是直接使用枚举成员的值。\",\"const enum Direction { North, South, East, West, } console.log(Direction.North); // 编译后的输出：0 \",\"通过使用枚举，我们可以更好地组织和管理常量，使代码更可读、可维护。枚举在处理一组相关的常量时非常有用，并且可以通过名称来识别具体的常量值，避免了硬编码和错误。\",\"特性与方法\",\"指定部分枚举成员的值： 在枚举中，可以手动为某些枚举成员指定值，而不必为所有成员都赋值。这种情况下，后续的成员会自动递增。\",\"enum Direction { North = 3, South, // 自动递增为 4 East = 10, West, // 自动递增为 11 } console.log(Direction.North); // 输出：3 console.log(Direction.South); // 输出：4 console.log(Direction.East); // 输出：10 console.log(Direction.West); // 输出：11 \",\"反向映射： 枚举成员名称与成员值之间是双向映射的。因此，可以通过枚举成员的名称获取对应的值，也可以通过值获取对应的名称。\",\"enum Direction { North = 1, South = 2, East = 3, West = 4, } const myDirection: Direction = Direction.North; console.log(myDirection); // 输出：1 const directionName: string = Direction[2]; console.log(directionName); // 输出：\\\"South\\\" \",\"枚举的使用场景： 枚举在以下场景中特别有用：\",\"表示一组相关的常量，例如表示方向、颜色、状态等。\",\"限制变量的取值范围，避免错误或非法值的出现。\",\"方便进行逻辑判断和条件分支。\",\"enum HttpStatus { OK = 200, BadRequest = 400, Unauthorized = 401, NotFound = 404, } function handleResponse(statusCode: HttpStatus): void { if (statusCode === HttpStatus.OK) { console.log(\\\"Request succeeded.\\\"); } else if (statusCode === HttpStatus.BadRequest) { console.log(\\\"Bad request.\\\"); } else { console.log(\\\"An error occurred.\\\"); } } handleResponse(HttpStatus.OK); // 输出：\\\"Request succeeded.\\\" \",\"这些是枚举的一些特性和用法。通过合理使用枚举，可以让代码更加清晰、易读，并且减少错误。枚举是在 TypeScript 和其他编程语言中常见的特性之一，可以提高代码的可维护性和可读性。\"]},\"315\":{\"h\":\"类型注解\",\"t\":[\"类型注解是在 TypeScript 中用来声明变量、参数、函数返回值等的类型信息。通过添加类型注解，你可以告诉编译器应该将相应的值视为特定的类型，从而在编译时进行类型检查。\",\"以下是一些常见的类型注解示例：\",\"基本类型注解：\",\"let name: string = \\\"Alice\\\"; let age: number = 30; let isStudent: boolean = true; \",\"数组类型注解：\",\"let numbers: number[] = [1, 2, 3, 4]; let names: string[] = [\\\"Alice\\\", \\\"Bob\\\", \\\"Charlie\\\"]; \",\"对象类型注解：\",\"let person: { name: string; age: number } = { name: \\\"Alice\\\", age: 30, }; \",\"函数类型注解：\",\"function add(x: number, y: number): number { return x + y; } \",\"类型注解的参数和返回值：\",\"const greet: (name: string) => void = (name) => { console.log(`Hello, ${name}!`); }; \",\"在上述示例中，我们使用:符号来指定变量或函数参数的类型，并使用箭头=>来指定函数的返回值类型。这些注解可以帮助编译器检测类型错误，并提供代码补全和类型推断的功能。\",\"需要注意的是，TypeScript 的类型注解是可选的，因为它具有类型推导的能力。如果没有显式添加类型注解，TypeScript 会根据上下文自动推导变量的类型。但是为了增加代码的可读性和明确性，建议在需要时添加适当的类型注解。\"]},\"316\":{\"h\":\"类型推断\",\"t\":[\"类型推断是 TypeScript 的一项功能，它允许编译器根据赋值语句的右侧表达式推导出变量的类型，而无需显式地指定类型注解。\",\"以下是一些类型推断的示例：\",\"基本类型推断：\",\"let name = \\\"Alice\\\"; // 推断 name 为 string 类型 let age = 30; // 推断 age 为 number 类型 let isStudent = true; // 推断 isStudent 为 boolean 类型 \",\"数组类型推断：\",\"let numbers = [1, 2, 3, 4]; // 推断 numbers 为 number[] 类型 let names = [\\\"Alice\\\", \\\"Bob\\\", \\\"Charlie\\\"]; // 推断 names 为 string[] 类型 \",\"对象类型推断：\",\"let person = { name: \\\"Alice\\\", age: 30, }; // 推断 person 为 { name: string, age: number } 类型 \",\"函数类型推断：\",\"function add(x: number, y: number) { return x + y; } // 推断 add 为 (x: number, y: number) => number 类型 \",\"类型推断与联合类型：\",\"let value; // 推断 value 为 any 类型 value = 123; // 推断 value 为 number 类型 value = \\\"hello\\\"; // 推断 value 为 string 类型 \",\"类型推断可以简化代码，提高开发效率，并使代码更具可读性。TypeScript 编译器会根据赋值表达式的右侧推导出变量的类型，并在后续使用中进行类型检查。\",\"需要注意的是，在某些情况下，编译器可能无法推断出准确的类型，或者推断出的类型与开发者的预期不一致。这时可以通过显式添加类型注解来指定变量的类型，增加代码的清晰度。\"]},\"317\":{\"h\":\"类型守卫\",\"t\":[\"类型守卫（Type Guards）是 TypeScript 中的一种技术，用于在运行时检查变量的类型，并根据类型进行不同的操作或逻辑分支。\",\"通过类型守卫，我们可以在代码中判断一个变量是否具有特定的类型，然后在条件成立的情况下，可以安全地使用该类型的属性和方法，或者执行特定类型的操作。这可以避免类型错误和运行时异常。\",\"以下是几种常见的类型守卫方式：\",\"typeof 类型守卫：\",\"function printValue(value: string | number) { if (typeof value === \\\"string\\\") { console.log(value.toUpperCase()); } else { console.log(value.toFixed(2)); } } \",\"instanceof 类型守卫：\",\"class Animal { name: string; constructor(name: string) { this.name = name; } } class Dog extends Animal { bark() { console.log(\\\"Woof!\\\"); } } function playWithAnimal(animal: Animal) { if (animal instanceof Dog) { animal.bark(); } else { console.log(\\\"Cannot play with this animal.\\\"); } } \",\"自定义类型谓词守卫：\",\"interface Bird { fly(): void; } interface Fish { swim(): void; } function isBirdOrFish(animal: Bird | Fish): animal is Bird { return \\\"fly\\\" in animal; } function doAction(animal: Bird | Fish) { if (isBirdOrFish(animal)) { animal.fly(); } else { animal.swim(); } } \",\"类型守卫可以与 TypeScript 的联合类型和交叉类型结合使用，帮助我们处理复杂的类型逻辑。它提供了更精确的类型检查，在开发过程中对代码的稳定性和可维护性有很大帮助。\"]},\"318\":{\"h\":\"自定义类型\",\"t\":[\"在 TypeScript 中，你可以使用 type 或 interface 关键字来创建自定义类型。\",\"使用 type 关键字创建自定义类型：\",\"type Point = { x: number; y: number; }; let p: Point = { x: 1, y: 2 }; \",\"使用 interface 关键字创建自定义类型：\",\"interface Point { x: number; y: number; } let p: Point = { x: 1, y: 2 }; \",\"无论是使用 type 还是 interface，它们都可以用来描述对象的结构，包括属性和它们的类型。你可以根据需要选择其中一种方式。\",\"除了描述对象类型外，你还可以使用自定义类型来描述函数类型、联合类型、交叉类型等复杂的类型。\",\"例如，使用自定义类型来描述函数类型：\",\"type AddFunc = (x: number, y: number) => number; let add: AddFunc = (x, y) => x + y; \",\"使用自定义类型来描述联合类型：\",\"type Result = number | string; let res: Result; res = 10; // 合法 res = \\\"Hello\\\"; // 合法 res = true; // 不合法，因为 true 不是 Result 类型的一部分 \",\"使用自定义类型来描述交叉类型：\",\"type Shape = { color: string } & { width: number }; let shape: Shape = { color: \\\"red\\\", width: 100 }; \",\"通过自定义类型，你可以根据需求创建更加具体和可读性强的类型，使代码更易于理解和维护。\"]},\"319\":{\"h\":\"高级类型\",\"t\":[\"TypeScript 提供了许多高级类型，帮助你处理复杂的类型逻辑和增强类型系统的表达能力。下面介绍一些常见的高级类型：\",\"联合类型（Union Types）：用 | 运算符将多个类型组合成一个联合类型，表示变量可以是其中任意一个类型。\",\"let value: string | number; value = \\\"Hello\\\"; // 合法 value = 10; // 合法 value = true; // 不合法，因为 true 不是 string 或 number 类型的一部分 \",\"交叉类型（Intersection Types）：用 & 运算符将多个类型组合成一个交叉类型，表示变量需要同时具备这些类型的特征。\",\"interface A { propA: number; } interface B { propB: string; } type C = A & B; let obj: C = { propA: 1, propB: \\\"Hello\\\" }; // 合法 \",\"类型别名（Type Aliases）：使用 type 关键字给现有类型起一个别名，方便重复使用或提高可读性。\",\"type Age = number; type Person = { name: string; age: Age; }; let p: Person = { name: \\\"Alice\\\", age: 25 }; \",\"字面量类型（Literal Types）：使用字符串字面量、数字字面量或布尔字面量来约束变量的取值范围。\",\"let mode: \\\"light\\\" | \\\"dark\\\"; mode = \\\"light\\\"; // 合法 mode = \\\"dark\\\"; // 合法 mode = \\\"dim\\\"; // 不合法，因为只能是 \\\"light\\\" 或 \\\"dark\\\" \",\"可辨识联合（Discriminated Union）：在联合类型中，使用共同的属性来区分不同的类型，有助于进行条件判断和类型缩小。\",\"interface Square { kind: \\\"square\\\"; sideLength: number; } interface Circle { kind: \\\"circle\\\"; radius: number; } type Shape = Square | Circle; function area(shape: Shape): number { if (shape.kind === \\\"square\\\") { return shape.sideLength ** 2; } else if (shape.kind === \\\"circle\\\") { return Math.PI * shape.radius ** 2; } return 0; } \",\"映射类型（Mapped Types）：使用 keyof 和 in 关键字来创建新的类型，根据现有类型中的属性生成新的属性集合\",\"type Flags = { option1: boolean; option2: boolean; option3: boolean; }; type NullableFlags = { [K in keyof Flags]: boolean | null }; let flags: NullableFlags = { option1: true, option2: null, option3: false, }; \",\"条件类型（Conditional Types）：根据条件选择不同的类型进行定义，可以使用 extends 和 infer 关键字\",\"type NonNullable<T> = T extends null | undefined ? never : T; type Foo = string | null; type Bar = NonNullable<Foo>; // Bar 的类型为 string \",\"索引类型（Index Types）：通过使用索引签名来获取或操作对象的属性类型\",\"interface Person { name: string; age: number; address: string; } type PersonKeys = keyof Person; // \\\"name\\\" | \\\"age\\\" | \\\"address\\\" type PersonType = Person[keyof Person]; // string | number | string \",\"可索引类型（Indexable Types）：用于描述对象或类数组的索引类型和元素类型。\",\"interface StringArray { [index: number]: string; } let arr: StringArray = [\\\"Hello\\\", \\\"World\\\"]; let greeting: string = arr[0]; interface Dictionary<T> { [key: string]: T; } let dict: Dictionary<number> = { a: 1, b: 2, c: 3, }; \",\"高级类型可以帮助你更精确地描述和操作类型，提高代码的可靠性和可读性。希望这个回答对你有帮助！如果你有其他问题，请随时提问。\"]},\"320\":{\"h\":\"泛型\",\"t\":[\"泛型（Generics）是 TypeScript 中的一项重要特性，它允许我们在定义函数、类或接口时使用类型参数，从而增加代码的灵活性和复用性。\",\"泛型函数（Generic Functions）：使用 <T> 来定义类型参数，并在函数参数、返回值或函数体中使用该类型参数。\",\"function identity<T>(arg: T): T { return arg; } let result = identity<string>(\\\"Hello\\\"); // result 的类型为 string // 类型推断方式 let result2 = identity(42); // result2 的类型为 number \",\"泛型类（Generic Classes）：类定义中可以使用类型参数，在类的属性、方法或构造函数中使用该类型参数。\",\"class Box<T> { private value: T; constructor(value: T) { this.value = value; } getValue(): T { return this.value; } } let box = new Box<number>(42); let value = box.getValue(); // value 的类型为 number \",\"泛型接口（Generic Interfaces）：接口定义中也可以使用类型参数，用于约束接口的属性、方法或函数的参数和返回值类型。\",\"interface Pair<T, U> { first: T; second: U; } function getFirst<T, U>(pair: Pair<T, U>): T { return pair.first; } let pair: Pair<number, string> = { first: 42, second: \\\"Hello\\\" }; let firstValue = getFirst(pair); // firstValue 的类型为 number \",\"泛型约束（Generic Constraints）：使用 extends 关键字对类型参数进行约束，限制其必须满足指定的条件。\",\"interface Lengthwise { length: number; } function printLength<T extends Lengthwise>(obj: T): void { console.log(obj.length); } printLength(\\\"Hello\\\"); // 输出字符长度 5 \",\"泛型可以提高代码的可复用性和类型安全性，使我们可以编写更通用且灵活的代码。使用泛型，我们可以在一些需要多样化类型支持的场景下，减少代码的冗余并增加代码的可读性。\"]},\"321\":{\"h\":\"高级类型操作符\",\"t\":[\"在 TypeScript 中，有一些高级类型操作符可以帮助我们进行类型操作和转换。以下是一些常见的高级类型操作符：\",\"keyof：获取一个类型的所有属性名组成的联合类型。\",\"interface Person { name: string; age: number; } type PersonKey = keyof Person; // \\\"name\\\" | \\\"age\\\" \",\"typeof：获取一个值或变量的类型。\",\"const message = \\\"Hello\\\"; type MessageType = typeof message; // string function add(a: number, b: number): number { return a + b; } type AddFunctionType = typeof add; // (a: number, b: number) => number \",\"keyof typeof：获取一个对象的所有属性名组成的联合类型。\",\"const colors = { red: \\\"FF0000\\\", green: \\\"00FF00\\\", blue: \\\"0000FF\\\", }; type ColorKey = keyof typeof colors; // \\\"red\\\" | \\\"green\\\" | \\\"blue\\\" \",\"Omit：从一个类型中排除指定的属性。\",\"interface Person { name: string; age: number; address: string; } type PersonWithoutAge = Omit<Person, \\\"age\\\">; // { name: string; address: string; } \",\"Pick：从一个类型中选择指定的属性。\",\"interface Person { name: string; age: number; address: string; } type PersonNameAndAge = Pick<Person, \\\"name\\\" | \\\"age\\\">; // { name: string; age: number; } \",\"Exclude：从一个联合类型中排除指定的类型。\",\"type NumberOrString = number | string; type OnlyNumber = Exclude<NumberOrString, string>; // number \",\"Extract：从一个联合类型中提取指定的类型。\",\"type NumberOrString = number | string; type OnlyString = Extract<NumberOrString, string>; // string \",\"这些高级类型操作符可以帮助我们更灵活地操作和转换类型，使得代码更加简洁和可读。\"]},\"322\":{\"h\":\"异步编程\",\"t\":[\"异步编程是一种处理非阻塞操作的编程方式，使得程序能够在执行耗时的操作时不被阻塞，并能够同时执行其他任务。在 JavaScript/TypeScript 中，常用的异步编程方式包括回调函数、Promises、Async/Await 和事件监听等。\",\"回调函数（Callback Functions）：回调函数是一种将函数作为参数传递给另一个函数，并在操作完成后通过回调函数处理结果的方式。\",\"function fetchData(callback: (data: any) => void) { setTimeout(() => { const data = \\\"Response data\\\"; callback(data); }, 1000); } fetchData((data) => { console.log(data); // 处理返回的数据 }); \",\"Promises：Promise 是一种表示异步操作的对象，它可以处理异步操作成功和失败的情况，并提供链式调用的方式处理操作结果。\",\"function fetchData(): Promise<string> { return new Promise((resolve, reject) => { setTimeout(() => { const data = \\\"Response data\\\"; resolve(data); // 操作成功时调用 resolve // reject(new Error(\\\"Error message\\\")); // 操作失败时调用 reject }, 1000); }); } fetchData() .then((data) => { console.log(data); // 处理返回的数据 }) .catch((error) => { console.error(error); // 处理错误情况 }); \",\"Async/Await：使用 async/await 可以更清晰地编写异步代码，以同步的方式处理异步操作，使用 try/catch 来处理异常情况。\",\"async function fetchData(): Promise<string> { return new Promise((resolve, reject) => { setTimeout(() => { const data = \\\"Response data\\\"; resolve(data); // reject(new Error(\\\"Error message\\\")); }, 1000); }); } async function fetchDataAndProcess() { try { const data = await fetchData(); console.log(data); // 处理返回的数据 } catch (error) { console.error(error); // 处理错误情况 } } fetchDataAndProcess(); \",\"事件监听（Event Listening）：在某些情况下，可以通过事件监听的方式来处理异步操作的完成或状态改变。\",\"function fetchData() { setTimeout(() => { const data = \\\"Response data\\\"; document.dispatchEvent(new CustomEvent(\\\"dataReady\\\", { detail: data })); }, 1000); } document.addEventListener(\\\"dataReady\\\", (event: CustomEvent) => { console.log(event.detail); // 处理返回的数据 }); fetchData(); \",\"这些异步编程方式都有各自的优势和适用场景，选择合适的方式取决于具体的需求和情况。异步编程使得我们可以更高效地处理耗时的操作，提高程序的性能和用户体验。\"]},\"323\":{\"h\":\"迭代器和生成器\",\"t\":[\"迭代器（Iterator）和生成器（Generator）是 JavaScript/TypeScript 中用于处理集合和序列的重要概念。\",\"迭代器是一个对象，它提供一种方法来访问集合中的元素，而不需要了解底层集合的具体实现。迭代器通过实现 next() 方法返回一个包含 value 和 done 属性的对象，表示当前迭代的值和迭代是否已经结束。\",\"下面是一个简单的示例，展示如何创建和使用迭代器：\",\"const iterable = { values: [1, 2, 3, 4, 5], [Symbol.iterator]: function () { let index = 0; return { next: () => { if (index < this.values.length) { return { value: this.values[index++], done: false, }; } else { return { done: true, }; } }, }; }, }; for (const value of iterable) { console.log(value); // 依次输出 1, 2, 3, 4, 5 } \",\"生成器是一种用于定义迭代器的函数，可以通过执行生成器函数来生成一个迭代器对象。生成器函数使用 function* 声明，并使用 yield 关键字来指定每次迭代的返回值。生成器函数可以在迭代过程中被暂停和恢复，使得处理序列的逻辑更加灵活。\",\"下面是一个简单的示例，展示如何使用生成器函数创建迭代器：\",\"function* myGenerator() { yield 1; yield 2; yield 3; } const iterator = myGenerator(); console.log(iterator.next()); // { value: 1, done: false } console.log(iterator.next()); // { value: 2, done: false } console.log(iterator.next()); // { value: 3, done: false } console.log(iterator.next()); // { value: undefined, done: true } \",\"生成器函数可以接收参数，并且可以使用 yield* 来委托（delegate）迭代给另一个生成器函数。\",\"迭代器和生成器为处理集合和序列提供了一种更加简洁和可读性的方式。它们被广泛应用于 JavaScript/TypeScript 中的循环、遍历和异步编程等场景。\"]},\"324\":{\"h\":\"类装饰器\",\"t\":[\"类装饰器（Class Decorators）是 TypeScript 中一种特殊类型的装饰器，用于修改或扩展类的行为。类装饰器可以应用于类声明之前，通过 @ 符号后跟一个函数名来定义。\",\"类装饰器的函数接收一个参数，即要装饰的类的构造函数。在类装饰器的函数体内，可以对类的构造函数进行修改、替换或扩展，并返回一个新的构造函数，从而改变类的行为。\",\"下面是一个简单的示例，展示如何创建和使用类装饰器：\",\"function myClassDecorator(constructor: Function) { console.log(\\\"Class being decorated:\\\", constructor); } @myClassDecorator class MyClass { // 类的定义 } \",\"上述代码中，myClassDecorator 是一个类装饰器函数，它接收一个参数 constructor，代表被装饰的类的构造函数。在这个装饰器函数中，我们可以对类进行任意操作，例如打印构造函数或修改原型属性。\",\"类装饰器还可以接收其他参数，以便在装饰器内部进行配置。例如，可以创建一个接收参数的装饰器来指定类的元数据：\",\"function myClassDecorator(value: string) { return function (constructor: Function) { console.log(\\\"Metadata value:\\\", value); }; } @myClassDecorator(\\\"Hello, World!\\\") class MyClass { // 类的定义 } \",\"在上述代码中，myClassDecorator 装饰器函数接收一个字符串参数 value，然后返回一个新的装饰器函数。这个新的装饰器函数在被应用到类上时，输出参数 value 的值。\",\"类装饰器可以用于修改类的行为，例如添加新的属性、方法或装饰现有的属性和方法。它们在框架和库的开发中非常有用，可以通过装饰器来扩展和定制类的功能。\",\"类装饰器的相关概念和用法：\",\"类装饰器工厂函数：类装饰器可以是一个工厂函数，返回一个装饰器函数。这样可以在装饰器内部接收一些参数并返回真正的装饰器函数来进行定制。例如：\",\"function myClassDecoratorFactory(value: string) { return function (constructor: Function) { console.log(\\\"Metadata value:\\\", value); }; } @myClassDecoratorFactory(\\\"Hello, World!\\\") class MyClass { // 类的定义 } \",\"多个装饰器的执行顺序：如果在一个类上应用了多个装饰器，它们的执行顺序是从上到下的（自下而上）。这意味着靠近类声明的装饰器会先被执行，然后是后续的装饰器。例如：\",\"function firstDecorator(constructor: Function) { console.log(\\\"First decorator\\\"); } function secondDecorator(constructor: Function) { console.log(\\\"Second decorator\\\"); } @firstDecorator @secondDecorator class MyClass { // 类的定义 } // 输出: // Second decorator // First decorator \",\"类装饰器应用于派生类：类装饰器也可以应用于派生类（子类），并且可以影响派生类的行为。在这种情况下，类装饰器可以修改派生类的构造函数或添加新的属性和方法。例如：\",\"function myClassDecorator(constructor: Function) { console.log(\\\"Class being decorated:\\\", constructor); } @myClassDecorator class MyBaseClass { // 基类的定义 } @myClassDecorator class MyDerivedClass extends MyBaseClass { // 派生类的定义 } \"]},\"325\":{\"h\":\"声明文件\",\"t\":[\"声明文件（Declaration Files）是用来描述 JavaScript 代码库的类型信息的文件。当使用第三方库或模块时，声明文件可以提供类型定义，使 TypeScript 能够理解和检查这些库的类型。\",\"以下是关于声明文件的一些相关知识点：\",\"声明文件的后缀名：声明文件通常以 .d.ts 为后缀名，例如 jquery.d.ts。\",\"内置声明文件：TypeScript 已经内置了许多常用库的声明文件，可以直接使用。例如，你可以在 TypeScript 项目中使用 Array、Promise 等内置类型，因为它们的声明文件已经存在。\",\"自定义声明文件：对于没有提供声明文件的第三方库或模块，你可以自己编写声明文件来描述其类型。声明文件应该与库的 JavaScript 文件放在同一个目录下，或者可以将声明文件放在单独的 typings 或 @types 目录中。\",\"声明文件语法：声明文件使用 TypeScript 的语法来描述类型信息，例如使用 interface 定义接口，使用 type 定义类型别名，使用 namespace 定义命名空间等。\",\"Ambient 声明：Ambient 声明是一种用来扩展全局变量、全局命名空间或模块的类型定义的方式。通过使用 declare 关键字，可以在声明文件中描述全局变量、全局函数、全局对象等。\",\"外部模块声明：当使用第三方模块时，需要为这些模块编写对应的声明文件。外部模块声明使用 declare module 来定义一个模块，并描述模块内部的类型和导出。\",\"发布和使用声明文件：当你为一个库编写了声明文件后，可以将它与库一起发布，供其他人使用。其他人可以通过安装库和声明文件来在 TypeScript 项目中使用该库。\",\"声明文件是使 TypeScript 能够与 JavaScript 代码库无缝集成的重要工具。通过使用声明文件，可以提高代码的可读性和可维护性，并获得更好的开发体验。\"]},\"326\":{\"h\":\"命名空间\",\"t\":[\"命名空间（Namespace）在 TypeScript 中是一种组织和封装代码的方式，用于避免全局变量的冲突和代码的重复。通过将相关的函数、类、接口等放置在同一个命名空间下，可以将它们作为一个整体进行管理和调用。\",\"以下是一些关于命名空间的重要概念和用法：\",\"定义命名空间：使用 namespace 关键字来定义一个命名空间。命名空间可以嵌套在其他命名空间中。\",\"namespace MyNamespace { // 命名空间内容 } \",\"导出命名空间：通过 export 关键字将命名空间导出，以便其他模块可以使用它。\",\"export namespace MyNamespace { // 命名空间内容 } \",\"使用命名空间：通过 namespaceName.memberName 的形式来访问命名空间中的成员。\",\"MyNamespace.someFunction(); const instance = new MyNamespace.SomeClass(); \",\"命名空间别名：使用 import 或 import as 关键字为命名空间创建别名，以便在引入时更方便地使用。\",\"import ns = MyNamespace; // 使用别名 ns.someFunction(); \",\"分离的命名空间：可以将命名空间定义分散在多个文件中，并使用 /// <reference path=\\\"fileName.ts\\\" /> 来指示文件之间的依赖关系。\",\"// 文件1.ts namespace MyNamespace { export function foo() {} } // 文件2.ts /// <reference path=\\\"文件1.ts\\\" /> namespace MyNamespace { export function bar() {} } \",\"命名空间与模块：在 TypeScript 中，命名空间主要用于组织代码和避免全局变量的冲突。而模块（Module）则提供了更强大的功能，如封装、导入和导出等，用于创建可复用的代码块。\",\"虽然命名空间可以用于一些简单的场景，但在较大的项目中，推荐使用模块化的方式来管理代码。\"]},\"327\":{\"h\":\"模块化\",\"t\":[\"模块化（Modularization）是一种软件开发的方法论，旨在将大型代码库分解为可重用、可维护的模块。模块化的目标是提高代码的可读性、可维护性、可测试性和可扩展性。\",\"模块化的主要思想是将代码划分为独立的模块，每个模块具有明确定义的功能和责任，并通过明确定义的接口和其他模块进行通信。这样做可以将复杂的问题分解为更小、更易于理解和处理的部分。\",\"以下是模块化的一些重要概念和优势：\",\"模块定义：将相关的函数、类、接口等组织在一个模块中，并使用适当的语法（如ES模块中的export）导出模块中需要对外暴露的成员。\",\"// 导出方式一：命名导出 export function someFunction() {} // 导出方式二：默认导出 export default class SomeClass {} \",\"模块引入：在需要使用模块中的功能时，使用适当的语法（如ES模块中的import）引入模块，并通过模块名和导入的成员来使用模块的功能。\",\"// 导入方式一：命名导入 import { someFunction } from './path/to/module'; // 导入方式二：默认导入 import SomeClass from './path/to/module'; someFunction(); const instance = new SomeClass(); \",\"模块间的依赖管理：模块可以通过导入和导出的方式建立起依赖关系，一个模块可以依赖其他模块的功能，从而形成一个有机的整体。\",\"// moduleA.ts export function foo() {} // moduleB.ts import { foo } from './moduleA'; foo(); \",\"封装性和信息隐藏：模块化可以将代码封装起来，只暴露对外需要的接口，隐藏内部实现的细节，提高代码的安全性和可维护性。\",\"可重用性：模块化的代码可以被不同的项目或团队重复使用，提高开发效率和代码的可维护性。\",\"可测试性：模块化的代码更容易进行单元测试，因为每个模块都具有清晰的边界和责任，可以独立测试。\",\"在 TypeScript 中，可以使用 ES 模块（ES modules）进行模块化开发。除了 ES 模块之外，还有 CommonJS、AMD 等其他模块系统，可以根据具体的需求和项目情况选择合适的模块化方案。\",\"总之，模块化是一种有助于组织、管理和复用代码的开发方法，可以提高代码质量和开发效率。它是现代软件开发中广泛应用的一项技术。\"]},\"328\":{\"h\":\"模块解析\",\"t\":[\"模块解析（Module Resolution）是指在代码中引入（import）模块时，编译器或运行时环境如何找到和加载该模块的过程。在 TypeScript 中，有两种常见的模块解析策略：经典模块解析（Classic Module Resolution）和 Node.js 模块解析（Node Module Resolution）。\",\"经典模块解析： 经典模块解析是 TypeScript 在较早的版本中使用的默认模块解析策略，主要用于浏览器环境和一些特殊的场景。\",\"当遇到一个模块导入语句时，TypeScript 编译器会根据 import 的路径和文件扩展名来解析模块。\",\"如果路径以斜杠（/）开头，表示路径是相对于当前源文件的根目录解析的。\",\"如果路径以点（.）开头，表示路径是相对于当前源文件所在的目录解析的。\",\"如果路径既不以斜杠（/）开头，也不以点（.）开头，则表示路径是一个模块名称，编译器会按照一定规则去查找该模块。\",\"Node.js 模块解析： Node.js 模块解析是 TypeScript 默认使用的模块解析策略，适用于 Node.js 环境和大部分常见的场景。\",\"Node.js 模块解析基于 CommonJS 模块系统。\",\"当遇到一个模块导入语句时，TypeScript 编译器会根据 import 的路径和文件扩展名来解析模块。\",\"如果路径以斜杠（/）开头，表示路径是相对于当前源文件的根目录解析的。\",\"如果路径以点（.）开头，表示路径是相对于当前源文件所在的目录解析的。\",\"如果路径既不以斜杠（/）开头，也不以点（.）开头，则表示路径是一个模块名称，编译器会按照一定规则去查找该模块，包括查找 node_modules 目录、向上级目录查找等。\",\"在 TypeScript 中，可以通过配置文件 tsconfig.json 中的 moduleResolution 选项来指定使用哪种模块解析策略。默认情况下，moduleResolution 的值是 \\\"node\\\"，即使用 Node.js 模块解析策略。\",\"例如，对于以下代码：\",\"import { someFunction } from './path/to/module'; \",\"TypeScript 编译器会根据模块解析策略找到并加载指定路径的模块。\",\"当涉及到模块解析时，还有一些其他方面需要考虑。以下是其中一些重要的方面：\",\"文件扩展名： 在模块解析过程中，需要指定文件的扩展名，以便确定要加载的文件类型。通常情况下，TypeScript 会自动根据模块解析策略添加适当的文件扩展名（如 .ts、.tsx、.js 等）。 如果没有提供文件扩展名，编译器会根据配置文件 tsconfig.json 中的 resolve.extensions 选项中指定的顺序尝试不同的扩展名。\",\"路径映射： 在实际项目中，可能存在一些特殊的路径映射需求，例如将某个路径映射到另一个路径，或者将一个模块名称映射到一个具体的路径。TypeScript 提供了 path 和 baseUrl 选项，可以在配置文件 tsconfig.json 中进行设置，以进行路径映射的配置。\",\"声明文件解析： 当导入第三方库或模块时，有时候需要使用相应的声明文件（.d.ts 文件）来描述该模块的类型信息。在模块解析过程中，TypeScript 也会按照一定规则去查找和加载声明文件。通常情况下，TypeScript 会自动查找与导入的模块名称匹配的声明文件，然后根据需要进行加载。\",\"这些是模块解析中的一些重要方面。对于更复杂的项目，还可能涉及到第三方模块的查找、版本号管理、路径别名等问题。根据具体的情况和需求，可以使用合适的配置项进行调整。\"]},\"329\":{\"h\":\"声明合并\",\"t\":[\"声明合并（Declaration Merging）是 TypeScript 中一种特性，它允许你扩展或合并已存在的类型声明。通过声明合并，你可以在多个地方对同一个接口、函数、类等进行逐步扩展和补充。\",\"在 TypeScript 中，当存在多个同名的声明时，编译器会对它们进行合并，并生成一个合并后的声明。合并规则如下：\",\"对于接口（interface）的合并： 如果多个接口具有相同的名称，且具有相同的成员列表，则这些接口会自动合并成一个新的接口，包含所有成员。例如：\",\"interface Foo { x: number; } interface Foo { y: string; } const foo: Foo = { x: 10, y: 'Hello', }; \",\"这里，Foo 接口会被合并为：\",\"interface Foo { x: number; y: string; } \",\"对于命名空间（namespace）的合并： 如果多个命名空间具有相同的名称，则它们的内容会合并到一个命名空间中。例如：\",\"namespace Utility { export function doSomething(): void { console.log('Doing something...'); } } namespace Utility { export function doSomethingElse(): void { console.log('Doing something else...'); } } \",\"这里，Utility 命名空间的内容会被合并到同一个命名空间中。\",\"对于类（class）的合并： 如果多个类具有相同的名称，则它们会合并成一个联合类（union class），包含所有的属性和方法。例如：\",\"class MyClass { x: number; } class MyClass { y: string; } const myObj: MyClass = { x: 10, y: 'Hello', }; \",\"这里，MyClass 类会被合并为：\",\"class MyClass { x: number; y: string; } \",\"对于函数（function）的合并： 如果多个同名函数具有相同的参数列表，则它们会被合并成一个函数，并拥有每个函数的函数体。例如：\",\"function greet(name: string): void { console.log(`Hello, ${name}!`); } function greet(age: number): void { console.log(`You are ${age} years old.`); } \",\"这里，greet 函数会被合并为：\",\"function greet(name: string): void; function greet(age: number): void; function greet(nameOrAge: string | number): void { if (typeof nameOrAge === 'string') { console.log(`Hello, ${nameOrAge}!`); } else { console.log(`You are ${nameOrAge} years old.`); } } \",\"全局声明合并： TypeScript 允许你对全局作用域中的变量、函数和命名空间进行声明合并。通过此功能，你可以在多个地方逐步扩展全局声明。例如：\",\"// 在一个文件中声明全局变量 declare const myGlobal: number; // 在另一个文件中扩展全局声明 interface Window { myGlobal: number; } // 在另一个文件中继续扩展全局声明 namespace NodeJS { interface Global { myGlobal: number; } } \",\"这里，全局变量 myGlobal 的声明在多个地方逐步扩展和补充。\",\"声明合并是 TypeScript 中强大而灵活的特性，可以帮助你在不破坏原有类型声明的基础上，对类型进行扩展和补充。使用声明合并时，需要注意保持一致的命名和成员类型，以避免类型冲突和错误。声明合并的特性可以让你逐步扩展已存在的类型声明，使得代码更加模块化和可维护。\"]},\"330\":{\"h\":\"mixins\",\"t\":[\"Mixin（混入）是一种在面向对象编程中，通过组合多个类的特性来创建一个新类的方式。在 TypeScript 中，你可以使用声明合并来实现 mixin 模式。\",\"要创建一个 mixin，首先定义一个类，该类将包含你想要共享的属性和方法。然后使用声明合并来合并该类与目标类，从而将其特性混入目标类。\",\"下面是一个示例：\",\"// 定义一个 mixin 类 class Printable { print(): void { console.log('Printing...'); } } // 定义一个目标类 class Circle { radius: number; constructor(radius: number) { this.radius = radius; } getArea(): number { return Math.PI * this.radius ** 2; } } // 声明合并将 mixin 类混入目标类 interface Circle extends Printable {} applyMixins(Circle, [Printable]); // 辅助函数，用于将 mixin 类的特性混入目标类 function applyMixins(derivedCtor: any, baseCtors: any[]) { baseCtors.forEach(baseCtor => { Object.getOwnPropertyNames(baseCtor.prototype).forEach(name => { Object.defineProperty( derivedCtor.prototype, name, Object.getOwnPropertyDescriptor(baseCtor.prototype, name)! ); }); }); } // 创建一个 Circle 实例并测试 mixin 特性 const circle = new Circle(5); console.log(circle.getArea()); // 输出：78.53981633974483 circle.print(); // 输出：Printing... \",\"在上面的示例中，我们定义了一个 Printable 类作为 mixin 类，它具有一个 print 方法。然后，我们定义了一个 Circle 类作为目标类，它具有 radius 属性和 getArea 方法。\",\"通过使用声明合并和辅助函数 applyMixins，我们将 Printable 类混入到 Circle 类中，使得 Circle 类同时具有 Printable 类的 print 方法。\",\"最后，我们创建一个 Circle 实例并测试了混入的 mixin 特性。\",\"这是一种在 TypeScript 中实现 mixin 的方式，可以通过组合多个类的特性来创建更强大和灵活的类。\",\"当使用 mixin 模式时，还有一些其他的注意事项：\",\"避免命名冲突： 当多个 mixin 类具有相同的属性或方法名称时，可能会导致命名冲突。为了避免这种情况，你可以在混入时给属性或方法添加前缀，或者对于方法，可以使用特定的命名约定来区分它们。\",\"不支持多重继承： 在 mixin 模式中，由于 JavaScript/TypeScript 不支持多重继承，因此只能将 mixin 类与一个目标类混入。如果需要同时混入多个 mixin 类的特性，可以使用链式调用的方式依次混入。\",\"注意运行顺序： 在应用 mixin 时，特性的运行顺序很重要。如果多个 mixin 类具有相同名称的方法或属性，那么最后一个混入的 mixin 类的特性将覆盖之前的。因此，确保特性的运行顺序符合你的预期。\",\"使用辅助函数： 在之前的示例中，我们使用了一个名为 applyMixins 的辅助函数来将 mixin 类的特性混入目标类。这是一种常见的实现方式，可以简化 mixin 的应用过程。你可以根据自己的需求自定义这个辅助函数，并根据 mixin 类的特点进行调整。\",\"总结一下，mixin 模式是一种在 TypeScript 中组合多个类特性的方式。通过声明合并和辅助函数，可以将 mixin 类的属性和方法混入到目标类中，并创建一个具有多个特性的新类。在使用 mixin 时，需要注意命名冲突、运行顺序和不支持多重继承等问题。\"]},\"331\":{\"h\":\"三斜线指令\",\"t\":[\"在 TypeScript 中，三斜线指令是一种特殊的注释语法，用于指示编译器执行额外的操作或引入外部的声明文件。三斜线指令以 /// 开头，并位于单独的一行上。\",\"最常见的三斜线指令是用来引入外部的声明文件，例如：\",\"/// <reference path=\\\"path/to/declaration.d.ts\\\" /> \",\"上述指令告诉编译器引入指定路径下的声明文件，使得该声明文件中的类型和接口可用于当前文件的编译环境中。\",\"另外，还有一些其他的三斜线指令可以用于特定的目的，比如：\",\"/// <reference types=\\\"...\\\" />：引入某个类型定义文件，这通常用于引入全局类型声明的库。\",\"/// <reference lib=\\\"...\\\" />：引入 TypeScript 标准库或其他类似库的声明文件。\",\"/// <amd-dependency path=\\\"...\\\" />：在 AMD 模块中，指定依赖的路径。\",\"/// <amd-module name=\\\"...\\\" />：在 AMD 模块中，指定模块的名称。\",\"需要注意的是，三斜线指令在较新的 TypeScript 版本中已经不再推荐使用。推荐的替代方案是使用 ES6 模块的 import 语法和 tsconfig.json 文件中的 references 字段来管理模块之间的依赖关系和声明文件的引入。\"]},\"332\":{\"h\":\"Git\"},\"333\":{\"h\":\"简介\",\"t\":[\"Git是一个分布式版本控制系统，由Linus Torvalds在2005年创建。它被广泛用于软件开发项目的版本控制和协作管理。Git可以追踪和记录项目文件的修改历史，并且能够支持多人同时协作开发。\",\"Git的核心概念是仓库（repository），一个仓库可以存储项目的全部历史和文件版本。每次文件的修改都可以通过提交（commit）记录下来，并且Git能够根据这些提交来还原文件的历史状态。通过分支（branch）的概念，Git可以同时进行多个开发任务，不同的分支可以独立开发和合并，方便团队合作。\",\"使用Git，开发者可以轻松地管理自己的代码和项目，并且可以在需要时与其他开发者共享和协作。Git提供了丰富的命令行工具和图形化界面工具，适用于各种操作系统和开发环境。\",\"Git在开源社区和商业项目中都得到了广泛的应用，成为了最受欢迎和使用的版本控制系统之一。它的易用性、高效性和强大的功能使得开发者能够更好地管理项目，控制代码版本，进行协作开发，提高代码质量和开发效率。\"]},\"334\":{\"h\":\"基础\",\"t\":[\"安装Git：根据不同的操作系统，可以从Git官方网站下载并安装Git。\",\"创建仓库：使用git init命令在一个目录中创建一个新的Git仓库，该目录将被用作版本控制。\",\"添加文件：使用git add命令将文件添加到暂存区，暂存区是将要被提交的文件的集合。\",\"提交文件：使用git commit命令将暂存区的文件提交到当前分支。\",\"查看状态：使用git status命令可以查看当前工作区的状态，了解哪些文件被修改过、哪些文件已被添加到暂存区等信息。\",\"查看提交历史：使用git log命令可以查看提交历史记录，包括每次提交的作者、日期、提交消息等。\",\"撤销修改：使用git checkout命令可以撤销对文件的修改，将文件恢复到上一次提交的状态。\",\"分支管理：使用git branch命令可以查看当前所有的分支，使用git checkout命令可以切换分支，使用git merge命令可以将一个分支合并到当前分支。\",\"远程仓库：使用git remote命令可以管理远程仓库，比如添加远程仓库、删除远程仓库等。\",\"推送与拉取：使用git push命令可以将本地仓库的修改推送到远程仓库，使用git pull命令可以将远程仓库的修改拉取到本地仓库。\",\"忽略文件：\",\"在Git中，你可以通过创建一个名为.gitignore的文件来指定需要被Git忽略的文件和文件夹。.gitignore文件可以放在项目的根目录中，也可以放在特定的子目录中。\",\".gitignore文件中可以包含以下内容：\",\"文件名匹配模式：使用通配符来匹配文件名或路径。例如，*.txt表示所有以.txt为扩展名的文件，/logs/表示logs文件夹及其内容。\",\"注释：可以在.gitignore文件中使用“#”来添加注释，注释内容将被Git忽略。\",\"感叹号：使用感叹号（\\\"!\\\"）来取反匹配规则。例如，!.txt表示不忽略以.txt为扩展名的文件。\",\"以下是一个简单的.gitignore文件示例：\",\"# 忽略所有以 .log 结尾的文件 *.log # 忽略 test 文件夹及其内容 /test/ # 不忽略 README.txt 文件 !.README.txt \",\"需要注意的是，.gitignore文件只对尚未被添加到Git仓库的文件起作用，已经被Git跟踪的文件不受.gitignore规则的影响。如果之前已经将某个文件纳入版本控制，而现在希望将其忽略，需要使用命令git rm --cached <文件名>将其从仓库中移除。\",\"使用.gitignore文件可以很好地管理你的Git仓库，避免将无关文件纳入版本控制，提高代码管理的效率。\"]},\"335\":{\"h\":\"分支管理\",\"t\":[\"分支是Git版本控制中一项重要的功能，它允许你在同一个仓库中同时进行不同的工作。\",\"创建分支：使用git branch <分支名>命令可以创建一个新分支，例如：git branch feature。这将在当前的提交上创建一个名为\\\"feature\\\"的新分支。\",\"切换分支：使用git checkout <分支名>命令可以切换到指定的分支，例如：git checkout feature。这将切换到名为\\\"feature\\\"的分支，你将继续在该分支上进行工作。\",\"合并分支：使用git merge <分支名>命令可以将指定的分支合并到当前分支中，例如：git merge feature。这将将\\\"feature\\\"分支的修改合并到当前分支。\",\"删除分支：使用git branch -d <分支名>命令可以删除指定的分支，例如：git branch -d feature。这将删除名为\\\"feature\\\"的分支。需要注意的是，只能删除已经合并到其他分支的分支，如果分支上的修改尚未合并，使用-d选项将无法进行删除，可以使用-D选项来强制删除分支。\",\"查看分支：使用git branch命令可以查看当前仓库中存在的所有分支，当前所在的分支会以特别标记显示。\",\"合并冲突解决：当合并分支过程中存在冲突时，需要手动解决冲突。Git会标记冲突的文件并在文件中显示冲突的位置，通过手动修改解决冲突后，使用git add命令标记已解决的冲突，然后进行提交。\",\"远程分支管理：远程仓库通常也有多个分支，使用git clone命令可以将远程仓库克隆到本地，并默认创建一个名为\\\"origin\\\"的远程分支。使用git fetch命令下载远程仓库中的更新，并通过git merge命令或git rebase命令将远程分支合并到本地分支。\",\"分支管理是Git中的核心概念之一，合理使用分支可以帮助你进行并行开发、实验新功能、修复bug等。通过灵活运用分支管理，可以更高效地开展项目工作。\"]},\"336\":{\"h\":\"远程仓库\",\"t\":[\"远程仓库是指托管在网络上的Git仓库，它可以用来与他人共享代码、进行协作开发、备份代码等。\",\"添加远程仓库：使用git remote add <远程仓库名> <远程仓库地址>命令将一个远程仓库添加到本地仓库，例如：git remote add origin https://github.com/user/repo.git。origin是远程仓库的默认名称，你可以自定义其他名称。\",\"查看远程仓库：使用git remote命令可以查看当前仓库关联的所有远程仓库，例如：git remote -v。这会显示远程仓库的名称和URL。\",\"克隆远程仓库：使用git clone <远程仓库地址>命令可以将远程仓库完整地克隆到本地，例如：git clone https://github.com/user/repo.git。这将在当前目录下创建一个新目录，并将远程仓库的全部内容复制到该目录中。\",\"拉取与推送：使用git pull <远程仓库名> <远程分支名>命令可以拉取远程仓库的更新到本地仓库，例如：git pull origin master。使用git push <远程仓库名> <本地分支名>命令可以将本地的提交推送到远程仓库，例如：git push origin master。\",\"远程分支：使用git branch -r命令可以查看本地仓库所知道的远程分支，例如：git branch -r。使用git checkout <远程分支名>命令可以在本地创建并切换到一个远程分支上，例如：git checkout origin/feature。\",\"删除远程分支：使用git push <远程仓库名> --delete <远程分支名>命令可以删除远程仓库中的指定分支，例如：git push origin --delete feature。\",\"Git与其他远程仓库托管服务（如GitHub、GitLab、Bitbucket）紧密结合，你可以使用这些服务来托管、共享和协作开发代码。通过远程仓库，开发者可以方便地备份代码、协同工作、进行代码审查等操作，提高代码管理和开发效率。\"]},\"337\":{\"h\":\"协作开发\",\"t\":[\"协作开发是多个开发者共同参与一个项目的开发过程。Git提供了强大的协作功能，使开发者能够协同工作、共享代码和进行代码审查。\",\"共享代码库：通过将项目的Git仓库托管在远程仓库服务（如GitHub、GitLab、Bitbucket）上，开发者可以将代码库共享给团队成员。\",\"分支管理：每个开发者可以在自己的分支上进行独立的工作，避免互相干扰。通过合并或重定向分支，开发者可以将各自的工作整合到主分支中。\",\"分支合并：当开发者完成某个特性或修复某个bug时，他们可以将自己的分支合并到主分支或其他目标分支中。使用git merge命令可以合并分支。\",\"代码审查：通过代码审查，开发者可以相互检查代码的质量、风格和一致性。一般而言，代码审查是由其他团队成员或专门的代码审查人员来执行的，他们会审查代码并提出修改意见。代码审查有助于提高代码质量和减少潜在问题。\",\"远程仓库协作：开发者可以使用远程仓库服务提供的功能进行协作。他们可以通过拉取和推送操作来同步仓库和分支。如果多个人同时修改了同一文件的相同部分，就会产生冲突，需要手动解决冲突。\",\"问题跟踪：许多远程仓库服务提供问题跟踪功能，用于管理任务、bug和其他项目问题。开发者可以创建问题、分配任务、跟踪进度以及与团队成员进行讨论。\",\"远程仓库权限管理：远程仓库服务通常提供权限和访问控制功能，以便团队成员可以按照项目的需要进行访问和操作的限制。\",\"协作开发可以提高团队的协同效率，并确保代码的质量和稳定性。使用Git进行版本控制和远程仓库服务进行协作，开发者可以轻松跟踪工作进度、解决冲突、进行代码审查和合并修改，从而更好地协同开发项目。\"]},\"338\":{\"h\":\"高级操作\",\"t\":[\"Git提供了许多高级操作，可以帮助开发者更灵活、高效地进行版本控制和协作开发。\",\"Git rebase：使用git rebase命令可以将一个分支的修改基于另一个分支进行重演。这可以使提交历史更加简洁、线性，并且有助于消除合并提交所引入的冗余。例如，git rebase master将当前分支的修改基于master分支进行重演。\",\"Git cherry-pick：使用git cherry-pick <提交号>命令可以选择性地将一个或多个提交应用到当前分支。这对于从其他分支中选择性地合并特定的提交很有用。例如，git cherry-pick abcdefg将应用提交号为abcdefg的提交到当前分支。\",\"Git reflog：使用git reflog命令可以查看本地仓库的操作记录，包括分支切换、提交、重置等。这对于恢复意外删除的分支、撤销某些操作或查找丢失的提交很有帮助。\",\"Git stash：使用git stash命令可以将当前工作目录中的修改保存起来，以便在稍后的时间点恢复。这对于临时切换到其他分支处理其他任务时非常有用。\",\"Git bisect：使用git bisect命令可以进行二分查找来定位引入错误的提交。这对于调试和找出代码引发的问题非常有帮助。它可以通过标记测试提交为“坏”或“好”，自动帮助你确定引起问题的具体提交。\",\"Git submodule：Git子模块是指在一个Git项目中使用其他Git项目作为子目录的方式，从而将多个项目独立管理。子模块允许项目之间保持独立性，而不必将完整的子项目嵌入到主项目中。\",\"Git Hooks：Git Hooks是一些特定事件触发的自定义脚本，开发者可以将这些脚本与Git命令关联，当特定事件发生时自动执行脚本。常见的Git Hooks包括pre-commit、post-commit、pre-push等，可以用于执行代码检查、自动化测试等操作。\",\"这些高级操作提供了更多的灵活性和功能，可以满足复杂项目的需求。然而，使用这些操作时需要小心，确保了解其影响并备份重要数据，以防止不可逆的更改。\"]},\"339\":{\"h\":\"Ajax\"},\"340\":{\"h\":\"简介\",\"t\":[\"Ajax（Asynchronous JavaScript and XML）是一种用于创建异步Web应用程序的技术。它在不重新加载整个页面的情况下，通过在后台与服务器进行数据交换，实现网页的局部更新。\",\"传统的Web应用程序在与服务器进行数据交换时，需要重新加载整个页面。而使用Ajax可以避免这种情况，提升用户的交互体验和网页的响应速度。通过Ajax，可以在后台异步地向服务器发送请求并接收响应，然后使用JavaScript将返回的数据更新到网页的特定部分，而不需要刷新整个页面。\",\"最早的Ajax技术使用XML作为数据交换格式，因此有\\\"XML\\\"占据了其首字母。然而，随着JSON的流行，现代的Ajax应用程序一般使用JSON作为数据交换的格式。此外，随着技术的发展，出现了许多工具和框架，如jQuery、Fetch API和Axios，使得使用Ajax更加方便和高效。\",\"Ajax可以用于许多应用场景，比如获取和显示数据、异步提交表单、自动完成建议、动态内容加载等等。然而，需要注意的是，由于浏览器的安全策略，Ajax请求通常不能跨域，需要进行特殊处理。此外，安全性方面也需要考虑，以防止跨站脚本攻击（XSS）和跨站请求伪造（CSRF）等风险。\",\"总而言之，Ajax是一种强大的Web开发技术，可以帮助开发者提升用户体验、增强应用程序性能并提高效率。\"]},\"341\":{\"h\":\"原理\",\"t\":[\"创建XMLHttpRequest对象：使用JavaScript创建一个Ajax请求对象，可以通过new XMLHttpRequest()来实现。\",\"发送请求：使用该对象向服务器发送请求，通过open()方法设置请求的类型（GET、POST等）、URL和是否使用异步（true或false）等参数。然后使用send()方法发送请求，可以传递需要发送的数据作为参数。\",\"服务器处理请求：服务器接收到请求后，处理请求并生成响应数据。\",\"接收响应：当服务器返回响应时，XMLHttpRequest对象会触发onreadystatechange事件，并通过readyState属性来指示请求的状态。常见的状态有：\",\"0: 请求未初始化\",\"1: 服务器连接已建立\",\"2: 请求已接收\",\"3: 请求处理中\",\"4: 请求已完成，且响应已就绪\",\"处理响应数据：在readyState为4且状态码为200时（表示请求成功），可以通过responseText属性获取服务器返回的文本数据，或使用responseXML属性获取解析后的XML数据（如果服务器返回的是XML格式）。可以使用JavaScript编写回调函数来处理响应数据，进行更新页面或其他操作。\",\"更新页面：使用获取到的数据，通过JavaScript将其更新到页面的特定部分，实现局部刷新而不需要重新加载整个页面。\",\"总的来说，Ajax通过在后台与服务器进行数据交换，实现了异步的数据传输和局部刷新网页的功能。这就使得用户能够在数据加载的同时进行其他操作，提高了用户体验和网页性能。\"]},\"342\":{\"h\":\"优点\",\"t\":[\"Ajax具有许多优点，使其成为开发Web应用程序的受欢迎的技术之一。\",\"提升用户体验：使用Ajax可以实现网页的局部更新，而不需要重新加载整个页面。这大大减少了页面的刷新次数，提高了用户的交互体验。用户可以在进行数据交互的同时继续浏览和操作页面，无需等待整个页面的重载。\",\"增强性能：Ajax通过异步发送请求和接收响应的方式，无需刷新整个页面，只传输和处理必要的数据量。相比于传统的页面刷新方式，减少了对服务器的请求次数和数据传输量，从而减轻了服务器的负载压力，提高了网页的加载速度和响应速度。\",\"提高效率：通过Ajax，可以在后台发送异步请求并在返回响应后处理数据，无需阻塞用户界面。用户可以在数据交互的同时继续进行其他操作，不需要等待整个页面的重载。这种异步处理方式提高了用户效率和使用体验。\",\"优化用户界面：Ajax可以实现动态的页面更新，使得可以根据用户的操作实时改变页面内容，从而提供更加流畅和灵活的用户交互体验。可以根据用户的输入或者在后台请求到的数据进行页面内容的动态刷新，而无需重新加载整个页面。\",\"减少带宽占用：Ajax通过局部刷新而不是整个页面的重新加载，从而在数据交互过程中减少了不必要的带宽占用。只传输和处理必要的数据，可以节省带宽资源。\",\"综上所述，Ajax的优点包括提升用户体验、增强性能、提高效率、优化用户界面和减少带宽占用等。这些优点使得Ajax成为开发现代Web应用程序的重要技术之一。\"]},\"343\":{\"h\":\"相关技术和工具\",\"t\":[\"XMLHttpRequest：XMLHttpRequest是原始的Ajax实现方式，它是浏览器提供的内置对象，用于发送HTTP请求和接收服务器响应。通过XHR对象，可以设置请求类型、URL、发送数据等，并通过回调函数处理响应数据。\",\"Fetch API：Fetch API是一种现代的替代XMLHttpRequest的技术，它提供了更简洁和强大的API来发送HTTP请求和处理响应。Fetch API使用Promise对象来处理异步操作，并且提供了更灵活和可读性更好的语法。\",\"jQuery：jQuery是一种流行的JavaScript库，提供了简化和封装了许多常见的JavaScript操作，并提供了简便的Ajax方法。通过使用jQuery的$.ajax()或$.getJSON()等方法，可以更快速地实现Ajax请求和处理响应。\",\"Axios：Axios是一个流行的基于Promise的HTTP客户端，可以在浏览器和Node.js中使用。它提供了简单而直观的API，使得发送Ajax请求变得更加简单和灵活。\",\"JSON：JSON（JavaScript Object Notation）是一种轻量级的数据交换格式，广泛用于Ajax应用中进行数据传输和解析。JSON易于阅读和编写，并且与JavaScript对象格式兼容，因此非常适合在服务器和客户端之间传输数据。\",\"WebSocket：WebSocket是一种在单个TCP连接上进行全双工通信的通信协议。与Ajax不同，WebSocket支持服务器主动向客户端推送数据，使得实时通信变得更加便捷和高效。\",\"Single Page Application (SPA)：SPA是一种Web应用程序的架构模式，通过使用Ajax或类似的技术，将Web应用程序整体加载到一个页面中，并利用Ajax进行局部更新，使得应用程序具有更快的响应速度和更好的用户体验。\",\"总而言之，这些技术和工具与Ajax密切相关，可以帮助开发者更方便地实现Ajax请求和处理响应，并提供更好的用户体验和更高的开发效率。\"]},\"344\":{\"h\":\"使用示例\"},\"345\":{\"h\":\"获取并显示数据\",\"t\":[\"通过Ajax从服务器获取数据，然后使用JavaScript将其显示在网页上。\",\"HTML部分：\",\"<button onclick=\\\"getData()\\\">获取数据</button> <div id=\\\"result\\\"></div> \",\"JavaScript部分：\",\"function getData() { // 创建XMLHttpRequest对象 var xhr = new XMLHttpRequest(); // 设置请求的类型、URL和异步标志(true表示异步) xhr.open(\\\"GET\\\", \\\"data.json\\\", true); // 注册状态改变的事件回调函数 xhr.onreadystatechange = function() { if (xhr.readyState === 4 && xhr.status === 200) { var data = JSON.parse(xhr.responseText); displayData(data); } }; // 发送请求 xhr.send(); } function displayData(data) { var resultDiv = document.getElementById(\\\"result\\\"); resultDiv.innerHTML = \\\"\\\"; for (var i = 0; i < data.length; i++) { var item = document.createElement(\\\"p\\\"); item.textContent = data[i]; resultDiv.appendChild(item); } } \",\"以上代码中，点击\\\"获取数据\\\"按钮会调用getData()函数，通过Ajax发送GET请求到服务器上的data.json文件来获取数据。获取到数据后，调用displayData()函数将数据显示在页面上。\"]},\"346\":{\"h\":\"表单提交\",\"t\":[\"使用Ajax异步提交表单，避免页面的刷新。\",\"HTML部分：\",\"<form onsubmit=\\\"submitForm(event)\\\"> <input type=\\\"text\\\" id=\\\"name\\\" name=\\\"name\\\" placeholder=\\\"姓名\\\"> <input type=\\\"email\\\" id=\\\"email\\\" name=\\\"email\\\" placeholder=\\\"电子邮件\\\"> <button type=\\\"submit\\\">提交</button> </form> \",\"JavaScript部分：\",\"function submitForm(e) { e.preventDefault(); // 阻止表单的默认提交行为 var form = e.target; var formData = new FormData(form); var xhr = new XMLHttpRequest(); xhr.open(\\\"POST\\\", \\\"submit.php\\\", true); xhr.onreadystatechange = function() { if (xhr.readyState === 4 && xhr.status === 200) { var response = xhr.responseText; alert(response); // 显示服务器的响应 } }; xhr.send(formData); } \",\"以上代码中，通过在表单的onsubmit事件上调用submitForm()函数来处理表单的提交。在submitForm()函数中，调用preventDefault()方法阻止表单的默认提交行为，然后使用FormData对象来获取表单中的数据。创建一个XMLHttpRequest对象，以POST方式发送表单数据到服务器上的submit.php文件，通过onreadystatechange事件回调函数来处理服务器的响应。\"]},\"347\":{\"h\":\"自动完成\",\"t\":[\"通过Ajax从服务器请求数据建议，并在用户输入时显示自动完成的列表。\",\"HTML部分：\",\"<input type=\\\"text\\\" id=\\\"search\\\" placeholder=\\\"搜索...\\\"> <ul id=\\\"suggestions\\\"></ul> \",\"JavaScript部分：\",\"var searchInput = document.getElementById(\\\"search\\\"); var suggestionsList = document.getElementById(\\\"suggestions\\\"); searchInput.addEventListener(\\\"input\\\", function() { var keyword = searchInput.value; var xhr = new XMLHttpRequest(); xhr.open(\\\"GET\\\", \\\"suggestions.php?keyword=\\\" + keyword, true); xhr.onreadystatechange = function() { if (xhr.readyState === 4 && xhr.status === 200) { var suggestions = JSON.parse(xhr.responseText); showSuggestions(suggestions); } }; xhr.send(); }); function showSuggestions(suggestions) { suggestionsList.innerHTML = \\\"\\\"; // 清空之前的建议 for (var i = 0; i < suggestions.length; i++) { var suggestionItem = document.createElement(\\\"li\\\"); suggestionItem.textContent = suggestions[i]; suggestionsList.appendChild(suggestionItem); } } \",\"以上代码中，当用户在搜索框中输入时，通过input事件监听器获取输入的关键字，然后发送GET请求到服务器上的suggestions.php文件，使用onreadystatechange事件回调函数处理服务器返回的建议数据，并调用showSuggestions()函数来显示建议。\"]},\"348\":{\"h\":\"动态内容加载\",\"t\":[\"通过Ajax加载更多的内容，实现无限滚动效果。\",\"HTML部分：\",\"<div id=\\\"content\\\"></div> <button onclick=\\\"loadMore()\\\">加载更多</button> \",\"JavaScript部分：\",\"var contentDiv = document.getElementById(\\\"content\\\"); function loadMore() { var xhr = new XMLHttpRequest(); xhr.onreadystatechange = function() { if (xhr.readyState === 4 && xhr.status === 200) { var response = JSON.parse(xhr.responseText); var newContent = response.content; contentDiv.innerHTML += newContent; } }; xhr.open(\\\"GET\\\", \\\"https://example.com/load-more\\\", true); xhr.send(); } \",\"CSS部分:\",\"#content { height: 200px; overflow-y: auto; } \",\"以上代码实现了一个简单的无限滚动效果。点击\\\"加载更多\\\"按钮会发送一个Ajax请求到https://example.com/load-more，服务器返回的内容会追加到#content元素中。CSS部分定义了一个固定高度并且具有纵向滚动条的容器。\"]},\"349\":{\"h\":\"注意事项\",\"t\":[\"加载数据时要避免频繁的请求，可以设置一个适当的间隔时间或者使用节流函数来控制请求的频率，以免给服务器过大的负担或者消耗用户过多的流量。\",\"在发送请求之前，可以检查是否还有更多内容要加载。可以通过返回的数据中的一个字段或者变量来标志是否还有更多内容。如果没有更多内容，可以禁用加载按钮或者进行其他处理。\",\"在加载新内容之前，可以显示一个加载提示，以免用户觉得页面无反应或者空白，提高用户体验。\",\"如果有大量数据要加载，可以考虑分页加载或者按需加载的方式，避免一次性加载过多数据导致页面卡顿或者性能问题。\",\"在处理服务器返回的数据时，要进行适当的错误处理，包括网络请求错误、服务器错误或者返回数据格式错误等，以提高程序的稳定性和健壮性。\",\"在加载新内容时，要考虑页面布局或者样式的调整，以适应新内容的加入，特别是如果加载的内容具有不同的高度或者宽度时。\",\"跨域请求：由于浏览器的同源策略，Ajax请求通常不能跨域，需要进行特殊处理。\",\"安全性考虑：Ajax请求可能会引发一些安全问题，比如跨站脚本攻击（XSS）和跨站请求伪造（CSRF），需要注意防范。\"]},\"350\":{\"h\":\"HTTP\"},\"351\":{\"h\":\"简介\",\"t\":[\"HTTP（Hypertext Transfer Protocol，超文本传输协议）是一种用于传输超文本数据的应用层协议。它是在Web开发中最为重要的协议之一，用于在客户端和服务器之间传输数据。\",\"HTTP还包括头部信息、Cookie、缓存、安全性等方面的内容。头部信息用于在请求和响应中传递相关的元数据，Cookie用于在客户端和服务器之间传递会话信息。缓存机制可以提高性能，安全性方面，HTTPS使用SSL/TLS协议对传输的数据进行加密和认证。\",\"HTTP在Web开发中扮演着重要的角色，它是浏览器和服务器之间通信的基础协议。通过使用HTTP，客户端可以向服务器请求数据，服务器可以返回HTML页面、JSON数据或其他类型的资源，从而构建功能丰富的Web应用。\",\"需要注意的是，HTTP是一个无连接的协议，每个请求都需要重新建立连接。为了解决这个问题，可以使用持久连接或者HTTP/2协议的多路复用等技术来提高性能。\",\"总之，HTTP是Web开发中不可或缺的协议，了解它的基本概念和特性对于理解Web通信和构建高效的Web应用是非常重要的。\"]},\"352\":{\"h\":\"HTTP基本概念\",\"t\":[\"无状态性：HTTP是一种无状态的协议，每个请求都是独立的，服务器不会保留之前请求的状态信息。每个请求都需要提供足够的信息来让服务器理解和处理。\",\"请求-响应模式：HTTP使用请求-响应模式，客户端发送请求到服务器，服务器接收请求并返回响应。请求由请求方法（如GET、POST等）、URL和协议版本构成，响应由状态码、头部信息和响应体组成。\",\"URL（Uniform Resource Locator）：URL是用于标识和定位资源的地址。它由协议、域名（或IP地址）、端口号、路径和查询参数组成，例如：http://www.example.com/index.html。\",\"请求方法：HTTP定义了多种请求方法，用于指定对资源的操作。常见的请求方法有：\",\"GET：获取指定的资源。\",\"POST：向服务器提交数据。\",\"PUT：更新指定的资源。\",\"DELETE：删除指定的资源。\",\"HEAD：获取资源的头部信息，不包含响应体。\",\"状态码：HTTP响应中的状态码表示请求的处理结果。常见的状态码包括：\",\"200：请求成功。\",\"404：请求的资源未找到。\",\"500：服务器内部错误。\",\"头部信息：HTTP的请求和响应中都会包含头部信息，用于传递元数据。头部信息包括：\",\"Content-Type：指定请求或响应中的数据类型。\",\"Content-Length：指定请求或响应中的数据长度。\",\"User-Agent：标识客户端的类型和版本。\",\"Cookie：在客户端和服务器之间传递会话信息。\",\"缓存：HTTP支持缓存机制，可以在客户端和服务器之间减少数据传输。\",\"强制缓存：通过设置Expires或Cache-Control头部，在一段时间内直接使用本地缓存。\",\"对比缓存：通过设置Etag和If-None-Match头部，或者Last-Modified和If-Modified-Since头部，与服务器进行验证。\",\"安全性：HTTP本身是明文传输的，为了保证传输的安全性，可以使用HTTPS协议，它在HTTP的基础上使用SSL/TLS协议进行加密和认证。\"]},\"353\":{\"h\":\"HTTP请求方法\",\"t\":[\"HTTP定义了多种请求方法，用于指定对资源的操作。\",\"GET：用于获取指定的资源，通常用于从服务器获取数据。GET请求是幂等的，也就是说多次相同的GET请求应该返回相同的结果，不会对资源产生影响。\",\"POST：用于向服务器提交数据，通常用于创建新的资源或提交表单数据。POST请求对服务器资源可能产生副作用，每次请求可能会导致不同的结果。\",\"PUT：用于更新服务器上的资源，通常用于整体替换资源或创建指定标识的资源。PUT请求是幂等的，多次相同的PUT请求应该产生相同的结果。\",\"DELETE：用于删除服务器上的资源。DELETE请求用于删除指定标识的资源，它也是幂等的，多次相同的DELETE请求应该产生相同的结果。\",\"HEAD：类似于GET请求，但只返回头部信息，不包含响应体。HEAD请求通常用于获取资源的各种元信息，如头部信息、响应状态码等，但不获取实际的资源内容。\",\"OPTIONS：用于获取服务器支持的请求方法、头部信息和其他一些选项。OPTIONS请求通常用于了解服务器的功能和可用性，以便在实际请求之前做出决策。\",\"PATCH：用于对服务器上的资源进行局部更新。PATCH请求通常用于部分更新资源，只提交需要更新的字段，而不是替换整个资源。\",\"这些是常见的HTTP请求方法，开发人员根据具体的需求和业务需求选择适当的方法。HTTP请求方法是通过HTTP协议中的请求行来指定的，在请求行中包含了请求方法、URL和协议版本\"]},\"354\":{\"h\":\"HTTP状态码\",\"t\":[\"HTTP状态码是在HTTP响应中表示请求处理结果的简短数字代码。每个状态码都有特定的意义，用于指示请求的处理状态和结果。以下是常见的HTTP状态码分类及其含义：\",\"1xx（信息性状态码）：表示请求正在处理或需要进一步操作。\",\"100：继续，表示服务器接收到请求并继续处理。\",\"101：切换协议，表示服务器要求客户端切换协议。\",\"2xx（成功状态码）：表示请求被成功接收、理解和处理。\",\"200：成功，表示请求成功处理并返回结果。\",\"201：已创建，表示请求成功并创建了新的资源。\",\"204：无内容，表示请求成功处理，但没有返回实体内容。\",\"3xx（重定向状态码）：表示需要进行附加操作以完成请求。\",\"301：永久重定向，表示请求的资源已永久移动到新的位置。\",\"302：临时重定向，表示请求的资源暂时移动到新的位置。\",\"304：未修改，表示资源未被修改，可以使用缓存的版本。\",\"4xx（客户端错误状态码）：表示请求包含错误或无法完成请求。\",\"400：错误的请求，表示请求无效或不符合服务器要求。\",\"401：未授权，表示未经授权访问受限资源。\",\"404：未找到，表示请求的资源不存在。\",\"5xx（服务器错误状态码）：表示服务器无法完成有效请求。\",\"500：服务器错误，表示服务器内部错误。\",\"503：服务不可用，表示服务器暂时无法处理请求。\"]},\"355\":{\"h\":\"HTTP头部信息\",\"t\":[\"HTTP头部信息（HTTP header）是包含在HTTP请求和响应中的元数据，用于传递关于请求或响应的附加信息。头部信息由一系列的键值对组成，每个键值对之间由冒号分隔。以下是常见的HTTP头部信息：\",\"Content-Type：指定请求或响应中的数据类型。常见的值包括：\",\"text/plain：纯文本。\",\"text/html：HTML文档。\",\"application/json：JSON数据。\",\"application/xml：XML数据。\",\"Content-Length：指定请求或响应中的数据长度，以字节为单位。\",\"User-Agent：标识客户端的类型和版本。常用于服务器判断请求来自何种客户端，如浏览器、移动设备等。\",\"Accept：指定客户端可接受的响应类型。常见的值包括多个MIME类型，用逗号分隔，表示客户端可以接受的数据类型。\",\"Accept-Encoding：指定客户端可接受的内容编码方式，如gzip、deflate等。用于服务器在传输响应时进行压缩。\",\"Cookie：在客户端和服务器之间传递会话信息。客户端发送请求时，会将之前从服务器获取的Cookie信息放在请求头中传递给服务器。\",\"Referer：指定当前请求的来源URL。常用于防止跨站请求伪造（CSRF）攻击。\",\"Authorization：用于在请求中传递身份验证凭据，如基本身份验证（Basic Authentication）的用户名和密码。\",\"Cache-Control：控制缓存机制的行为，如缓存的有效期、是否可以缓存、是否需要校验等。\",\"If-None-Match / Etag：用于缓存验证，客户端发送请求时，可以包含之前获取的响应的Etag值，用于检查资源是否有更新。\",\"这些是常见的HTTP头部信息，不同的HTTP请求和响应可能需要特定的头部信息来传递额外的元数据。头部信息在HTTP通信中非常重要，可以用于控制缓存、传递身份验证信息、指定请求与响应的格式等。在开发Web应用时，开发人员可以根据需要设置和解析HTTP头部信息。\"]},\"356\":{\"h\":\"HTTP缓存\",\"t\":[\"HTTP缓存是一种机制，用于在客户端和服务器之间存储已经获取过的资源的副本，以便将来可以直接使用，避免重复的网络请求，提高性能和减少延迟。HTTP缓存可以有效地降低服务器负载并改善用户体验。\",\"HTTP缓存是通过使用缓存头部信息来控制的。以下是常见的与HTTP缓存相关的头部信息：\",\"Cache-Control：用于指定缓存的行为，如缓存的有效期、是否可以缓存、是否需要校验等。常见的值包括：\",\"public：表示响应可以被缓存，并且可以被任何客户端使用。\",\"private：表示响应只能被特定的客户端缓存，即使响应是可缓存的。\",\"max-age：指定缓存的最大有效期，以秒为单位。例如，\\\"max-age=3600\\\"表示资源在一小时内有效。\",\"Expires：指定缓存的过期时间，是一个具体的日期和时间。比如，\\\"Expires: Fri, 31 Dec 2023 23:59:59 GMT\\\"。\",\"Last-Modified / If-Modified-Since：用于缓存验证，服务器在响应中会包含资源的最后修改时间（Last-Modified），客户端在后续的请求中可以发送该值（If-Modified-Since）来询问服务器资源是否有更新。\",\"Etag / If-None-Match：类似于Last-Modified和If-Modified-Since的缓存验证机制，服务器在响应中会提供资源的唯一标识符（Etag），客户端在后续的请求中可以携带该值（If-None-Match）来询问服务器资源是否有更新。\",\"通过合理配置缓存头部信息，可以实现不同级别、不同类型的缓存策略。客户端在接收到带有缓存头部信息的响应后，如果发现自己的缓存仍然有效，则可以直接从本地缓存中获取资源，而无需向服务器发起请求。这样可以减少网络流量、加快资源加载速度，并且减轻了服务器的负载。\",\"需要注意的是，缓存头部信息需要在服务器端和客户端都正确配置和解析，以确保缓存机制正常工作。在开发Web应用时，开发人员可以根据具体需求选择适当的缓存策略，并合理配置相应的缓存头部信息。\"]},\"357\":{\"h\":\"Cookie 和 Session\",\"t\":[\"Cookie和Session是Web开发中常用的机制，用于在不同的HTTP请求之间存储和管理用户的状态信息。\",\"Cookie：\",\"Cookie是在客户端（通常是浏览器）存储数据的一种机制。当服务器响应一个HTTP请求时，可以通过响应头部的Set-Cookie字段将一个或多个Cookie发送到客户端。客户端在以后的请求中会自动将这些Cookie信息包含在请求头中发送给服务器。\",\"每个Cookie通常是由一个名字（name）和一个值（value）组成，还可以包含其他的属性，如过期时间、域（domain）、路径（path）等。\",\"服务器可以使用Set-Cookie字段来设置Cookie，同时可以通过在响应头部中设置Max-Age或Expires字段来控制Cookie的过期时间。过期后，客户端将不再发送该Cookie。\",\"Session：\",\"Session是在服务器端存储用户状态信息的一种机制。当用户通过登录或其他方式在服务端建立会话后，服务器会为该用户生成一个唯一的Session ID，并且将该Session ID与用户的状态数据相关联。\",\"用户在后续的请求中，可以通过在请求头部中发送Session ID来告知服务器该请求属于哪个会话。服务器根据Session ID来检索和管理用户的状态数据。\",\"Session数据通常存储在服务器的内存、文件系统或数据库中。服务器还需要通过一种机制，如Cookie或URL重写，将Session ID传递给客户端，以便于后续请求中使用。\",\"Cookie与Session的关系：\",\"通常情况下，服务器会通过Cookie中的一个Session ID来识别客户端的会话。服务器使用Session ID与存储在服务器的Session数据进行匹配，以恢复用户的状态信息。\",\"服务器在首次建立会话时，会为每个会话生成一个唯一的Session ID，并将其存储在Cookie中发送给客户端。客户端在后续的请求中会自动携带该Session ID，服务端通过匹配该Session ID来恢复会话。\",\"在使用Cookie和Session时需要注意：\",\"Cookie中的信息可以在客户端进行可视和修改，所以不应存储敏感的信息。如果需要存储敏感信息，可以考虑将其加密或者进行服务器端的验证。\",\"如果需要在多个服务器之间共享会话数据，需要使用共享存储（如数据库、缓存系统）来存储Session数据，并确保每个服务器都能访问相同的存储系统。\",\"为了保护用户的隐私，可以在设置Cookie时加密数据，并使用HTTPS来保证数据的安全传输。\",\"总结而言，Cookie和Session都是用于在Web应用中维持用户状态的机制，可以根据实际需求选择适当的方案来存储和管理用户的状态信息。\"]},\"358\":{\"h\":\"连接管理\",\"t\":[\"连接管理是关于在HTTP协议中如何处理和管理网络连接的概念。在HTTP 1.1之前的版本中，每个HTTP请求和响应都需要建立一个新的TCP连接，这会导致性能上的开销和延迟。为了解决这个问题，HTTP 1.1引入了持久连接（Keep-Alive）机制。\",\"持久连接（Keep-Alive）：\",\"持久连接允许在单个TCP连接上发送和接收多个HTTP请求和响应，而不是每次请求都建立和关闭一个新的连接。\",\"当客户端发送一个HTTP请求时，请求头中会包含Connection字段，并设置为\\\"keep-alive\\\"。这告诉服务器要保持连接开启以支持多个请求。\",\"服务器在响应头中也会包含Connection字段，并设置为\\\"keep-alive\\\"。这表示服务器同意保持连接开启。\",\"通过持久连接，可以在多个请求之间复用已建立的TCP连接，减少了连接建立和关闭的开销，提高了性能和响应速度。\",\"连接超时和最大请求数限制：\",\"虽然持久连接允许复用连接，但为了防止连接资源无限占用，通常会设置连接超时。如果一段时间内没有新的请求，服务器可能会主动关闭连接，以释放资源。\",\"同时，服务器也会设置最大请求数限制，当达到最大请求数时，服务器可能会关闭连接。这可以防止某个连接一直占用服务器资源，导致其他请求无法处理。\",\"连接池（Connection Pooling）：\",\"连接池是一种管理和复用连接的机制，它维护一个连接的池子，并在需要的时候分配连接，而不是每次都新建连接。\",\"服务器和客户端都可以使用连接池来管理连接，服务器端的连接池用于处理客户端的HTTP请求，而客户端的连接池用于发送请求到服务器。\",\"连接池可以提高连接的复用性，减少连接建立和关闭的开销，提高性能和效率。\",\"总结： 连接管理在HTTP协议中起着重要的作用，通过持久连接、连接超时、最大请求数限制和连接池等机制，可以有效地管理和优化网络连接，提高性能和响应速度。在实际的Web开发中，了解和合理使用连接管理的技术可以对应用的性能和可伸缩性带来积极的影响。\"]},\"359\":{\"h\":\"HTTPS\",\"t\":[\"HTTPS（Hypertext Transfer Protocol Secure）是一种通过加密和身份验证方式来保护传输数据安全性的网络通信协议。它是基于HTTP协议的加密版本，通过使用SSL（Secure Socket Layer）或TLS（Transport Layer Security）协议来建立安全的通信通道。\",\"HTTPS的工作原理如下：\",\"客户端发起HTTPS连接请求，并向服务器发送加密通信的请求。\",\"服务器收到请求后，会将自己的SSL证书（包含公钥）发送给客户端。\",\"客户端通过信任的证书颁发机构对服务器证书进行验证。如果验证通过，则生成一个用于加密通信的随机对称密钥，并用服务器的公钥进行加密，然后将加密后的密钥发送给服务器。\",\"服务器收到客户端发送的密钥后，使用自己的私钥进行解密，得到对称密钥。\",\"双方使用对称密钥进行通信，对HTTP报文进行加密传输。\",\"客户端收到服务器响应后，使用对称密钥对数据进行解密。\",\"HTTPS的使用可以提供以下安全性和好处：\",\"数据加密：使用加密算法对传输的数据进行加密，确保数据在网络中的传输过程中不易被窃取和篡改。\",\"身份验证：通过服务器的SSL证书验证机制，确保客户端连接到的是真实的服务器，避免中间人攻击和钓鱼网站的风险。\",\"数据完整性检查：通过数字签名和散列算法，客户端可以验证接收到的数据是否完整和未被篡改。\",\"SEO优化：由于HTTPS提供更高的安全性和隐私保护，搜索引擎通常会更青睐使用HTTPS的网站，对其进行更好的排名和权重分配。\",\"使用HTTPS需要服务器获得有效的SSL证书并进行配置，在建立加密通道时存在一定的计算开销，对服务器性能也有一定影响。但随着安全性的日益重视和HTTPS相关技术的成熟，越来越多的网站和应用程序采用了HTTPS来保护用户数据和隐私。\",\"补充\",\"SSL/TLS协议：HTTPS是建立在SSL（Secure Socket Layer）或TLS（Transport Layer Security）协议之上的。SSL/TLS协议用于安全地传输数据，并验证服务器的身份。TLS是SSL的后续版本，更加安全和强大。通常使用的版本包括TLS 1.2和TLS 1.3。\",\"SSL证书：SSL证书是由数字证书颁发机构（CA）颁发的数字证书，用于验证服务器的身份。证书包含服务器公钥、域名、有效期等信息。客户端通过验证证书的有效性和合法性，确保连接到的是可信任的服务器。\",\"证书链：证书链是一系列的SSL证书，组成一个信任链。服务器的证书通常需要与中间证书和根证书一起提供给客户端，以便客户端能够验证服务器证书的合法性。\",\"HTTPS性能：与HTTP相比，HTTPS的建立和维护安全通道的过程需要更多的计算开销和资源消耗，因此在性能方面可能会有一定的影响。但是，随着硬件和加密算法的改进，以及HTTP/2等协议的引入，HTTPS的性能已经得到了改善。\",\"HSTS：HTTP Strict Transport Security（HSTS）是一种安全机制，用于强制客户端（如浏览器）将所有HTTP请求重定向到HTTPS。通过在服务器响应头中设置HSTS标志位，可以防止潜在的中间人攻击和重定向漏洞。\",\"Mixed Content：Mixed Content指的是网页同时包含HTTP和HTTPS资源的情况。浏览器通常会对Mixed Content进行警告，因为这可能导致安全漏洞。网站应该尽量避免Mixed Content，将全部资源升级为HTTPS。\",\"安全性提示：使用HTTPS并不一定意味着所有安全问题都解决了。网站和应用程序仍然需要采取其他安全措施，如防止跨站脚本攻击（XSS）、跨站请求伪造（CSRF）等。\"]},\"360\":{\"h\":\"URL输入的时候发生了什么\",\"t\":[\"当在浏览器的URL栏中输入URL时，发生了以下事件：\",\"解析URL：浏览器会解析输入的URL字符串，按照URL的语法规则进行解析，分离出协议、主机名、路径、端口号和查询参数等组成部分。\",\"DNS解析：浏览器会检查主机名（域名）部分，并将其发送给DNS服务器进行解析。DNS服务器负责将域名解析为对应的IP地址。\",\"建立TCP连接：浏览器使用解析得到的IP地址和端口号，向服务器发起一个TCP连接请求。这个请求可以使用HTTP协议或者HTTPS协议，取决于URL的协议部分（HTTP或者HTTPS）。\",\"发送HTTP请求：一旦TCP连接建立成功，浏览器会构建一个符合HTTP协议规范的请求报文，并将其发送给服务器。请求报文中包含了请求的方法（GET、POST等）、路径、查询参数、头部信息（如User-Agent、Cookie等）和请求体（如果是POST请求）等。\",\"服务器处理请求：服务器收到请求后，根据请求的路径和其他信息，进行相应的处理。处理的方式可以是返回静态资源、执行服务器端程序或者查询数据库等。\",\"服务器发送HTTP响应：服务器根据请求的处理结果，构建一个符合HTTP协议规范的响应报文，并将其发送给浏览器。响应报文中包含了状态码、头部信息（如Content-Type、Set-Cookie等）和响应体（返回的内容）等。\",\"接收和渲染响应：浏览器接收到服务器的响应后，会根据响应的内容进行相应的解析和渲染。如果响应是HTML页面，浏览器会解析HTML、CSS和JavaScript，并将其渲染成可视化的页面。\",\"关闭TCP连接：当响应接收完毕后，浏览器会关闭与服务器的TCP连接，释放连接资源。\",\"总结而言，当在浏览器中输入URL时，浏览器会解析URL并发起TCP连接，发送HTTP请求到服务器并等待响应，最后接收和渲染服务器的响应内容。这个过程涉及URL解析、DNS解析、TCP连接建立、HTTP请求响应等环节。\"]},\"361\":{\"h\":\"三次握手与四次挥手\",\"t\":[\"三次握手和四次挥手都是TCP协议中用于建立和关闭连接的过程。\",\"三次握手（Three-way Handshake）用于建立连接，具体步骤如下：\",\"客户端向服务器发送一个SYN包（同步序列编号）。\",\"服务器收到客户端的SYN包后，确认收到，并向客户端发送一个SYN-ACK包（同步确认）。\",\"客户端收到服务器的SYN-ACK包后，再向服务器发送一个ACK包（确认），完成连接的建立。\",\"四次挥手（Four-way Handshake）用于关闭连接，具体步骤如下：\",\"客户端向服务器发送一个FIN包（结束请求）。\",\"服务器收到客户端的FIN包后，确认收到，并向客户端发送一个ACK包，表示已收到关闭请求。\",\"服务器继续向客户端发送一个FIN包。\",\"客户端收到服务器的FIN包后，确认收到，并向服务器发送一个ACK包，表示已收到关闭请求确认。此时连接关闭。\",\"在四次挥手过程中，第一次的FIN包是由发起关闭的一方发送的，而第二次的FIN包则是由被动关闭的一方发送的。这是因为TCP连接是一个双向通信的通道，双方都有可能主动发起关闭。\",\"三次握手和四次挥手的目的是确保连接的可靠建立和关闭。三次握手建立了连接的双向确认和初始化序列号，而四次挥手则确保双方都完成了数据的传输，并且可以安全地关闭连接。\",\"需要注意的是，由于网络环境的不确定性，四次挥手的过程可能会出现延迟、重传和丢包等情况，因此在实际应用中需要注意处理这些异常情况，以确保连接的可靠关闭。\"]},\"362\":{\"h\":\"Express\"},\"363\":{\"h\":\"简介\",\"t\":[\"Express 是一个简洁、灵活的 Node.js（JavaScript 运行时环境）Web 应用程序框架。它提供了一组强大的功能，用于快速构建和开发 Web 应用程序和 API。\",\"Express 框架以其简单易用而受到广泛喜爱。它基于 Node.js 构建，利用了 Node.js 强大的异步和事件驱动特性，使得开发人员能够使用 JavaScript 在服务器端构建高性能的 Web 应用程序。\",\"Express 提供了丰富的功能和插件体系，开发者可以将其用于处理路由和请求、处理静态文件和资源、使用模板引擎渲染视图、处理会话和身份验证、连接数据库等。Express 还支持各种第三方中间件，使得开发人员可以轻松地拓展和定制应用程序的功能。\",\"Express 框架的特点包括：\",\"简单易用：具有简洁的 API，容易上手和学习。\",\"灵活性：开发者可以选择需要的功能和插件，定制化自己的应用程序。\",\"高性能：利用 Node.js 异步和事件驱动的特性，性能优越。\",\"社区支持：Express 拥有庞大的开发者社区和活跃的维护者，提供了大量的文档和资源。\",\"总之，Express 是一个强大而受欢迎的 Node.js Web 应用程序框架，适合构建各种规模的 Web 应用程序和 API。无论是初学者还是经验丰富的开发者，都可以从 Express 中获得便捷和灵活的开发体验。\"]},\"364\":{\"h\":\"安装和基本配置\",\"t\":[\"安装 Node.js：首先，确保您的计算机上已安装 Node.js 运行时环境。您可以在 Node.js 官方网站 (https://nodejs.org) 下载适合您操作系统的最新版本并进行安装。\",\"创建项目目录：打开命令行终端窗口，并在您计划创建新项目的位置创建一个新的文件夹。例如，您可以执行以下命令来创建一个名为 \\\"my-express-app\\\" 的项目目录：\",\"mkdir my-express-app cd my-express-app \",\"初始化项目：一旦进入了项目目录，可以使用 npm init 命令来初始化项目，并按照提示设置项目的基本信息。执行以下命令：\",\"npm init \",\"安装 Express：在项目目录下执行以下命令来安装 Express 框架：\",\"npm install express \",\"创建入口文件：在项目目录下创建一个名为 index.js（或者其他名称）的文件，这将成为 Express 应用程序的入口文件。\",\"编写基本配置：在 index.js 文件中，使用以下基本代码来编写 Express 应用程序的基本配置：\",\"const express = require('express'); const app = express(); const port = 3000; // 对根路径的GET请求进行处理 app.get('/', (req, res) => { res.send('Hello Express!'); }); // 启动应用并监听端口 app.listen(port, () => { console.log(`Express app listening at http://localhost:${port}`); }); \",\"启动应用程序：在命令行终端窗口中，进入项目目录并执行以下命令来启动 Express 应用程序：\",\"node index.js \",\"测试应用程序：在浏览器中访问 http://localhost:3000，您应该能看到输出 \\\"Hello Express!\\\"，这表示您的 Express 应用程序已成功运行了。\",\"这只是一个 Express 应用程序的基本配置示例，您可以根据自己的需求和业务逻辑进行扩展和定制。例如，您可以定义更多的路由、使用中间件、连接数据库等。\"]},\"365\":{\"h\":\"路由和处理请求\",\"t\":[\"在 Express 中，路由用于定义应用程序如何响应特定的 HTTP 请求。您可以根据请求的路径和方法来定义路由，并为每个路由指定一个处理函数来处理请求。\",\"下面是使用 Express 定义路由和处理请求的常见方法：\",\"基本路由定义：\",\"使用 app.get(path, handler) 定义 GET 请求的路由。\",\"使用 app.post(path, handler) 定义 POST 请求的路由。\",\"使用 app.put(path, handler) 定义 PUT 请求的路由。\",\"使用 app.delete(path, handler) 定义 DELETE 请求的路由。\",\"这里的 path 是路由的路径，可以是字符串或带有参数的路径模式；handler 则是处理请求的回调函数，它接收请求和响应对象作为参数。\",\"例如：\",\"app.get('/', (req, res) => { res.send('Hello Express!'); }); \",\"路由参数：\",\"使用 app.get('/users/:id', handler) 定义带有路由参数的路由。id 是一个变量名，可以在处理函数中使用 req.params.id 来获取其值。\",\"例如：\",\"app.get('/users/:id', (req, res) => { const userId = req.params.id; res.send(`User ID: ${userId}`); }); \",\"查询参数：\",\"使用 req.query 对象来获取查询参数。查询参数是附加到 URL 后的键值对，使用 ? 来表示，多个参数之间使用 & 分隔。\",\"例如，对于请求 http://localhost:3000/users?id=123&name=John：\",\"app.get('/users', (req, res) => { const userId = req.query.id; const userName = req.query.name; res.send(`User ID: ${userId}, User Name: ${userName}`); }); \",\"错误处理：\",\"使用 app.use(errorHandler) 定义一个错误处理中间件。错误处理中间件可以处理在路由处理函数或其他中间件中发生的错误，并返回适当的响应。\",\"例如：\",\"app.get('/users/:id', (req, res) => { const userId = req.params.id; // 模拟错误 if (!userId) { throw new Error('User ID is required'); } // 其他处理逻辑 res.send(`User ID: ${userId}`); }); // 错误处理中间件 app.use((err, req, res, next) => { res.status(500).send(err.message); }); \",\"这些是 Express 中基本的路由定义和处理请求的方法。您可以在应用程序中定义多个路由，根据需求处理不同的HTTP请求，执行相应的操作，并发送适当的响应。根据路由的路径和参数，您可以根据自己的业务逻辑来编写处理请求的代码。\"]},\"366\":{\"h\":\"中间件\",\"t\":[\"在 Express 中，中间件是一个函数，可以访问请求对象（req）、响应对象（res）和应用程序中的下一个中间件函数（next）。它用于执行各种任务，例如处理请求前的预处理、路由处理、错误处理等。\",\"在 Express 中使用中间件的常见方法有以下几种：\",\"内置中间件： Express 提供了一些常用的内置中间件，可以通过 app.use() 方法来使用它们。例如：\",\"express.static：用于提供静态文件（如图像、CSS 和 JavaScript 文件）的中间件。\",\"app.use(express.static('public')); \",\"这样可以将位于项目根目录下的 public 目录中的文件映射到 / 路径下。\",\"express.json：用于解析请求体中的 JSON 数据的中间件。\",\"app.use(express.json()); \",\"express.urlencoded：用于解析请求体中的 URL 编码数据的中间件。\",\"app.use(express.urlencoded({ extended: true })); \",\"自定义中间件： 您还可以编写自定义的中间件函数，以便执行特定的任务或逻辑。自定义中间件需要传入 req、res 和 next 参数，并通过调用 next() 方法将控制权传递给下一个中间件或路由处理函数。\",\"例如，下面是一个简单的自定义中间件，用于输出当前请求的时间戳：\",\"const requestTimeLogger = (req, res, next) => { const requestTime = new Date().toLocaleString(); console.log(`Request Time: ${requestTime}`); next(); }; app.use(requestTimeLogger); \",\"路由级中间件： 中间件可以仅应用于特定的路由或路由组。通过将中间件作为路由处理函数进行定义，可以将其应用于特定的路由。\",\"例如，下面是一个路由级中间件，仅在 /users 路由下进行日志记录：\",\"const userLogger = (req, res, next) => { console.log('Logging user request...'); next(); }; app.use('/users', userLogger); \",\"错误处理中间件： 错误处理中间件用于处理在请求处理过程中发生的错误。它们可以捕获错误对象并发送适当的响应。\",\"例如：\",\"const errorHandler = (err, req, res, next) => { console.error(err); res.status(500).send('Internal Server Error'); }; app.use(errorHandler); \",\"这些是 Express 中使用中间件的常见方法。您可以根据自己的需求编写和使用中间件，在请求处理过程中执行自定义逻辑、处理错误和增强应用程序的功能。\"]},\"367\":{\"h\":\"模板引擎和视图\",\"t\":[\"模板引擎是一种用于生成动态 HTML、XML、JSON 等内容的工具。它们允许将静态模板与动态数据结合，生成最终的输出内容。常见的模板引擎有 EJS、Handlebars、Pug（前称Jade）、Mustache 等。\",\"视图是 Web 应用程序中用于呈现用户界面的组件。它可以是一个完整的网页、页面的一部分或者是一段纯文本。视图根据动态数据和模板引擎生成最终的输出，然后发送给客户端进行展示。\",\"在典型的Web应用程序中，视图通常与路由和控制器配合使用。当收到客户端请求时，服务器端的处理逻辑（通常是控制器）会根据请求的路由决定需要使用哪个视图来生成响应。控制器会从数据库或其他数据源中获取数据，然后将数据和视图模板一起传递给模板引擎，生成最终的输出。\",\"下面是一个基本的示例，演示了使用 Express 框架和 EJS 模板引擎的视图生成过程：\",\"安装必要的依赖：\",\"npm install express ejs \",\"创建一个包含视图模板的 views 目录，并在其中创建一个名为 index.ejs 的视图文件：\",\"<!DOCTYPE html> <html> <head> <title>My Web App</title> </head> <body> <h1>Welcome to ___EJS0___</h1> <p>Today is ___EJS1___</p> </body> </html> \",\"在应用程序的主文件中设置 Express 应用程序，并定义路由处理逻辑：\",\"const express = require('express'); const app = express(); // 设置模板引擎为 EJS app.set('view engine', 'ejs'); // 定义根路由 app.get('/', (req, res) => { // 模拟从数据库中获取数据 const pageTitle = 'My Web App'; const currentDate = new Date().toLocaleDateString(); // 使用视图模板渲染页面，并传递动态数据 res.render('index', { pageTitle, currentDate }); }); // 启动应用程序 app.listen(3000, () => { console.log('Server is running on port 3000'); }); \",\"运行应用程序并在浏览器中访问 http://localhost:3000，您将看到生成的动态页面内容。\",\"在上述示例中，当客户端访问根路径时，应用程序会使用 res.render 方法将 index.ejs 视图与动态数据进行渲染。模板引擎会将动态数据插入到视图模板中，然后生成最终的 HTML 响应。最后，该响应会发送给客户端进行展示。\"]},\"368\":{\"h\":\"静态文件和资源\",\"t\":[\"静态文件和资源是指在 Web 应用程序中不需要经过处理或修改的文件，如 HTML、CSS、JavaScript、图像、音频、视频等。这些文件在客户端请求时会直接被发送给客户端，而无需通过动态处理或生成。\",\"静态文件和资源的存放位置一般是在 Web 服务器中的特定目录下，常见的目录名包括 public、static、assets 等，但实际的命名可以根据应用程序的需要自行定义。\",\"下面是一个示例来说明如何在 Express 应用程序中提供静态文件和资源：\",\"创建一个包含静态文件和资源的目录，如 public 或 static。\",\"将需要提供给客户端的静态文件和资源放置到该目录下。例如，将 style.css 和 image.jpg 文件放到 public 目录下。\",\"在应用程序的主文件中使用 Express 的静态文件中间件，将静态文件和资源的目录指定为参数。\",\"const express = require('express'); const app = express(); // 指定静态文件和资源的目录 app.use(express.static('public')); // 其他处理逻辑... // 启动应用程序 app.listen(3000, () => { console.log('Server is running on port 3000'); }); \",\"运行应用程序并访问静态文件或资源的路径。例如，可以通过访问 http://localhost:3000/style.css 来获取 style.css 文件，或通过 <img src=\\\"image.jpg\\\"> 在 HTML 中引用 image.jpg 图像。\",\"在上述示例中，express.static 中间件会根据指定的目录路径将静态文件和资源发送给客户端。当客户端请求的路径与静态文件路径匹配时，Express 会自动定位并发送相应的文件内容。\",\"总结来说，静态文件和资源允许直接从服务器发送给客户端，无需经过动态处理。通过使用 Express 的静态文件中间件，您可以轻松地为应用程序提供静态文件和资源。\"]},\"369\":{\"h\":\"数据库集成\",\"t\":[\"在Web应用程序中，数据库集成是指将数据库与应用程序连接起来，并通过编程方式来读取、写入、更新和删除数据。数据库集成可以帮助应用程序管理和存储数据，使其能够处理复杂的业务逻辑和查询操作。\",\"下面是一些常见的数据库集成的步骤：\",\"选择数据库：首先需要选择适合应用程序需求的数据库。常见的关系型数据库包括MySQL、PostgreSQL和Oracle，而常见的非关系型数据库包括MongoDB和Redis。每种数据库都有其特点和优势，根据应用程序的要求选择合适的数据库。\",\"安装数据库驱动程序：大多数数据库都有官方的驱动程序或第三方库，用于与特定数据库进行通信。在开始集成之前，您需要安装适用于您选定数据库的驱动程序或库。\",\"连接数据库：通过驱动程序提供的接口，您需要建立与数据库的连接。这通常涉及提供数据库的连接URL、用户名、密码等信息。\",\"执行数据库操作：一旦与数据库建立了连接，您可以使用驱动程序提供的API执行各种数据库操作，如插入数据、查询数据、更新数据和删除数据。\",\"例如，以下是使用Node.js和MongoDB进行数据库集成的示例：\",\"const MongoClient = require('mongodb').MongoClient; // 连接数据库 const url = 'mongodb://localhost:27017/mydatabase'; MongoClient.connect(url, (err, client) => { if (err) { console.error('Failed to connect to database:', err); } else { console.log('Connected to database'); // 获取数据库和集合对象 const db = client.db(); const collection = db.collection('users'); // 插入数据 const newUser = { name: 'John', age: 25 }; collection.insertOne(newUser, (err, result) => { if (err) { console.error('Failed to insert document:', err); } else { console.log('Inserted document:', result.ops[0]); } // 关闭数据库连接 client.close(); }); } }); \",\"在上述示例中，首先使用 MongoClient 连接到 MongoDB 数据库。然后，通过 db.collection 方法获取到 users 集合。随后，可以使用 collection.insertOne 方法插入新的用户文档，并在回调中处理插入结果。最后，使用 client.close 关闭数据库连接。\",\"这只是一个简单的例子，数据库集成可以更加复杂，根据您的应用程序需求和所选的数据库系统，可能需要进行更多的操作，如查询数据、更新数据、建立索引等。\"]},\"370\":{\"h\":\"身份认证和授权\",\"t\":[\"身份认证和授权是在Web应用程序中用于确保用户的身份验证和控制访问权限的关键概念。\",\"身份认证（Authentication）是验证用户的身份真实性的过程。它确保用户是其所声称的身份。一旦用户提供了凭据（如用户名和密码），系统将验证这些凭据是否有效，并为用户创建一个对应的身份标识，以便后续的操作和访问。\",\"授权（Authorization）则是基于用户的身份认证信息，对其在系统中的资源和功能进行访问控制。授权决定用户是否被允许执行特定的操作、访问特定的数据或使用特定的功能。通过授权，可以确保只有经过身份验证的用户才能获取所需的权限，从而保护系统的安全性和用户的隐私。\",\"以下是一些常见的身份认证和授权技术：\",\"基于表单的身份认证：用户通过输入用户名和密码等凭据，将其发送到服务器进行验证。常见的实现方式包括使用Session和Cookie机制，以及Token-Based身份认证，如JSON Web Tokens（JWT）。\",\"第三方身份提供者（Third-party Identity Providers）：应用程序使用第三方身份提供者（如Google、Facebook、GitHub）来验证用户的身份。通过OAuth和OpenID Connect等协议，应用程序可以获取用户的身份认证信息并进行授权。\",\"单点登录（Single Sign-On，SSO）：用户只需一次进行身份认证，即可在多个应用程序或系统中访问受保护的资源，而无需再次提供凭据。这种集中式的身份认证机制减少了用户的密码管理负担。\",\"访问控制列表（Access Control Lists，ACL）：定义哪些用户具有对资源的访问权限。ACL通常包含用户、角色和权限的组合关系，根据用户的身份和角色，系统可以判断用户是否有权访问特定的资源。\",\"角色-Based访问控制（RBAC）：将用户划分为不同的角色，每个角色拥有一组预定义的权限。通过将用户分配给特定的角色，可以管理和控制用户的访问权限。\",\"身份认证和授权是保护Web应用程序安全性的重要组成部分。\"]},\"371\":{\"h\":\"API 开发\",\"t\":[\"API（Application Programming Interface，应用程序编程接口）开发是指创建用于与其他软件应用程序进行交互和通信的接口。通过API，不同的应用程序可以共享数据和功能，实现数据的传输和操作。\",\"以下是API开发的一般步骤：\",\"设计API：首先，确定API的目的和功能。定义API应该提供哪些数据和操作，并确定接口的输入和输出格式。这通常涉及设计API端点、请求参数和预期的响应格式。\",\"选择API协议和格式：选择合适的API协议和数据格式，以实现与客户端应用程序的通信。常见的API协议包括REST（Representational State Transfer）、GraphQL和SOAP（Simple Object Access Protocol），而常见的数据格式包括JSON（JavaScript Object Notation）和XML（eXtensible Markup Language）。\",\"实现API端点：根据设计的API规范，实现API端点，即API的不同路由和功能。使用所选的编程语言和框架，编写处理客户端请求的代码，并返回正确的响应。\",\"身份验证和授权：根据应用程序的需求，实现适当的身份验证和授权机制。验证用户的身份，确保其具有执行所请求操作的权限，并限制对敏感数据的访问。\",\"数据存储和处理：如果API需要访问和操作数据，需要集成与数据库或其他数据存储系统的交互。这可以涉及读取和写入数据、执行查询和更新操作等。\",\"文档和测试：编写清晰、准确的API文档，包括API端点、请求和响应格式、错误处理等信息。进行API测试，确保API的正确功能和性能。\",\"部署和维护：将API部署到适当的服务器环境中，并监视API的运行状况。根据需要进行版本控制、错误修复和性能优化。\",\"客户端集成：向开发人员提供适当的客户端库、SDK（Software Development Kit）或文档，以便他们可以轻松地集成和使用您的API。\",\"API开发是构建应用程序和服务的关键环节之一。在开发API时，需要考虑安全性、性能、可伸缩性和可维护性等方面。选择适当的工具和技术，并遵循最佳实践，可以帮助您创建出高效和易于使用的API。\"]},\"372\":{\"h\":\"测试和调试\",\"t\":[\"测试和调试是软件开发过程中关键的环节，用于确保应用程序的正确性、稳定性和性能。以下是一些常见的测试和调试技术和方法：\",\"单元测试（Unit Testing）：针对应用程序的最小可测试单元（如函数、方法或类）编写测试代码，验证其行为是否符合预期。单元测试通常使用测试框架（如JUnit、PyTest）来自动化测试过程。\",\"集成测试（Integration Testing）：测试多个组件或模块的集成，以验证它们之间的交互和协同工作是否正常。集成测试可以确保组件之间的接口能够正确传递数据和消息。\",\"系统测试（System Testing）：对整个系统进行全面的测试，以确保软件系统的功能和性能符合需求。系统测试可以包括功能测试、性能测试、安全性测试等。\",\"用户界面测试（UI Testing）：通过自动化工具或手动操作，测试应用程序的用户界面，验证用户交互是否符合预期，并确保界面响应正常。\",\"性能测试（Performance Testing）：通过模拟实际负载或压力条件，评估应用程序的性能和可扩展性。性能测试可以检测系统的瓶颈，找出性能问题并进行优化。\",\"调试工具和技术：使用调试器工具（如GDB、Xcode Debugger）来跟踪和定位代码中的错误和异常。通过断点、变量查看、堆栈跟踪等功能，可以逐步分析程序的执行过程。\",\"日志记录和错误追踪：在应用程序中添加适当的日志记录，以记录运行时的信息和错误。使用错误追踪工具（如Sentry、Bugsnag）可以帮助收集和分析应用程序中的错误和异常。\",\"A/B测试：通过同时运行两个或多个版本的应用程序，来评估不同设计、功能或优化的效果。A/B测试可以帮助确定哪个版本对于用户更有效，从而做出更好的决策。\",\"测试和调试是迭代的过程，在开发过程的不同阶段都需要进行。良好的测试和调试实践可以提高应用程序的质量、稳定性和用户体验。\"]},\"373\":{\"h\":\"ReactRouter\"},\"374\":{\"h\":\"概念\",\"t\":[\"React Router 是一个用于构建单页应用的声明式路由库。它允许你通过将组件与 URL 相关联来构建一个动态的 UI。React Router 提供了一些组件和 API，用于创建和管理路由，以及导航用户从一个 URL 到另一个 URL。\"]},\"375\":{\"h\":\"安装React Router\",\"t\":[\"可以使用npm或yarn来安装React Router。在终端中运行以下命令：npm install react-router-dom 或 yarn add react-router-dom\"]},\"376\":{\"h\":\"路由器（Router）组件\",\"t\":[\"在应用程序的最顶层，需要将<BrowserRouter>或<HashRouter>作为根组件进行包裹。BrowserRouter使用浏览器的HTML5 history API，而HashRouter使用URL的哈希值。例如：\",\"import { BrowserRouter as Router, Route, Switch } from 'react-router-dom'; function App() { return ( <Router> {/* 路由组件 */} </Router> ); } \"]},\"377\":{\"h\":\"路由（Route）组件\",\"t\":[\"用于定义路径与组件之间的关联关系。例如，当访问路径/home时，显示Home组件：\",\"<Route path=\\\"/home\\\" component={Home} /> \"]},\"378\":{\"h\":\"Switch组件\",\"t\":[\"用于将多个<Route>组件包裹在一起，只渲染匹配的第一个路由组件。这对于避免多个路由同时匹配的问题非常有用。例如：\",\"<Switch> <Route exact path=\\\"/\\\" component={Home} /> <Route path=\\\"/about\\\" component={About} /> <Route path=\\\"/contact\\\" component={Contact} /> <Route component={NotFound} /> {/* 所有未匹配的路径都会显示NotFound组件 */} </Switch> \"]},\"379\":{\"h\":\"嵌套路由（Nested Routes）\",\"t\":[\"React Router允许使用嵌套路由，以便在组件层次结构中创建多个级别的路由。例如：\",\"<Route path=\\\"/users\\\" component={Users}> <Route path=\\\"/users/:id\\\" component={UserProfile} /> <Route path=\\\"/users/:id/posts\\\" component={UserPosts} /> </Route> \"]},\"380\":{\"h\":\"跳转（Navigation）\",\"t\":[\"React Router提供了<Link>和<NavLink>组件用于在应用程序中进行导航。<Link>组件用于一般性的导航，而<NavLink>组件用于在当前路由与导航路径匹配时添加样式。例如：\",\"import { Link, NavLink } from 'react-router-dom'; function Navigation() { return ( <nav> <ul> <li> <Link to=\\\"/home\\\">Home</Link> </li> <li> <NavLink to=\\\"/about\\\" activeClassName=\\\"active\\\">About</NavLink> </li> <li> <NavLink to=\\\"/contact\\\" activeClassName=\\\"active\\\">Contact</NavLink> </li> </ul> </nav> ); } \"]},\"381\":{\"h\":\"带参数的路由（Route Parameters）\",\"t\":[\"React Router允许在路由中使用动态参数，这对于根据特定参数显示不同内容非常有用。例如：\",\"<Route path=\\\"/users/:id\\\" component={UserProfile} /> \"]},\"382\":{\"h\":\"重定向路由\",\"t\":[\"Redirect 组件用于在路由匹配失败时进行重定向。可以在需要进行条件判断并跳转的情况下使用 Redirect 组件。\",\"<Route path=\\\"/\\\"> <Redirect to=\\\"/home\\\" /> </Route> \"]},\"383\":{\"h\":\"编程式导航（Programmatic Navigation）\",\"t\":[\"React Router提供了一些方法，可以通过代码进行导航，而不是手动点击导航链接。例如，可以在组件中使用history对象进行导航:\",\"import { useHistory } from 'react-router-dom'; function MyComponent() { const history = useHistory(); function handleClick() { history.push('/new-route'); } return ( <button onClick={handleClick}>Go to New Route</button> ); } \"]},\"384\":{\"h\":\"带有历史记录的跳转\",\"t\":[\"可以使用浏览器的历史记录API进行路由跳转，并保持正确的URL历史记录。\",\"下面是如何在 react-router5 中实现带有历史记录的跳转的详细步骤：\",\"首先，确保你已经安装了 react-router 和相关的依赖。你可以使用 npm 或 yarn 进行安装：\",\"npm install react-router@5 history \",\"创建一个 Router 组件，用于定义应用的路由和导航。在这个组件中，你可以使用 <Route> 组件来定义每个路由，并指定它们对应的组件。\",\"import React from 'react'; import { Router, Route } from 'react-router5'; import Home from './components/Home'; import About from './components/About'; import Contact from './components/Contact'; const router = new Router(); const routes = [ { name: 'home', path: '/', component: Home }, { name: 'about', path: '/about', component: About }, { name: 'contact', path: '/contact', component: Contact }, ]; router.add(routes); const App = () => { return ( <Router router={router}> <Route path=\\\"/\\\" component={Home} /> <Route path=\\\"/about\\\" component={About} /> <Route path=\\\"/contact\\\" component={Contact} /> </Router> ); }; \",\"在主组件中，使用 <Link> 组件来创建导航链接。该组件会自动为你添加相应的点击事件，以便在点击时触发路由跳转。\",\"import React from 'react'; import { Link } from 'react-router5'; const Navigation = () => { return ( <nav> <ul> <li> <Link routeName=\\\"home\\\">Home</Link> </li> <li> <Link routeName=\\\"about\\\">About</Link> </li> <li> <Link routeName=\\\"contact\\\">Contact</Link> </li> </ul> </nav> ); }; \",\"在每个路由组件中，你可以使用 router 属性来访问路由器的功能，包括跳转和导航。\",\"import React from 'react'; const Home = ({ router }) => { const handleClick = () => { router.navigate('about'); }; return ( <div> <h1>Home</h1> <button onClick={handleClick}>Go to About</button> </div> ); }; \",\"这样，当点击按钮时，路由器将会使用历史记录对应的 navigate 方法进行跳转。这将触发页面的重新渲染，并显示 About 组件。\"]},\"385\":{\"h\":\"路由保护\",\"t\":[\"可以配置保护某些路由，需要用户进行身份验证或其他权限验证才能访问。\",\"在react-router5中实现路由保护可以通过以下几个步骤：\",\"定义路由配置：在React组件中定义一个路由配置对象，包含需要进行保护的路由以及它们对应的组件。\",\"const routes = [ { path: '/', name: 'Home', component: Home }, { path: '/protected', name: 'Protected', component: Protected, protected: true // 标记该路由需要保护 }, { path: '/login', name: 'Login', component: Login } ]; \",\"创建一个高阶组件（HOC）来处理路由保护逻辑：\",\"const ProtectedRoute = ({ component: Component, ...rest }) => { const isAuthenticated = checkAuth(); // 检查当前用户是否已认证 // 根据用户认证状态进行路由渲染 return ( <Route {...rest} render={props => isAuthenticated ? ( <Component {...props} /> ) : ( <Redirect to=\\\"/login\\\" /> ) } /> ); }; \",\"在应用程序中使用路由配置和保护路由：\",\"<Router> <Switch> {routes.map((route, index) => { if (route.protected) { return <ProtectedRoute {...route} key={index} />; } else { return <Route {...route} key={index} />; } })} </Switch> </Router> \",\"上述代码中，我们通过ProtectedRoute高阶组件来包装需要保护的路由，并在路由渲染时根据用户认证状态决定渲染目标组件还是重定向到登录页面。\",\"在认证逻辑中实现checkAuth函数：根据你的具体业务情况，编写一个函数来检查用户的认证状态。你可以将用户的认证信息存储在状态管理库（如Redux）中，或者通过其他方式进行判断。\"]},\"386\":{\"h\":\"路由参数传递\",\"t\":[\"可以在路由之间传递参数，以便在不同组件之间共享数据。\",\"路由路径参数： 在路由的路径中定义参数，然后将参数的值嵌入到 URL 中。在组件中可以通过 useParams 钩子或者 withRouter 高阶组件来获取参数的值。\",\"示例代码如下：\",\"import { BrowserRouter, Route, Switch, useParams } from 'react-router-dom'; function MyComponent() { const { id } = useParams(); return ( <div> <h1>路由参数: {id}</h1> </div> ); } function App() { return ( <BrowserRouter> <Switch> <Route path=\\\"/my-component/:id\\\" component={MyComponent} /> </Switch> </BrowserRouter> ); } // 在 URL 中访问：/my-component/123 // 输出：路由参数: 123 \",\"查询参数： 在 URL 中使用查询字符串来传递参数。可以使用 useLocation 钩子或者 withRouter 高阶组件来获取查询参数的值。\",\"示例代码如下：\",\"import { BrowserRouter, Route, Switch, useLocation } from 'react-router-dom'; function MyComponent() { const location = useLocation(); const params = new URLSearchParams(location.search); const id = params.get('id'); return ( <div> <h1>查询参数: {id}</h1> </div> ); } function App() { return ( <BrowserRouter> <Switch> <Route path=\\\"/my-component\\\" component={MyComponent} /> </Switch> </BrowserRouter> ); } // 在 URL 中访问：/my-component?id=123 // 输出：查询参数: 123 \"]},\"387\":{\"h\":\"路由事件\",\"t\":[\"可以监听和触发路由事件，以便在路由更改时执行自定义逻辑。\",\"history.listen(callback)：当路由发生变化时触发回调函数。可以在回调函数中执行一些需要在路由变化时执行的操作。例如：\",\"import { useHistory } from 'react-router-dom'; function MyComponent() { const history = useHistory(); useEffect(() => { const unlisten = history.listen((location, action) => { console.log('路由发生变化', location.pathname, action); // 执行其他操作 }); return () => { unlisten(); }; }, [history]); // ... return ( // ... ); } \",\"history.block(prompt)：在路由切换前触发提示框，用于询问用户是否继续导航。prompt参数是一个函数，它接受一个location对象作为参数并返回一个字符串或true。如果返回一个字符串，将触发一个带有提示消息的确认框。例如：\",\"import { useHistory } from 'react-router-dom'; function MyComponent() { const history = useHistory(); useEffect(() => { const unblock = history.block((location) => { if (location.pathname === '/protected') { return '确定要离开此页面吗?'; } return true; }); return () => { unblock(); }; }, [history]); // ... return ( // ... ); } \",\"Route组件的onEnter和onExit属性：可以在Route组件中使用onEnter和onExit属性，指定在进入或离开路由时触发的回调函数。注意，这仅适用于class组件，不适用于函数式组件。例如：\",\"import { Route } from 'react-router-dom'; class MyComponent extends React.Component { handleEnter = () => { console.log('进入路由'); // 执行其他操作 } handleExit = () => { console.log('离开路由'); // 执行其他操作 } render() { return ( <Route path=\\\"/my-route\\\" component={MyRouteComponent} onEnter={this.handleEnter} onExit={this.handleExit} /> ); } } \"]},\"388\":{\"h\":\"基本用法\",\"t\":[\"import React from 'react'; import { BrowserRouter as Router, Route, Link } from 'react-router-dom'; const App = () => ( <Router> <div> <ul> <li> <Link to=\\\"/\\\">Home</Link> </li> <li> <Link to=\\\"/about\\\">About</Link> </li> <li> <Link to=\\\"/users\\\">Users</Link> </li> </ul> {/* 路由匹配组件 */} <Route path=\\\"/\\\" exact component={Home} /> <Route path=\\\"/about\\\" component={About} /> <Route path=\\\"/users\\\" component={Users} /> </div> </Router> ); const Home = () => <h2>Home</h2>; const About = () => <h2>About</h2>; const Users = () => <h2>Users</h2>; export default App; \"]},\"389\":{\"h\":\"路由重定向\",\"t\":[\"路由重定向可以通过使用 <Routes> 组件和 <Route> 组件的 element 属性来实现。以下是一个使用重定向的示例：\",\"import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom'; function App() { return ( <Router> <Routes> <Route path=\\\"/\\\" element={<Home />} /> <Route path=\\\"/dashboard\\\" element={<Navigate to=\\\"/dashboard/profile\\\" />} /> <Route path=\\\"/dashboard/profile\\\" element={<Profile />} /> <Route path=\\\"/dashboard/settings\\\" element={<Settings />} /> </Routes> </Router> ); } function Home() { return <h1>Welcome to the Home page!</h1>; } function Profile() { return <h1>Welcome to the Profile page!</h1>; } function Settings() { return <h1>Welcome to the Settings page!</h1>; } export default App; \",\"在上面的例子中，当用户访问 \\\"/dashboard\\\" 路径时，会自动重定向到 \\\"/dashboard/profile\\\" 路径。这是通过 <Navigate> 组件实现的。\",\"请注意，<Routes> 组件是在 react-router v6 中引入的新组件。它取代了 v5 中的 <Switch> 组件，并允许嵌套路由。<Routes> 组件可以包含多个 <Route> 组件，每个 <Route> 组件都可以通过 element 属性指定要渲染的组件。\",\"除了重定向，还可以使用 <Route> 组件的 render 或 children 属性来动态渲染组件，具体取决于路由的匹配情况。这使得在控制台或用户权限验证等方面更加灵活。\"]},\"390\":{\"h\":\"路由模式\",\"t\":[\"有三种路由模式可供选择：BrowserRouter 和 MemoryRouter、HashRouter。\",\"BrowserRouter：常用于 Web 应用，使用 HTML5 的 history API 实现，可以在 URL 中使用正常的路径。\",\"MemoryRouter：常用于非浏览器环境，例如 React Native 或 Electron，不会改变 URL，而是将路由信息保存在内存中。\",\"HashRouter:用于 Web 浏览器中，当由于某种原因不应（或不能）将 URL 发送到服务器时\"]},\"391\":{\"h\":\"动态路由\",\"t\":[\"动态路由可以通过使用 <Route> 组件的 path 属性来定义。下面是一个示例：\",\"import { Route } from 'react-router-dom'; function App() { return ( <div> <Route path=\\\"/user/:id\\\" element={<User />} /> </div> ); } function User() { // 在这里可以通过 useParams() 钩子来获取动态路由参数 const params = useParams(); const userId = params.id; return ( <div> <h1>User ID: {userId}</h1> </div> ); } \",\"在上面的示例中，<Route> 组件的 path 属性是 /user/:id，其中的 :id 表示一个动态的路由参数。当用户访问 /user/123 这个路径时，User 组件会被渲染，并通过 useParams() 钩子获取到动态路由参数 { id: '123' }。在 User 组件中，我们可以根据需要使用这个参数。\",\"除了使用 useParams() 钩子来获取动态路由参数，React Router v6 还提供了其他一些钩子和函数，如 useNavigate() 用于跳转页面，useLocation() 用于获取当前路由信息等。\"]},\"392\":{\"h\":\"路由匹配\",\"t\":[\"路由匹配是通过<Routes>组件来实现的。这个组件可以包含多个<Route>组件，每个<Route>定义了一个URL模式和对应的组件。\",\"下面是一个例子来说明如何进行路由匹配：\",\"import { BrowserRouter as Router, Routes, Route } from 'react-router-dom'; function App() { return ( <Router> <Routes> <Route path=\\\"/\\\" element={<Home />} /> <Route path=\\\"/about\\\" element={<About />} /> <Route path=\\\"/users\\\" element={<Users />}> <Route path=\\\"/\\\" element={<UsersList />} /> <Route path=\\\":id\\\" element={<UserDetail />} /> </Route> <Route path=\\\"*\\\" element={<NotFound />} /> </Routes> </Router> ); } \",\"在上面的例子中，<Routes>包含了四个<Route>组件，它们定义了不同的URL模式和对应的组件。当URL匹配到某个模式时，对应的组件会被渲染到页面上。\",\"第一个<Route>的路径是 \\\"/\\\"，代表默认的首页，当URL为根路径时，会渲染<Home>组件。\",\"第二个<Route>的路径是 \\\"/about\\\"，当URL为 \\\"/about\\\" 时，会渲染<About>组件。\",\"第三个<Route>的路径是 \\\"/users\\\"，当URL为 \\\"/users\\\" 时，会渲染<Users>组件，并且该组件也定义了两个子路由。\",\"子路由的路径可以使用相对路径，比如子路由的第一个路径是 \\\"/\\\"，它的完整路径是 \\\"/users/\\\"，当URL为 \\\"/users/\\\" 时，会渲染<UsersList>组件。\",\"子路由的第二个路径是 \\\":id\\\"，它是一个参数化路径，当URL为 \\\"/users/1\\\" 时，会渲染<UserDetail>组件，并且该组件可以通过useParams()来获取 \\\":id\\\" 参数的值。\",\"最后一个<Route>没有指定路径，它是一个通配符路由，当URL没有匹配到前面定义的任何路径时，会渲染<NotFound>组件。\"]},\"393\":{\"h\":\"路由跳转\",\"t\":[\"使用 useNavigate 钩子函数：在函数组件中使用 useNavigate 钩子函数可以获取到 navigate 函数，用于执行路由跳转。可以通过以下方式进行跳转：\",\"import { useNavigate } from 'react-router-dom'; function MyComponent() { const navigate = useNavigate(); const handleClick = () => { navigate('/other-route'); // 跳转到 '/other-route' }; return ( <button onClick={handleClick}>跳转到其他路由</button> ); } \",\"使用 Link 组件：Link 组件是 React Router 提供的导航组件，用于在应用程序中创建链接。可以通过以下方式进行跳转：\",\"import { Link } from 'react-router-dom'; function MyComponent() { return ( <Link to=\\\"/other-route\\\">跳转到其他路由</Link> ); } \",\"使用 NavLink 组件：NavLink 组件是 Link 组件的扩展，用于创建带有样式的导航链接。可以通过以下方式进行跳转：\",\"import { NavLink } from 'react-router-dom'; function MyComponent() { return ( <NavLink to=\\\"/other-route\\\" activeClassName=\\\"active\\\">跳转到其他路由</NavLink> ); } \",\"路由历史对象： 在 React Router v6 中，路由历史对象是一个没有 state 和 action 的简单对象，你可以通过 useNavigate 钩子函数来访问它。useNavigate 返回了一个函数，你可以通过调用这个函数来进行导航。例如：\",\"import { useNavigate } from 'react-router-dom'; function MyComponent() { const navigate = useNavigate(); function handleClick() { navigate('/new-page'); } return <button onClick={handleClick}>Go to New Page</button>; } \",\"导航到新页面： 在 React Router v6 中，你可以直接调用 navigate 函数来导航到新页面。你只需要传递目标页面的路径作为参数。例如，navigate('/new-page') 将会导航到名为 new-page 的页面。\",\"替换路由： React Router v6 还引入了一个新的 replace 选项，它允许你执行一个替换而不是添加一个新的路由到历史记录中。例如，navigate('/new-page', { replace: true }) 将会替换当前的路由而不是添加一个新的历史记录。\",\"跳转到上一个页面： React Router v6 通过 useNavigate 钩子函数提供了一个 goBack 方法来实现返回上一个页面的功能。你只需要在点击事件中调用 goBack 方法即可。例如：\",\"import { useNavigate } from 'react-router-dom'; function MyComponent() { const navigate = useNavigate(); function handleGoBack() { navigate(-1); } return <button onClick={handleGoBack}>Go Back</button>; } \",\"注意，在 React Router v6 中，goBack 方法接受一个数字作为参数，表示你要回退的步数。-1 表示回退到上一个页面，-2 表示回退到上上个页面，依此类推。\"]},\"394\":{\"h\":\"路由高亮\",\"t\":[\"路由高亮功能可以通过使用 useRoutes 钩子函数和 NavLink 组件来完成。\",\"首先，我们需要安装 react-router-dom 包，它是 React Router 库的一部分，提供了在 Web 应用中进行路由导航的功能。\",\"npm install react-router-dom \",\"接下来，我们可以在应用的根组件中定义路由。在 React Router v6 中，路由规则被定义为一个路由配置对象，我们可以使用对象字面量来创建它。在这个配置对象中，我们可以定义一组路由规则，以及每个规则对应的组件。\",\"import { BrowserRouter as Router, Routes, Route, NavLink } from 'react-router-dom'; function App() { return ( <Router> <nav> <NavLink to=\\\"/\\\" end>Home</NavLink> <NavLink to=\\\"/about\\\">About</NavLink> </nav> <Routes> <Route path=\\\"/\\\" element={<Home />} /> <Route path=\\\"/about\\\" element={<About />} /> </Routes> </Router> ); } function Home() { return <h1>Home</h1>; } function About() { return <h1>About</h1>; } \",\"在上面的代码中，我们使用 NavLink 组件来创建导航链接。to 属性定义了链接的目标路径。end 属性表示只有当链接的路径和当前路径完全匹配时，链接才会被激活。\",\"在 Routes 组件内部，我们使用 Route 组件来定义每个路由规则。path 属性定义了路由匹配的路径，element 属性指定了匹配成功后应该渲染的组件。\",\"最后，我们需要在应用的入口点渲染 App 组件。\",\"import React from 'react'; import ReactDOM from 'react-dom'; import App from './App'; ReactDOM.render( <React.StrictMode> <App /> </React.StrictMode>, document.getElementById('root') ); \",\"这样就完成了基本的路由配置和导航链接的设置。当用户点击导航链接时，React Router v6 会根据路由规则进行匹配，并渲染对应的组件。同时，激活的导航链接会自动添加一个类名为 active，可以通过 CSS 样式来进行高亮显示。\"]},\"395\":{\"h\":\"路由过渡\",\"t\":[\"react-router v6引入了一些新的特性和变化，其中一个重要的改变是路由过渡的处理方式。在v6中，React Router提供了一种更加灵活和强大的方式来处理路由过渡。\",\"组件式过渡：在v6中，过渡效果可以通过在路由组件之间进行淡入淡出、滑动或其他类型的过渡来实现。我们可以使用React的过渡库（例如React Transition Group）来实现这些效果。通过在路由组件之间结合使用过渡库和css动画，可以实现更加复杂和灵活的过渡效果。\",\"路由状态管理：v6中的Route组件具有一种新的特性，可以通过路由状态管理器来控制路由过渡。通过使用类似于useState的钩子（useMatches）和钩子（useLocation）来访问当前的路由状态，我们可以监视路由的变化并根据需要执行过渡操作。这使得我们可以更好地控制路由过渡，并根据路由变化自定义过渡效果。\",\"过渡组件：除了在路由组件之间实现过渡效果外，v6还引入了过渡组件（Transition）来更方便地实现路由过渡。过渡组件是一个独立的组件，它可以包装需要过渡的内容并应用过渡效果。通过使用过渡组件，我们可以更简洁地定义路由过渡，并管理过渡状态。\",\"转场动画：v6还引入了转场动画（Transition Animation）的概念。转场动画是一种在路由切换过程中应用于页面元素的动画效果。通过使用转场动画，我们可以实现更加平滑和连续的页面切换效果。React Router提供了一些默认的转场动画效果和配置选项，我们也可以根据需要自定义转场动画。\",\"这些是React Router v6中路由过渡的一些新特性和变化。通过使用这些功能，我们可以更加灵活和强大地管理路由过渡，并实现各种各样的过渡效果。\"]},\"396\":{\"h\":\"Outlet\",\"t\":[\"Outlet 是一个用于渲染子路由的特殊组件。它作为父路由的占位符，用于在父组件中显示子组件。\",\"使用 Outlet 组件，可以在父组件中定义子路由的渲染位置。不同于 v5 版本中的 <Switch> 组件，v6 版本中的 Outlet 组件可以嵌套在其他组件中，并根据父组件的渲染位置自动渲染匹配的子组件。\",\"以下是一个示例，演示如何在父组件中使用 Outlet 渲染子组件：\",\"import { Outlet } from 'react-router-dom'; function ParentComponent() { return ( <div> <h1>父组件</h1> <nav> <ul> <li> <Link to=\\\"/\\\">首页</Link> </li> <li> <Link to=\\\"/about\\\">关于</Link> </li> <li> <Link to=\\\"/contact\\\">联系</Link> </li> </ul> </nav> <Outlet /> {/* 子组件渲染的位置 */} <footer>版权所有</footer> </div> ); } \",\"在上述示例中，ParentComponent 组件定义了一个包含导航菜单和页脚的父组件。Outlet 组件位于导航菜单和页脚之间的位置，用于渲染匹配的子组件。\",\"接下来，可以在子路由配置中使用 Outlet 组件来渲染对应的子组件。例如：\",\"import { BrowserRouter as Router, Routes, Route } from 'react-router-dom'; function App() { return ( <Router> <Routes> <Route path=\\\"/\\\" element={<ParentComponent />}> <Route index element={<Home />} /> {/* 匹配根路径时渲染的子组件 */} <Route path=\\\"/about\\\" element={<About />} /> {/* 匹配 \\\"/about\\\" 路径时渲染的子组件 */} <Route path=\\\"/contact\\\" element={<Contact />} /> {/* 匹配 \\\"/contact\\\" 路径时渲染的子组件 */} </Route> </Routes> </Router> ); } \",\"在上述示例中，ParentComponent 组件被配置为根路径的子组件，并对应了子路由配置中的根 index 路径。About 组件和 Contact 组件分别对应了 /about 和 /contact 路径。\",\"通过这样的配置，当用户访问不同的路径时，React Router v6 会自动匹配到相应的子路由，并将其渲染在父组件中定义的 Outlet 组件位置上。\"]},\"397\":{\"h\":\"路由懒加载\",\"t\":[\"路由懒加载是一种优化技术，用于延迟加载应用程序中的路由组件。这可以提高页面加载性能，减少初始加载时的资源消耗。\",\"在 React Router v6 中，路由懒加载可以使用 Suspense 和 lazy 函数来实现。\",\"首先，需要在项目中安装 React 和 React Router:\",\"npm install react react-router-dom \",\"然后，可以使用以下代码演示 React Router v6 中的路由懒加载:\",\"import React, { lazy, Suspense } from 'react'; import { BrowserRouter as Router, Routes, Route } from 'react-router-dom'; const Home = lazy(() => import('./components/Home')); const About = lazy(() => import('./components/About')); const App = () => { return ( <Router> <Suspense fallback={<div>Loading...</div>}> <Routes> <Route path=\\\"/\\\" element={<Home />} /> <Route path=\\\"/about\\\" element={<About />} /> </Routes> </Suspense> </Router> ); }; export default App; \",\"在上面的代码中，我们首先使用 lazy 函数从相应的路径导入需要懒加载的路由组件。然后，将这些懒加载的组件传递给 React Router 的 Route 组件的 element 属性中。此时，React Router 会在需要渲染该路由时自动加载该组件。\",\"注意，Suspense 组件用于指定在加载路由组件时显示的加载指示符（例如 \\\"Loading...\\\"）。它是 React 16.6 引入的新组件。\"]},\"398\":{\"h\":\"路由Hook\",\"t\":[\"React-Router v6已经引入了一些新的概念和API来管理路由。其中，使用路由钩子（Hooks）是一个重要且强大的特性。下面将详细介绍React-Router v6中的路由钩子。\",\"useRoutes()：这是一个顶层路由钩子，用于定义应用的路由层次结构。它接收一个路由配置对象作为参数，并基于配置对象构建路由树。路由配置对象包含了多个路由对象，每个对象都描述了一个路由和相应的组件。该钩子返回一个函数，该函数接收一个路径参数并根据路由配置返回匹配的组件。\",\"useNavigate()：这是一个用于导航到其他路由的钩子。它返回一个navigate函数，该函数接收一个路径参数和一个可选的导航选项对象。通过调用navigate函数，你可以在应用程序中执行编程式导航。\",\"useLocation()：这是一个用于获取当前路由位置信息的钩子。它返回一个location对象，该对象包含当前路径、参数和查询字符串等信息。\",\"useMatch()：这是一个用于匹配当前路径和给定路径模式的钩子。它返回一个match对象，该对象包含了匹配的路径、参数和查询字符串等信息。\",\"这些路由钩子可以在函数组件中使用，以在应用程序中管理路由。通过使用每个钩子提供的功能，你可以轻松地实现路由的导航和匹配操作，并根据需要进行相应的处理。\"]},\"399\":{\"h\":\"Redux\"},\"400\":{\"h\":\"什么是Redux\",\"t\":[\"Redux是一个用于JavaScript应用程序的状态管理库。它可以帮助开发者有效地管理应用程序的状态并进行可预测性的状态管理。Redux的设计思想受到了Flux架构的启发，但它简化了Flux的复杂性和繁琐性。\",\"在Redux中，应用程序的状态被存储在一个称为\\\"Store\\\"的容器中。Store是一个存储应用程序状态树的对象。状态树是一个JavaScript对象，它包含了应用程序中所有组件可能需要的状态数据。\",\"Redux的核心概念包括：Actions（动作）、Reducers（归约器）和Store（存储）。Actions是描述状态树更新操作的纯JavaScript对象，它们被触发并发送到Reducers。Reducers是纯函数，接收当前状态和一个Action作为输入，并返回一个新的状态。Reducers的作用是根据Action的类型来更新应用程序的状态树。Store是一个单一的、可预测的数据源，它将Reducers返回的新状态存储起来，并提供了访问状态的方法。\",\"在Redux中，应用程序的状态只能通过派发（Dispatch）一个Action来进行更新。通过派发Action，Redux会将Action发送给Reducers，并在Reducers中处理状态的更新逻辑。Reducers根据Action的类型来决定如何更新状态树，并返回一个新的状态。一旦状态更新完成，Redux会通知所有订阅（Subscribe）了Store的部分，以便它们可以获取最新的状态并更新它们自己。\",\"通过使用Redux，开发者可以更好地管理和维护应用程序的状态，提高代码的可维护性和可测试性。它尤其适用于大型和复杂的应用程序，在这些应用程序中，状态管理是一个关键问题。Redux也可以与各种前端框架（如React、Angular和Vue等）很好地集成在一起，提供一个全局的、可预测的状态管理方案。\"]},\"401\":{\"h\":\"Redux的核心概念\",\"t\":[\"Store（存储） 在Redux中，Store（存储）是一个包含应用程序状态的容器。它是Redux中最核心的概念之一，负责存储和管理整个应用程序的状态树。\",\"Store是一个JavaScript对象，它存储应用程序的状态。状态树是一个描述应用程序当前状态的纯JavaScript对象。它包含了应用程序中不同组件可能需要的数据，比如用户信息、网络请求的结果、页面展示的内容等等。\",\"Store提供了几个核心的方法来操作状态：\",\"getState()：获取当前的状态树。可以通过该方法获取任何组件需要的状态数据。\",\"dispatch(action)：派发（Dispatch）一个动作（Action），用于触发状态的更新。Action是一个简单的JavaScript对象，描述了要进行的状态更新操作。\",\"subscribe(listener)：订阅（Subscribe）一个监听器，用于监听状态的变化。当状态发生变化时，监听器会被触发，可执行相关的回调函数。\",\"replaceReducer(nextReducer)：用于动态替换当前的Reducer。一般情况下，这个方法不常用。\",\"在创建Store时，需要提供一个Reducer作为参数。Reducer是一个纯函数，它接收当前的状态和一个Action作为输入，并返回一个新的状态。Reducer的作用是根据不同的Action类型来更新状态树。\",\"使用Redux的过程中，开发者可以通过Store的getState()方法来获取当前的状态，然后将该状态提供给应用程序的组件。组件可以订阅Store的状态变化通过subscribe(listener)方法，以便在状态发生变化时获取新的状态并更新视图。\",\"总之，Store在Redux中扮演着存储和管理应用程序状态的角色，它提供了一种集中式的状态管理机制，使得应用程序的不同组件可以共享和访问同一个状态树。 2. Action（动作） 在Redux中，Action（动作）是描述状态变化的普通JavaScript对象。它是触发状态更新的一种方式，当应用程序中某个操作需要触发状态的改变时，会创建一个Action对象并将其派发（Dispatch）到Redux的Store中。\",\"Action对象包含两个必要的属性：\",\"type：表示动作的类型，是一个字符串常量，用于识别不同的动作。比如可以是：\\\"ADD_TODO\\\"或者\\\"INCREMENT_COUNTER\\\"等。\",\"payload：可选的额外数据，用于传递给Reducer进行状态更新的操作。它可以是任何合法的JavaScript数据类型，比如字符串、数字、对象等。\",\"Action的创建由用户代码负责，被称为\\\"Action Creators\\\"。Action Creators是一个返回Action对象的纯函数。例如：\",\"function addTodo(text) { return { type: 'ADD_TODO', payload: { text, }, }; } \",\"在Redux中，我们可以使用store.dispatch()方法来派发一个Action，即将Action发送到Store。当一个Action被派发后，Redux的Store会通过调用Reducers来处理这个Action，即根据Action的类型更新应用程序的状态树。\",\"Reducers是一个纯函数，它接收当前状态和一个Action作为输入，并返回一个新的状态。Reducers基于Action的类型来判断如何对状态进行更新。\",\"通过派发不同类型的Action，我们可以在Redux中实现各种不同的状态操作，比如添加或删除数据、更新数据、异步操作等等。\",\"总结起来，Action代表着对状态进行修改的意图，通过派发Action来触发状态的更新。它是连接视图层和状态管理层之间的重要桥梁。 3. Reducer（归约器） 在Redux中，Reducer（归约器）是一个纯函数，用于处理状态的更新逻辑。它接收当前状态和一个Action作为参数，并返回一个新的状态。\",\"Reducer的作用是根据Action的类型来判断应该如何更新状态树。当一个Action被派发（Dispatch）到Redux的Store时，Store会调用Reducer，并将当前状态和Action传递给它。Reducer根据Action的类型来执行相应的逻辑，生成并返回一个新的状态。\",\"Redux要求Reducer必须是一个纯函数，也就是说，无论何时相同的输入被传递给Reducer，它都应该返回相同的输出。纯函数不应该有副作用，不应该在函数内部进行网络请求、修改传入的参数等。它只依赖于传入的参数，并返回一个新的状态。\",\"Reducer通常使用switch语句来根据Action的类型进行状态更新。例如，假设我们有一个带有\\\"counter\\\"属性的状态对象，可以通过Reducer来处理\\\"INCREMENT\\\"和\\\"DECREMENT\\\"两种类型的Action：\",\"function counterReducer(state = { counter: 0 }, action) { switch (action.type) { case 'INCREMENT': return { ...state, counter: state.counter + 1, }; case 'DECREMENT': return { ...state, counter: state.counter - 1, }; default: return state; } } \",\"在上面的例子中，当Action类型为\\\"INCREMENT\\\"时，Reducer会返回一个新的状态对象，其中counter属性的值加1。当Action类型为\\\"DECREMENT\\\"时，Reducer会返回一个新的状态对象，其中counter属性的值减1。如果Action类型不匹配任何已知的类型，则Reducer会返回当前的状态对象。\",\"需要注意的是，Redux要求Reducer是纯函数，所以在Reducer中不能直接修改原状态对象，而是应该返回一个全新的状态对象。这可以通过使用对象展开语法（Spread Syntax）或Immutable.js等库来实现。\",\"总结一下，Reducer是一个纯函数，用于处理状态的更新逻辑。它根据Action的类型来返回一个新的状态对象，并且遵循Redux的规范要求，保持纯粹性和可预测性。 4. Dispatch（派发） 在Redux中，Dispatch（派发）是指将一个Action发送到Redux的Store以触发状态的更新。\",\"当应用程序的某个操作需要触发状态的改变时，可以通过调用store.dispatch(action)来派发一个Action。store是Redux的Store对象，action是描述状态变化的普通JavaScript对象。\",\"例如，假设我们有一个增加计数器的操作，我们可以创建一个Action对象并将其派发到Store中：\",\"const incrementAction = { type: 'INCREMENT', }; store.dispatch(incrementAction); \",\"上述代码中，将一个类型为\\\"INCREMENT\\\"的Action对象派发到Redux的Store中。\",\"当一个Action被派发时，Redux的Store会使用派发的Action来调用Reducers，并传递当前的状态和Action作为参数。Reducers根据Action的类型来决定如何更新状态，并返回一个新的状态。\",\"通过派发不同类型的Action，我们可以在Redux中实现各种不同的状态操作，比如添加或删除数据、更新数据、异步操作等等。\",\"需要注意的是，Dispatch是一个同步的操作，它会立即触发状态的更新。如果需要进行异步操作，比如处理网络请求等，可以使用Redux中的中间件（middleware），如Redux Thunk或Redux Saga。\",\"总结一下，Dispatch是将一个Action发送到Redux的Store以触发状态更新的过程。通过派发不同类型的Action，可以实现不同的状态操作。 5. Subscribe（订阅） 在Redux中，Subscribe（订阅）是指在Redux的Store中注册一个回调函数，用于监听状态的变化。\",\"当状态发生变化时，订阅的回调函数将被调用，这样我们可以在回调函数中执行一些操作，比如更新用户界面。\",\"在Redux中，通过调用store.subscribe(listener)方法来进行订阅。store是Redux的Store对象，listener是一个回调函数。\",\"例如，我们可以创建一个订阅函数来打印每次状态变化时的日志：\",\"function handleStateChange() { const currentState = store.getState(); console.log('New state:', currentState); } store.subscribe(handleStateChange); \",\"上述代码中，我们创建了一个名为handleStateChange的回调函数，每当状态发生变化时，它将被调用。在回调函数中，我们通过调用store.getState()来获取当前的状态，并将其打印到控制台。\",\"通过订阅函数，我们可以在状态变化时执行各种操作，如更新UI、持久化数据等。\",\"需要注意的是，订阅的回调函数将在状态发生变化时被调用，而不是在每次派发一个Action时都被调用。因此，Redux的订阅机制能够帮助我们有效地监听状态的变化，并在必要时进行相应的处理。\",\"如果要取消订阅，可以调用unsubscribe()函数，它是store.subscribe()方法的返回值。例如：\",\"const unsubscribe = store.subscribe(listener); // 取消订阅 unsubscribe(); \",\"总结一下，订阅是通过调用store.subscribe()方法在Redux的Store中注册一个回调函数，用于监听状态的变化。每当状态发生变化时，订阅的回调函数将被调用。通过订阅机制，我们可以实现在状态变化时执行自定义操作的需求。\"]},\"402\":{\"h\":\"Redux的工作流程\",\"t\":[\"Redux的工作流程是基于\\\"单一数据源\\\"、\\\"状态只读\\\"和\\\"纯函数更新\\\"的原则。下面是Redux的基本工作流程：\",\"创建Store：使用Redux创建一个Store对象，Store是一个保存应用程序状态的容器。\",\"import { createStore } from 'redux'; import rootReducer from './reducers'; const store = createStore(rootReducer); \",\"定义Actions：创建描述状态变化的Action对象，每个Action都必须包含一个type属性来表示操作类型，并可以携带其他自定义信息。\",\"const incrementAction = { type: 'INCREMENT', }; const decrementAction = { type: 'DECREMENT', }; \",\"创建Reducers：定义纯函数Reducers来处理状态的更新逻辑。Reducers根据接收到的Action类型来更新状态，并返回一个新的状态对象。\",\"const initialState = { counter: 0, }; function counterReducer(state = initialState, action) { switch (action.type) { case 'INCREMENT': return { ...state, counter: state.counter + 1, }; case 'DECREMENT': return { ...state, counter: state.counter - 1, }; default: return state; } } \",\"组合Reducers：如果应用程序的状态由多个部分组成，则可以将多个Reducers组合为一个根Reducer，并将其传递给Store。\",\"import { combineReducers } from 'redux'; import { reducer1, reducer2 } from './reducers'; const rootReducer = combineReducers({ reducer1, reducer2, }); \",\"派发Actions：使用store.dispatch(action)方法将Action派发到Redux的Store中，触发状态的更新。\",\"store.dispatch(incrementAction); store.dispatch(decrementAction); \",\"调用Reducers：Redux的Store会调用Reducers，并传递当前状态和派发的Action作为参数，Reducers根据Action类型来执行相应的逻辑，并返回一个新的状态。\",\"更新State：Redux的Store将Reducer返回的新状态更新到Store中，替换掉原来的状态。\",\"订阅State：我们可以使用store.subscribe(listener)方法注册一个回调函数，监听状态的变化。每当状态发生变化时，订阅的回调函数将被调用。\",\"store.subscribe(() => { const currentState = store.getState(); console.log('New state:', currentState); }); \",\"通过遵循这个工作流程，Redux实现了一个可预测且可维护的状态管理机制，使我们能够更好地管理应用程序的状态，并简化了状态在不同组件间的传递与共享。\"]},\"403\":{\"h\":\"Redux的工作原理\",\"t\":[\"Redux的工作原理可以概括为三个关键概念：Store、Actions和Reducers。\",\"1. Store（仓库）\",\"Store是Redux的核心概念，它是一个包含应用程序状态的单一数据容器（单一数据源）。\",\"应用程序状态保存在Store中，通过Redux提供的方法来获取和更新状态。\",\"2. Actions（动作）\",\"Actions是描述状态变化的普通JavaScript对象，包含一个type属性来表示操作的类型，并可以携带其他自定义信息。\",\"Actions是通过调用dispatch方法派发到Redux的Store中，触发状态的变化。\",\"3. Reducers（归纳器）\",\"Reducers是纯函数，用于处理状态的更新逻辑。\",\"Reducers接收两个参数：当前的状态和派发的Action。根据Action的类型，Reducers对状态进行相应的修改，并返回一个新的状态对象。\",\"Reducers应该总是返回一个新的状态对象，而不是直接修改原始状态对象。\",\"Redux的工作原理借助了纯函数和单一数据源的思想，通过Actions和Reducers的配合来实现应用程序状态的管理和更新。这种机制使得状态变化可预测、可追溯，并能够提供一种可维护的方式来处理复杂的状态逻辑。\",\"这个应用程序有两个按钮：一个用于增加计数器的值，一个用于减少计数器的值。以下是实现该应用程序的Redux工作原理的例子：\",\"首先，我们需要安装Redux库：\",\"npm install redux \",\"然后，我们定义一个Reducer函数来处理计数器的状态变化：\",\"// reducer.js const initialState = { count: 0 }; const counterReducer = (state = initialState, action) => { switch (action.type) { case 'INCREMENT': return { ...state, count: state.count + 1 }; case 'DECREMENT': return { ...state, count: state.count - 1 }; default: return state; } }; export default counterReducer; \",\"在上述代码中，我们定义了一个初始状态，即count为0。然后，我们的Reducer根据不同的action类型来更新状态。当我们收到INCREMENT action时，我们将计数器值加1；当我们收到DECREMENT action时，我们将计数器值减1。\",\"接下来，我们需要创建Redux Store来管理应用程序的状态：\",\"// store.js import { createStore } from 'redux'; import counterReducer from './reducer'; const store = createStore(counterReducer); export default store; \",\"在上述代码中，我们使用createStore函数来创建Redux Store，并将我们的Reducer传递给它。\",\"现在，让我们创建我们的应用程序的界面，并与Redux Store进行交互：\",\"// App.js import React from 'react'; import { connect } from 'react-redux'; function App(props) { const handleIncrement = () => { props.dispatch({ type: 'INCREMENT' }); }; const handleDecrement = () => { props.dispatch({ type: 'DECREMENT' }); }; return ( <div> <h1>Counter: {props.count}</h1> <button onClick={handleIncrement}>Increment</button> <button onClick={handleDecrement}>Decrement</button> </div> ); } const mapStateToProps = (state) => { return { count: state.count }; }; export default connect(mapStateToProps)(App); \",\"在上述代码中，我们使用React的connect函数将我们的React组件连接到Redux Store。通过mapStateToProps函数，我们可以将Redux状态映射为组件的属性。\",\"在组件中，我们通过调用props.dispatch函数来派发Redux action。当用户点击增加按钮时，我们派发INCREMENT action；当用户点击减少按钮时，我们派发DECREMENT action。\",\"最后，我们需要将Redux Store提供给我们的应用程序：\",\"// index.js import React from 'react'; import ReactDOM from 'react-dom'; import { Provider } from 'react-redux'; import store from './store'; import App from './App'; ReactDOM.render( <Provider store={store}> <App /> </Provider>, document.getElementById('root') ); \",\"在上述代码中，我们使用React Redux的Provider组件将Redux Store提供给我们的应用程序，以便我们的组件可以访问到Redux状态。\",\"通过以上的代码，我们展示了Redux的工作原理。当我们的应用程序中发生操作时，我们派发相应的Redux action，并通过Reducer来更新状态。React组件通过连接到Redux Store来获取并显示状态的变化，从而实现了状态的一致管理。\"]},\"404\":{\"h\":\"Redux的优点\",\"t\":[\"Redux作为一种状态管理库，具有以下几个优点：\",\"单一数据源：Redux使用单一数据源存储应用程序的状态，这意味着所有的状态都集中管理在一个地方。这种集中式的状态管理使得状态变化更容易跟踪和调试，大大简化了状态的管理和维护。\",\"可预测性：Redux使用纯函数来处理状态的更新逻辑，即Reducer函数。纯函数具有输入确定则输出确定的特性，这使得状态的变化更可预测。给定相同的状态和动作，始终可以得到相同的结果。这种可预测性有助于减少调试和错误处理的复杂性。\",\"易于调试：由于Redux的状态是单一且可预测的，因此在调试过程中更容易追踪和定位出错的地方。可以通过使用Redux DevTools工具来记录和回放状态变化，查看每个Action对状态的影响，并对应用程序的状态进行时间旅行式的调试。\",\"组件解耦：Redux将应用程序的状态从组件中分离出来，使得组件的开发更加专注和独立。组件只需要订阅状态的变化并根据变化进行渲染，而不需要直接管理状态的存储和更新逻辑。这种组件解耦的机制大大提高了代码的可维护性和复用性。\",\"与React的无缝集成：Redux与React非常契合，Redux提供了一个特殊的React组件<Provider>，用于将Store与应用程序的其余部分连接在一起。此外，Redux还提供了一个可以将组件与Store连接起来的高阶函数connect，使得将组件与Redux状态进行绑定变得非常简单和灵活。\",\"适用于大型应用程序：当应用程序规模庞大时，状态管理会变得复杂且难以维护。Redux提供了一种结构和一套规则来管理应用程序的状态，使得状态管理更具结构性和可扩展性。Redux可以帮助开发者更好地组织和管理大型应用程序的状态，提高开发效率和可维护性。\",\"总的来说，Redux具有可预测性、可追踪性、易于调试、组件解耦和与React无缝集成等优点，使得它成为一个强大且受欢迎的状态管理库。无论是小型还是大型应用程序，Redux都能提供良好的状态管理解决方案。\"]},\"405\":{\"h\":\"Redux中间件\",\"t\":[\"Redux中间件是一个位于Redux action被发起和reducer处理之间的拦截层。它可以对action进行修改、延迟、异步处理或者触发其他额外的副作用。\",\"Redux中间件的作用是增强Redux的功能，使得它可以处理更复杂的逻辑和异步操作。常见的Redux中间件包括Redux Thunk、Redux Saga和Redux-observable等。\",\"下面介绍几种常见的Redux中间件：\",\"Redux Thunk：Redux Thunk是Redux官方推荐的中间件之一。它允许action创建函数返回函数而不是普通的action对象。这使得我们可以在action中执行异步操作，例如发送异步请求或延迟调度其他action等。\",\"Redux Saga：Redux Saga是一个用于管理副作用（例如异步操作和调度其他action）的库。它使用了生成器函数（generators）来处理异步流程，使得异步代码的编写和测试更加简洁和可控。\",\"Redux Observable：Redux Observable是一个基于RxJS的中间件，用于管理异步操作。它使用Observable和基于事件的编程模型来处理异步操作，提供了强大的操作符和组合方式，在处理复杂的异步流程时非常有用。\",\"Redux Logger：Redux Logger是一个用于在控制台中打印Redux状态变化的中间件。它可以帮助开发者更好地理解应用程序的状态变化，查看每个action的信息、旧状态和新状态等，方便调试。\",\"这些中间件可以根据项目的需求进行选择和配置。通过使用中间件，可以扩展Redux的能力并使其适应更多的场景，例如处理异步操作、副作用管理、日志记录等。中间件使得Redux在处理复杂业务逻辑和异步操作时更加可靠和灵活。\",\"当我们需要处理异步操作或执行复杂的逻辑时，Redux中间件非常有用。下面是一个使用Redux Thunk中间件处理异步操作的例子：\",\"首先，安装Redux Thunk库：\",\"npm install redux-thunk \",\"然后，在创建Redux Store时，将Thunk中间件应用于Store：\",\"// store.js import { createStore, applyMiddleware } from 'redux'; import thunk from 'redux-thunk'; import rootReducer from './reducers'; const store = createStore(rootReducer, applyMiddleware(thunk)); export default store; \",\"在我们的Redux应用中，我们希望通过异步操作获取用户数据。首先，定义一个action创建函数来触发异步操作：\",\"// actions.js import axios from 'axios'; export const fetchUser = () => { return (dispatch) => { dispatch({ type: 'FETCH_USER_REQUEST' }); axios.get('/api/user') .then((response) => { dispatch({ type: 'FETCH_USER_SUCCESS', payload: response.data }); }) .catch((error) => { dispatch({ type: 'FETCH_USER_FAILURE', payload: error.message }); }); }; }; \",\"在上面的代码中，我们使用axios库发起一个GET请求来获取用户数据。首先，我们触发一个FETCH_USER_REQUEST的action来表示异步操作已经开始。然后，我们通过axios发送请求，并在得到响应时触发FETCH_USER_SUCCESS的action来更新用户数据。如果在异步操作过程中发生错误，我们触发FETCH_USER_FAILURE的action来处理错误信息。\",\"接下来，我们需要定义一个Reducer来处理这些action：\",\"// reducers.js const initialState = { user: null, loading: false, error: null }; const rootReducer = (state = initialState, action) => { switch (action.type) { case 'FETCH_USER_REQUEST': return { ...state, loading: true, error: null }; case 'FETCH_USER_SUCCESS': return { ...state, loading: false, user: action.payload }; case 'FETCH_USER_FAILURE': return { ...state, loading: false, error: action.payload }; default: return state; } }; export default rootReducer; \",\"最后，在我们的React组件中使用fetchUser action创建函数来发起异步操作：\",\"// User.js import React, { useEffect } from 'react'; import { connect } from 'react-redux'; import { fetchUser } from './actions'; function User(props) { useEffect(() => { props.fetchUser(); }, []); if (props.loading) { return <p>Loading...</p>; } if (props.error) { return <p>Error: {props.error}</p>; } return ( <div> <h1>User: {props.user?.name}</h1> <p>Email: {props.user?.email}</p> </div> ); } const mapStateToProps = (state) => { return { user: state.user, loading: state.loading, error: state.error }; }; export default connect(mapStateToProps, { fetchUser })(User); \",\"在上面的代码中，我们使用React的useEffect hook来在组件加载时触发fetchUser action，并将获取到的用户数据显示在界面上。同时，我们根据Redux状态中的loading和error字段展示不同的信息。\",\"通过以上代码，我们展示了如何使用Redux Thunk中间件处理异步操作。当我们在组件中调用fetchUser action创建函数时，Redux Thunk中间件允许我们执行异步操作，并在异步操作完成后触发相应的Redux action来更新状态。这使得我们可以在Redux中统一处理异步逻辑，从而更好地管理应用程序的状态和数据流。\"]},\"406\":{\"h\":\"Redux与React的集成\",\"t\":[\"Redux与React非常适合集成在一起，它们共同提供了一种强大的状态管理和视图渲染的解决方案。下面是Redux与React集成的一般步骤：\",\"安装和配置Redux：首先，使用npm或yarn安装Redux和React-Redux库。在Redux中创建一个Store，将Reducers和必要的中间件传递给Store。然后，在应用的根组件上使用<Provider>组件包裹，并将Store作为Provider的属性传递。这样，整个应用程序的组件树都可以访问到Redux的Store。\",\"将组件连接到Redux：使用React-Redux库提供的connect函数将需要访问Redux状态或调度操作的组件连接到Redux。在组件上定义mapStateToProps和mapDispatchToProps函数，用于指定需要从状态中获取的数据和需要调度的操作，然后将它们作为参数传递给connect函数。\",\"使用状态和操作：一旦组件被连接到Redux，它就可以通过props访问到Redux中的状态和调度操作。通过在组件中访问props上的数据，可以在组件中使用Redux状态来进行渲染和逻辑处理。同时，可以使用props上的操作来调度Redux中的action，以改变状态。\",\"使用中间件处理异步操作：如果需要处理异步操作，例如发起网络请求，可以使用Redux提供的中间件，如Redux Thunk或Redux Saga。这些中间件使得在action中执行异步操作变得容易，可以在触发action时执行异步逻辑并最终触发另一个action来更新Redux状态。\",\"通过以上集成步骤，React组件可以通过连接到Redux来访问和管理全局状态，以及调度更新状态的操作。这种集成使得状态管理变得更加可靠和可预测，同时提供了一种优雅的方式来处理应用程序的复杂状态和逻辑。\",\"下面是一个简单的例子，展示了Redux与React的集成：\",\"首先，我们需要安装Redux和React-Redux库：\",\"npm install redux react-redux \",\"然后，我们创建一个Redux Store，并定义一个简单的Reducer来处理状态的更新：\",\"// store.js import { createStore } from 'redux'; // Reducer const initialState = { count: 0 }; function reducer(state = initialState, action) { switch (action.type) { case 'INCREMENT': return { count: state.count + 1 }; case 'DECREMENT': return { count: state.count - 1 }; default: return state; } } // Create Store const store = createStore(reducer); export default store; \",\"接下来，在根组件中使用<Provider>组件包裹，将Redux的Store传递给它：\",\"// index.js import React from 'react'; import ReactDOM from 'react-dom'; import { Provider } from 'react-redux'; import store from './store'; import App from './App'; ReactDOM.render( <Provider store={store}> <App /> </Provider>, document.getElementById('root') ); \",\"现在，让我们创建一个简单的计数器组件，并将其连接到Redux：\",\"// Counter.js import React from 'react'; import { connect } from 'react-redux'; function Counter(props) { return ( <div> <h1>Count: {props.count}</h1> <button onClick={props.increment}>Increment</button> <button onClick={props.decrement}>Decrement</button> </div> ); } // 将state映射到组件的props function mapStateToProps(state) { return { count: state.count }; } // 将dispatch操作映射到组件的props function mapDispatchToProps(dispatch) { return { increment: () => dispatch({ type: 'INCREMENT' }), decrement: () => dispatch({ type: 'DECREMENT' }) }; } // 使用connect函数连接组件到Redux export default connect(mapStateToProps, mapDispatchToProps)(Counter); \",\"现在，我们可以在应用中使用<Counter>组件，并访问和操作Redux中的状态：\",\"// App.js import React from 'react'; import Counter from './Counter'; function App() { return ( <div> <Counter /> </div> ); } export default App; \",\"通过以上代码，我们实现了一个简单的计数器应用，它使用Redux管理状态，并使用React组件进行渲染和交互。<Counter>组件通过连接到Redux，可以访问到Redux中的状态和调度操作，并在用户点击按钮时更新计数器的值。\",\"这只是一个简单的例子，但它展示了Redux和React是如何集成在一起的，通过使用Redux的状态管理和React的组件渲染机制，我们可以构建更复杂和可扩展的应用程序。\"]},\"407\":{\"h\":\"使用Redux的最佳实践\",\"t\":[\"设计清晰的状态结构：在使用Redux之前，仔细设计和规划应用程序的状态结构。确保状态能够被统一管理，并尽量保持扁平化。避免不必要的嵌套和冗余数据。\",\"使用Redux DevTools：Redux DevTools是一个强大的开发工具，可以帮助你调试和检查Redux应用程序的状态变化。安装并使用Redux DevTools插件来监控和管理状态的变化，以及记录和回放操作。\",\"组件化开发：使用React组件来封装UI和对应的Redux逻辑。将组件的数据需求和状态管理放在一个地方，使得组件可以独立开发和复用。\",\"使用connect函数连接组件和Redux Store：使用React Redux提供的connect函数，将组件连接到Redux Store。在connect函数中使用mapStateToProps和mapDispatchToProps函数连接组件的props和Redux的状态和操作。\",\"使用容器组件和展示组件：将组件分为容器组件(container components)和展示组件(presentation components)。容器组件负责与Redux Store交互，包含状态和操作等逻辑；展示组件只负责显示数据和交互，不关心具体的数据来源。\",\"使用ActionTypes常量：为Redux的action创建常量，避免在代码中直接使用字符串。这样可以减少错误和排错难度，并且方便重构和维护。\",\"使用纯函数的reducer：Reducer是纯函数，它接收旧的state和action，并返回新的state。确保Reducer的实现是纯函数，不产生副作用，保持可预测性和可测试性。\",\"异步操作和中间件：对于异步操作，可以使用Redux中间件来处理。比较常用的中间件有Redux Thunk、Redux Saga和Redux Observable。选择适合项目需求的中间件来处理异步流程，比如请求数据、引发副作用等。\",\"测试和单一职责原则：针对Redux的reducer、action和中间件编写单元测试，确保它们的正确性和可靠性。遵循单一职责原则，使得每个部分都可以单独测试和维护。\",\"结合使用React Context：React Context和Redux可以结合使用。使用React Context可以将某些只在特定组件层级中使用的状态提升到Redux之外，减少不必要的状态管理。\",\"以下是一个使用Redux的简单实例：\",\"假设我们正在构建一个待办事项列表的应用程序。该应用程序具有添加待办事项、完成待办事项和过滤待办事项的功能。\",\"安装Redux和React Redux：\",\"npm install redux react-redux \",\"创建Redux Store，并定义初始状态和操作：\",\"// store.js import { createStore } from 'redux'; // 初始状态 const initialState = { todos: [], filter: 'all', }; // action类型常量 const ADD_TODO = 'ADD_TODO'; const TOGGLE_TODO = 'TOGGLE_TODO'; const SET_FILTER = 'SET_FILTER'; // action创建函数 export function addTodo(todo) { return { type: ADD_TODO, todo }; } export function toggleTodo(id) { return { type: TOGGLE_TODO, id }; } export function setFilter(filter) { return { type: SET_FILTER, filter }; } // reducer函数 function reducer(state = initialState, action) { switch (action.type) { case ADD_TODO: return { ...state, todos: [...state.todos, action.todo], }; case TOGGLE_TODO: return { ...state, todos: state.todos.map(todo => todo.id === action.id ? { ...todo, completed: !todo.completed } : todo ), }; case SET_FILTER: return { ...state, filter: action.filter, }; default: return state; } } // 创建Redux Store const store = createStore(reducer); export default store; \",\"创建React组件，并连接到Redux Store：\",\"// TodoList.js import React from 'react'; import { connect } from 'react-redux'; import { addTodo, toggleTodo, setFilter } from './store'; function TodoList({ todos, filter, addTodo, toggleTodo, setFilter }) { // 处理添加待办事项 function handleAddTodo() { const todo = { id: Date.now(), text: 'New Todo', completed: false, }; addTodo(todo); } // 处理切换待办事项状态 function handleToggleTodo(id) { toggleTodo(id); } // 处理过滤待办事项 function handleSetFilter(filter) { setFilter(filter); } return ( <div> <button onClick={handleAddTodo}>Add Todo</button> <ul> {todos.map(todo => ( <li key={todo.id} onClick={() => handleToggleTodo(todo.id)} style={{ textDecoration: todo.completed ? 'line-through' : 'none' }} > {todo.text} </li> ))} </ul> <div> Show: <button onClick={() => handleSetFilter('all')}>All</button> <button onClick={() => handleSetFilter('completed')}>Completed</button> <button onClick={() => handleSetFilter('active')}>Active</button> </div> <p>当前过滤器: {filter}</p> </div> ); } // mapStateToProps函数 function mapStateToProps(state) { return { todos: state.todos, filter: state.filter, }; } // mapDispatchToProps函数 const mapDispatchToProps = { addTodo, toggleTodo, setFilter, }; // 连接组件和Redux Store export default connect(mapStateToProps, mapDispatchToProps)(TodoList); \",\"渲染React组件：\",\"// App.js import React from 'react'; import { Provider } from 'react-redux'; import TodoList from './TodoList'; import store from './store'; function App() { return ( <Provider store={store}> <TodoList /> </Provider> ); } export default App; \",\"通过以上的实例，我们创建了一个简单的待办事项列表应用程序，并使用Redux进行状态管理。在TodoList组件中，通过connect函数将组件连接到Redux Store，并通过mapStateToProps和mapDispatchToProps函数定义组件所需的props和操作。在组件中，我们可以调用相应的操作函数来更新Redux中的状态，并根据状态渲染用户界面。\"]},\"408\":{\"h\":\"VueRouter\"},\"409\":{\"h\":\"介绍\",\"t\":[\"Vue Router 是 Vue.js 官方的路由管理器。它与 Vue.js 的核心深度集成，允许你构建具有复杂页面导航需求的单页应用（SPA）。\"]},\"410\":{\"h\":\"什么是路由\",\"t\":[\"在 SPA 中，路由是指应用中不同页面间的切换和导航。Vue Router 提供了一种基于 URL 的导航方式，通过管理路由状态，实现页面间的无刷新切换。\"]},\"411\":{\"h\":\"基础\"},\"412\":{\"h\":\"创建第一个应用\",\"t\":[\"Vue Router是Vue.js官方的路由管理器。它允许我们在Vue应用中建立单页面应用（SPA）的路由。\",\"创建第一个应用的步骤如下：\",\"安装Vue Router：在终端中执行以下命令以安装Vue Router。\",\"npm install vue-router \",\"创建路由器实例：在main.js或者你的入口文件中，引入Vue和Vue Router，并创建一个路由器实例。\",\"import Vue from 'vue' import VueRouter from 'vue-router' Vue.use(VueRouter) const router = new VueRouter({ routes: [] }) \",\"创建页面组件：创建一些用于展示内容的页面组件。例如，我们有一个名为Home的组件。\",\"// Home.vue <template> <div> <h1>首页</h1> <p>这是主页的内容。</p> </div> </template> \",\"配置路由：在路由器实例的routes选项中，配置路由信息和对应的组件。\",\"const router = new VueRouter({ routes: [ { path: '/', name: 'home', component: Home } ] }) /** * path:url路径 * name:路由别名 * component: 组件 * */ \",\"添加路由视图：在Vue应用的模板中，添加<router-view>标签作为路由视图的占位符。\",\"// App.vue <template> <div id=\\\"app\\\"> <router-view></router-view> <!-- 将显示与 url 对应的组件 --> </div> </template> \",\"注册路由器实例：在Vue实例中，注册路由器实例。\",\"new Vue({ router, render: h => h(App) }).$mount('#app') \",\"运行应用：在终端中执行以下命令以运行Vue应用。\",\"npm run serve \",\"现在，你的第一个Vue Router应用已经创建完成了！你可以在浏览器中访问应用，看到主页的内容。\"]},\"413\":{\"h\":\"动态路由\",\"t\":[\"动态路由是指在Vue框架中，可以根据特定的条件或参数来动态生成路由。通过使用动态路由，我们可以根据不同的需求，在不同的路由中展示不同的内容或组件。\",\"下面是一个简单的示例，演示如何在Vue中使用动态路由：\",\"在Vue项目的路由配置文件（通常是router.js）中，首先导入Vue和VueRouter：\",\"import Vue from 'vue' import VueRouter from 'vue-router' \",\"定义路由组件，在这个示例中，我们定义了两个组件：Home和About\",\"const Home = { template: '<div>这是首页组件</div>' } const About = { template: '<div>这是关于页面组件</div>' } \",\"创建VueRouter实例，并定义路由规则。在这个例子中，我们定义了两个路由规则：一个是根路径'/'对应Home组件，另一个是'/about'路径对应About组件。\",\"const router = new VueRouter({ routes: [ { path: '/', component: Home }, { path: '/about', component: About } ] }) \",\"在Vue实例中，使用router实例，并将其传递给Vue实例配置项中的router属性。\",\"new Vue({ router }).$mount('#app') \",\"在Vue项目的模板文件中，使用<router-link>来生成路由链接，使用<router-view>来展示路由组件。在这个例子中，我们在模板中添加了两个路由链接，分别对应根路径和'/about'路径。\",\"<div id=\\\"app\\\"> <!-- 类似于a标签 通过to去实现跳转 --> <router-link to=\\\"/\\\">首页</router-link> <router-link to=\\\"/about\\\">关于</router-link> <router-view></router-view> </div> \",\"通过上述步骤，我们就可以在Vue项目中使用动态路由了。当用户点击不同的路由链接时，对应的组件会被动态加载和展示。这样，我们就可以根据不同的路由路径来展示不同的内容。\",\"在组件中，可以通过$router和$route去获取路由的信息\"]},\"414\":{\"h\":\"路由的匹配规则\",\"t\":[\"路由的匹配规则是基于路径的，可以根据路径匹配到不同的组件。Vue路由使用路由器（Router）来管理应用程序的路由状态。当用户访问不同的路径时，路由器会根据定义的路由规则找到匹配的组件，并将其渲染到指定的路由出口（Router-View）中。\",\"下面是Vue路由匹配规则的详细解释：\",\"基本匹配规则：\",\"硬编码路径：可以通过直接指定路径来实现匹配，例如 path: '/home'。\",\"带有参数的动态路径片段：可以通过使用冒号前缀来定义动态路径，例如 path: '/user/:id'，其中:id是一个参数，路由器可以根据该参数的值匹配到对应的组件。\",\"带有通配符的路径：使用*通配符可以匹配任意路径，例如 path: '*'。\",\"路由匹配优先级：\",\"路由定义的顺序决定了匹配的优先级。首先匹配到的路由会被渲染到路由出口中，后面的路由不会再进行匹配。\",\"配置了带有参数的动态路径片段的路由会优先匹配，例如 /user/:id会比/user/profile优先匹配。\",\"路由的优先级越高，应该越早定义，以确保正确匹配到预期的组件。\",\"嵌套路由：\",\"路由可以通过嵌套来实现多层级的组件嵌套渲染，例如创建子路由。\",\"子路由需要在父级路由的组件中定义一个路由出口，用于渲染子路由的组件。\",\"总结： Vue路由使用路径匹配规则来根据用户访问的路径找到对应的组件。路由匹配规则包括硬编码路径、带有参数的动态路径片段和通配符路径。路由的优先级由路由定义的顺序决定，高优先级的路由会优先匹配。此外，可以通过嵌套路由实现多层级的组件嵌套渲染。\"]},\"415\":{\"h\":\"嵌套路由\",\"t\":[\"嵌套路由是指在Vue.js中，可以在一个路由中通过配置子路由来实现对应页面的嵌套和组织。这样可以将一个页面分割为多个小组件，使代码结构更清晰、可维护性更高。\",\"在Vue.js中，使用Vue Router来管理路由。我们可以通过在VueRouter实例中的routes配置项来定义路由。对于嵌套路由，我们可以在一个路由配置的子项中再次配置路由，形成嵌套的结构。\",\"下面是一个简单的示例，演示如何在Vue.js中使用嵌套路由：\",\"// main.js import Vue from 'vue' import VueRouter from 'vue-router' import App from './App.vue' // 导入子组件 import Home from './components/Home.vue' import About from './components/About.vue' import Contact from './components/Contact.vue' import Profile from './components/Profile.vue' import Settings from './components/Settings.vue' Vue.use(VueRouter) // 定义路由配置 const routes = [ { path: '/', component: Home }, { path: '/about', component: About }, { path: '/contact', component: Contact }, { path: '/profile', component: Profile, children: [ { path: 'settings', // 注意这里的路径没有斜杠\\\"/\\\" component: Settings } ] } ] // 创建路由实例 const router = new VueRouter({ routes }) // 创建Vue实例 new Vue({ router, render: h => h(App) }).$mount('#app') \",\"在上述示例代码中，我们定义了四个路由，分别是Home、About、Contact、Profile。其中，Profile路由下又定义了一个子路由Settings。\",\"在Profile组件的模板中，我们可以使用<router-view></router-view>来渲染嵌套的子路由。当访问/profile/settings时，Settings组件将会被渲染在Profile组件的视图中。\",\"<!-- Profile.vue --> <template> <div> <h2>Profile</h2> <router-view></router-view> </div> </template> \",\"需要注意的是，子路由的路径（如/settings）不需要以斜杠\\\"/\\\"开头，因为它是相对于父路由的路径。同时，在父路由组件的模板中，使用<router-view>标签进行嵌套路由的渲染。\",\"通过以上的配置，我们就可以在Vue.js中使用嵌套路由了。当访问/profile/settings路径时，将会渲染Settings组件，并嵌套在Profile组件的视图中。\",\"希望以上的回答对您有帮助，如有任何疑问，请随时提问。\"]},\"416\":{\"h\":\"编程式导航\",\"t\":[\"编程式导航是Vue.js框架提供的一种导航方式，可以通过编写JavaScript代码来实现页面的跳转和导航。\",\"编程式导航的方法：Vue Router提供了一组方法，可以用于在JavaScript代码中实现页面的跳转和导航。常用的方法包括：\",\"router.push(location)：用于在代码中实现页面的正常跳转，类似于用户点击链接或者输入网址进行跳转。\",\"router.replace(location)：用于在代码中替换当前页面的URL，而不会产生新的历史记录。通常用于实现一些需要重定向或者替换当前URL的场景。\",\"router.go(n)：用于在代码中前进或后退n个步骤，类似于浏览器的前进和后退操作。\",\"编程式导航的参数：上述方法中的location参数可以是一个URL字符串，也可以是一个描述目标位置的对象。常用的参数包括：\",\"path：指定目标页面的路径。\",\"params：指定目标页面的路由参数，例如/user/:id中的:id。\",\"query：指定目标页面的查询参数，例如/user?id=123中的id。\",\"hash：指定目标页面的哈希值。\",\"编程式导航的实践：在Vue组件的方法中，可以通过this.$router来获取路由对象，从而调用编程式导航的方法。例如：\",\"export default { methods: { goToHome() { this.$router.push('/home'); }, goToUser(id) { this.$router.push({ path: '/user', params: { id } }); } } } \",\"上述代码演示了在方法中使用编程式导航的两种常见方式，分别是直接跳转到/home路径和携带参数跳转到/user/:id路径。\",\"需要注意的是，编程式导航仅仅是改变了URL地址，并不会重新加载整个页面，而是通过动态改变Vue组件来展示新的页面内容。这种方式可以实现无刷新的页面切换，提升用户的体验。\"]},\"417\":{\"h\":\"命名路由和视图\",\"t\":[\"命名路由\",\"命名路由是用来给路由配置一个名称，以便在代码中可以直接通过名称来导航到对应的路由。这样可以避免直接依赖路径的方式进行路由跳转，提高了代码的可维护性和可读性。\",\"在Vue中，通过routes选项来配置路由，每个路由对象可以指定一个name属性，用来给路由命名。下面是一个简单的例子：\",\"// 路由配置 const routes = [ { path: '/', name: 'home', component: Home }, { path: '/about', name: 'about', component: About } ]; // 创建路由实例 const router = createRouter({ history: createWebHistory(), routes }); // 在代码中通过名称导航 router.push({ name: 'home' }); // 导航到home路由 router.push({ name: 'about' }); // 导航到about路由 \",\"在上面的例子中，home和about分别是两个路由对象的名称，可以通过router.push({ name: 'xxx' })的方式来导航到对应的路由。\",\"使用命名路由的好处是，当路由的定义发生变化时，例如修改了路径，只需要在路由配置中修改相应路由对象的path，而不需要在整个项目中修改依赖该路径的代码。这样可以避免一些不必要的代码修改和维护成本。同时，通过名称导航也更加直观和方便，提高了开发效率。\",\"需要注意的是，命名路由只是一种方便的开发方式，并不是必须的，可以根据项目的实际需求进行选择是否使用。\",\"命名视图\",\"命名视图是一种在路由中定义多个同级视图的方式。通过使用命名视图，我们可以在同一个页面中同时展示多个视图，并且可以通过路由配置来管理每个视图的加载和展示。\",\"在Vue中，我们可以使用以下方式定义命名视图：\",\"在路由配置中通过components属性来定义命名视图：\",\"const routes = [ { path: '/', components: { default: HomeComponent, // 默认视图 sidebar: SidebarComponent, // 侧边栏视图 header: HeaderComponent // 头部视图 } }, // 其他路由配置... ] \",\"在上面的示例中，我们定义了一个根路径为/的路由，并通过components属性指定了三个命名视图：default、sidebar和header。对应的组件分别是HomeComponent、SidebarComponent和HeaderComponent。\",\"在路由配置中通过name属性来定义命名视图：\",\"const routes = [ { path: '/', component: HomeComponent, children: [ { path: 'sidebar', components: { default: SidebarComponent, // 默认视图 header: HeaderComponent // 头部视图 } } ] }, // 其他路由配置... ] \",\"在上面的示例中，我们定义了一个根路径为/的路由，并在其子路由配置中通过components属性指定了两个命名视图：default和header。对应的组件分别是SidebarComponent和HeaderComponent。\",\"通过以上的配置，我们可以在页面中同时显示多个视图。在Vue模板中，可以通过指定name来加载对应的命名视图：\",\"<template> <div> <router-view></router-view> <!-- 默认视图 --> <router-view name=\\\"sidebar\\\"></router-view> <!-- 侧边栏视图 --> <router-view name=\\\"header\\\"></router-view> <!-- 头部视图 --> </div> </template> \"]},\"418\":{\"h\":\"重定向\",\"t\":[\"路由重定向来导航到指定的路径。要使用路由重定向，你需要在Vue路由的配置中定义一个重定向路由。\",\"以下是一个示例，展示如何使用路由重定向：\",\"import Vue from 'vue'; import VueRouter from 'vue-router'; Vue.use(VueRouter); const routes = [ { path: '/', redirect: '/home' // 设置默认重定向至'/home' }, { path: '/home', component: Home }, { path: '/about', component: About } ] const router = new VueRouter({ routes }) export default router; \",\"在上面的示例中，我们设置了默认重定向路径为/home，这意味着当进入网站的根路径时，会自动跳转到/home。\",\"你可以根据需求设置任意的重定向路径。在routes数组中，如果某个路由对象的redirect属性的值不为空，则表示该路由需要重定向到指定路径。\"]},\"419\":{\"h\":\"路由别名\",\"t\":[\"路由别名是指使用alias字段来为某个路由路径设置一个别名。这样当访问别名路径时，实际上是访问的原始路径。\",\"在 Vue Router 中使用路由别名有两种方式：\",\"使用alias选项 示例代码：\",\" const routes = [ { path: '/original', component: OriginalComponent, alias: '/alias' // 设置别名 } ] \",\"示例代码：\",\"const routes = [ { path: '/original', components: { default: OriginalComponent, alias: OriginalComponent // 设置别名 } } ] \"]},\"420\":{\"h\":\"路由组件传参\",\"t\":[\"可以使用路由组件传参。以下是详细的步骤和例子：\",\"首先，我们需要在路由配置文件(通常是router/index.js)中定义一个路由，并使用props属性来接收参数。例如，我们可以定义一个名为User的路由，它接收一个名为id的参数：\",\"import Vue from 'vue' import Router from 'vue-router' import User from '@/components/User' Vue.use(Router) export default new Router({ routes: [ { path: '/user/:id', name: 'User', component: User, props: true // 开启props模式 } ] }) \",\"然后，在User组件中，我们可以通过$route.params来获取传递的参数。例如，我们可以在User组件的模板中显示用户的ID:\",\"<template> <div> <h1>用户ID:{{ id }}</h1> </div> </template> \",\"最后，在需要跳转到User组件的地方，我们可以使用router-link或者编程式导航来传递参数。例如，我们可以在App.vue组件中为一个按钮添加点击事件，当点击按钮时，跳转到用户详情页面，并传递用户的ID:\",\"<template> <div id=\\\"app\\\"> <button @click=\\\"goToUser\\\">查看用户详情</button> </div> </template> <script> export default { methods: { goToUser() { const id = 1 // 这里可以根据实际情况获取用户的ID this.$router.push({ name: 'User', params: { id } }) } } } </script> \",\"这样，当我们点击“查看用户详情”按钮时，就会跳转到用户详情页面，并显示用户的ID。\"]},\"421\":{\"h\":\"路由守卫\",\"t\":[\"前置路由守卫(beforeEach): 全局前置守卫会在路由切换之前被调用，常用于身份验证、权限控制等逻辑的处理。\",\"router.beforeEach((to, from, next) => { // ... /** * to: 跳转的路径 * from: 离开的路由 * next(false): 阻止导航 * next(path): 跳转到指定路径 * next(): 跳转到下一个钩子 * next(error): 处理错误 * */ next() }) \",\"全局后置守卫(afterEach): 全局后置守卫会在每次路由切换之后被调用，常用于一些全局状态的更新，例如更新页面标题、更新当前选中的菜单等。\",\"router.afterEach((to, from) => { // ... }) \",\"路由独享守卫(beforeEnter): 路由独享守卫会在路由切换之前被调用，常用于一些局部状态的更新，例如更新当前选中的菜单等。\",\"const router = new VueRouter({ routes: [ { path: '/user/:id', component: User, beforeEnter(to, from, next) { // ... next() } } ] }) \",\"组件内的路由守卫(beforeRouteEnter、beforeRouteUpdate、beforeRouteLeave): 组件内的路由守卫会在路由切换之前被调用，常用于一些局部状态的更新，例如更新当前选中的菜单等。\",\"<template> <div> <h1>{{ $route.params.id }}</h1> <router-link to=\\\"/\\\">Home</router-link> <router-link to=\\\"/about\\\">About</router-link> </div> </template> <script> export default { beforeEnter(to, from, next) { // 在这里添加一些逻辑，例如检查用户是否已登录 if (!isLoggedIn) { next({ name: 'Login' }); } else { next(); } }, beforeRouteEnter(to, from, next) { // 在这里添加一些逻辑，例如检查路由参数是否有效 if (!isValidId(to.params.id)) { next({ name: 'Home' }); } else { next(); } }, beforeRouteUpdate(to, from, next) { // 在这里添加一些逻辑，例如检查路由参数是否已更新 if (to.params.id !== from.params.id) { // 如果路由参数已更新，可以在这里执行一些操作，例如获取新数据 } next(); }, beforeRouteLeave(to, from, next) { // 在这里添加一些逻辑，例如检查用户是否已确认离开页面 if (!confirmedLeave) { next(false); } else { next(); } }, beforeDestroy() { // 在这里添加一些逻辑，例如清除一些资源，例如定时器 }, destroyed() { // 在这里添加一些逻辑，例如清除一些资源，例如定时器 }, }; </script> \"]},\"422\":{\"h\":\"路由元信息\",\"t\":[\"路由元数据（metadata）是一种在路由中添加额外信息的方式。这些信息可以用于在导航过程中执行一些特殊操作，例如在渲染组件之前设置一些状态。要添加路由元数据，可以在路由对象中使用 meta 属性。\",\"以下是一个简单的示例，展示了如何在 Vue 中使用路由元数据：\",\"<template> <div> <h1>{{ $route.params.id }}</h1> <router-link to=\\\"/\\\">Home</router-link> <router-link to=\\\"/about\\\">About</router-link> </div> </template> <script> export default { data() { return { isLoggedIn: false, }; }, metaInfo() { return { title: `Title: ${this.$route.params.id}`, }; }, }; </script> \",\"在这个示例中，我们使用 metaInfo 方法返回一个包含路由元数据的对象。在这个例子中，我们返回了一个包含页面标题的对象。在组件中，我们可以通过 this.$route.meta.title访问这个元数据。\"]},\"423\":{\"h\":\"路由懒加载\",\"t\":[\"路由懒加载（Lazy Loading）是一种优化技术，用于按需加载路由组件，而不是一次性加载所有路由组件。这样可以减少首次加载的时间，并提升应用的性能。\",\"在 Vue Router 中，可以使用动态import()语法来实现路由懒加载。它允许将路由组件定义为一个返回组件的函数，在需要时才会进行异步加载。\",\"示例：\",\"const routes = [ { path: '/home', component: () => import('./components/HomeComponent.vue') // 路由懒加载 }, { path: '/about', component: () => import('./components/AboutComponent.vue') // 路由懒加载 }, // ... ]; \",\"在上面的例子中，import()函数会在访问对应路由时动态地异步加载路由组件。这样就可以将路由组件打包成单独的文件，并在需要时按需加载，而不是一次性加载所有路由组件。\",\"需要注意的是，当使用路由懒加载时，产生的每个可被导航到的路由都会生成一个单独的异步块（chunk）。这将导致在首次访问该路由之前，将发起一个异步请求来获取该块，因此会有一个短暂的延迟。\"]},\"424\":{\"h\":\"Vuex\"},\"425\":{\"h\":\"介绍\",\"t\":[\"Vuex是一个专为Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态的一致性。\",\"在一个典型的Vue.js应用中，组件之间存在着父子关系、兄弟关系等复杂的通信关系，而这些组件可能需要共享同一个数据状态。Vuex的出现就是为了解决这个问题。\",\"它将应用程序的状态存储在一个单一的地方，称为\\\"store\\\"，并且允许组件直接从存储中获取状态，而不需要通过组件之间的传递来进行通信。这样在不同组件之间共享数据就变得非常简单和可靠。\",\"Vuex包含以下几个核心概念：\",\"State（状态）：存储应用程序的状态数据。\",\"Getters（获取器）：用于从存储中获取数据的计算属性。\",\"Mutations（变更）：用于同步地修改状态的函数。\",\"Actions（动作）：用于异步地修改状态的函数。\",\"Modules（模块）：将Store分割成模块，每个模块拥有自己的state、getters、mutations和actions。\",\"通过使用Vuex，我们可以更好地组织和管理应用程序的状态，更好地追踪数据流动和变更，提升开发效率，并且使得代码更容易维护。\"]},\"426\":{\"h\":\"工作原理\",\"t\":[\"Vuex的工作原理可以总结为以下几个步骤：\",\"在Vue应用中使用Vuex插件：在创建Vue实例之前，通过Vue.use(Vuex)来安装Vuex插件。这会在Vue实例上注入全局的$store对象。\",\"创建一个Vuex store：在应用的入口文件中，创建一个新的Vuex.Store实例。这个实例包含了应用程序的状态(state)、getters、mutations和actions等。\",\"状态(state)的存储：Vuex使用一个响应式的state对象来存储应用程序的状态。这意味着当state对象发生变化时，依赖于它的组件会自动更新。\",\"Getters的计算：通过getters可以从store中获取状态的计算属性。getters可以接受其他getters作为第二个参数，并且可以通过store.getters来获取对应的计算结果。\",\"Mutations的同步修改：mutations是用于同步地修改state的函数。通过commit方法调用mutations，并且每个mutation可以接受两个参数：state和payload。仅有mutations才能够修改state的值。\",\"Actions的异步操作：actions用于处理异步操作。通过dispatch方法调用actions，并且每个action可以接受一个上下文(context)对象和payload作为参数。在action中可以调用mutations来修改state的值。\",\"组件与store的通信：在Vue组件中可以通过this.$store来访问Vuex的存储对象。组件可以通过从store中读取状态和触发mutations或actions来更新或获取数据。\",\"模块化管理：如果应用程序比较复杂，可以将store拆分成模块。每个模块都有自己的state、getters、mutations和actions，并且可以通过namespaced属性来设置模块的命名空间，避免命名冲突。\",\"通过以上的工作流程，Vuex实现了状态的集中管理，使得状态的变更和获取变得简单和可靠，提高了代码的可维护性和扩展性。同时，由于Vuex使用了Vue的响应式系统，当状态变化时，依赖于它的组件会自动进行更新，减少了模板代码的复杂性。\"]},\"427\":{\"h\":\"如何安装和配置Vuex\",\"t\":[\"要安装和配置Vuex，可以按照以下步骤进行操作：\",\"使用npm或者yarn或者pnpm安装Vuex包：\",\"npm install vuex # 或 yarn add vuex \",\"在Vue应用的入口文件(通常是main.js)中，引入Vue和Vuex：\",\"import Vue from 'vue'; import Vuex from 'vuex'; Vue.use(Vuex); \",\"创建一个新的Vuex store实例，在入口文件中的Vue实例之前。在store文件夹中创建一个store.js文件，并编写与应用程序相关的状态(state)、mutations、actions和getters：\",\"// store.js import Vue from 'vue'; import Vuex from 'vuex'; Vue.use(Vuex); const store = new Vuex.Store({ state: { // 状态数据 }, mutations: { // 修改状态数据的方法 }, actions: { // 异步操作 }, getters: { // 获取状态数据的计算属性 } }); export default store; \",\"在入口文件中创建Vue实例时，将store实例作为属性传递给Vue对象的store选项：\",\"import Vue from 'vue'; import store from './store'; // 引入Vuex的store实例 import App from './App.vue'; new Vue({ store, // 将store实例注入Vue实例 render: h => h(App) }).$mount('#app'); \",\"经过上述步骤，你已经成功安装和配置了Vuex。现在可以在组件中通过this.$store来访问Vuex的存储对象，并使用state、mutations、actions和getters来管理应用程序的状态和逻辑。\"]},\"428\":{\"h\":\"Vuex中的状态和数据流\",\"t\":[\"在Vuex中，状态(state)是存储在store中的数据，是应用程序的唯一数据源。状态具有以下特点：\",\"单一状态树：所有的状态都被存储在一个单一的对象树中，称为\\\"state\\\"。这有助于跟踪状态的变化以及在开发过程中进行调试。\",\"响应式：Vuex使用Vue的响应式系统来追踪状态的变化。当状态发生改变时，相关组件会自动更新，保证视图与状态的同步。\",\"状态的存储：状态是通过mutations来修改的，保证状态的可追踪性和可维护性。只有通过mutations才能修改状态，这样可以在状态发生变化时进行记录和调试。\",\"数据流是指Vuex中状态的改变是通过一定的流程和规则进行的，以确保数据的变化和流动可控和可预测。Vuex的数据流可以概括为以下几个步骤：\",\"组件触发action：组件通过调用dispatch方法触发一个action，传递一些参数。\",\"Action执行异步操作：Action可以执行异步操作，例如调用API请求数据。在异步操作完成后，它会通过commit方法触发一个mutation来通知Store。\",\"Mutation修改状态：Mutation是修改状态的唯一途径，它接收Store的当前状态和从Action传递过来的payload作为参数，并根据情况修改状态。\",\"状态变更通知组件：当状态被修改后，Vue的响应式系统会自动通知相关组件进行更新。这样，受到影响的组件就会根据新的状态值来重新渲染视图。\",\"通过上述流程，Vuex保证了单向数据流的规范，在开发过程中可以更好地组织和管理应用程序的状态和逻辑，提高了代码的可维护性和可测试性。同时，由于状态的集中管理，不同组件之间可以共享同一套状态数据，方便实现组件之间的数据共享和通信。\"]},\"429\":{\"h\":\"使用state管理应用程序的状态\",\"t\":[\"在Vuex中，可以使用state来管理应用程序的状态。state是一个包含多个状态属性的对象，它是存储在Vuex的store中的。\",\"以下是使用state管理应用程序状态的一般步骤：\",\"在store.js文件中，定义initial state对象，包含应用程序的状态属性：\",\"const state = { count: 0, username: '', isLoggedIn: false, todos: [] } \",\"在store.js文件中，将state对象导出：\",\"export default new Vuex.Store({ state, // 其他配置项 }); \",\"使用state中的状态属性：\",\"在组件中访问state属性，可以使用this.$store.state或使用与属性名称相对应的辅助函数mapState。\",\"使用this.$store.state方式：\",\"<template> <div>{{ $store.state.count }}</div> </template> \",\"使用mapState辅助函数方式：（需要在组件中导入辅助函数）\",\"<template> <div>{{ count }}</div> </template> <script> import { mapState } from 'vuex'; export default { computed: { ...mapState(['count']) } } </script> \",\"修改state中的状态属性，需要通过mutations来进行。\",\"在store.js文件中，定义mutations来修改state中的属性：\",\"const mutations = { increment(state) { state.count++; }, setUsername(state, username) { state.username = username; }, setLoggedIn(state, isLoggedIn) { state.isLoggedIn = isLoggedIn; }, addTodo(state, todo) { state.todos.push(todo); } } \",\"在组件中调用mutations来修改state中的属性：\",\"<template> <button @click=\\\"incrementCount\\\">Increment</button> </template> <script> export default { methods: { incrementCount() { this.$store.commit('increment'); } } } </script> \",\"通过在store中定义state对象，可以集中管理应用程序的状态，并保持状态的单一来源。这样，不同的组件可以通过读取或修改state来实现状态的共享和通信，从而实现更合理和可预测的状态管理。\"]},\"430\":{\"h\":\"使用getter获取状态\",\"t\":[\"在Vuex中，可以使用getter从state中获取状态，并进行一些计算或转换操作。Getter可以看作是store的计算属性。\",\"以下是使用getter获取状态的一般步骤：\",\"在store.js文件中，定义getter函数来获取状态：\",\"const getters = { getCount: state => state.count, getUserName: state => state.username, isLoggedIn: state => state.isLoggedIn, getTodoCount: state => state.todos.length } \",\"在store.js文件中，将getter对象导出：\",\"export default new Vuex.Store({ // 其他配置项 getters }); \",\"在组件中使用getter获取状态：\",\"使用this.$store.getters方式直接访问getter：\",\"<template> <div>{{ $store.getters.getCount }}</div> <div>{{ $store.getters.getUserName }}</div> <div>{{ $store.getters.isLoggedIn }}</div> <div>{{ $store.getters.getTodoCount }}</div> </template> \",\"使用mapGetters辅助函数进行简化：\",\"导入辅助函数：\",\"<script> import { mapGetters } from 'vuex'; export default { computed: { ...mapGetters([ 'getCount', 'getUserName', 'isLoggedIn', 'getTodoCount' ]) } } </script> \",\"在模板中使用getter：\",\"<template> <div>{{ getCount }}</div> <div>{{ getUserName }}</div> <div>{{ isLoggedIn }}</div> <div>{{ getTodoCount }}</div> </template> \",\"通过定义getter函数，可以从state中获取状态，进行一些计算或转换操作。Getter可以帮助我们在组件中获得经过处理的状态，而无需重复编写计算逻辑。这样可以提高代码的重用性和可维护性，同时也能更好地对状态进行管理和控制。\"]},\"431\":{\"h\":\"修改状态的方法和提交mutation\",\"t\":[\"要修改Vuex中的状态，你需要通过提交mutation来进行。以下是一般的步骤：\",\"在store.js文件中定义mutation函数来修改状态：\",\"const mutations = { increment(state) { state.count++; }, setUsername(state, username) { state.username = username; }, setLoggedIn(state, value) { state.isLoggedIn = value; }, addTodo(state, todo) { state.todos.push(todo); } }; \",\"在store.js文件中，将mutation对象导出：\",\"export default new Vuex.Store({ // 其他配置项 mutations }); \",\"在组件中提交mutation修改状态：\",\"使用this.$store.commit方式直接提交mutation：\",\"<template> <button @click=\\\"$store.commit('increment')\\\">Increment</button> <button @click=\\\"$store.commit('setUsername', 'John')\\\">Set Username</button> <button @click=\\\"$store.commit('setLoggedIn', true)\\\">Log In</button> <button @click=\\\"$store.commit('addTodo', { text: 'New Todo', completed: false })\\\">Add Todo</button> </template> \",\"使用mapMutations辅助函数进行简化：\",\"导入辅助函数：\",\"<script> import { mapMutations } from 'vuex'; export default { methods: { ...mapMutations([ 'increment', 'setUsername', 'setLoggedIn', 'addTodo' ]) } } </script> \",\"在模板中使用提交mutation的方法：\",\"<template> <button @click=\\\"increment\\\">Increment</button> <button @click=\\\"setUsername('John')\\\">Set Username</button> <button @click=\\\"setLoggedIn(true)\\\">Log In</button> <button @click=\\\"addTodo({ text: 'New Todo', completed: false })\\\">Add Todo</button> </template> \",\"通过定义mutation函数，你可以修改Vuex中的状态。然后，通过提交mutation来调用这些函数，从而对状态进行修改。使用mutation可以使状态的修改变成可追踪的，也可以对修改进行一些限制或逻辑处理。这样可以保证状态的一致性和可控性，更好地管理应用程序的状态。\"]},\"432\":{\"h\":\"异步操作和提交action\",\"t\":[\"要进行异步操作，你可以使用Vuex中的actions来处理。下面是一般的步骤：\",\"在store.js文件中定义一个action，它可以包含异步操作：\",\"const actions = { fetchData({ commit }) { // 异步操作示例（如API调用） axios.get('/api/data') .then(response => { // 在异步操作成功后提交mutation commit('setData', response.data); }) .catch(error => { // 在异步操作失败时处理错误 console.error(error); }); }, loginUser({ commit }, credentials) { return new Promise((resolve, reject) => { // 异步操作示例（如登录API调用） axios.post('/api/login', credentials) .then(response => { // 在异步操作成功后提交mutation commit('setUser', response.data.user); resolve(response.data); }) .catch(error => { // 在异步操作失败时处理错误 reject(error); }); }); } }; \",\"在store.js文件中，将actions对象导出：\",\"export default new Vuex.Store({ // 其他配置项 actions }); \",\"在组件中使用this.$store.dispatch来分发action：\",\"使用then和catch来处理异步操作的结果：\",\"<template> <button @click=\\\"$store.dispatch('fetchData').then(() => { // 异步操作成功后的处理 console.log('Data fetched successfully!'); }).catch(error => { // 异步操作失败时的处理 console.error(error); })\\\">Fetch Data</button> </template> \",\"使用async/await来处理异步操作的结果：\",\"<template> <button @click=\\\"fetchData\\\">Fetch Data</button> </template> <script> export default { methods: { async fetchData() { try { await this.$store.dispatch('fetchData'); // 异步操作成功后的处理 console.log('Data fetched successfully!'); } catch (error) { // 异步操作失败时的处理 console.error(error); } } } } </script> \",\"通过定义actions，你可以处理异步操作，如API调用、异步请求等。然后，通过分发action来调用这些操作。使用actions可以使你的应用程序更好地处理异步逻辑，并且可以在异步操作完成后提交mutation来修改状态。这样可以保证状态的一致性并且使应用程序更加灵活可控。\"]},\"433\":{\"h\":\"使用action和mutation处理异步逻辑\",\"t\":[\"在Vuex中，action负责处理异步逻辑，而mutation负责修改状态。下面是使用action和mutation处理异步逻辑的一般步骤：\",\"在store.js文件中定义一个action，它可以包含异步操作：\",\"const actions = { fetchData({ commit }) { // 异步操作示例（如API调用） axios.get('/api/data') .then(response => { // 在异步操作成功后提交mutation commit('setData', response.data); }) .catch(error => { // 在异步操作失败时处理错误 console.error(error); }); } }; \",\"在store.js文件中定义一个mutation，用于修改状态：\",\"const mutations = { setData(state, data) { // 修改状态 state.data = data; } }; \",\"在store.js文件中，将actions和mutations对象导出：\",\"export default new Vuex.Store({ // 其他配置项 actions, mutations }); \",\"在组件中使用mapActions和mapMutations来使用action和mutation：\",\"使用mapActions来将action映射到组件中的方法：\",\"<template> <button @click=\\\"fetchData\\\">Fetch Data</button> </template> <script> import { mapActions } from 'vuex'; export default { methods: { ...mapActions(['fetchData']) } } </script> \",\"使用mapMutations来将mutation映射到组件中的方法：\",\"<template> <p>Data: {{ data }}</p> <button @click=\\\"setData\\\">Set Data</button> </template> <script> import { mapMutations } from 'vuex'; export default { computed: { ...mapState(['data']) }, methods: { ...mapMutations(['setData']) } } </script> \",\"在组件中调用this.fetchData()来分发action，执行异步操作，并在成功后提交mutation来修改状态。使用this.setData()直接调用mutation来修改状态。这样就能正确处理异步逻辑，并在异步操作完成后修改状态，以保持状态的一致性。\",\"值得注意的是，actions和mutations之间的通信是通过commit来完成的。action通过commit来触发对应的mutation，从而修改状态。这种分离使得代码更清晰、更易于维护，并且便于对异步逻辑的管理和组织。\"]},\"434\":{\"h\":\"为什么需要模块化？\",\"t\":[\"在Vuex中，模块化是一种将大型的状态管理代码库拆分为较小、可维护的模块的方式。下面是一些需要在Vuex中进行模块化的原因：\",\"代码组织和可维护性：Vuex允许将状态、操作、mutations和getters逻辑划分为模块，每个模块负责特定的功能和状态管理。这种划分可以使得代码更易于组织和理解，以及更容易进行团队合作和维护。\",\"命名空间：模块化允许在Vuex中创建命名空间，避免了不同模块中的命名冲突。每个模块可以有自己的独立状态、操作和getter，可以使用命名空间来访问它们，确保不同模块之间的状态和操作不会相互干扰。\",\"可复用和可扩展性：模块化使得状态管理代码更具可复用性和可扩展性。不同的模块可以在不同的应用中复用，或者在同一应用的不同部分共享。这使得在大型应用中更容易添加新功能、调整现有功能，并使得代码更容易维护和扩展。\",\"分工协作：通过模块化，团队成员可以并行地开发不同的模块，而不会干扰彼此的工作。每个开发人员可以专注于自己负责的模块，并独立进行开发、测试和调试。这种分工协作可以提高团队的效率和开发速度。\",\"性能优化：模块化可以提高Vuex性能。由于只有模块内的状态和操作可以访问和修改模块的状态，其他模块无法直接访问，这减少了不必要的状态变化和重新计算的机会，提高了性能并减少了不必要的更新。\",\"总之，Vuex的模块化提供了一种结构化和可维护的方式来管理应用程序的状态。它允许将大型状态库拆分为小型、自治的模块，提供更好的代码组织、可扩展性和可维护性，同时提供了命名空间，避免了命名冲突，使团队成员可以并行开发和改进不同的模块。\"]},\"435\":{\"h\":\"如何划分和组织模块\",\"t\":[\"在Vuex中，可以通过以下方式来划分和组织模块：\",\"按功能划分：按照功能将相关的状态、操作和getter划分到不同的模块。例如，可以创建一个用户模块，负责处理用户相关的状态和操作；创建一个商品模块，处理商品的状态和操作等。这种划分可以根据应用的功能领域，将相关的逻辑放到同一个模块中，提高代码的可读性和可维护性。\",\"按业务领域划分：根据业务领域将相关的功能划分为模块。例如，一个电子商务应用可以按照用户管理、商品管理、订单管理等业务领域来划分模块，每个模块负责对应领域内的状态管理和操作。这种划分方式使代码更具聚焦性，方便团队成员在各自负责的业务领域内进行开发和维护。\",\"按页面或组件划分：将每个页面或组件的状态和操作划分为独立的模块。例如，可以为每个主要页面或组件创建一个对应的模块，该模块管理与该页面或组件相关的状态和操作。这种划分方式可以使得每个页面或组件的代码更加独立和可维护，方便更改和重用。\",\"按独立可复用性划分：根据不同模块的独立可复用性进行划分。例如，可以将不涉及特定业务逻辑且可在多个应用中复用的状态和操作划分为一个通用的模块，而将特定业务逻辑相关的状态和操作划分为一个特定模块。这种划分方式有助于提高代码的可复用性和可维护性。\",\"划分模块之后，可以使用Vuex提供的modules选项来组织这些模块。在modules选项中列出每个模块，并指定它们的命名空间、状态、操作、getter等。这样，每个模块可以独立管理自己的状态，并通过命名空间在应用中访问。\",\"需要注意的是，模块化的划分和组织应该根据具体应用的需求和复杂度进行调整。目标是将代码按照合理且易于理解和维护的方式组织起来。在实际开发中，也可以根据实际情况动态调整和优化模块划分。\"]},\"436\":{\"h\":\"模块内部的state、getter、mutation和action\",\"t\":[\"在Vuex模块中，可以定义以下四个关键概念来管理状态和操作：\",\"State（状态）：State是模块内部管理的数据状态。它类似于组件中的data，但是可以被多个组件共享和访问。每个模块都可以定义自己的State，并且它们可以相互独立。State应该是响应式的，即任何对State的修改都能够自动更新相关的组件界面。可以使用函数返回State对象，以确保每个模块的State都是独立的实例。\",\"Getter（获取器）：Getter用于从State中派生出新的状态。它类似于组件中的计算属性，可以根据State的值进行计算，并返回新的状态。Getter可以接受参数，用于进行动态计算。Getter的返回值可以在组件中通过$store.getters访问。\",\"Mutation（变异）：Mutation是用于修改State的唯一方式。它类似于事件，包含一个字符串类型的事件名称（称为type）和一个回调函数（称为handler）。Mutation的handler函数接受State作为第一个参数，并接受额外的参数作为需要的数据，通过修改State的值来改变应用的状态。Mutation应该是同步操作，用于追踪State的变化。\",\"Action（动作）：Action用于处理异步操作，并触发Mutation来改变State的值。它可以包含任意的异步操作，例如发起API请求、异步获取数据等。Action是通过提交一个Mutation来改变State的值，但是可以包含异步操作和业务逻辑。Action的handler函数可以接受一个包含commit、dispatch、getters和state等属性的上下文对象，用于触发Mutation、分发其他Action或获取Getter的值。\",\"这些核心概念可以在Vuex模块中用来管理模块内的状态和操作。State用于存储数据，Getter用于派生新的状态，Mutation用于修改State的值，而Action用于处理异步操作和触发Mutation。这样的设计使得状态管理更加规范和可控，同时提供了对状态的封装和组织。\"]},\"437\":{\"h\":\"使用插件扩展Vuex功能\",\"t\":[\"Vuex允许通过使用插件来扩展其功能。插件可以在Vuex的生命周期中注入自定义逻辑，例如在每次mutation被提交时执行额外的操作，或者在初始化阶段做一些全局设置。下面是一个使用插件扩展Vuex功能的示例：\",\"// 创建插件对象 const myPlugin = store => { // 在每次 mutation 之后调用 store.subscribe((mutation, state) => { // 执行你想要的操作，例如记录日志 console.log('mutation被提交了:', mutation.type); console.log('新的state:', state); }); // 在初始化阶段做一些设置 store.dispatch('init'); }; // 创建Vuex store const store = new Vuex.Store({ // ... plugins: [myPlugin] // 注册插件 }); \",\"在上面的示例中，我们创建了一个名为myPlugin的插件对象，它接受一个store对象作为参数。插件对象通过store.subscribe方法注册一个订阅函数，该函数会在每次mutation被提交后执行。在这个示例中，我们简单地打印出了提交的mutation类型和新的state。\",\"然后，在创建Vuex store时，通过将插件对象放入plugins选项中注册插件。这样，在每次mutation被提交时，插件中的订阅函数都会被执行。\",\"需要注意的是，插件可以注册多个，它们将按照注册的顺序依次执行。\",\"通过使用插件，我们可以扩展Vuex的功能，例如记录日志、持久化状态、与后端同步等等。插件提供了对Vuex生命周期的扩展能力，允许我们注入自定义逻辑以满足应用程序的需求。\"]},\"438\":{\"h\":\"使用devtools调试Vuex\",\"t\":[\"要使用devtools进行Vuex的调试，需要进行以下步骤：\",\"安装Vue Devtools扩展程序：打开浏览器的扩展程序商店，搜索并安装Vue Devtools扩展程序。\",\"配置Vue应用：在Vue应用的入口文件（例如main.js）中，确保以下代码被添加到Vue实例的配置中：\",\"Vue.config.devtools = true; \",\"这将开启Vue Devtools的调试功能。\",\"配置Vuex：在Vuex的创建过程中，确保以下代码被添加到Vuex.Store的构造函数中：\",\"new Vuex.Store({ // ... devtools: true }) \",\"这将开启Vuex Devtools的调试功能。\",\"使用Devtools调试：在浏览器中打开Vue应用，并打开Vue Devtools扩展程序。你将看到一个新的选项卡\\\"Vuex\\\"出现在Vue Devtools中。\",\"在\\\"Vuex\\\"选项卡中，你可以查看Vuex store的状态和mutation的历史记录。你可以检查状态的变化、回溯mutation的执行，并查看每个mutation被调用时的状态快照。\",\"此外，你还可以在Vue Devtools中手动触发一个mutation，以便在开发过程中进行调试。\",\"使用Vue Devtools调试Vuex能够更轻松地追踪和理解应用程序的状态和变化，加快开发效率。它提供了一个强大的工具来帮助你调试和优化Vuex的状态管理。\"]},\"439\":{\"h\":\"使用vuex-persistedstate插件持久化状态\",\"t\":[\"要使用vuex-persistedstate插件来持久化Vuex状态，请按照以下步骤进行操作：\",\"安装插件：首先，使用npm或yarn安装vuex-persistedstate插件。\",\"npm install vuex-persistedstate \",\"引入插件：在Vuex的入口文件（通常是store.js）中，引入vuex-persistedstate插件并注册它。\",\"import createPersistedState from \\\"vuex-persistedstate\\\"; // 创建Vuex store const store = new Vuex.Store({ // ...其他配置 // 注册插件 plugins: [createPersistedState()] }); \",\"配置插件选项：通过传递配置选项给createPersistedState函数，你可以进一步自定义持久化设置。例如，你可以指定要持久化的模块、要排除的某些状态等。\",\"// 创建Vuex store const store = new Vuex.Store({ // ...其他配置 // 注册插件并配置选项 plugins: [ createPersistedState({ key: \\\"myApp\\\", // 存储的键名 paths: [\\\"auth\\\", \\\"cart\\\"], // 指定要持久化的模块 storage: window.localStorage // 使用localStorage进行持久化，默认为window.sessionStorage // ...其他选项 }) ] }); \",\"在上面的示例中，我们将vuex-persistedstate插件注册到Vuex store中，并将key设置为\\\"myApp\\\"，这将作为存储在本地的键。通过paths选项，我们指定了要持久化的模块为\\\"auth\\\"和\\\"cart\\\"，这意味着只有这些模块的状态会被持久化。默认情况下，插件会使用window.sessionStorage进行持久化，但我们可以通过传递storage选项来指定其他的存储方式，例如window.localStorage。\",\"**完成！**现在，当你使用Vuex存储和修改状态时，插件会自动将状态持久化到本地存储中。在每次加载应用程序时，它会从本地存储中恢复持久化的状态。\",\"使用vuex-persistedstate插件可以确保Vuex状态在刷新页面或关闭/重新打开应用程序后得到保留。这对于需要在用户会话中保持状态（例如用户登录状态、购物车信息等）的应用程序非常有用。\"]},\"440\":{\"h\":\"构建一个简单的Vuex应用程序示例\",\"t\":[\"好的，我将为你提供一个简单的Vuex应用程序示例。这个示例是一个简单的计数器应用，它演示了如何使用Vuex来管理应用程序的状态。\",\"安装和设置：首先，确保你已经安装了Vue和Vuex。你可以使用以下命令来安装它们：\",\"npm install vue vuex \",\"创建Vuex Store：在你的项目中，创建一个新的文件store.js，并添加以下代码：\",\"import Vue from 'vue'; import Vuex from 'vuex'; Vue.use(Vuex); const store = new Vuex.Store({ state: { count: 0, }, mutations: { increment(state) { state.count++; }, decrement(state) { state.count--; }, }, actions: { increment(context) { context.commit('increment'); }, decrement(context) { context.commit('decrement'); }, }, getters: { getCount(state) { return state.count; }, }, }); export default store; \",\"在这个示例中，我们首先引入Vue和Vuex，并使用Vue.use(Vuex)来安装Vuex插件。\",\"然后，我们创建一个Vuex Store对象，它包含了应用程序的状态（state）、变异方法（mutations）、动作（actions）和getter（getters）。\",\"state：应用程序的状态，这里只包含一个count变量，初始值为0。\",\"mutations：定义了用于修改状态的同步方法，这里有两个方法increment和decrement，分别用于增加和减少count的值。\",\"actions：定义了用于触发异步操作的方法，这里有两个方法increment和decrement，它们分别通过提交相应的mutation来修改count的值。\",\"getters：定义了用于获取计算属性的方法，这里只有一个方法getCount，用于获取当前的count值。\",\"创建Vue实例：在你的应用程序的入口文件（例如main.js）中，创建Vue实例并将Vuex Store注入到Vue实例中，代码如下：\",\"import Vue from 'vue'; import App from './App.vue'; import store from './store'; new Vue({ store, render: h => h(App), }).$mount('#app'); \",\"在这个示例中，我们首先引入Vue和App组件，然后创建一个Vue实例，并在store选项中注入我们之前创建的Vuex Store。\",\"创建组件：在你的应用程序中，创建一个名为App.vue的组件，并添加以下代码：\",\"<template> <div> <h2>Count: {{ count }}</h2> <button @click=\\\"increment\\\">Increment</button> <button @click=\\\"decrement\\\">Decrement</button> </div> </template> <script> export default { computed: { count() { return this.$store.getters.getCount; }, }, methods: { increment() { this.$store.dispatch('increment'); }, decrement() { this.$store.dispatch('decrement'); }, }, }; </script> \",\"在这个示例中，我们在模板中使用插值表达式{{ count }}来显示count的值，使用@click指令来监听按钮的点击事件并调用对应的方法。\",\"在computed中，我们通过调用this.$store.getters.getCount来获取getCount计算属性的值。\",\"在methods中，我们通过调用this.$store.dispatch来触发increment和decrement动作。\",\"运行应用程序：现在，你可以运行你的应用程序并查看效果了。在终端中执行以下命令：\",\"npm run serve \",\"打开浏览器，访问http://localhost:8080，你将看到一个计数器应用程序，你可以点击按钮来增加和减少计数器的值。\",\"在这个示例中，我们将Vuex的store对象放在一个单独的文件中，并将它作为一个模块来导入和使用。这样做有一个好处是，在大型应用程序中可以更好地组织和管理Vuex的状态、方法和计算属性。\"]},\"441\":{\"h\":\"如何在Vue组件中使用Vuex\",\"t\":[\"在Vue组件中使用Vuex，你需要先将Vuex的Store实例注入到Vue实例中，然后在组件中使用$store来访问Vuex的状态和方法。\",\"以下是在Vue组件中使用Vuex的一些常用方法：\",\"获取状态（State）：你可以通过在组件的计算属性中使用this.$store.state来获取Vuex的状态。例如：\",\"computed: { count() { return this.$store.state.count; }, }, \",\"提交变异（Mutation）：通过this.$store.commit('mutationName')来提交一个变异。你可以在组件的方法中调用commit方法来修改Vuex的状态。例如：\",\"methods: { increment() { this.$store.commit('increment'); }, decrement() { this.$store.commit('decrement'); }, }, \",\"分发动作（Action）：通过this.$store.dispatch('actionName')来分发一个动作。你可以在组件的方法中调用dispatch方法来触发Vuex的动作。例如：\",\"methods: { increment() { this.$store.dispatch('increment'); }, decrement() { this.$store.dispatch('decrement'); }, }, \",\"获取计算属性（Getter）：你可以通过在组件的计算属性中使用this.$store.getters来获取Vuex的计算属性。例如：\",\"computed: { doubleCount() { return this.$store.getters.doubleCount; }, }, \",\"在上述例子中，我们假设在Vuex的store中定义了名为increment、decrement的变异，名为increment、decrement的动作，和名为doubleCount的计算属性。\",\"注意：为了能够在组件中使用Vuex，你需要确保已经在Vue的实例中导入和安装了Vuex。具体的安装方式请参考Vuex的官方文档。\"]},\"442\":{\"h\":\"如何处理表单和非响应式数据\",\"t\":[\"当处理表单和非响应式数据时，你可以使用Vue的普通数据绑定和事件处理来处理这些情况。\",\"对于表单数据，你可以通过v-model指令将表单元素与Vue组件中的数据进行双向绑定。例如：\",\"<template> <div> <input type=\\\"text\\\" v-model=\\\"name\\\"> <button @click=\\\"submitForm\\\">Submit</button> </div> </template> <script> export default { data() { return { name: '', }; }, methods: { submitForm() { // 在这里处理表单提交逻辑，可以使用this.name访问表单数据 }, }, }; </script> \",\"在这个例子中，输入框的值与name数据进行双向绑定，当用户输入时，name的值会自动更新。点击按钮时，调用submitForm方法进行表单提交逻辑的处理。\",\"对于非响应式数据，你可以在Vue组件的data选项之外定义变量，并在需要的地方直接使用。例如：\",\"<template> <div> <p>{{ message }}</p> <button @click=\\\"updateMessage\\\">Update</button> </div> </template> <script> export default { data() { return { // 在这里定义Vue数据 // ... }; }, methods: { updateMessage() { // 在这里处理非响应式数据的更新逻辑 const nonReactiveData = 'Updated Message'; this.message = nonReactiveData; }, }, created() { // 在这里可以初始化非响应式数据 // ... }, }; </script> \",\"在这个例子中，使用插值表达式{{ message }}来显示非响应式的message数据。点击按钮时，调用updateMessage方法更新message数据。注意，非响应式数据的更新需要通过this关键字进行访问和修改，才能触发Vue的响应式系统更新视图。\"]},\"443\":{\"h\":\"如何优化Vuex应用程序性能\",\"t\":[\"要优化Vuex应用程序的性能，可以考虑以下几个方面：\",\"避免不必要的响应式数据：只将必要的数据放入Vuex的状态管理中，避免将所有数据都放入Vuex。对于一些临时或局部的数据，可以直接在组件中进行处理。\",\"合理使用计算属性：对于频繁使用的数据，可以将其定义为计算属性而不是每次都从Vuex状态中访问。计算属性具有缓存机制，它们只会在其依赖项发生变化时重新计算。\",\"批量修改状态：当需要多次修改Vuex状态时，使用Vuex的变异（Mutations）来批量修改状态，而不是直接在组件中多次调用变异方法。这样可以减少状态变化的频率，提高性能。\",\"使用动作（Actions）进行异步操作：当需要进行异步操作时，将异步逻辑放在Vuex的动作中，并通过动作来提交变异。这样可以让组件的逻辑更简洁，同时也可以更好地追踪异步操作的状态和处理错误。\",\"使用插件进行性能监测：Vuex提供了插件系统，可以使用插件来监测状态的变化、打印日志、性能追踪等。通过插件可以更好地理解和优化Vuex应用程序的性能。\",\"使用持久化状态：如果应用需要在刷新页面后保持状态，可以考虑使用插件来实现Vuex状态的持久化，以减少重新加载和初始化的开销。\",\"按需导入和分割模块：如果Vuex的模块很多或很复杂，可以考虑按需导入和分割模块。这样可以减少初始加载的时间，并在需要时动态加载所需的模块。\",\"使用严格模式进行开发：在开发阶段，可以启用Vuex的严格模式，以检测对状态的非法修改和调试代码。\",\"以上是一些常见的优化Vuex应用程序性能的方法。根据具体的应用场景和需求，你也可以结合其他优化策略来提升应用的性能。\"]},\"444\":{\"h\":\"常见问题和解决方案\",\"t\":[\"Vuex中的命名空间问题 在Vuex中，命名空间是一种将模块组织和划分的机制，用于解决多个模块命名冲突的问题。通过命名空间，我们可以在访问模块中的状态、操作、提交和获取方法时，明确指定模块的名称，避免命名冲突。\",\"使用命名空间可以通过在模块中添加namespaced: true选项来启用，例如：\",\"const moduleA = { namespaced: true, state: { ... }, mutations: { ... }, actions: { ... }, getters: { ... } }; const moduleB = { state: { ... }, mutations: { ... }, actions: { ... }, getters: { ... } }; const store = new Vuex.Store({ modules: { a: moduleA, b: moduleB } }); \",\"在上面的例子中，moduleA启用了命名空间，而moduleB没有。启用了命名空间的模块中的状态、操作、提交和获取方法需要通过模块名来访问，例如：\",\"// 在 getters 中获取 moduleA 的状态 const someValue = this.$store.getters['a/someValue']; // 在组件中提交 moduleA 的操作 this.$store.commit('a/someMutation', payload); // 在组件中分发 moduleA 的动作 this.$store.dispatch('a/someAction', payload); \",\"对于没有启用命名空间的模块，可以直接使用相应的状态、操作、提交和获取方法，不需要加上模块名。\",\"需要注意的是，在没有启用命名空间的模块中访问启用了命名空间的模块时，仍然需要使用模块名来访问。例如，在moduleB中访问moduleA的状态：\",\"const moduleAState = this.$store.state.a.someValue; \",\"通过使用命名空间，可以更清晰地组织和管理Vuex中的模块，并且减少命名冲突的可能性。\",\"如何处理多个模块之间的通信 在Vuex中，处理多个模块之间的通信可以通过以下几种方式实现：\",\"使用根状态（Root State）：每个模块都可以通过this.$store.state来直接访问根状态。这样可以在各个模块之间直接互相读取和修改数据。但是，这种方式不够明确和模块化，可能会导致代码难以维护和理解。\",\"使用Getter：Getter是Vuex中用于从状态中获取派生数据的方法。你可以在Getter中访问其他模块的状态，并根据需要进行处理和计算，然后提供给组件使用。通过Getter，可以使模块之间的通信更明确和可控。\",\"使用Action：Action是Vuex中用于处理异步逻辑和提交Mutation的方法。你可以在Action中访问其他模块的状态，并根据需要调用其他模块的操作。通过Action，可以在模块之间进行复杂的交互和通信。\",\"使用Mutation：Mutation是Vuex中用于修改状态的方法。在一个模块中的Mutation中，你可以提交其他模块的Mutation来修改它们的状态，以实现模块之间的通信。但是，需要注意避免形成循环依赖。\",\"使用事件总线或Pub/Sub模式：使用一个独立的事件总线或Pub/Sub实现，比如Vue的EventBus，可以让多个模块之间进行解耦的通信。模块可以订阅和发布事件，以达到相互通信的目的。这种方式适用于非嵌套较深的模块之间的通信。\",\"根据具体的情况和需求，你可以选择使用以上的一种或多种方式来处理多个模块之间的通信。需要注意的是，在设计和实现模块之间的通信时，应遵循单一数据源的原则，避免混乱和冲突。\",\"如何在使用TypeScript时使用Vuex 在使用TypeScript时，可以通过以下步骤来使用Vuex：\",\"安装依赖：首先，确保已经安装了Vuex和TypeScript的相关依赖。\",\"npm install vuex npm install --save-dev @types/vuex \",\"创建Vuex模块：使用Vuex的方式创建和组织你的模块，可以按照常规的方式定义状态、变异、动作和获取方法。\",\"// store.ts import { Module, Mutation, Action, VuexModule } from 'vuex-module-decorators'; @Module({ namespaced: true, name: 'example' }) class ExampleModule extends VuexModule { private count: number = 0; public get getCount(): number { return this.count; } @Mutation private increment(): void { this.count++; } @Action public async asyncIncrement(): Promise<void> { // 异步操作... this.context.commit('increment'); } } export default ExampleModule; \",\"创建根Vuex Store：创建一个根Vuex Store文件，将所有的模块导入并进行注册。\",\"// store.ts import Vue from 'vue'; import Vuex from 'vuex'; import ExampleModule from './example-module'; Vue.use(Vuex); const store = new Vuex.Store({ modules: { example: ExampleModule, }, }); export default store; \",\"在Vue组件中使用Vuex：在Vue组件中使用Vuex的时候，可以通过this.$store来访问Vuex的状态、操作和获取方法。\",\"<!-- MyComponent.vue --> <template> <div> <p>Count: {{ count }}</p> <button @click=\\\"increment\\\">Increment</button> <button @click=\\\"asyncIncrement\\\">Async Increment</button> </div> </template> <script lang=\\\"ts\\\"> import { Component, Vue } from 'vue-property-decorator'; @Component export default class MyComponent extends Vue { private get count(): number { return this.$store.state.example.count; } private increment(): void { this.$store.commit('example/increment'); } private async asyncIncrement(): Promise<void> { await this.$store.dispatch('example/asyncIncrement'); } } </script> \",\"以上是基本的设置，使你能够在使用Vue和TypeScript的情况下使用Vuex。使用TypeScript可以提供更好的类型检查和自动补全，增强了开发效率和可维护性。\",\"如果你需要更复杂的设置或使用其他插件，可以参考Vuex和Vue的文档，以满足具体的需求。\"]},\"445\":{\"h\":\"Vite\"},\"446\":{\"h\":\"介绍\"},\"447\":{\"h\":\"Webpack\"},\"448\":{\"h\":\"Webpack简介\",\"t\":[\"Webpack是一个现代的静态模块打包工具，被广泛应用于前端开发中。它能够将项目中的各种资源文件（例如JavaScript、CSS、图片等）视为模块，并将它们打包成可在浏览器中运行的静态文件。\",\"Webpack的主要优点是模块化管理和打包。它允许开发人员使用类似于Node.js的模块化规范（如CommonJS、ES6模块），并通过import、export语法来引入和导出模块。Webpack会根据模块之间的依赖关系，自动分析和构建出整个项目的依赖图，最终将所有模块打包成几个静态资源文件。\",\"总之，Webpack是一个功能强大且高度可配置的静态模块打包工具，它通过模块化管理和打包，提供了许多有用的特性和工具，使得前端开发更加高效、便捷和可维护。\"]},\"449\":{\"h\":\"安装\",\"t\":[\"npm install webpack webpack-cli -D \"]},\"450\":{\"h\":\"配置\",\"t\":[\"// webpack.config.js const path = require('path'); module.exports = { entry: './src/index.js', output: { filename: 'bundle.js', path: path.resolve(__dirname, 'dist') } }; \"]},\"451\":{\"h\":\"运行\",\"t\":[\"npx webpack \"]},\"452\":{\"h\":\"打包结果\",\"t\":[\"// dist/bundle.js (function(){ // ... })(); \"]},\"453\":{\"h\":\"核心概念\",\"t\":[\"入口（Entry）：\",\"入口指定Webpack开始构建的入口模块。可以通过配置文件中的entry属性来指定一个或多个入口模块，Webpack将从这些入口模块开始分析和构建项目的依赖关系。\",\"输出（Output）：\",\"输出指定Webpack构建结果的输出目录和文件名。可以通过配置文件中的output属性来定义输出目录（path）和输出文件名（filename）等。\",\"加载器（Loaders）：\",\"加载器允许Webpack处理非JavaScript的文件，将它们转换为模块可识别的文件。例如，通过加载器可以将Sass文件转换成CSS、将ES6代码转换成ES5等。加载器使用链式调用，并在配置文件的module.rules选项中进行配置。\",\"插件（Plugins）：\",\"插件在Webpack的构建过程中执行更广泛的任务，如代码优化、文件处理、环境变量注入等。通过配置文件的plugins选项来使用插件。常见的插件有热模块替换插件（HotModuleReplacementPlugin）、自动生成HTML插件（HtmlWebpackPlugin）和代码压缩插件（UglifyJsPlugin）等。\",\"模式（Mode）：\",\"模式允许根据开发环境选择Webpack的模式。可以通过配置文件的mode选项来设置模式，可选的值包括development、production和none。开发模式（development）用于快速构建，包含有用的调试信息；生产模式（production）用于生产环境，自动优化构建结果，包括代码压缩、作用域提升等。\",\"代码分割（Code Splitting）： 代码分割（Code Splitting）是Webpack中的一项重要特性，可以将应用程序代码拆分成多个小块，以优化加载性能。通过代码分割，可以将不同页面或功能模块的代码分离开来，实现按需加载（On-Demand Loading），减少初始加载时的文件体积，提高应用程序的加载速度和性能。\",\"热模块替换（Hot Module Replacement）： 热模块替换（Hot Module Replacement，HMR）是Webpack的一个功能，用于在应用程序运行时替换、添加或删除模块，而无需完全刷新页面或重新加载整个应用程序。它可以实现在开发过程中的实时预览修改的效果，加快开发速度，并提供更好的开发体验。\"]},\"454\":{\"h\":\"配置文件\",\"t\":[\"Webpack的配置文件是一个JavaScript模块，用于指定Webpack在构建过程中的各种配置选项。配置文件允许你自定义Webpack的行为，包括入口、输出、加载器、插件、优化等设置。下面是一个简单的Webpack配置文件示例：\",\"const path = require('path'); module.exports = { entry: './src/index.js', output: { path: path.resolve(__dirname, 'dist'), filename: 'bundle.js', }, module: { rules: [ { test: /\\\\.js$/, exclude: /node_modules/, use: 'babel-loader', }, { test: /\\\\.css$/, use: ['style-loader', 'css-loader'], }, ], }, plugins: [ // 插件配置 ], resolve: { extensions: ['.js', '.json'], alias: { // 别名配置 }, }, optimization: { // 优化配置 }, devServer: { // 开发服务器配置 }, }; \",\"在这个示例中，配置文件使用CommonJS规范进行导出，导出的对象包含了各种Webpack配置选项：\",\"entry：指定入口文件，Webpack将从入口文件开始分析和构建项目的依赖关系。\",\"output：指定构建结果的输出目录和文件名。\",\"module：配置加载器（loaders），用于处理不同类型的文件。\",\"plugins：配置插件（plugins），用于执行一些额外的构建任务。\",\"resolve：配置模块解析的选项，例如文件扩展名和别名。\",\"optimization：配置优化选项，如代码分割、压缩等。\",\"devServer：配置开发服务器，用于提供开发环境下的热更新、代理等功能。\",\"你可以根据项目的需求，在配置文件中添加或修改这些选项来满足你的构建需求。当你运行Webpack时，Webpack会自动读取配置文件，并按照配置文件中的设置进行构建。\",\"除了使用JavaScript编写配置文件外，还可以使用其他格式的配置文件，如JSON、YAML等。可以使用Webpack的CLI命令行工具或相关的构建工具来指定使用哪个配置文件。\",\"根据不同环境配置多个配置文件，如webpack.config.js、webpack.prod.js、webpack.dev.js等。\"]},\"455\":{\"h\":\"加载器（Loaders）\",\"t\":[\"在Webpack中，加载器（Loaders）是用于处理非JavaScript文件的转换工具。Webpack原生只能处理JavaScript文件，但通过使用加载器，可以将其他类型的文件（如CSS、图片、字体等）转换为Webpack可以处理的模块。\",\"加载器的作用是在模块被添加到依赖图中之前，对它们进行预处理。加载器可以在导入模块时对其进行转换，例如通过编译、压缩、转换文件格式等方式。\",\"以下是一个加载器的示例配置：\",\"module: { rules: [ { test: /\\\\.css$/, use: ['style-loader', 'css-loader'], }, { test: /\\\\.(png|jpe?g|gif|svg)$/, use: 'file-loader', }, ], } \",\"上述配置使用两个加载器：\",\"css-loader：处理.css文件，将CSS文件转换为JavaScript模块，以便在应用程序中引入。\",\"style-loader：将经过css-loader处理的CSS代码插入到HTML页面中作为style标签，使其生效。\",\"另外，针对图像文件，我们使用了file-loader，它将图像文件复制到输出目录，并返回文件路径，以便在应用程序中使用。\",\"可以通过管道（pipe）方式将多个加载器串联起来，Webpack会按照从右到左的顺序依次使用加载器进行转换。例如在上述示例中，首先使用css-loader处理.css文件，然后将结果传递给style-loader处理。\",\"除了上述示例中的加载器，Webpack生态系统中还有大量的加载器可供使用，例如：\",\"Babel-loader：使用Babel进行ES6+语法转换。\",\"Sass-loader：处理.scss文件，将Sass/SCSS代码转换为CSS。\",\"Less-loader：处理.less文件，将Less代码转换为CSS。\",\"File-loader：处理各种文件类型（如图片、字体等），将它们复制到输出目录并返回路径。\",\"Url-loader：与File-loader类似，但可以将较小的文件以DataURL形式内联到生成的文件中。\",\"PostCSS-loader：使用PostCSS处理CSS，例如自动添加浏览器前缀、CSS模块化等。\",\"配置不同的加载器，可以根据项目需求灵活处理各种类型的文件，并将其转换为Webpack可以处理的模块。加载器可以通过test字段匹配文件，使用use字段指定要应用的加载器，也可以通过其他选项配置加载器的行为。\"]},\"456\":{\"h\":\"插件（Plugins）\",\"t\":[\"在Webpack中，插件（Plugins）是用于执行广泛的任务和自定义Webpack构建过程的工具。插件可以处理各种任务，如优化输出、资源管理、注入环境变量、自动生成HTML文件等。\",\"插件通过在Webpack构建过程中的特定时间点触发钩子函数来执行任务。插件可以访问Webpack提供的编译对象和配置信息，以便完成各种操作。\",\"以下是一个插件配置的示例：\",\"const HtmlWebpackPlugin = require('html-webpack-plugin'); const { CleanWebpackPlugin } = require('clean-webpack-plugin'); module.exports = { // ...其他配置 plugins: [ new CleanWebpackPlugin(), new HtmlWebpackPlugin({ template: './src/index.html', }), ], }; \",\"上述示例配置了两个插件：\",\"CleanWebpackPlugin：用于每次构建前清理输出目录，以便保持输出目录的干净状态。\",\"HtmlWebpackPlugin：用于生成HTML文件并自动引入构建后的资源（如JavaScript文件、CSS文件等）。\",\"在配置中，可以通过new关键字创建插件实例，并将其作为数组添加到plugins选项中。\",\"插件还可以接受一些选项配置，以满足具体需求。在上述示例中，HtmlWebpackPlugin使用了一个template选项，用于指定生成HTML文件的模板。\",\"除了上述示例中的插件，还有很多其他有用的插件可供选择，例如：\",\"MiniCssExtractPlugin：提取CSS为独立的文件，而不是内联到JavaScript文件中。\",\"DefinePlugin：在编译时创建全局常量，可以用于注入环境变量等。\",\"CopyWebpackPlugin：复制静态文件或文件夹到输出目录。\",\"UglifyJsPlugin：压缩JavaScript代码。\",\"ProvidePlugin：自动加载模块，无需使用import或require语句。\",\"通过使用插件，可以在Webpack构建过程中执行各种自定义的任务，以满足项目的需求。可以根据具体需求在配置文件中添加或删除插件，并根据插件的文档配置选项来定制插件的行为。\"]},\"457\":{\"h\":\"模式（Mode）\",\"t\":[\"在Webpack中，模式（Mode）用于配置构建的环境模式，以便Webpack在不同环境下执行不同的优化策略。Webpack自带三种模式：development、production和none。\",\"使用不同的模式可以使Webpack对应用程序进行不同的优化和配置，以提供最佳的构建结果。\",\"以下是几种常见的模式及其特点：\",\"development：用于开发环境。在该模式下，Webpack将会启用有用的开发工具，如devtool、热模块替换（Hot Module Replacement）等。它还会执行更快的增量构建，并生成可读性更好的输出文件，以方便调试。此外，还会设置 process.env.NODE_ENV 的值为 \\\"development\\\"。\",\"示例配置：\",\"module.exports = { mode: 'development', // ... }; \",\"production：用于生产环境。在该模式下，Webpack会执行各种优化，如代码压缩、注入环境变量、提取CSS到独立文件等。它还会自动启用一些默认配置项，以最小化输出文件的体积并提高性能。此外，还会设置 process.env.NODE_ENV 的值为 \\\"production\\\"。\",\"示例配置：\",\"module.exports = { mode: 'production', // ... }; \",\"none：无特定模式。即不开启任何优化策略。在该模式下，Webpack将执行基本的打包功能，不会进行任何额外的优化或配置。此外，不会设置 process.env.NODE_ENV 的值，需要手动设置。\",\"示例配置：\",\"module.exports = { mode: 'none', // ... }; \",\"通过在Webpack配置中指定mode选项，可以根据应用程序的运行环境选择适当的优化策略。选择合适的模式可以显著地改善构建性能和输出结果。\"]},\"458\":{\"h\":\"代码分割（Code Splitting）\",\"t\":[\"代码分割（Code Splitting）是Webpack中的一项重要特性，可以将应用程序代码拆分成多个小块，以优化加载性能。通过代码分割，可以将不同页面或功能模块的代码分离开来，实现按需加载（On-Demand Loading），减少初始加载时的文件体积，提高应用程序的加载速度和性能。\",\"Webpack提供了几种代码分割的方式：\",\"入口起点（Entry Points）：\",\"在Webpack配置文件中指定多个入口起点，Webpack将为每个入口起点生成一个对应的输出文件。这种方式适用于小型项目，但可能会导致重复加载共享模块的问题。\",\"防止重复（Prevent Duplication）：\",\"使用entry选项与optimization.splitChunks配置，可以根据模块的共享情况，自动将公共模块分离出来，并生成一个单独的输出文件。这样，在多个入口起点中使用相同的模块时，可以避免模块重复加载，提高代码的复用性。\",\"动态导入（Dynamic Import）：\",\"使用ES6的import语法，结合Webpack的动态导入能力，可以在运行时根据需要动态地导入模块。例如，可以将某个模块单独打包成一个文件，在需要的时候再通过import语句进行异步加载。这种方式可以实现按需加载，提高应用程序的性能。\",\"第三方库分离（Vendor Separation）：\",\"将第三方库（例如React、Vue、lodash等）与应用程序的代码分开打包，可以使用optimization.splitChunks配置的cacheGroups选项将第三方库提取为单独的输出文件。这样可以利用浏览器的缓存机制，减少第三方库的重复加载。\",\"代码分割是优化Webpack构建结果的一种重要方式，可以根据项目的需求和特点进行选择使用。通过合理地进行代码分割，可以提高应用程序的加载性能，减少初始加载的文件体积，并改善用户体验。\"]},\"459\":{\"h\":\"热模块替换（Hot Module Replacement）\",\"t\":[\"热模块替换（Hot Module Replacement，HMR）是Webpack的一个功能，用于在应用程序运行时替换、添加或删除模块，而无需完全刷新页面或重新加载整个应用程序。它可以实现在开发过程中的实时预览修改的效果，加快开发速度，并提供更好的开发体验。\",\"HMR的工作原理如下：\",\"当一个模块发生改变时，Webpack会通过HMR插件将修改的模块标记为\\\"热\\\"。\",\"应用程序接收到热更新信号后，将通过HMR runtime来处理这个信号。\",\"HMR runtime会与WebpackDevServer建立WebSocket连接，获取最新的模块更新。\",\"通过Hot Module Replacement API，Webpack会尝试将新的模块与当前运行的应用程序进行热替换。\",\"如果热替换成功，应用程序会无缝地接受到更新后的模块，只更新需要更新的部分，保留其他的应用程序状态。\",\"如果热替换失败，Webpack将尝试整个重新加载应用程序，以保证应用程序的正确性。\",\"HMR不仅可以处理JavaScript模块的热替换，还可以处理CSS样式表、图像和其他资源文件的热替换。开发人员可以在代码中适应HMR的接口，使得模块的改动可以立即生效，而不需要刷新整个页面。\",\"使用热模块替换可以显著提高前端开发的效率和开发体验。开发人员可以实时地查看和测试他们的修改，无需手动刷新页面，加快开发迭代的速度。同时，HMR还能够帮助开发人员保持应用程序的状态和数据，提供更好的调试和错误追踪能力。\"]},\"460\":{\"h\":\"模块解析\",\"t\":[\"模块解析（Module Resolution）是Webpack用于确定模块位置的机制。在Webpack中，当需要引入模块时，它会根据配置的解析规则来找到对应的模块并进行加载。\",\"Webpack支持多种模块解析方式，包括：\",\"相对路径解析：当模块路径以 . 或 .. 开头时，Webpack会将其视为相对路径，并从当前文件所在的位置开始解析。\",\"绝对路径解析：当模块路径以 / 开头时，Webpack会将其视为绝对路径，并从根目录开始解析。\",\"模块路径解析：当模块路径不以 .、.. 或 / 开头时，Webpack会将其视为模块路径，并根据配置中指定的解析规则来解析模块路径。\",\"常见的模块解析规则包括：\",\"resolve.modules：用于配置Webpack在哪些目录中查找第三方模块，默认情况下会自动解析 node_modules 文件夹。\",\"resolve.extensions：用于配置Webpack解析模块时的文件扩展名的优先级。当导入模块时没有指定扩展名时，Webpack会按照配置的优先级依次尝试解析模块。\",\"resolve.alias：用于配置模块导入的别名，可以简化模块的导入路径。当遇到配置的别名时，Webpack会将导入的路径替换成配置的别名路径。\",\"示例配置：\",\"module.exports = { // ... resolve: { modules: ['node_modules', 'src'], extensions: ['.js', '.json'], alias: { utils: path.resolve(__dirname, 'src/utils'), }, }, }; \",\"在上述示例配置中，指定了模块的解析规则。modules 配置了解析模块时搜索的目录，首先查找 node_modules，然后是 src 目录。extensions 配置了模块解析时尝试的文件扩展名，首先查找 .js 文件，然后是 .json 文件。alias 配置了导入模块时的别名，当遇到 utils 别名时，会自动替换成 src/utils。\",\"通过适当配置模块解析，可以使Webpack正确地找到和加载模块，提高开发效率，并确保项目的模块导入路径正确无误。\"]},\"461\":{\"h\":\"devServer\",\"t\":[\"devServer是Webpack提供的一个内置开发服务器，用于在开发过程中提供实时重新加载、热模块替换（HMR）等功能。它可以为开发者提供一个方便的环境来实时预览和调试应用程序的变化。\",\"使用devServer需要在Webpack配置中进行相应的设置。以下是一些常见的devServer配置选项：\",\"contentBase：指定提供静态文件的目录，通常为项目根目录。\",\"port：指定服务器监听的端口号，默认为8080。\",\"hot：启用热模块替换（HMR）功能，使得可以在不刷新整个页面的情况下，实时更新修改的模块。\",\"open：在启动devServer时，自动打开默认浏览器。\",\"proxy：配置反向代理，将http请求代理到其他服务器。\",\"historyApiFallback：开启HTML5 history模式，当路由路径不存在时，返回index.html文件，用于支持单页应用的前端路由。\",\"示例配置：\",\"module.exports = { // ... devServer: { contentBase: path.join(__dirname, 'public'), port: 3000, hot: true, open: true, proxy: { '/api': 'http://localhost:8080', }, historyApiFallback: true, }, }; \",\"在上述示例中，配置了一个简单的devServer。contentBase 设置为 public 目录，用于提供静态文件。port 设置为 3000，表示devServer监听的端口号为3000。hot 启用了热模块替换功能。open 设置为 true，表示启动devServer时自动打开默认浏览器。proxy 配置了将以 /api 开头的请求代理到 http://localhost:8080 服务器。historyApiFallback 开启了HTML5 history模式。\",\"启动devServer后，可以通过访问指定的URL来预览应用程序，并通过devServer提供的功能进行调试和实时反馈。例如，在源代码中进行修改后，devServer会自动重新编译并刷新页面，实时展示修改的效果。\"]},\"462\":{\"h\":\"Tree Shaking\",\"t\":[\"Tree Shaking是一种用于优化JavaScript打包输出的技术，主要用于移除未使用的代码，减小最终打包文件的体积。它基于ES模块的静态分析能力，通过识别和消除未使用的代码，以达到减少打包文件大小和提升应用程序性能的目的。\",\"在JavaScript中，Tree Shaking的核心思想是通过静态分析的方式确定哪些代码被使用，哪些代码未被使用。然后在打包过程中，移除未使用的代码。\",\"Tree Shaking一般与ES模块使用的构建工具（如Webpack、Rollup等）配合使用，这些工具在打包时会自动进行Tree Shaking优化。在Webpack中，启用Tree Shaking的方式通常是通过配置optimization属性的usedExports选项为true，或者mode设置为production。\",\"下面是一个简单的示例，展示Tree Shaking在打包过程中的作用：\",\"// math.js export function square(x) { return x * x; } export function cube(x) { return x * x * x; } // index.js import { square } from './math'; console.log(square(5)); \",\"在上述代码中，math.js文件中定义了两个函数square和cube，而index.js文件只引入了square函数。\",\"在进行Tree Shaking优化后，最终打包的代码只会包含被使用的square函数，而未被使用的cube函数会被自动移除。\",\"Tree Shaking的优势主要体现在优化应用程序的体积，减少不必要的代码下载和解析，从而提升应用程序的加载速度和性能。但需要注意的是，Tree Shaking只针对ES模块的静态分析有效，对于动态导入（dynamic import）或其他非ES模块的情况，可能无法实现最优的优化效果。因此，在使用Tree Shaking时，需要结合合适的打包工具和配置，在确保代码逻辑正确的前提下，尽可能地减少打包文件的体积。\"]},\"463\":{\"h\":\"Loader机制\",\"t\":[\"Loader机制是Webpack中的核心概念之一，它用于在打包过程中对不同类型的资源文件进行转换和处理。Loader可以将非JavaScript文件（如CSS、图片、字体等）转换为JavaScript模块，或者对JavaScript源码进行预处理。\",\"Loader的工作原理是通过模块链式调用的方式，将资源文件作为输入，经过一系列的转换处理后，输出处理后的结果。\",\"以下是Loader的一些重要特点和使用方式：\",\"每个Loader是独立的：每个Loader只负责完成特定类型的转换工作，可以按需配置和使用。例如，有一个css-loader用于处理CSS文件，一个file-loader用于处理文件资源，它们各自独立工作，但可以通过配置相互配合使用。\",\"链式调用：多个Loader可以通过管道方式串联起来。Webpack会根据配置的Loader顺序，从右到左依次使用它们进行处理，前一个Loader的输出结果作为下一个Loader的输入。例如：style-loader!css-loader!sass-loader，先使用sass-loader将Sass代码转换为CSS，然后使用css-loader将CSS转换为JavaScript模块，最后使用style-loader将转换后的CSS模块注入到页面中。\",\"配置Loader：Loader可以通过Webpack配置文件中的module.rules字段进行配置。每个Loader都可以设置不同的选项，用于控制转换和处理的方式。例如，可以为不同的Loader指定不同的文件匹配规则、加载顺序、转换选项等。\",\"社区Loader：Webpack生态系统中有大量的开源Loader可供使用，覆盖了几乎所有前端开发中可能遇到的资源处理需求。例如，babel-loader用于将ES6+的JavaScript代码转换为向后兼容的JavaScript代码，url-loader用于将图片转换为DataURL或输出文件。\",\"Loader的使用方式可以通过以下示例来说明：\",\"module.exports = { module: { rules: [ { test: /\\\\.css$/, use: ['style-loader', 'css-loader'], }, { test: /\\\\.(png|jpg|gif)$/, use: { loader: 'url-loader', options: { limit: 8192, name: 'images/[name].[ext]', }, }, }, ], }, }; \",\"在上述配置中，定义了两个Loader规则：\",\"对于.css后缀的文件，使用style-loader和css-loader进行处理。\",\"对于.png、.jpg和.gif后缀的文件，使用url-loader进行处理，设置了一些选项，如限制文件大小、输出文件名等。\",\"通过配置Loader，Webpack可以根据规则自动找到相应的文件并进行转换和处理，最终生成打包后的文件。\",\"Loader机制的灵活性和可配置性使得Webpack能够处理各种类型的资源文件，并进行定制化的转换和处理，提高前端开发的效率和项目的可维护性。\"]},\"464\":{\"h\":\"插件系统（Plugin System）\",\"t\":[\"插件系统（Plugin System）是一种用于扩展和定制应用程序功能的架构设计模式。在软件开发中，插件系统常用于使应用程序具有可插拔的特性，允许用户根据需求选择性地加载和使用不同的插件，从而增强应用程序的功能和灵活性。\",\"插件系统通常由以下几个核心组件组成：\",\"插件接口（Plugin Interface）：定义了插件应该实现的接口或规范。这些接口描述了插件应该具备的功能点或方法，并与应用程序的其他组件进行交互。插件接口为插件提供了一个标准化的开发和集成方式。\",\"插件管理器（Plugin Manager）：负责加载、注册和管理插件。插件管理器通常提供了一组API或方法，用于安装、卸载、启用和禁用插件，并维护插件的运行时状态。它还可以通过扩展机制，支持插件的自动发现和加载。\",\"插件清单（Plugin Manifest）：用于描述插件的元数据和属性，如名称、版本、作者、依赖关系等。插件清单提供了一种标准化的方式，使应用程序能够识别、配置和管理插件。\",\"插件扩展点（Plugin Extension Point）：定义了应用程序中允许插件进行扩展的特定区域或接口。插件可以根据扩展点提供的接口和方法，向应用程序注入自定义逻辑或功能。\",\"插件系统的优势在于其可扩展性和灵活性。通过将核心功能与插件分离，应用程序的开发团队可以专注于核心业务逻辑，而插件开发者可以根据需求开发定制化的功能。此外，插件的可选加载性还使应用程序能够根据需要进行功能扩展，提供了更好的用户体验和维护性。\",\"许多应用程序框架和工具都采用了插件系统，如WordPress的插件系统、Eclipse的插件开发框架等。这些插件系统不仅为应用程序提供了丰富的扩展功能，也为开发者提供了一个开放的生态系统，促进了插件共享和社区合作。\"]},\"465\":{\"h\":\"缓存\",\"t\":[\"缓存是计算机系统中一种常用的性能优化技术，用于存储和重复使用已经获取或计算过的数据，以降低对资源的访问开销，提高系统的响应速度和效率。\",\"在Web开发中，缓存可以用于存储和重用已经获取过的数据，以减少网络请求和服务器计算的次数。以下是一些常见的缓存应用场景：\",\"浏览器缓存：浏览器可以缓存静态资源（如HTML、CSS、JavaScript、图片等）以及服务器返回的响应结果。当再次请求同一资源时，浏览器可以直接从缓存中获取，减少网络请求和带宽消耗。\",\"CDN缓存：内容分发网络（CDN）是一种通过分布式节点存储并缓存静态资源的服务。CDN可以将静态资源缓存到离用户更近的边缘服务器上，通过就近提供资源，加快用户访问速度。\",\"数据库缓存：数据库查询是较为耗时的操作，可以通过将查询结果缓存到内存中，加快对相同查询的响应速度。常见的数据库缓存解决方案包括Redis、Memcached等。\",\"应用程序级缓存：应用程序也可以通过缓存来存储计算结果、临时数据等。这可以避免重复计算或访问外部资源，从而提升应用程序的性能和响应速度。\",\"使用缓存时需要注意以下几点：\",\"缓存一致性：当数据变化时，缓存需要及时更新或失效，以保证缓存数据的一致性。可以通过设置合理的缓存过期时间、使用缓存刷新机制等方式来解决。\",\"缓存策略：不同的数据类型和业务场景可能需要不同的缓存策略。例如，对于频繁变化的数据，可以使用较短的缓存时间；对于稳定且重要的数据，可以使用较长的缓存时间。\",\"缓存容量控制：缓存需要占用一定的内存空间，过多的缓存可能会导致内存压力过大。可以设定缓存容量上限，并采用LRU（最近最少使用）等缓存淘汰算法来管理缓存。\",\"缓存是一种权衡，虽然可以提高性能，但也会带来一些问题，如数据一致性和缓存更新等。因此，在实际应用中需要根据具体情况综合考虑缓存的利弊，并采取相应的策略来优化系统的性能和可靠性。\"]},\"466\":{\"h\":\"提取公共代码\",\"t\":[\"提取公共代码是一种软件工程的最佳实践，用于将重复使用的代码片段封装成可复用的模块或函数，以提高代码的可维护性和重用性。通过提取公共代码，可以减少代码冗余，提高代码的可读性，并降低后续维护和更新的工作量。\",\"以下是一些常见的提取公共代码的方法和技术：\",\"函数封装：将常见的一段代码逻辑封装成一个函数或方法，使其可以在不同的地方被重复调用。这样可以提高代码的重用性，并使代码更加简洁和易于理解。\",\"类和模块抽象：将一组相关的函数和数据封装成一个类或模块，以实现功能的组织和复用。通过定义接口和抽象类，可以提供标准化的调用方式，增加代码的通用性。\",\"抽象和通用算法：对于重复的算法逻辑，可以将其抽象成可配置的参数，以适应不同的场景和需求。这样可以提高代码的灵活性和适应性，减少重复编写类似算法的工作。\",\"库和框架使用：使用现有的库和框架，可以直接获取开源社区或第三方开发者共享的公共代码。这些库和框架已经经过测试和验证，可以节省开发时间，提高代码质量。\",\"在提取公共代码时，需要注意以下几点：\",\"避免过度提取：不必要的提取可能导致代码可读性降低，增加维护复杂度。在提取之前，需要仔细评估代码的复用性和通用性，确保提取的代码确实会被多个地方使用。\",\"良好的命名和文档：提取的公共代码应该具有清晰的命名和文档说明，以便其他开发者可以方便地理解和使用。清晰的命名和文档可以提高代码的可读性和易用性。\",\"版本控制和维护：对于提取的公共代码，应进行适当的版本控制和维护。及时更新和修复可能存在的bug，并确保代码的兼容性和性能。\",\"综上所述，提取公共代码是一种有效的代码重用和组织的方法，能够提高开发效率和代码质量。在实际开发中，根据具体情况，合理地进行公共代码的提取和优化，可以极大地提升开发团队的工作效率和软件的可维护性。\"]},\"467\":{\"h\":\"动态导入\",\"t\":[\"使用动态导入（Dynamic Import）来实现按需加载模块或代码块。这是通过使用import()函数来延迟加载模块或代码块的方式实现的。\",\"使用动态导入，需要满足以下条件：\",\"环境支持：确保你的项目中使用了支持ES6模块规范和动态导入的JavaScript环境，或者借助Webpack的转换工具（如Babel）来转换代码。\",\"Webpack配置：在Webpack配置文件中，需要启用动态导入的功能。一般情况下，Webpack 4的配置已经默认开启了这个功能，你只需要确保配置项optimization.splitChunks的chunks属性被设置为'async'。\",\"下面是一个示例来演示如何在Webpack 4中使用动态导入：\",\"// main.js // 动态导入一个模块 import('./module') .then(module => { // 在模块加载完成后执行操作 module.foo(); }) .catch(error => { // 处理模块加载失败的情况 console.error(\\\"模块加载失败:\\\", error); }); \",\"在上面的示例中，import('./module')使用了动态导入语法，它会返回一个Promise对象。当模块加载完成后，Promise的then回调会被执行，我们可以在回调中对模块进行操作。如果模块加载失败，catch回调可以处理异常情况。\",\"需要注意的是，动态导入的模块会被Webpack自动分割成独立的代码块，并按需加载。Webpack会根据配置文件中的optimization.splitChunks属性来决定如何拆分和加载这些代码块。\",\"通过使用动态导入，你可以实现更加灵活的代码分割和按需加载，减少初始加载时间，并根据实际需求来减少对资源的请求。这在大型应用程序中特别有用，可以提高性能和用户体验。\",\"注意，上述示例使用ES6的动态导入语法。如果你需要在不支持动态导入的浏览器环境中运行，请确保对代码进行适当的编译和转换。\",\"当涉及到动态导入时，以下是一些需要注意和记住的关键要点：\",\"导入方式：不同编程语言和环境可能有不同的动态导入方式。在学习和实践时，需要查阅相关的文档和官方资料，以了解正确的语法和使用方法。\",\"错误处理：动态导入可能会导致错误和异常，比如模块不存在、文件路径错误等。在进行动态导入时，需要合理地处理错误情况，并根据需要进行错误日志记录或错误处理。\",\"性能考虑：动态导入可能会增加代码的加载和执行时间。在进行动态导入之前，应该考虑其对性能的潜在影响，并根据实际需求和场景进行权衡和优化。\",\"安全性：动态导入使得程序可以在运行时加载和执行外部代码，因此需要注意潜在的安全风险。应该确保只从可信任的源加载模块，以防止恶意代码的注入和执行。\",\"代码可读性和维护性：虽然动态导入提供了灵活性，但过度使用动态导入可能会降低代码的可读性和可维护性。应该根据具体情况，合理地使用动态导入，避免滥用和过度复杂化代码。\",\"扩展性和模块化：动态导入可以增加程序的扩展性和模块化。通过合理组织和设计模块，可以实现动态加载和替换特定功能的动态导入。\"]},\"468\":{\"h\":\"调试配置\",\"t\":[\"调试配置是非常重要的，因为它可以帮助你在开发过程中更轻松地进行代码调试和错误定位。下面是一些关于调试配置的要点：\",\"devtool选项：devtool选项用于配置生成源映射（source map）的方式。源映射是一种将压缩后的代码映射回原始源代码的文件，它可以帮助你在浏览器开发工具中正确地定位错误和调试问题。\",\"以下是一些常用的devtool选项值：\",\"eval: 以eval的方式生成源映射。这种方式速度最快，但对调试来说不太友好。\",\"cheap-eval-source-map: 以eval的方式生成较快的映射，但可能会忽略一些源文件的细节信息。\",\"cheap-module-eval-source-map: 以eval的方式生成较快的映射，并且会将loader的sourcemap也包含在内，但不会包含源文件的列信息。\",\"source-map: 单独生成一个源映射文件，并且会在打包文件中引用。这种方式生成的映射较大，但是在调试过程中更准确。\",\"非生产环境调试配置：在非生产环境下，如开发环境或测试环境，你可以使用较详细的源映射配置，以便更方便地进行调试。一种常见的配置是cheap-module-eval-source-map，它可以提供较好的调试性能和较快的构建速度。\",\"生产环境调试配置：在生产环境下，你可能会需要更小的打包文件和更好的性能。因此，可以选择使用source-map选项来生成独立的源映射文件，并在打包文件中引用。这样可以将源映射与生产代码分离，同时保证准确性和可调试性。\",\"在开发服务器中使用devtool选项：如果你正在使用Webpack的开发服务器（DevServer），你可以在devServer配置中设置devtool选项。这样可以确保在开发服务器中也启用了源映射。例如：\",\"devServer: { // ... devtool: 'cheap-module-eval-source-map', } \",\"调试配置在开发过程中非常重要，可以大大提高开发效率和错误定位的速度。通过正确配置devtool选项，并根据不同的开发和生产环境选择合适的源映射方式，可以使你的调试体验更顺畅和准确。记住，在生产环境中不要暴露源映射文件，以免泄漏敏感信息。\"]},\"469\":{\"h\":\"优化配置\",\"t\":[\"优化配置是提高项目性能和打包效率的关键。下面是一些关于优化配置的要点：\",\"代码压缩：Webpack可以通过使用插件来压缩输出的代码。常用的插件是TerserPlugin，它可以对代码进行压缩和混淆。在生产环境中使用该插件可以大幅减小打包文件的体积。\",\"const TerserPlugin = require('terser-webpack-plugin'); module.exports = { // ... optimization: { minimize: true, minimizer: [new TerserPlugin()], }, }; \",\"文件压缩：除了代码压缩外，还可以通过压缩文件来减小打包大小。Webpack提供了CompressionWebpackPlugin插件，用于对输出文件进行 gzip 压缩，进而加快加载速度。\",\"const CompressionPlugin = require('compression-webpack-plugin'); module.exports = { // ... plugins: [new CompressionPlugin()], }; \",\"Tree Shaking：Webpack通过Tree Shaking技术可以消除未使用的代码，从而减小打包文件的体积。确保配置中的mode为production，并将sideEffects选项设置为false，以启用Tree Shaking。\",\"module.exports = { // ... mode: 'production', optimization: { sideEffects: false, }, }; \",\"图片优化：对于图片资源，可以通过使用url-loader或file-loader配合imagemin-webpack-plugin插件来进行优化和压缩。\",\"const ImageminPlugin = require('imagemin-webpack-plugin').default; module.exports = { // ... module: { rules: [ { test: /\\\\.(png|jpg|jpeg|gif|svg)$/, use: [ { loader: 'url-loader', options: { limit: 8192, // 可根据需求进行调整 }, }, ], }, ], }, plugins: [ // 压缩图片 new ImageminPlugin({ disable: process.env.NODE_ENV !== 'production', pngquant: { quality: '75-90', }, }), ], }; \",\"缓存配置：为了利用浏览器缓存，可以在打包文件名中添加哈希值，使文件每次有变化时，文件名也会变化，从而强制浏览器重新下载新文件。\",\"module.exports = { // ... output: { filename: '[name].[contenthash].js', }, }; \"]},\"470\":{\"h\":\"Webpack和现代前端工具的整合\",\"t\":[\"Webpack作为一个强大的模块打包工具，在现代前端开发中通常与其他工具和技术一起使用。下面是Webpack与现代前端工具的一些整合方式：\"]},\"471\":{\"h\":\"1. Babel\",\"t\":[\"Babel是一个用于将新版本JavaScript代码转换为向后兼容版本的工具。Webpack可以通过Babel Loader来集成Babel。配置Webpack的module.rules，使用Babel Loader来处理JavaScript文件：\",\"module.exports = { // ... module: { rules: [ { test: /\\\\.js$/, exclude: /node_modules/, use: { loader: 'babel-loader', options: { presets: ['@babel/preset-env'], }, }, }, ], }, // ... }; \",\"这样，在Webpack构建过程中，Babel Loader将会对JavaScript文件进行处理，将新版本的语法转换为向后兼容的版本。\"]},\"472\":{\"h\":\"2. CSS预处理器\",\"t\":[\"如果你使用CSS预处理器如Sass、Less或Stylus，你可以使用相应的Loader将预处理器转换为CSS，并将其与Webpack集成。\",\"以Sass为例，首先安装sass-loader和node-sass：\",\"npm install sass-loader node-sass --save-dev \",\"然后在Webpack配置中添加相应的规则：\",\"module.exports = { // ... module: { rules: [ { test: /\\\\.scss$/, use: ['style-loader', 'css-loader', 'sass-loader'], }, ], }, // ... }; \",\"以上配置将会使用sass-loader将Sass文件转换为CSS，并通过style-loader和css-loader将CSS添加到页面中。\"]},\"473\":{\"h\":\"3. 图片和其他静态资源\",\"t\":[\"Webpack也可以处理图片、字体等静态资源。你可以使用url-loader或file-loader来处理这些资源。\",\"以图片为例，安装url-loader和file-loader：\",\"npm install url-loader file-loader --save-dev \",\"然后在Webpack配置中添加相应的规则：\",\"module.exports = { // ... module: { rules: [ { test: /\\\\.(png|jpg|jpeg|gif)$/, use: [ { loader: 'url-loader', options: { limit: 8192, name: '[name].[hash].[ext]', outputPath: 'images', }, }, ], }, ], }, // ... }; \",\"以上配置将会将小于8KB的图片文件转换为Base64编码的DataURL，大于8KB的图片将会使用file-loader将文件复制到输出目录的images文件夹中。\"]},\"474\":{\"h\":\"4. CSS框架和库\",\"t\":[\"如果你使用像Bootstrap、Tailwind CSS等CSS框架或库，可以使用相应的Loader将它们与Webpack集成。\",\"以Bootstrap为例，首先安装bootstrap和style-loader、css-loader：\",\"npm install bootstrap style-loader css-loader --save-dev \",\"然后在Webpack配置中添加相应的规则：\",\"module.exports = { // ... module: { rules: [ { test: /\\\\.css$/, use: ['style-loader', 'css-loader'], }, ], }, // ... }; \",\"然后，你可以在项目中引入Bootstrap的CSS文件，Webpack会将CSS文件处理为合适的模块并添加到页面中。\"]},\"475\":{\"h\":\"安装和配置Webpack 5\",\"t\":[\"安装Node.js和npm：Webpack是基于Node.js开发的，所以首先需要安装Node.js和npm（Node包管理器）。你可以从Node.js官方网站下载安装包进行安装。\",\"创建项目目录：在你想要创建Webpack项目的位置，创建一个新的文件夹作为项目目录。\",\"初始化项目：在项目目录中打开终端，并运行以下命令来初始化项目并生成 package.json 文件：\",\"npm init -y \",\"安装Webpack：运行以下命令来安装Webpack及相关依赖：\",\"npm install webpack webpack-cli --save-dev \",\"创建Webpack配置文件：在项目目录中创建一个名为 webpack.config.js 的文件，并添加以下基本配置：\",\"const path = require('path'); module.exports = { entry: './src/index.js', // 入口文件路径 output: { path: path.resolve(__dirname, 'dist'), // 输出目录路径 filename: 'bundle.js' // 输出文件名 }, module: { rules: [ // 添加加载器规则 ] }, plugins: [ // 添加插件 ] }; \",\"请根据你的项目需求进行相应的配置。\",\"添加加载器和插件：根据你的项目需求，在 module.rules 中添加加载器规则，在 plugins 中添加插件，用于对模块进行转换和优化。\",\"创建入口文件和其他源文件：在项目目录中创建一个名为 src 的文件夹，并在其中创建一个名为 index.js 的入口文件，以及其他需要被Webpack构建的源文件。\",\"构建项目：在终端中运行以下命令，使用配置文件进行项目构建：\",\"npx webpack --config webpack.config.js \",\"查看构建结果：Webpack将会根据配置文件进行项目构建，并将构建后的文件输出到输出目录中。查看输出目录中生成的文件，确认项目构建成功。\",\"配置开发服务器（可选）：如果你需要在开发过程中使用开发服务器，你可以安装 webpack-dev-server 并在配置文件中进行相应的配置。\"]},\"476\":{\"h\":\"模块加载器和插件\",\"t\":[\"在Webpack中，模块加载器和插件是两个关键概念，它们用于处理和转换项目中的不同模块。\",\"模块加载器（Loaders）: Webpack使用加载器来处理项目中不同类型的文件，并将它们转换为可供Webpack处理和打包的模块。加载器可以在模块导入阶段应用转换，例如将ES6代码转换为ES5或将SCSS文件转换为CSS代码。\",\"以下是一些常用的Webpack加载器：\",\"Babel-loader: 用于将ES6+的JavaScript代码转换为ES5，以便在旧版浏览器中运行。\",\"CSS-loader: 用于加载CSS文件，并解决样式文件之间的依赖关系。\",\"Style-loader: 用于将CSS代码以<style>标签的形式插入到HTML文件中。\",\"File-loader: 用于加载图像、字体等文件，并返回相应的文件路径。\",\"URL-loader: 类似于File-loader，但对于小文件会将其转换为Base64编码，并嵌入到打包后的文件中，从而减少HTTP请求。\",\"加载器可以通过webpack配置文件中的module.rules字段进行配置。例如，以下代码配置了Babel-loader和CSS-loader：\",\"module.exports = { // ...其他配置 module: { rules: [ { test: /\\\\.js$/, // 匹配以.js结尾的文件 exclude: /node_modules/, // 排除node_modules文件夹 use: { loader: 'babel-loader' // 使用Babel-loader进行转换 } }, { test: /\\\\.css$/, // 匹配以.css结尾的文件 use: ['style-loader', 'css-loader'] // 先使用CSS-loader解析，再使用Style-loader插入到页面中 } ] } }; \",\"插件（Plugins）: 插件用于执行更广泛的任务，例如代码优化、资源管理、注入环境变量等。它们可以处理Webpack整个生命周期中的不同事件，并对整个构建过程进行干预。\",\"以下是一些常用的Webpack插件：\",\"HtmlWebpackPlugin: 用于生成HTML文件，并自动将Webpack打包后的资源文件（例如bundle.js）引入到HTML中。\",\"MiniCssExtractPlugin: 将CSS代码从JS文件中提取出来，生成独立的CSS文件。\",\"CleanWebpackPlugin: 在每次构建前清空输出目录，以删除旧的打包文件。\",\"DefinePlugin: 用于定义全局的环境变量，以便在代码中使用。\",\"CopyWebpackPlugin: 用于复制静态资源（如图片、字体）到构建目标文件夹。\",\"插件可以通过webpack配置文件中的plugins字段进行配置。例如，以下代码配置了HtmlWebpackPlugin和MiniCssExtractPlugin：\",\"const HtmlWebpackPlugin = require('html-webpack-plugin'); const MiniCssExtractPlugin = require('mini-css-extract-plugin'); module.exports = { // ...其他配置 plugins: [ new HtmlWebpackPlugin({ template: './src/index.html' // 指定HTML模板文件路径 }), new MiniCssExtractPlugin({ filename: '[name].css' // 指定提取的CSS文件名 }) ] }; \"]},\"477\":{\"h\":\"插件的生命周期\",\"t\":[\"Webpack插件可以监听Webpack构建过程中的不同事件，并在这些事件发生时执行相应的代码。\",\"Webpack插件的生命周期分为两个阶段：\",\"构建前阶段：在Webpack开始构建之前执行，例如通过DefinePlugin定义的全局变量，在执行webpack命令时通过--env参数传入的全局变量等。\",\"构建后阶段：在Webpack构建完成后执行，例如将打包结果输出到文件系统，在文件系统中生成HTML文件等。\"]},\"478\":{\"h\":\"插件的执行顺序\",\"t\":[\"Webpack插件的执行顺序取决于它们在配置文件中的位置。\"]},\"479\":{\"h\":\"配置和使用不同的模式\",\"t\":[\"在Webpack中，你可以通过配置不同的模式来优化构建输出，以满足不同环境的需求。Webpack提供了三种内置的模式：development、production和none。你可以根据具体情况选择合适的模式。\",\"development模式（开发模式）： 在开发模式下，Webpack会针对速度和快速重新构建进行优化。生成的输出文件不会被压缩，包含有关模块位置的有用的注释和尽可能多的调试信息，以帮助你在开发过程中进行调试。此外，开发模式下还会启用一些调试工具，例如source maps来方便的追踪错误和警告。\",\"在webpack.config.js文件中配置开发模式：\",\"module.exports = { mode: 'development', // 其他配置... }; \",\"production模式（生产模式）： 在生产模式下，Webpack会针对输出文件的质量和性能进行优化。所有源代码都会被压缩和优化，以减小文件大小并提高加载速度。此外，Webpack还会执行各种优化策略，例如移除未使用的代码、分割代码块、提取公共模块等。\",\"在webpack.config.js文件中配置生产模式：\",\"module.exports = { mode: 'production', // 其他配置... }; \",\"none模式（无模式）： none模式下，Webpack不会应用任何默认优化。所有的配置选项都需要手动设置，这样你可以根据需要进行自定义配置。\",\"在webpack.config.js文件中配置无模式：\",\"module.exports = { mode: 'none', // 其他配置... }; \",\"由于每种模式都针对不同环境和需求进行了优化，所以选择适当的模式对于构建结果的质量和性能是很重要的。在开发过程中使用开发模式，而在发布生产环境时使用生产模式可以帮助你获得更好的性能和用户体验。\"]},\"480\":{\"h\":\"代码优化和分割\",\"t\":[\"代码优化和代码分割是在Webpack中常用的优化策略，可以显著提高应用程序的性能和加载速度。下面我将介绍代码优化和分割的几种常用方式。\",\"代码优化：\",\"压缩代码：在生产模式下，Webpack会自动压缩和混淆你的代码，减小文件体积并提高加载速度。你可以通过在webpack配置文件中设置optimization.minimize为true来启用代码压缩。\",\"移除未使用的代码：在生产模式下，Webpack会自动去除未使用的代码以减小文件体积。你可以使用插件如UglifyJSPlugin或配置optimization.usedExports为true来启用未使用代码的剔除。\",\"静态资源缓存：在生产模式下，你可以给文件名添加哈希值，以便客户端缓存更新的资源。Webpack提供了output.filename和output.chunkFilename选项，你可以使用它们来设置带有哈希的文件名，例如：filename: '[name].[contenthash].js'。\",\"代码分割：\",\"入口点分割（Entry Chunks）：Webpack默认根据入口配置进行代码分割，将不同的入口打包为不同的文件。你可以在配置中使用entry属性设置多个入口点。\",\"代码块分割（Code Splitting）：手动使用Webpack提供的import()或require.ensure()语法，将代码分割为更小的模块（代码块），以便在需要时动态加载。这种方式可以减小初次加载的资源大小，并提高用户体验。\",\"动态导入（Dynamic import）：使用ES6的动态导入语法import()，可以将代码分割为异步加载的模块，从而实现按需加载。\",\"以下是一个简单的代码分割配置示例，将共享的库文件（如React）分割到一个单独的文件中：\",\"module.exports = { // ... optimization: { splitChunks: { cacheGroups: { vendor: { test: /[\\\\\\\\/]node_modules[\\\\\\\\/]/, name: 'vendors', chunks: 'all', }, }, }, }, // ... }; \",\"以上代码将根据node_modules目录中的模块将其打包到一个名为vendors的文件中。\",\"需要注意的是，代码分割会增加额外的网络请求，因此需要依据实际场景综合考虑分割点的大小和网络开销。\",\"综上所述，通过代码优化和分割，你可以最大程度地减小文件体积并提高应用程序的加载速度。Webpack提供了强大的优化特性和插件，你可以根据项目需求进行相应的配置和使用。如需了解更多详细信息，请参考Webpack官方文档。\"]},\"481\":{\"h\":\"缓存和持久化缓存\",\"t\":[\"在Webpack 5中，有两种主要的缓存策略可以优化构建速度和性能：缓存和持久化缓存。\"]},\"482\":{\"h\":\"1. 缓存策略\",\"t\":[\"Webpack 5引入了持久化缓存的支持，称为“cache”。通过在构建过程中缓存模块和依赖的中间状态，可以加速后续的构建过程。\",\"可以通过在webpack.config.js中配置cache选项来启用持久化缓存：\",\"module.exports = { // ... cache: { type: 'filesystem', // 其他配置选项... }, // ... }; \",\"Webpack提供了两种缓存类型：memory和filesystem。memory类型将缓存在内存中，filesystem类型将缓存在文件系统中。filesystem类型是持久化缓存，可以在不同的构建之间共享缓存状态，特别适合于大型项目。\",\"默认情况下，Webpack会将缓存存储在项目根目录的.cache文件夹下，你也可以通过设置cache.buildDependencies和cache.version选项自定义缓存的存储位置和版本号。\"]},\"483\":{\"h\":\"2. 持久化缓存\",\"t\":[\"持久化缓存是在浏览器中缓存资源，以减少后续页面加载的时间。Webpack 5通过使用长效缓存（Long-Term Caching）机制来实现。\",\"长效缓存的基本思想是给每个输出的文件（如JS、CSS）添加唯一的哈希值，当文件内容改变时，生成的哈希值也会改变。这样，在浏览器缓存文件的过程中，只有当文件内容改变时才会重新下载。\",\"在Webpack 5中，可以使用output.filename和output.chunkFilename选项来配置输出文件的文件名，可以使用[contenthash]占位符来添加哈希值：\",\"module.exports = { // ... output: { filename: '[name].[contenthash].js', chunkFilename: '[name].[contenthash].js', // 其他配置选项... }, // ... }; \",\"通过使用哈希值，浏览器只需要加载发生改变的文件，从而缓存其他文件，提高了资源利用率和加载速度。\",\"综上所述，Webpack 5提供了缓存和持久化缓存的支持，可以帮助优化构建速度和资源加载速度。你可以根据自己的项目需求，选择合适的缓存策略和配置方式。如需了解更多详细信息，请参考Webpack官方文档。\"]},\"484\":{\"h\":\"深入理解Webpack 5的核心概念\"},\"485\":{\"h\":\"1. 入口点 (Entry Point)\",\"t\":[\"Webpack将从入口点开始构建你的应用程序。入口点是指Webpack开始处理的JavaScript文件，Webpack将通过入口点找到应用程序的所有依赖关系，并创建依赖关系图。\",\"在Webpack配置中，你可以指定一个或多个入口点。例如：\",\"module.exports = { entry: './src/index.js', }; \",\"上面的配置将使用./src/index.js作为入口点。\"]},\"486\":{\"h\":\"2. 输出 (Output)\",\"t\":[\"Webpack将根据你的配置将处理后的文件输出到指定位置。输出包括构建后的JavaScript文件、CSS文件、字体文件等。\",\"在Webpack配置中，你需要指定输出的目录、文件名以及其他相关配置。例如：\",\"module.exports = { output: { path: path.resolve(__dirname, 'dist'), filename: 'bundle.js', }, }; \",\"上面的配置将输出构建后的文件到dist目录，并命名为bundle.js。\"]},\"487\":{\"h\":\"3. Loader\",\"t\":[\"Loader用于Webpack中的文件转换。它们将处理Webpack遇到的不同类型的文件，并将其转换为模块，以供应用程序使用。\",\"Loader在Webpack配置的module.rules中进行配置。例如，使用babel-loader将ES6+代码转换为向后兼容的JavaScript代码：\",\"module.exports = { module: { rules: [ { test: /\\\\.js$/, exclude: /node_modules/, use: ['babel-loader'], }, ], }, }; \",\"上面的配置将使用babel-loader对JavaScript文件进行转换。\"]},\"488\":{\"h\":\"4. 插件 (Plugins)\",\"t\":[\"插件是用于扩展Webpack功能的工具。它们可以执行更复杂的任务，如代码优化、资源管理等。\",\"在Webpack配置中，你可以通过实例化并添加插件来使用它们。例如，使用HtmlWebpackPlugin生成HTML文件：\",\"const HtmlWebpackPlugin = require('html-webpack-plugin'); module.exports = { plugins: [ new HtmlWebpackPlugin({ template: './src/index.html', }), ], }; \",\"上面的配置将使用HtmlWebpackPlugin生成一个自动插入打包后文件的index.html文件。\"]},\"489\":{\"h\":\"5. 模式 (Mode)\",\"t\":[\"模式是Webpack提供的预定义配置集。它们会根据你的开发或生产环境自动启用一些优化。\",\"在Webpack配置中，你可以设置mode选项为development、production或none。例如：\",\"module.exports = { mode: 'production', }; \",\"上面的配置将启用生产模式的优化。Webpack将会对代码进行压缩、优化和缓存等操作。\"]},\"490\":{\"h\":\"6. 开发服务器 (DevServer)\",\"t\":[\"DevServer是一个Web服务器，用于在开发过程中提供实时的反馈。它支持热模块替换 (HMR)，可以自动重新加载资源和刷新页面。\",\"在Webpack配置中，你可以配置DevServer的相关选项。例如，监听localhost的3000端口，并启用热模块替换：\",\"module.exports = { devServer: { port: 3000, hot: true, }, }; \",\"上面的配置将启动一个DevServer，监听3000端口，并启用热模块替换。\"]},\"491\":{\"h\":\"7. 文件处理 (File Handling)\",\"t\":[\"Webpack支持处理不同类型的文件，如图片、字体等。你可以使用合适的Loader来处理这些文件，并将它们作为模块导入到你的应用程序中。\",\"示例中使用file-loader来处理图片文件：\",\"module.exports = { module: { rules: [ { test: /\\\\.(png|jpg|gif)$/, use: ['file-loader'], }, ], }, }; \",\"上述配置将使用file-loader将图片文件复制到输出目录，并返回文件的URL路径。\"]},\"492\":{\"h\":\"8. 打包分析 (Bundle Analysis)\",\"t\":[\"打包分析工具可以帮助你了解打包后的文件结构和体积，帮助你进行性能优化。\",\"Webpack提供了一些打包分析工具的插件，例如Webpack Bundle Analyzer插件。你可以将它添加到Webpack配置中，以可视化地查看打包后的文件分析报告。\",\"这是一个基本的配置示例：\",\"const { BundleAnalyzerPlugin } = require('webpack-bundle-analyzer'); module.exports = { plugins: [ new BundleAnalyzerPlugin(), ], }; \",\"上述配置将在打包过程中生成一个报告，可以在浏览器中查看文件大小、依赖关系等信息。 当然，还有更多Webpack 5的核心概念：\"]},\"493\":{\"h\":\"9. 代码拆分 (Code Splitting)\",\"t\":[\"代码拆分是一种将应用程序代码拆分成多个小块的技术，以减小初始加载时间并提高性能。Webpack支持多种代码拆分策略，如基于入口点、动态导入等。\",\"使用Webpack可以通过配置实现代码拆分。例如，使用动态导入来拆分代码：\",\"const button = document.getElementById('button'); button.addEventListener('click', () => { import('./module') .then(module => { // 使用动态导入的模块 module.someFunction(); }) .catch(error => { // 处理导入失败的情况 console.error('Dynamic import failed:', error); }); }); \",\"上述代码通过动态导入将./module模块拆分成一个单独的小块，只有在点击按钮时才会加载和执行。\"]},\"494\":{\"h\":\"10. 懒加载 (Lazy Loading)\",\"t\":[\"懒加载是一种延迟加载模块的技术，在需要时才进行加载和执行。这在处理大型应用程序或减小初始加载时间时非常有用。\",\"Webpack可以配合懒加载使用。例如，使用动态导入来实现懒加载：\",\"const button = document.getElementById('button'); button.addEventListener('click', () => { import('./module') .then(module => { // 使用懒加载的模块 module.someFunction(); }) .catch(error => { // 处理加载失败的情况 console.error('Lazy load failed:', error); }); }); \",\"上述代码在需要时才会加载./module模块，并执行相应的操作。\"]},\"495\":{\"h\":\"11. 缓存 (Caching)\",\"t\":[\"Webpack提供了缓存机制，可以减少资源的重复加载和重新构建时间。它通过给文件添加唯一的哈希值作为文件名的一部分来实现缓存。\",\"通过配置output.filename选项使用哈希命名文件，例如：\",\"module.exports = { output: { filename: '[name].[contenthash].js', }, }; \",\"上述配置将使用文件内容的哈希值作为文件名的一部分，确保每次文件内容发生更改时，名称都会发生变化，从而实现缓存的更新。\"]},\"496\":{\"h\":\"12. 优化 (Optimization)\",\"t\":[\"Webpack提供了许多优化选项，以改善应用程序的性能和加载速度。这些选项包括代码压缩、资源压缩、Tree Shaking等。\",\"例如，使用terser-webpack-plugin插件来压缩JavaScript代码：\",\"const TerserPlugin = require('terser-webpack-plugin'); module.exports = { optimization: { minimize: true, minimizer: [new TerserPlugin()], }, }; \",\"上述配置将使用terser-webpack-plugin插件来压缩JavaScript代码，减小文件体积。\"]},\"497\":{\"h\":\"Webpack 5的新特性和改进\",\"t\":[\"持久化缓存 (Persistent Caching)：Webpack 5引入了持久化缓存，可以更好地利用缓存来提高构建性能。通过默认使用持久化的命名和文件系统缓存来存储模块，可以避免无效的构建，并且重新启动构建时将更快地使用缓存。\",\"更好的 Tree Shaking：Webpack 5通过引入 Tree Shaking 改进了代码摇树(Dead Code Removal)的能力。新的摇树算法可以识别出更多的无用代码，并将其完全删除，以减少最后生成的 bundle 文件的大小。\",\"模块联邦 (Module Federation)：Webpack 5引入了模块联邦，这是一个重要的功能，可以实现模块的共享和动态远程加载。通过模块联邦，多个独立的应用程序可以共享彼此的模块，从而实现更高级的代码拆分和复用。\",\"更好的性能和打包体积优化：Webpack 5通过多项优化来改进性能和打包体积。其中包括对构建速度和内存利用的优化，更智能的代码生成策略，以及对长期缓存的改进，从而减少浏览器缓存的问题。\",\"改进的多线程构建：Webpack 5通过引入持久化缓存和改进多线程构建策略来提高构建速度。使用新的 worker 池和更高效的缓存策略，多线程构建可以更好地利用计算资源，并并行处理模块和依赖关系的解析和转换。\",\"改进的打包分析和优化工具：Webpack 5提供了新的打包分析工具和优化建议，可以帮助你更好地了解和优化你的应用程序的打包结果。这些工具可以帮助你识别和解决性能问题，并提供了有关模块大小、依赖关系和优化的有用信息。 当然，除了之前提到的特性，Webpack 5还引入了其他一些新特性。以下是一些值得注意的新特性：\",\"改进的缓存组 (Improved Cache Groups)：Webpack 5提供了更灵活和细粒度的缓存组配置。现在你可以更好地控制哪些模块被缓存、如何进行缓存分组以及缓存的策略。\",\"支持 WebAssembly 模块 (WebAssembly Modules Support)：Webpack 5支持将 WebAssembly 模块作为标准模块类型进行处理和导入。你可以直接导入和使用 WebAssembly 模块，无需额外的配置。\",\"支持持久化缓存的多种构建模式 (Multiple Build Modes with Persistent Caching)：Webpack 5引入了多种构建模式，包括增量构建、零配置构建等。这些模式可以与持久化缓存一起使用，从而提供更灵活的构建选项和更好的性能。\",\"改进的错误处理和消息输出 (Improved Error Handling and Message Output)：Webpack 5改进了错误处理和消息输出，提供了更清晰和有用的错误信息。错误消息现在包含更多上下文信息和源代码位置，有助于更快速地定位问题。\",\"自动 Web Workers 支持 (Automatic Web Workers Support)：Webpack 5提供了自动的 Web Workers 支持，使得为你的应用程序创建和使用 Web Workers 更加简单。你可以直接导入 Web Workers 文件，Webpack将自动将其转换为 Web Workers。\",\"提升轮询性能 (Polling Performance Improvements)：Webpack 5改进了轮询的性能，减少了在开发模式下的轮询次数。这意味着在文件更改时，Webpack能够更快地进行重新构建和热模块替换。\"]},\"498\":{\"h\":\"调试和故障排除\",\"t\":[\"在使用Webpack开发和构建应用程序时，可能会遇到一些调试和故障排除的情况。下面是一些常见的问题和解决方法：\"]},\"499\":{\"h\":\"1. 查看错误信息\",\"t\":[\"当Webpack构建过程中出现错误时，首先要查看错误信息以了解具体的问题。Webpack通常会提供明确的错误信息和堆栈跟踪，帮助你追踪和解决问题。\",\"通过查看控制台输出或构建日志，你可以找到报错信息，例如文件路径、模块依赖等。根据错误信息来定位问题，并尝试修复它。\"]},\"500\":{\"h\":\"2. 使用Source Maps\",\"t\":[\"在开发环境中，启用Source Maps可以映射压缩后的代码到原始源代码，从而更容易地进行调试。\",\"在Webpack配置中，可以通过设置devtool选项启用Source Maps：\",\"module.exports = { devtool: 'eval-source-map', }; \",\"不同的devtool选项具有不同的特性和效果，你可以根据自己的需求选择合适的选项。\"]},\"501\":{\"h\":\"3. 逐步重构或排除因素\",\"t\":[\"当遇到问题时，可以采用逐步重构或排除因素的方法，逐步缩小问题所在的范围。可以将问题简化为最小化的配置和代码，然后逐步添加功能或配置，检查哪个步骤引起了错误。\",\"这可以帮助你发现引起问题的具体部分，查明错误产生的原因，并采取适当的措施解决问题。\"]},\"502\":{\"h\":\"4. 检查各个插件和配置\",\"t\":[\"有时候，错误可能是由于插件或配置的错误导致的。检查每个插件和配置的文档和示例，确保正确地配置和使用它们。\",\"你可以逐个禁用插件或配置项，然后重新构建应用程序，以确定问题是否与特定的插件或配置有关。\"]},\"503\":{\"h\":\"5. 查阅Webpack文档和社区资源\",\"t\":[\"Webpack拥有广泛的文档和社区资源，可以帮助你解决各种问题和故障。查阅Webpack官方文档、常见问题解答和错误排除指南可以获得有用的信息。\",\"此外，参与Webpack的社区讨论、论坛和博客，向其他开发者寻求帮助和建议，也是解决问题的好途径。\"]},\"504\":{\"h\":\"最佳实践和性能优化\",\"t\":[\"精简代码和资源：删除不必要的代码、注释和未使用的资源，减小文件体积。可以使用工具如Tree shaking和Code splitting来去除未使用的代码和拆分资源。\",\"配置压缩：使用压缩插件（如terser-webpack-plugin）来压缩JavaScript代码，使用CSS和HTML压缩插件来压缩样式表和HTML代码。\",\"合并文件：将多个小文件合并为一个大文件，减少服务器请求和网络传输。\",\"缓存优化：启用长期缓存，通过设置output.filename选项中的[contenthash]来添加文件内容的哈希值，确保文件变化时名称也会变化。\",\"代码拆分和懒加载：将应用程序拆分为多个小块，并按需加载，提高初始加载速度。可以使用import()函数或动态import语法来实现。\",\"使用缓存加载：通过使用cache-loader和babel-loader的cacheDirectory选项，将编译结果缓存起来，加快重新构建的速度。\",\"启用多线程构建：通过parallel-webpack插件或thread-loader，利用多个CPU核心并行处理构建任务，加快构建速度。\",\"优化图片：使用图片压缩工具（如image-webpack-loader）来优化图像，减小文件大小，同时保持图像质量。\",\"减少额外的工具和库：只引入必要的工具和库，避免不必要的依赖。\",\"分离第三方库：将第三方库和应用程序代码分开打包，利用浏览器缓存机制，减少额外的加载时间。\",\"使用Webpack优化插件：Webpack提供了多个优化插件，如webpack-bundle-analyzer、webpackbar等。根据需求选择适合的插件，并根据插件的建议对项目进行优化。\",\"定期检查并更新Webpack和插件版本：Webpack及其插件更新频繁，定期检查并更新版本，以获取更好的性能和安全性。\"]},\"505\":{\"h\":\"Node\"},\"506\":{\"h\":\"简介\",\"t\":[\"Node.js 是基于 Chrome V8 引擎的 JavaScript 运行时环境，它使 JavaScript 可以在服务器端运行。Node.js 的出现打破了以往将 JavaScript 仅限于客户端浏览器运行的局限，使开发者可以使用 JavaScript 构建高效、可扩展的网络应用和服务端程序。\",\"Node.js 的设计理念是基于事件驱动和非阻塞 I/O 的模型，这使得它能够处理大量并发请求而不会阻塞其他操作，因此非常适合构建高性能的网络应用。Node.js 提供了丰富的内置模块，例如 HTTP、文件系统、加密等，同时也支持使用第三方模块通过 npm (Node Package Manager) 进行管理。\",\"通过 Node.js，开发人员可以使用 JavaScript 进行服务器端编程，实现与数据库的交互、处理 HTTP 请求、构建 API、处理文件系统等操作。同时，Node.js 还提供了强大的扩展能力，可以通过自定义模块和中间件来满足各种应用需求。\",\"Node.js 的一个流行的开源框架是 Express.js，它提供了更高级的抽象和工具，简化了 Web 应用的开发流程。\",\"总之，Node.js 在现代 Web 开发中扮演着重要的角色，它的高性能、可扩展性和丰富的生态系统使得它成为构建实时应用、聊天应用、API、代理服务器等的首选工具之一。\"]},\"507\":{\"h\":\"安装Node.js\",\"t\":[\"要安装Node.js，请按照以下步骤进行操作：\",\"前往Node.js官方网站：https://nodejs.org\",\"在网站首页上，您将看到两个不同的版本可供选择：LTS版本（长期支持）和Current版本（最新版本）。如果您不需要最新功能，建议选择LTS版本，因为它在稳定性和支持方面更有保障。\",\"根据您的操作系统，选择相应的版本。Node.js支持Windows、Mac和Linux等多个平台。\",\"在下载页面上，您将看到一个推荐下载的按钮，点击它即可。如果您想要手动选择不同的版本，请单击\\\"Previous Releases\\\"（之前版本）链接。\",\"下载完成后，运行安装程序，并按照提示进行安装。如果您使用Windows系统，可能还需要选择是否将Node.js添加到系统的环境变量中。\",\"安装完成后，打开终端（命令行界面）窗口，并输入以下命令来检查Node.js是否正确安装并显示版本号：\",\"node -v \",\"如果输出显示了Node.js的版本号，说明安装成功。\",\"此外，Node.js还附带了一个包管理器工具npm（Node Package Manager），您可以通过以下命令来验证npm是否正确安装：\",\"npm -v \",\"如果输出显示了npm的版本号，则npm也已成功安装。\",\"现在，您已经成功安装了Node.js，并可以在自己的计算机上进行Node.js开发和运行应用程序了。\"]},\"508\":{\"h\":\"创建Node.js应用\",\"t\":[\"要创建一个基本的Node.js应用程序，请按照以下步骤进行操作：\",\"创建一个新的文件夹，用于保存您的应用程序文件。\",\"打开一个文本编辑器或集成开发环境（IDE），创建一个新的文件。\",\"在新文件中，使用以下代码作为应用程序的入口点。将代码复制到文件中，并保存为app.js（或您喜欢的其他名称）。\",\"console.log(\\\"Hello, Node.js!\\\"); \",\"这段代码将在控制台中打印出\\\"Hello, Node.js!\\\"。\",\"打开命令行（终端）窗口，并导航到您创建的应用程序文件夹。\",\"在命令行中运行以下命令来执行应用程序：\",\"node app.js \",\"如果一切顺利，您应该在命令行中看到输出：\\\"Hello, Node.js!\\\"。\",\"恭喜！您已经成功创建并运行了一个简单的Node.js应用程序。\",\"您可以在app.js文件中编写更复杂的代码来构建更强大的应用程序。Node.js提供了许多内置模块和第三方模块，您可以使用它们来处理文件系统、网络请求、数据库连接等各种任务。了解并运用这些模块，将帮助您构建更强大、可扩展的Node.js应用程序。\"]},\"509\":{\"h\":\"使用模块\",\"t\":[\"在Node.js中，可以使用内置模块和第三方模块来扩展和增强应用程序的功能。下面是使用模块的一些示例：\",\"内置模块：\",\"fs模块：用于处理文件系统操作，如创建、读取、写入和删除文件等。\",\"http模块：用于创建HTTP服务器和处理HTTP请求和响应。\",\"path模块：用于处理文件路径。\",\"os模块：用于获取操作系统相关信息，如CPU架构、操作系统类型等。\",\"下面是一个使用内置模块的示例，读取文件内容并打印在控制台上：\",\"const fs = require('fs'); fs.readFile('filename.txt', 'utf8', (err, data) => { if (err) throw err; console.log(data); }); \",\"第三方模块（使用npm安装）：\",\"express模块：一个流行的Web开发框架，用于构建API和服务器端应用程序。\",\"lodash模块：提供了一组实用的JavaScript函数，用于简化数据处理和集合操作。\",\"mongoose模块：用于连接和操作MongoDB数据库的对象模型工具。\",\"下面是一个使用第三方模块的示例，创建一个简单的Express应用并启动服务器：\",\"const express = require('express'); const app = express(); app.get('/', (req, res) => { res.send('Hello, Express!'); }); app.listen(3000, () => { console.log('Server is running on port 3000'); }); \",\"在使用模块之前，需要通过require()函数将它们引入到您的应用程序中。对于内置模块，只需提供模块的名称即可；对于第三方模块，您需要首先通过npm安装它们，并使用相应的包名称进行引入。\",\"通过使用模块，您可以轻松地扩展您的Node.js应用程序，添加各种功能和服务，提升您的开发效率。\"]},\"510\":{\"h\":\"包管理器（npm）\",\"t\":[\"包管理器是一种工具，用于管理和安装软件包（也称为模块或库），以便在您的项目中使用它们。在Node.js生态系统中，npm（Node Package Manager）是最常用的包管理器。\",\"以下是一些关于npm的重要概念和常用命令：\",\"初始化项目：\",\"npm init：初始化一个新的Node.js项目，生成package.json文件，其中包含项目的相关信息和依赖管理。\",\"安装和更新模块：\",\"npm install <package>：安装一个模块。您可以指定具体的版本号、版本范围或标签（如latest）。\",\"npm install <package> --save：将模块添加到项目的dependencies中，以便在项目部署时安装依赖。\",\"npm install <package> --save-dev： 将模块添加到项目的devDependencies中，用于开发和构建工具。\",\"npm update <package>：更新特定模块到最新版本。\",\"npm outdated：检查项目中已安装的模块是否有可用的更新。\",\"卸载模块：\",\"npm uninstall <package>：卸载指定的模块。\",\"其他常用命令：\",\"npm start：运行项目的启动脚本，通常用于启动应用程序。\",\"npm test：运行项目的测试脚本。\",\"npm run <script>：运行项目自定义的脚本命令，可以在package.json中配置。\",\"除了管理模块和依赖，npm还有其他功能，例如发布自己的模块到npm公共仓库、管理项目的脚本命令等。\",\"要了解更多关于npm的详细信息，您可以访问npm官方文档：https://docs.npmjs.com/。\"]},\"511\":{\"h\":\"异步编程\",\"t\":[\"异步编程是一种编程范式，用于处理可能耗时的操作，如文件读取、网络请求或数据库查询。它的目的是在进行这些操作时不会阻塞主线程，从而使应用程序能够继续进行其他任务。\",\"在JavaScript中，异步编程通常通过回调函数、Promises和Async/Await来实现。下面是对这些概念的简要说明：\",\"回调函数：使用回调函数是一种经典的异步编程模式。您可以在一个函数中指定一个回调函数作为参数，该函数将在异步操作完成后被调用。例如，Node.js中的fs.readFile方法就是使用回调函数的典型例子。\",\"const fs = require('fs'); fs.readFile('filename.txt', 'utf8', (err, data) => { if (err) throw err; console.log(data); }); \",\"Promises：Promises是一种更现代和清晰的处理异步代码的方式。通过使用Promises，您可以更容易地处理异步操作的结果。一个Promise表示一个可能的未来值，可以通过.then()方法注册成功的回调，或者使用.catch()方法注册错误的回调。\",\"const fs = require('fs/promises'); fs.readFile('filename.txt', 'utf8') .then((data) => { console.log(data); }) .catch((err) => { console.error(err); }); \",\"Async/Await：Async/Await是ES2017引入的一种编写异步代码的简洁方式。通过使用async关键字和await关键字，您可以使用类似同步代码的语法编写异步操作。\",\"const fs = require('fs/promises'); async function readFile() { try { const data = await fs.readFile('filename.txt', 'utf8'); console.log(data); } catch (err) { console.error(err); } } readFile(); \",\"Async/Await使得异步代码的编写和阅读更加直观和可维护。\",\"异步编程有助于避免阻塞主线程，提高应用程序的响应能力。在Node.js和其他JavaScript环境中，使用异步编程模式是处理网络请求、数据库查询等异步操作的常见做法。无论你选择使用回调函数、Promises还是Async/Await，都可以根据自己的需求和编程风格来选择最适合的方式。\"]},\"512\":{\"h\":\"Express框架\",\"t\":[\"Express是一个流行的Node.js Web应用框架，简化了路由、中间件等方面的开发。\",\"先使用npm install express安装Express。\",\"示例代码：\",\"const express = require('express'); const app = express(); app.get('/', (req, res) => { res.send('Hello, Express!'); }); app.listen(3000, () => { console.log('Server started on port 3000'); }); \"]},\"513\":{\"h\":\"PHP\",\"t\":[\"PHP是一种通用的开源脚本语言，特别适用于Web开发。它可以嵌入HTML中，与HTML代码相互交互，用于生成动态网页内容。\",\"简单易学：PHP语法简单易懂，上手较快，适合初学者入门。\",\"跨平台：PHP可以在多个操作系统上运行，包括Windows、Linux、Mac等。\",\"功能强大：PHP支持数据库连接、文件处理、图像处理等各种常见的Web开发任务。\",\"开源社区：PHP有庞大的开源社区支持，有丰富的扩展库和框架可供使用。\",\"可与多种数据库交互：PHP可以与多种数据库进行交互，如MySQL、Oracle、SQLite等。\",\"适用于Web开发：PHP主要用于服务器端的Web开发，可以处理表单提交、生成动态网页、与数据库进行交互等。\"]},\"514\":{\"h\":\"语法\",\"t\":[\"PHP 脚本可以放在文档中的任何位置。\",\"PHP 脚本以 **<?php** 开始，以 **?>**结束：\",\"<!DOCTYPE html> <html> <body> <h1>My first PHP page</h1> <?php echo \\\"Hello World!\\\"; ?> </body> </html> \"]},\"515\":{\"h\":\"输出方式\",\"t\":[\"echo print\",\"区别\",\"echo - 可以输出一个或多个字符串\",\"print - 只允许输出一个字符串，返回值总为 1\",\"**提示：**echo 输出的速度比 print 快， echo 没有返回值，print有返回值1\",\"echo :echo 是一个语言结构，使用的时候可以不用加括号，也可以加上括号： echo 或 echo()\",\"<?php echo \\\"<h2>PHP 很有趣!</h2>\\\"; echo \\\"Hello world!<br>\\\"; echo \\\"我要学 PHP!<br>\\\"; echo \\\"这是一个\\\", \\\"字符串，\\\", \\\"使用了\\\", \\\"多个\\\", \\\"参数。\\\"; ?> \",\"print:print 同样是一个语言结构，可以使用括号，也可以不使用括号： print 或 print()。\",\"<?php $txt1=\\\"学习 PHP\\\"; $txt2=\\\"RUNOOB.COM\\\"; $cars=array(\\\"Volvo\\\",\\\"BMW\\\",\\\"Toyota\\\"); print $txt1; print \\\"<br>\\\"; print \\\"在 $txt2 学习 PHP \\\"; print \\\"<br>\\\"; print \\\"我车的品牌是 {$cars[0]}\\\"; ?> \"]},\"516\":{\"h\":\"变量\",\"t\":[\"用于存储信息的容器\"]},\"517\":{\"h\":\"变量规则\",\"t\":[\"变量以 $ 符号开始，后面跟着变量的名称\",\"变量名必须以字母或者下划线字符开始\",\"变量名只能包含字母、数字以及下划线（A-z、0-9 和 _ ）\",\"变量名不能包含空格\",\"变量名是区分大小写的（$y 和 $Y 是两个不同的变量）\",\"<?php $txt=\\\"Hello world!\\\"; $x=5; $y=10.5; ?> \"]},\"518\":{\"h\":\"常量\",\"t\":[\"常量值被定义后，在脚本的其他任何地方都不能被改变\",\"一个常量由英文字母、下划线、和数字组成,但数字不能作为首字母出现。 (常量名不需要加 $ 修饰符)。\",\"注意： 常量在整个脚本中都可以使用\"]},\"519\":{\"h\":\"设置 PHP 常量\",\"t\":[\"设置常量，使用 define() 函数，函数语法如下：\",\"bool define ( string $name , mixed $value [, bool $case_insensitive = false ] ) \",\"该函数有三个参数:\",\"**name：**必选参数，常量名称，即标志符。\",\"**value：**必选参数，常量的值。\",\"case_insensitive ：可选参数，如果设置为 TRUE，该常量则大小写不敏感，默认是大小写敏感的。\",\"**注意：**自 PHP 7.3.0 开始，定义不区分大小写的常量已被弃用。从 PHP 8.0.0 开始，只有 false 是可接受的值，传递 true 将产生一个警告。\",\"以下实例我们创建一个 区分大小写的常量（PHP7.3 版本之后不建议使用）, 常量值为 \\\"欢迎访问 Runoob.com\\\"：\",\"<?php // 区分大小写的常量名 define(\\\"GREETING\\\", \\\"欢迎访问 Runoob.com\\\"); echo GREETING; // 输出 \\\"欢迎访问 Runoob.com\\\" echo '<br>'; echo greeting; // 输出 \\\"greeting\\\"，但是有警告信息，表示该常量未定义 // 不区分大小写的常量名 define(\\\"GREETING\\\", \\\"欢迎访问 Runoob.com\\\", true); echo greeting; // 输出 \\\"欢迎访问 Runoob.com\\\" ?> \"]},\"520\":{\"h\":\"常量是全局的\",\"t\":[\"常量在定义后，默认是全局变量，可以在整个运行的脚本的任何地方使用。\",\"以下实例演示了在函数内使用常量，即便常量定义在函数外也可以正常使用常量。\",\"<?php define(\\\"GREETING\\\", \\\"欢迎访问 Runoob.com\\\"); function myTest() { echo GREETING; } myTest(); // 输出 \\\"欢迎访问 Runoob.com\\\" ?> \"]},\"521\":{\"h\":\"魔术常量\",\"t\":[\"魔术变量（Magic Variables）是一组特殊的预定义变量，它们在不同的上下文中提供了有用的信息。以下是一些常用的魔术变量及其作用：\",\"$_SERVER：包含了当前脚本执行的服务器和执行环境的信息，如请求的URL、请求方法、客户端IP地址等。\",\"$_GET：用于获取通过URL中的查询字符串传递的参数值，如?id=123&name=John中的id和name。\",\"$_POST：用于获取通过HTTP POST方法提交的表单数据，如用户登录时输入的用户名和密码。\",\"$_REQUEST：包含了通过GET、POST和COOKIE方式提交的所有参数值，但在处理敏感信息时需要小心使用。\",\"$_SESSION：用于存储和访问会话变量的数组，可以跨页面共享数据。\",\"$_COOKIE：用于获取通过HTTP Cookie方式传递的变量值，如保存在用户浏览器中的登录凭证。\",\"$_FILES：用于获取通过文件上传表单字段提交的文件信息，如文件名、临时文件路径等。\",\"$_ENV：包含了当前操作系统环境中定义的环境变量。\",\"$_GLOBALS：用于访问全局作用域中定义的所有变量，包括用户自定义的全局变量和PHP预定义的其他全局变量。\"]},\"522\":{\"h\":\"超级全局变量\",\"t\":[\"超级全局变量（Super Global Variables）是一组特殊的全局变量，它们在任何地方都可访问，并且不受作用域限制。这些变量以$_开头，并提供了对有用信息的直接访问。\"]},\"523\":{\"h\":\"弱类型语言\",\"t\":[\"申明变量不必声明变量的数据类型，他会根据上下文去推断数据类型\"]},\"524\":{\"h\":\"变量作用域\",\"t\":[\"脚本中变量可被引用的部分\",\"local\",\"global：用于函数内部访问全局变量\",\"<?php $x=5; $y=10; function myTest() { global $x,$y; $y=$x+$y; } myTest(); echo $y; // 输出 15 ?> \",\"PHP 将所有全局变量存储在一个名为 $GLOBALS[index] 的数组中。 index 保存变量的名称。这个数组可以在函数内部访问，也可以直接用来更新全局变量\",\"<?php $x=5; $y=10; function myTest() { $GLOBALS['y']=$GLOBALS['x']+$GLOBALS['y']; } myTest(); echo $y; ?> \",\"static：当一个函数完成时，它的所有变量通常都会被删除。然而，有时候您希望某个局部变量不要被删除。在第一次声明的时候加上static关键字\",\"<?php function myTest() { static $x=0; echo $x; $x++; echo PHP_EOL; // 换行符 } myTest(); myTest(); myTest(); ?> \",\"然后，每次调用该函数时，该变量将会保留着函数前一次被调用时的值\",\"**注释：**该变量仍然是函数的局部变量\",\"parameter\"]},\"525\":{\"h\":\"全局作用域和局部作用域\",\"t\":[\"全局作用域\",\"在所有函数外部定义的变量，拥有全局作用域。除了函数外，全局变量可以被脚本中的任何部分访问，要在一个函数中访问一个全局变量，需要使用 global 关键字。\",\"局部作用域\",\"在 PHP 函数内部声明的变量是局部变量，仅能在函数内部访问\",\"<?php $x=5; // 全局变量 function myTest() { $y=10; // 局部变量 echo \\\"<p>测试函数内变量:<p>\\\"; echo \\\"变量 x 为: $x\\\"; echo \\\"<br>\\\"; echo \\\"变量 y 为: $y\\\"; } myTest(); echo \\\"<p>测试函数外变量:<p>\\\"; echo \\\"变量 x 为: $x\\\"; echo \\\"<br>\\\"; echo \\\"变量 y 为: $y\\\"; ?> \"]},\"526\":{\"h\":\"参数作用域\",\"t\":[\"参数是通过调用代码将值传递给函数的局部变量。\",\"参数是在参数列表中声明的，作为函数声明的一部分\",\"<?php function myTest($x) { echo $x; } myTest(5); ?> \"]},\"527\":{\"h\":\"EOF(heredoc)\",\"t\":[\"PHP EOF(heredoc)是一种在命令行shell（如sh、csh、ksh、bash、PowerShell和zsh）和程序语言（像Perl、PHP、Python和Ruby）里定义一个字符串的方法\"]},\"528\":{\"h\":\"使用概述\",\"t\":[\"必须后接分号，否则编译通不过。\",\"EOF 可以用任意其它字符代替，只需保证结束标识与开始标识一致。\",\"结束标识必须顶格独自占一行(即必须从行首开始，前后不能衔接任何空白和字符)。\",\"开始标识可以不带引号或带单双引号，不带引号与带双引号效果一致，解释内嵌的变量和转义符号，带单引号则不解释内嵌的变量和转义符号。\",\"当内容需要内嵌引号（单引号或双引号）时，不需要加转义符，本身对单双引号转义，此处相当与q和qq的用法。\",\"<?php echo <<<EOF <h1>我的第一个标题</h1> <p>我的第一个段落。</p> EOF; // 结束需要独立一行且前后不能空格 ?> \",\"注意：\",\"以 <<<EOF 开始标记开始，以 EOF 结束标记结束，结束标记必须顶头写，不能有缩进和空格，且在结束标记末尾要有分号 。\",\"开始标记和结束标记相同，比如常用大写的 EOT、EOD、EOF 来表示，但是不只限于那几个(也可以用：JSON、HTML等)，只要保证开始标记和结束标记不在正文中出现即可。\",\"位于开始标记和结束标记之间的变量可以被正常解析，但是函数则不可以。在 heredoc 中，变量不需要用连接符 . 或 , 来拼接\",\"<?php $name=\\\"runoob\\\"; $a= <<<EOF \\\"abc\\\"$name \\\"123\\\" EOF; // 结束需要独立一行且前后不能空格 echo $a; ?> \"]},\"529\":{\"h\":\"类型\"},\"530\":{\"h\":\"String（字符串）\",\"t\":[\"一个字符串是一串字符的序列，你可以放在单引号或者双引号中\",\"<?php $x = \\\"Hello world!\\\"; echo $x; echo \\\"<br>\\\"; $x = 'Hello world!'; echo $x; ?> \"]},\"531\":{\"h\":\"Integer（整型）\",\"t\":[\"整数是一个没有小数的数字。\",\"整数规则:\",\"整数必须至少有一个数字 (0-9)\",\"整数不能包含逗号或空格\",\"整数是没有小数点的\",\"整数可以是正数或负数\",\"整型可以用三种格式来指定：十进制， 十六进制（ 以 0x 为前缀）或八进制（前缀为 0）。\",\"<?php $x = 5985; var_dump($x); //输出变量的类型和值 echo \\\"<br>\\\"; $x = -345; // 负数 var_dump($x); echo \\\"<br>\\\"; $x = 0x8C; // 十六进制数 var_dump($x); echo \\\"<br>\\\"; $x = 047; // 八进制数 var_dump($x); ?> \"]},\"532\":{\"h\":\"Float（浮点型）\",\"t\":[\"浮点数是带小数部分的数字，或是指数形式。\",\"<?php $x = 10.365; var_dump($x); echo \\\"<br>\\\"; $x = 2.4e3; var_dump($x); echo \\\"<br>\\\"; $x = 8E-5; var_dump($x); ?> \"]},\"533\":{\"h\":\"Boolean（布尔型）\",\"t\":[\"​ 布尔型可以是 TRUE 或 FALSE。用来做条件判断\"]},\"534\":{\"h\":\"Array（数组）\",\"t\":[\"数组可以在一个变量中存储多个值。\",\"<?php $cars=array(\\\"Volvo\\\",\\\"BMW\\\",\\\"Toyota\\\"); var_dump($cars); ?> \"]},\"535\":{\"h\":\"Object（对象）\",\"t\":[\"对象数据类型也可以用于存储数据。在 PHP 中，对象必须声明。\",\"你必须使用class关键字声明类对象。类是可以包含属性和方法的结构\",\"<?php class Car { var $color; function __construct($color=\\\"green\\\") { $this->color = $color; } function what_color() { return $this->color; } } ?> \"]},\"536\":{\"h\":\"NULL（空值）\",\"t\":[\"NULL 值表示变量没有值。NULL 是数据类型为 NULL 的值。\",\"NULL 值指明一个变量是否为空值。 同样可用于数据空值和NULL值的区别。\",\"可以通过设置变量值为 NULL 来清空变量数据\"]},\"537\":{\"h\":\"Enum 枚举\",\"t\":[\"PHP 7.1 之后的版本引入了原生的枚举类型。您可以使用 enum 关键字定义枚举类型。\",\"示例代码：\",\"<?php enum Fruit { case APPLE; case ORANGE; case BANANA; } $fruit = Fruit::APPLE; if ($fruit === Fruit::APPLE) { echo \\\"This is an apple.\\\"; } ?> \",\"在上述示例中，我定义了一个名为 Fruit 的枚举类型，并定义了三个枚举常量：APPLE、ORANGE 和 BANANA。您可以使用这些常量来比较和表示特定的枚举值。\",\"请注意，枚举类型在 PHP 8.1 之前是实验性的功能，需要使用符合该版本要求的 PHP 版本才能使用枚举。\"]},\"538\":{\"h\":\"Resource（资源类型）\",\"t\":[\"PHP 资源 resource 是一种特殊变量，保存了到外部资源的一个引用。\",\"常见资源数据类型有打开文件、数据库连接、图形画布区域等。\",\"由于资源类型变量保存有为打开文件、数据库连接、图形画布区域等的特殊句柄，因此将其它类型的值转换为资源没有意义。\",\"使用 get_resource_type() 函数可以返回资源（resource）类型\",\"<?php $c = mysql_connect();//数据库 echo get_resource_type($c).\\\"\\\\n\\\"; // 打印：mysql link $fp = fopen(\\\"foo\\\",\\\"w\\\");//文件 echo get_resource_type($fp).\\\"\\\\n\\\"; // 打印：file $doc = new_xmldoc(\\\"1.0\\\");//文档 echo get_resource_type($doc->doc).\\\"\\\\n\\\"; // 打印：domxml document ?> \"]},\"539\":{\"h\":\"Callback / Callable 类型\",\"t\":[\"在 PHP 中，回调（Callback）或可调用（Callable）类型是指可以被作为参数传递给其他函数或方法的一种数据类型。它允许您动态地指定要在程序中执行的代码。\",\"PHP 提供了几种表示回调或可调用类型的方式：\",\"函数名：您可以直接将函数名作为字符串传递给接受回调参数的函数或方法。例如：\",\"function myFunction() { echo \\\"Hello, world!\\\"; } // 将函数名作为回调传递 $callback = 'myFunction'; $callback(); // 调用回调函数 \",\"匿名函数：PHP 支持使用匿名函数定义回调。它们没有固定的函数名，以 function () { } 的格式进行定义。例如：\",\"// 使用匿名函数作为回调传递 $callback = function () { echo \\\"Hello, world!\\\"; }; $callback(); // 调用回调函数 \",\"类方法回调：您可以通过数组来表示类方法的回调。数组的第一个元素是对象实例或类名，第二个元素是需要调用的方法名。例如：\",\"class MyClass { public function myMethod() { echo \\\"Hello, world!\\\"; } } $object = new MyClass(); // 使用类方法作为回调传递 $callback = [$object, 'myMethod']; $callback(); // 调用回调方法 \",\"回调或可调用类型在许多情况下都很有用，比如事件处理、回调函数、动态函数调用等。\"]},\"540\":{\"h\":\"类型比较\",\"t\":[\"PHP 是弱类型语言，但也需要明白变量类型及它们的意义，因为我们经常需要对 PHP 变量进行比较，包含松散和严格比较。\",\"松散比较：使用两个等号 == 比较，只比较值，不比较类型。\",\"严格比较：用三个等号 === 比较，除了比较值，也比较类型。\",\"<?php if(42 == \\\"42\\\") { echo '1、值相等'; } echo PHP_EOL; // 换行符 if(42 === \\\"42\\\") { echo '2、类型相等'; } else { echo '3、类型不相等'; } ?> \",\"以上实例输出结果为：\",\"1、值相等 3、类型不相等 \"]},\"541\":{\"h\":\"比较 0、false、null\",\"t\":[\"<?php echo '0 == false: '; var_dump(0 == false); echo '0 === false: '; var_dump(0 === false); echo PHP_EOL; echo '0 == null: '; var_dump(0 == null); echo '0 === null: '; var_dump(0 === null); echo PHP_EOL; echo 'false == null: '; var_dump(false == null); echo 'false === null: '; var_dump(false === null); echo PHP_EOL; echo '\\\"0\\\" == false: '; var_dump(\\\"0\\\" == false); echo '\\\"0\\\" === false: '; var_dump(\\\"0\\\" === false); echo PHP_EOL; echo '\\\"0\\\" == null: '; var_dump(\\\"0\\\" == null); echo '\\\"0\\\" === null: '; var_dump(\\\"0\\\" === null); echo PHP_EOL; echo '\\\"\\\" == false: '; var_dump(\\\"\\\" == false); echo '\\\"\\\" === false: '; var_dump(\\\"\\\" === false); echo PHP_EOL; echo '\\\"\\\" == null: '; var_dump(\\\"\\\" == null); echo '\\\"\\\" === null: '; var_dump(\\\"\\\" === null); \",\"以上实例输出结果为：\",\"0 == false: bool(true) 0 === false: bool(false) 0 == null: bool(true) 0 === null: bool(false) false == null: bool(true) false === null: bool(false) \\\"0\\\" == false: bool(true) \\\"0\\\" === false: bool(false) \\\"0\\\" == null: bool(false) \\\"0\\\" === null: bool(false) \\\"\\\" == false: bool(true) \\\"\\\" === false: bool(false) \\\"\\\" == null: bool(true) \\\"\\\" === null: bool(false) \"]},\"542\":{\"h\":\"字符串\"},\"543\":{\"h\":\"长度\",\"t\":[\"获取字符串的长度，可以使用strlen()函数。\",\"$str = \\\"Hello World!\\\"; $length = strlen($str); echo \\\"字符串的长度为：$length\\\"; // 输出：字符串的长度为：12 \"]},\"544\":{\"h\":\"连接\",\"t\":[\"可以使用.运算符来连接两个字符串。\",\"$str1 = \\\"Hello\\\"; $str2 = \\\"World!\\\"; $result = $str1 . \\\" . $str2; echo $result; // 输出：Hello World! \"]},\"545\":{\"h\":\"截取\",\"t\":[\"可以使用substr()函数来截取字符串的一部分。\",\"$str = \\\"Hello World!\\\"; $substring = substr($str, 6, 5); echo $substring; // 输出：World \"]},\"546\":{\"h\":\"替换\",\"t\":[\"可以使用str_replace()函数来替换字符串中的部分内容。\",\"$str = \\\"Hello World!\\\"; $newStr = str_replace(\\\"World\\\", \\\"PHP\\\", $str); echo $newStr; // 输出：Hello PHP! \"]},\"547\":{\"h\":\"转换为小写或大写\",\"t\":[\"可以使用strtolower()函数将字符串转换为小写，使用strtoupper()函数将字符串转换为大写。\",\"$str = \\\"Hello World!\\\"; $lowercase = strtolower($str); $uppercase = strtoupper($str); echo $lowercase; // 输出：hello world! echo $uppercase; // 输出：HELLO WORLD! \"]},\"548\":{\"h\":\"去除首尾空格\",\"t\":[\"可以使用trim()函数去除字符串首尾的空格。\",\"$str = \\\" Hello World! \\\"; $trimmedStr = trim($str); echo $trimmedStr; // 输出：Hello World! \"]},\"549\":{\"h\":\"转义\",\"t\":[\"可以使用addslashes()函数对字符串中的特殊字符进行转义。\",\"$str = \\\"It's a \\\\\\\"quote\\\\\\\".\\\"; $escapedStr = addslashes($str); echo $escapedStr; // 输出：It\\\\'s a \\\\\\\"quote\\\\\\\". \"]},\"550\":{\"h\":\"运算符\"},\"551\":{\"h\":\"算术运算符\",\"t\":[\"加法运算符(+)：用于两个操作数的相加。\",\"$num1 = 10; $num2 = 5; $sum = $num1 + $num2; echo \\\"两个数的和为：$sum\\\"; // 输出：两个数的和为：15 \",\"减法运算符(-)：用于两个操作数的相减。\",\"$num1 = 10; $num2 = 5; $diff = $num1 - $num2; echo \\\"两个数的差为：$diff\\\"; // 输出：两个数的差为：5 \",\"乘法运算符(*)：用于两个操作数的相乘。\",\"$num1 = 10; $num2 = 5; $product = $num1 * $num2; echo \\\"两个数的积为：$product\\\"; // 输出：两个数的积为：50 \",\"除法运算符(/)：用于两个操作数的相除。\",\"$num1 = 10; $num2 = 5; $quotient = $num1 / $num2; echo \\\"两个数的商为：$quotient\\\"; // 输出：两个数的商为：2 \",\"取余运算符(%)：用于两个操作数的取余。\",\"$num1 = 10; $num2 = 3; $remainder = $num1 % $num2; echo \\\"两个数的余数为：$remainder\\\"; // 输出：两个数的余数为：1 \"]},\"552\":{\"h\":\"赋值运算符\",\"t\":[\"赋值运算符(=)：用于将右侧的值赋给左侧的变量。\",\"$num = 10; \",\"复合赋值运算符(+=, -=, *=, /=, %=)：用于将右侧的值与左侧的变量进行相应的运算，并将结果赋给左侧的变量。\",\"$num = 10; $num += 5; // 等价于 $num = $num + 5; echo $num; // 输出：15 \"]},\"553\":{\"h\":\"比较运算符\",\"t\":[\"等于运算符(==)：用于比较两个操作数是否相等。\",\"$num1 = 10; $num2 = 5; if ($num1 == $num2) { echo \\\"两个数相等\\\"; } else { echo \\\"两个数不相等\\\"; } \",\"不等于运算符(!=)：用于比较两个操作数是否不相等。\",\"$num1 = 10; $num2 = 5; if ($num1 != $num2) { echo \\\"两个数不相等\\\"; } else { echo \\\"两个数相等\\\"; } \",\"大于运算符(>)：用于判断左侧操作数是否大于右侧操作数。\",\"$num1 = 10; $num2 = 5; if ($num1 > $num2) { echo \\\"$num1 大于 $num2\\\"; } else { echo \\\"$num1 不大于 $num2\\\"; } \",\"小于运算符(<)：用于判断左侧操作数是否小于右侧操作数。\",\"$num1 = 10; $num2 = 5; if ($num1 < $num2) { echo \\\"$num1 小于 $num2\\\"; } else { echo \\\"$num1 不小于 $num2\\\"; } \"]},\"554\":{\"h\":\"条件语句\"},\"555\":{\"h\":\"if语句\",\"t\":[\"if语句用于在指定条件为真时执行一段代码\",\"$score = 75; if ($score >= 60) { echo \\\"成绩合格！\\\"; } else { echo \\\"成绩不合格！\\\"; } \"]},\"556\":{\"h\":\"elseif语句\",\"t\":[\"elseif语句用于在之前的条件为假且当前条件为真时执行一段代码\",\"$grade = 'B'; if ($grade == 'A') { echo \\\"优秀！\\\"; } elseif ($grade == 'B') { echo \\\"良好！\\\"; } else { echo \\\"待提高！\\\"; } \"]},\"557\":{\"h\":\"switch语句：\",\"t\":[\"​ switch语句根据变量的不同值执行不同的代码块\",\"$day = 'Monday'; switch ($day) { case 'Monday': echo \\\"星期一\\\"; break; case 'Tuesday': echo \\\"星期二\\\"; break; default: echo \\\"其他日子\\\"; break; } \"]},\"558\":{\"h\":\"三元运算符\",\"t\":[\"三元运算符（条件?表达式1:表达式2）用于根据条件选择执行不同的表达式\",\"$age = 18; $isAdult = ($age >= 18) ? \\\"成年人\\\" : \\\"未成年人\\\"; echo $isAdult; \"]},\"559\":{\"h\":\"循环语句\"},\"560\":{\"h\":\"for循环\",\"t\":[\"使用for循环可以在指定的次数内循环执行代码块\",\"for ($i = 0; $i < 5; $i++) { // 循环执行的代码块 echo $i; } \"]},\"561\":{\"h\":\"while循环\",\"t\":[\"使用while循环可以在满足指定条件时循环执行代码块\",\"$i = 0; while ($i < 5) { // 循环执行的代码块 echo $i; $i++; } \"]},\"562\":{\"h\":\"do-while循环\",\"t\":[\"与while循环类似，但它会先执行一次代码块，然后再检查条件是否满足\",\"$i = 0; do { // 循环执行的代码块 echo $i; $i++; } while ($i < 5); \"]},\"563\":{\"h\":\"foreach循环\",\"t\":[\"用于遍历数组中的每个元素或对象中的每个属性\",\"$colors = array(\\\"红色\\\", \\\"绿色\\\", \\\"蓝色\\\"); foreach ($colors as $color) { echo $color; } \"]},\"564\":{\"h\":\"break语句\",\"t\":[\"用于提前结束循环。当满足特定条件时，可以使用break语句跳出当前的循环\",\"for ($i = 0; $i < 5; $i++) { if ($i == 3) { break; } echo $i; // 输出：0 1 2 } \",\"continue语句\",\"用于跳过当前循环中的剩余代码，并继续下一次循环迭代\",\"for ($i = 0; $i < 5; $i++) { if ($i == 3) { continue; } echo $i; // 输出：0 1 2 4 } \"]},\"565\":{\"h\":\"函数\",\"t\":[\"函数是封装了一系列可重复使用的代码块，并可以通过指定的名称和参数来调用执行。PHP提供了丰富的内置函数，同时也支持用户自定义函数。\"]},\"566\":{\"h\":\"定义函数\",\"t\":[\"使用function关键字来定义函数，并指定函数名和参数列表。\",\"定义一个简单的函数来计算两个数的和：\",\"function addNumbers($num1, $num2) { $sum = $num1 + $num2; echo \\\"和为：\\\" . $sum; } \"]},\"567\":{\"h\":\"调用函数\",\"t\":[\"通过函数名和传递给函数的参数来调用函数。\",\"调用上面定义的函数来计算两个数的和：\",\"addNumbers(5, 3); // 输出：和为：8 \"]},\"568\":{\"h\":\"返回值\",\"t\":[\"函数可以通过使用return语句返回一个值，将结果传递回函数调用的地方\",\"定义一个函数来计算两个数的乘积并返回结果：\",\"function multiplyNumbers($num1, $num2) { $product = $num1 * $num2; return $product; } \",\"调用函数并输出返回的结果\",\"$result = multiplyNumbers(4, 6); echo \\\"乘积为：\\\" . $result; // 输出：乘积为：24 \"]},\"569\":{\"h\":\"可变函数\",\"t\":[\"在 PHP 中，可变函数（Variable Functions）是一种特殊的语法，允许通过变量来调用函数。即可以将函数名存储在一个变量中，并使用该变量来动态调用函数。\",\"以下是使用可变函数的示例：\",\"function greet() { echo \\\"Hello, \\\"; } $functionName = \\\"greet\\\"; $functionName(); // 调用可变函数 // 输出结果：Hello, \",\"在上面的示例中，我们定义了一个名为 greet() 的函数，它只是打印字符串 \\\"Hello, \\\"。然后，我们将函数名存储在变量 $functionName 中，并使用变量名后面加上括号 () 来调用可变函数。\",\"需要注意以下几点：\",\"可变函数只能用于全局函数和类方法。无法对内建函数和方法使用可变函数。\",\"变量名对大小写敏感，因此必须确保使用正确的函数名。\",\"如果尝试调用的函数不存在，则会导致解析错误。\",\"可变函数是一种在特定情况下非常有用的技术，例如根据条件动态选择要执行的函数或在不同上下文中使用相同代码的多个函数。然而，过度滥用可变函数可能会导致代码可读性和维护性下降，应谨慎使用。\"]},\"570\":{\"h\":\"内置函数\",\"t\":[\"PHP 内置了大量的函数，用于执行各种操作，包括字符串处理、数组操作、日期和时间处理、文件操作、数据库连接等。以下是一些常见的 PHP 内置函数：\",\"字符串处理函数：\",\"strlen()：获取字符串的长度。\",\"strpos()：查找字符串中第一次出现某个子串的位置。\",\"substr()：截取字符串的一部分。\",\"str_replace()：替换字符串中的指定子串。\",\"数组操作函数：\",\"count()：获取数组的元素个数。\",\"array_push()：将一个或多个元素添加到数组末尾。\",\"array_pop()：从数组末尾移除并返回最后一个元素。\",\"array_key_exists()：检查数组中是否存在指定的键名。\",\"日期和时间处理函数：\",\"date()：格式化日期和时间。\",\"time()：获取当前的 Unix 时间戳。\",\"strtotime()：将日期时间字符串转换为 Unix 时间戳。\",\"strftime()：根据本地化设置格式化日期和时间。\",\"文件操作函数：\",\"file_get_contents()：读取文件内容并以字符串形式返回。\",\"file_put_contents()：将字符串写入文件。\",\"fopen()：打开文件或 URL。\",\"fclose()：关闭打开的文件句柄。\",\"数据库连接函数：\",\"mysqli_connect()：创建 MySQL 数据库连接。\",\"mysqli_query()：在当前数据库连接上执行 SQL 查询。\",\"mysqli_fetch_assoc()：从结果集中获取一行作为关联数组。\",\"上述仅是一小部分 PHP 内置函数示例，还有许多其他强大的函数可供使用。您可以查阅 PHP 官方文档以获得更详细的函数列表和使用说明。\"]},\"571\":{\"h\":\"箭头函数\",\"t\":[\"PHP 7.4 引入了箭头函数（Arrow Functions），这是一种更简洁的匿名函数语法。箭头函数提供了一种更紧凑和直观的方式来编写小型的回调或匿名函数。\",\"下面是箭头函数和传统匿名函数的对比示例：\",\"传统匿名函数：\",\"$numbers = [1, 2, 3, 4, 5]; $result = array_map(function($n) { return $n * 2; }, $numbers); var_dump($result); \",\"箭头函数：\",\"$numbers = [1, 2, 3, 4, 5]; $result = array_map(fn($n) => $n * 2, $numbers); var_dump($result); \",\"箭头函数使用 fn 关键字后跟参数列表和箭头 =>，然后是表达式作为函数体。与传统匿名函数不同，箭头函数没有显式的 return 语句，它们会自动将表达式的结果作为返回值。\",\"箭头函数有以下几个限制：\",\"只能包含一个表达式作为函数体，不能包含多条语句或复杂的逻辑。\",\"不能访问父作用域中的变量，仅能访问自身作用域中的变量。\",\"箭头函数在某些情况下可以使代码更加简洁和易读，特别是当回调函数非常简单时。然而，对于复杂的逻辑和需要访问父作用域变量的情况，传统匿名函数仍然是更适合的选择。\"]},\"572\":{\"h\":\"数组\",\"t\":[\"数组是一种用于存储多个值的数据结构，可以通过索引或键访问和操作其中的元素。，数组非常常用\"]},\"573\":{\"h\":\"索引数组\",\"t\":[\"索引数组使用数字作为元素的索引，索引从0开始递增。\",\"$numbers = array(2, 4, 6, 8); \",\"也可以使用简化的语法来创建索引数组：\",\"$numbers = [2, 4, 6, 8]; \"]},\"574\":{\"h\":\"关联数组\",\"t\":[\"关联数组使用自定义的键（字符串）来标识元素。\",\"$student = array( 'name' => 'John', 'age' => 20, 'major' => 'Computer Science' ); \",\"也可以使用简化的语法来创建关联数组：\",\"$student = [ 'name' => 'John', 'age' => 20, 'major' => 'Computer Science' ]; \"]},\"575\":{\"h\":\"访问数组元素\",\"t\":[\"可以使用索引或键来访问数组中的元素。\",\"$numbers = [2, 4, 6, 8]; echo $numbers[0]; // 输出：2 $student = [ 'name' => 'John', 'age' => 20, 'major' => 'Computer Science' ]; echo $student['name']; // 输出：John \"]},\"576\":{\"h\":\"修改数组元素\",\"t\":[\"通过索引或键来修改数组中的元素。\",\"$numbers = [2, 4, 6, 8]; $numbers[1] = 10; echo $numbers[1]; // 输出：10 $student = [ 'name' => 'John', 'age' => 20, 'major' => 'Computer Science' ]; $student['age'] = 21; echo $student['age']; // 输出：21 \"]},\"577\":{\"h\":\"遍历数组\",\"t\":[\"可以使用循环结构来遍历数组中的元素。\",\"$numbers = [2, 4, 6, 8]; foreach ($numbers as $number) { echo $number . ' '; } // 输出：2 4 6 8 $student = [ 'name' => 'John', 'age' => 20, 'major' => 'Computer Science' ]; foreach ($student as $key => $value) { echo $key . ': ' . $value . ' '; } // 输出：name: John age: 20 major: Computer Science \"]},\"578\":{\"h\":\"方法\",\"t\":[\"，数组有许多内置的方法可以用来对数组进行操作和处理\",\"count()：返回数组中元素的数量。\",\"$numbers = [2, 4, 6, 8]; $count = count($numbers); // 返回值：4 \",\"array_push()：将一个或多个元素添加到数组末尾。\",\"$fruits = ['apple', 'banana']; array_push($fruits, 'orange', 'grape'); // $fruits 现在为 ['apple', 'banana', 'orange', 'grape'] \",\"array_pop()：移除数组中的最后一个元素，并返回该元素的值。\",\"$fruits = ['apple', 'banana', 'orange']; $removedFruit = array_pop($fruits); // $removedFruit 现在为 'orange'，$fruits 现在为 ['apple', 'banana'] \",\"array_shift()：移除数组中的第一个元素，并返回该元素的值。\",\"$fruits = ['apple', 'banana', 'orange']; $removedFruit = array_shift($fruits); // $removedFruit 现在为 'apple'，$fruits 现在为 ['banana', 'orange'] \",\"array_unshift()：将一个或多个元素添加到数组的开头。\",\"$fruits = ['apple', 'banana']; array_unshift($fruits, 'orange', 'grape'); // $fruits 现在为 ['orange', 'grape', 'apple', 'banana'] \",\"array_slice()：从数组中取出一段指定长度的元素并返回作为新数组。\",\"$fruits = ['apple', 'banana', 'orange', 'grape']; $slicedFruits = array_slice($fruits, 1, 2); // $slicedFruits 现在为 ['banana', 'orange'] \",\"array_merge()：将一个或多个数组合并成一个新数组。\",\"$fruits1 = ['apple', 'banana']; $fruits2 = ['orange', 'grape']; $mergedFruits = array_merge($fruits1, $fruits2); // $mergedFruits 现在为 ['apple', 'banana', 'orange', 'grape'] \",\"array_reverse()：将数组中的元素顺序反转。\",\"$numbers = [1, 2, 3, 4]; $reversedNumbers = array_reverse($numbers); // $reversedNumbers 现在为 [4, 3, 2, 1] \",\"in_array()：检查一个值是否存在于数组中，返回布尔值。\",\"$fruits = ['apple', 'banana', 'orange']; $isBananaExists = in_array('banana', $fruits); // $isBananaExists 现在为 true \",\"array_search()：在数组中搜索给定的值，并返回其对应的键名（索引）。\",\"$fruits = ['apple', 'banana', 'orange']; $key = array_search('banana', $fruits); // $key 现在为 1 \",\"array_keys()：返回一个包含数组所有键名的新数组。\",\"$fruits = ['apple', 'banana', 'orange']; $keys = array_keys($fruits); // $keys 现在为 [0, 1, 2] \",\"array_values()：返回一个包含数组所有值的新数组，重新索引数组。\",\"$fruits = ['apple', 'banana', 'orange']; $values = array_values($fruits); // $values 现在为 ['apple', 'banana', 'orange'] \",\"array_unique()：移除数组中重复的值，返回一个去重后的新数组。\",\"$numbers = [1, 3, 2, 3, 4, 2]; $uniqueNumbers = array_unique($numbers); // $uniqueNumbers 现在为 [1, 3, 2, 4] \",\"sort()：对数组进行升序排序，保持索引关联。原始数组会被修改。\",\"$fruits = ['orange', 'apple', 'banana']; sort($fruits); // $fruits 现在为 ['apple', 'banana', 'orange'] \",\"rsort()：对数组进行降序排序，保持索引关联。原始数组会被修改。\",\"$fruits = ['orange', 'apple', 'banana']; rsort($fruits); // $fruits 现在为 ['orange', 'banana', 'apple'] \",\"asort()：对数组进行升序排序，但会保持索引与值的关联。原始数组会被修改。\",\"$fruits = ['orange', 'apple', 'banana']; asort($fruits); // $fruits 现在为 ['apple', 'banana', 'orange'] \",\"arsort(): 对数组进行降序排序，但会保持索引与值的关联。原始数组会被修改。\",\"$fruits = ['orange', 'apple', 'banana']; arsort($fruits); // $fruits 现在为 ['orange', 'banana', 'apple'] \",\"array_flip()：交换数组中的键和值，返回一个新数组。\",\"$fruits = ['apple' => 1, 'banana' => 2, 'orange' => 3]; $flippedArray = array_flip($fruits); // $flippedArray 现在为 [1 => 'apple', 2 => 'banana', 3 => 'orange'] \"]},\"579\":{\"h\":\"对象\",\"t\":[\"在 PHP 中，类（Class）是用来定义对象（Object）的蓝图或模板。一个类可以包含属性和方法，它们描述了对象的状态和行为。\",\"通过定义类，我们可以创建多个对象，每个对象都具有相同的属性和方法，但其具体的属性值可以不同。以下是一个示例：\",\"class Car { public $brand; public $color; public function __construct($brand, $color) { $this->brand = $brand; $this->color = $color; } public function startEngine() { echo \\\"The \\\" . $this->color . \\\" \\\" . $this->brand . \\\" car's engine is started.\\\"; } public function paint($newColor) { $this->color = $newColor; } } // 创建两个 Car 对象 $car1 = new Car(\\\"Toyota\\\", \\\"Blue\\\"); $car2 = new Car(\\\"Honda\\\", \\\"Red\\\"); // 调用对象的方法 $car1->startEngine(); // 输出结果：The Blue Toyota car's engine is started. $car2->startEngine(); // 输出结果：The Red Honda car's engine is started. // 修改对象的属性 $car1->paint(\\\"Green\\\"); echo $car1->color; // 输出结果：Green \",\"在上面的示例中，我们定义了一个名为 Car 的类，它有两个属性 $brand 和 $color，以及一个构造函数 __construct() 和两个方法 startEngine() 和 paint()。\",\"然后，我们使用 new 关键字创建了两个 Car 对象，分别赋给变量 $car1 和 $car2。每个对象都有自己的属性值。\",\"我们可以通过对象访问属性和方法，使用箭头操作符 ->。例如，通过调用 $car1->startEngine() 和 $car2->startEngine() 来启动两辆车的引擎。还可以通过调用 $car1->paint(\\\"Green\\\") 来改变 $car1 对象的颜色属性。\",\"类与对象的概念提供了一种面向对象编程（OOP）的方式，使代码更加模块化、可组织和可重用。它允许将相关的数据和行为组合到一个单独的实体中，并通过创建多个对象来表示不同的实例。这种思想在大型应用程序中特别有用，可以提高代码的可读性、可维护性和可扩展性。\"]},\"580\":{\"h\":\"表单\",\"t\":[\"接收表单数据：使用$_POST或$_GET全局变量来接收表单提交的数据。$_POST用于处理通过POST方法提交的表单数据，而$_GET用于处理通过GET方法提交的表单数据。\",\"处理表单输入：可以使用条件语句和验证函数来验证和处理表单输入数据的有效性。例如，可以使用isset()函数检查表单字段是否存在，并使用filter_var()函数对输入进行过滤和验证。\",\"防止安全漏洞：在处理表单数据时，务必要注意安全性。确保对用户输入进行适当的验证、过滤和转义，以防止常见的安全漏洞，如跨站点脚本攻击(XSS)和SQL注入攻击。\",\"显示表单错误信息：如果表单提交后出现错误，通常需要将错误消息返回给用户。您可以使用条件语句结合HTML表单来显示相应的错误消息。\",\"处理文件上传：如果您的表单包含文件上传字段，您可以使用$_FILES全局变量来处理上传的文件。可以使用move_uploaded_file()函数将上传的文件移动到指定位置。\",\"表单重定向：在成功处理表单数据后，可以使用重定向将用户导航到另一个页面，如确认页面或成功页面。可以使用header()函数实现重定向。\",\"表单保持数据：在用户提交表单后，有时可能需要保留用户之前输入的数据，以便在出现错误时重新填充表单。可以通过将用户输入存储在变量中，并在HTML表单字段中设置value属性来实现数据的保持。\",\"当涉及表单处理时，以下是一个简单的示例，展示了如何接收用户输入、验证数据并显示错误信息：\",\"<?php // 定义变量以保存用户输入和错误信息 $name = $email = $message = \\\"\\\"; $nameErr = $emailErr = \\\"\\\"; // 检查表单是否提交 if ($_SERVER[\\\"REQUEST_METHOD\\\"] == \\\"POST\\\") { // 获取用户输入并进行基本验证 $name = test_input($_POST[\\\"name\\\"]); if (empty($name)) { $nameErr = \\\"姓名是必填项\\\"; } $email = test_input($_POST[\\\"email\\\"]); if (empty($email)) { $emailErr = \\\"邮箱是必填项\\\"; } elseif (!filter_var($email, FILTER_VALIDATE_EMAIL)) { $emailErr = \\\"无效的邮箱格式\\\"; } $message = test_input($_POST[\\\"message\\\"]); // 如果没有错误，可以进行其他处理（例如发送电子邮件） if (empty($nameErr) && empty($emailErr)) { // 执行其他操作，如发送电子邮件或保存到数据库 // ... // 重定向到成功页面 header(\\\"Location: success.php\\\"); exit; } } // 辅助函数以去除不必要的空格和转义特殊字符 function test_input($data) { $data = trim($data); $data = stripslashes($data); $data = htmlspecialchars($data); return $data; } ?> <!-- 在HTML中显示表单和错误消息 --> <form method=\\\"post\\\" action=\\\"<?php echo htmlspecialchars($_SERVER[\\\"PHP_SELF\\\"]); ?>\\\"> <label for=\\\"name\\\">姓名：</label> <input type=\\\"text\\\" name=\\\"name\\\" value=\\\"<?php echo $name; ?>\\\"> <span class=\\\"error\\\"><?php echo $nameErr; ?></span><br> <label for=\\\"email\\\">邮箱：</label> <input type=\\\"text\\\" name=\\\"email\\\" value=\\\"<?php echo $email; ?>\\\"> <span class=\\\"error\\\"><?php echo $emailErr; ?></span><br> <label for=\\\"message\\\">留言：</label> <textarea name=\\\"message\\\"><?php echo $message; ?></textarea><br> <input type=\\\"submit\\\" name=\\\"submit\\\" value=\\\"提交\\\"> </form> \",\"上述示例演示了一个简单的联系表单，包括姓名、邮箱和留言字段。用户输入的数据在提交后经过基本的验证，并显示相关的错误信息。如果没有错误，可以根据需要执行其他操作并重定向到成功页面。\",\"请注意，示例中的htmlspecialchars()函数用于转义用户输入中的特殊字符，以防止XSS攻击。\"]},\"581\":{\"h\":\"文件上传\",\"t\":[\"可以通过使用<input type=\\\"file\\\">表单元素和相应的服务器端处理来实现文件上传功能。下面是一个简单的示例：\",\"创建包含文件上传表单的HTML页面（例如，upload.html）：\",\"<!DOCTYPE html> <html> <head> <title>文件上传</title> </head> <body> <form action=\\\"upload.php\\\" method=\\\"POST\\\" enctype=\\\"multipart/form-data\\\"> <label for=\\\"file\\\">选择文件:</label> <input type=\\\"file\\\" name=\\\"file\\\" id=\\\"file\\\"><br> <input type=\\\"submit\\\" value=\\\"上传文件\\\"> </form> </body> </html> \",\"创建服务器端的文件上传处理代码（例如，upload.php）：\",\"<?php if ($_SERVER[\\\"REQUEST_METHOD\\\"] == \\\"POST\\\" && isset($_FILES[\\\"file\\\"])) { $file = $_FILES[\\\"file\\\"]; // 获取上传文件的相关信息 $fileName = $file[\\\"name\\\"]; $fileTmpPath = $file[\\\"tmp_name\\\"]; $fileSize = $file[\\\"size\\\"]; $fileError = $file[\\\"error\\\"]; // 指定文件上传目录 $uploadDir = \\\"./uploads/\\\"; // 将文件移动到指定目录 $destination = $uploadDir . $fileName; if (move_uploaded_file($fileTmpPath, $destination)) { echo \\\"文件上传成功！\\\"; } else { echo \\\"文件上传失败！\\\"; } } ?> \",\"上述代码中，首先检查请求方法是否为POST，并确保\\\"file\\\"文件字段存在。然后，通过访问$_FILES数组获取上传文件的相关信息，如文件名、临时路径、大小和错误代码。接下来，指定一个上传目录，并将临时文件移动到目标目录中使用move_uploaded_file()函数。最后，根据移动结果输出相应的提示。\",\"请确保目标目录（例如，\\\"uploads\\\"文件夹）具有适当的写权限，以便能够保存上传的文件。\",\"这只是一个简单的示例，你可以根据实际需求进行更多的验证和处理，比如检查文件类型、限制文件大小等。此外，还需要注意安全性，例如对上传的文件进行严格的验证和过滤，以避免恶意文件上传和任意代码执行漏洞。\"]},\"582\":{\"h\":\"迭代器和生成器\",\"t\":[\"PHP 中的迭代器（Iterator）和生成器（Generator）是处理和遍历数据集合的有用工具。\",\"迭代器是一个实现了特定接口的对象，它可以用于遍历数据集合中的元素。通过实现 Iterator 接口，您可以定义自己的迭代器类。迭代器提供了一种逐个访问数据的方法，使您能够按需获取和处理数据，而无需在内存中同时保存整个数据集合。\",\"以下是一个简单的示例，展示了如何实现一个基本的自定义迭代器类：\",\"class MyIterator implements Iterator { private $data = []; private $position = 0; public function __construct($data) { $this->data = $data; $this->position = 0; } public function rewind() { $this->position = 0; } public function valid() { return isset($this->data[$this->position]); } public function current() { return $this->data[$this->position]; } public function key() { return $this->position; } public function next() { $this->position++; } } $data = [1, 2, 3]; $iterator = new MyIterator($data); foreach ($iterator as $key => $value) { echo \\\"Key: {$key}, Value: {$value}\\\\n\\\"; } \",\"生成器是 PHP 提供的一种更方便的迭代器实现方式。通过使用 yield 关键字，您可以创建一个函数或方法，它在执行过程中可以产生一系列的值。生成器函数会在每次迭代时暂停执行，直到下一次迭代被触发。\",\"以下是一个使用生成器实现斐波那契数列的示例：\",\"function fibonacci($n) { $a = 0; $b = 1; for ($i = 0; $i < $n; $i++) { yield $a; [$a, $b] = [$b, $a + $b]; } } foreach (fibonacci(10) as $number) { echo $number . ' '; } \",\"生成器提供了一种更简洁和高效地处理大型数据集合的方式，因为它们只在需要时生成数据，并且不需要事先将整个数据集存储在内存中。\",\"迭代器和生成器是处理和遍历数据集合的有用工具，它们可以帮助您实现更灵活和高效的代码。\"]},\"583\":{\"h\":\"面向对象\",\"t\":[\"面向对象（Object-Oriented，简称 OO）是一种编程思想和方法，它将程序中的数据和操作数据的方法封装在一起，形成\\\"对象\\\"，并通过对象之间的交互和消息传递来完成程序的功能。面向对象编程强调数据的封装、继承、多态和动态绑定等特性，使得程序具有更好的可扩展性、可维护性和可重用性。\",\"在面向对象的程序设计（英语：Object-oriented programming，缩写：OOP）中，对象是一个由信息及对信息进行处理的描述所组成的整体，是对现实世界的抽象。\",\"类与对象：\",\"类（Class）是描述对象具备的属性和行为的模板或蓝图。\",\"对象（Object）是类的一个具体实例。\",\"属性和方法：\",\"属性（Property）是类中定义的变量，用于存储对象的状态信息。\",\"方法（Method）是类中定义的函数，用于定义对象的行为和操作。\",\"封装（Encapsulation）：\",\"封装是指将数据和对数据的操作封装在类的内部，外部只能通过公开的方法访问和修改对象的状态。\",\"继承（Inheritance）：\",\"继承允许创建新的类，通过继承现有类的属性和方法来实现代码的复用。\",\"子类（派生类）继承父类（基类、超类）的特性，并可以添加自己的特性。\",\"多态（Polymorphism）：\",\"多态允许子类对象表现出与父类相同的行为，但实际上执行的是各自的实现逻辑。\",\"多态性可以通过抽象类、接口和方法重写来实现。\",\"访问控制修饰符：\",\"PHP提供了三个访问控制修饰符：public、protected、private，用于控制属性和方法的访问权限。其中，公开的成员可以在任何地方访问，受保护的成员只能在类内部和子类中访问，私有的成员只能在所属类内部访问。\",\"类的自动加载：\",\"在面向对象编程中，可以使用自动加载器（Autoloader）来自动加载类文件，避免手动引入每个类文件的繁琐。\",\"通过面向对象编程，可以将代码组织为更模块化、可维护的结构，并提高代码的复用性和可扩展性。PHP提供了丰富的面向对象特性和语法支持，使得开发者可以更灵活地设计和实现各种应用程序。\",\"假设我们要创建一个汽车类（Car），该类具有以下属性和方法：\",\"属性：\",\"品牌（brand）\",\"颜色（color）\",\"价格（price）\",\"方法：\",\"启动（start）\",\"加速（accelerate）\",\"刹车（brake）\",\"停止（stop）\",\"我们可以通过以下代码来定义这个汽车类：\",\"class Car { public $brand; public $color; public $price; public function start() { echo \\\"The car is started.\\\" . PHP_EOL; } public function accelerate() { echo \\\"The car is accelerating.\\\" . PHP_EOL; } public function brake() { echo \\\"The car is braking.\\\" . PHP_EOL; } public function stop() { echo \\\"The car is stopped.\\\" . PHP_EOL; } } \",\"现在我们可以创建汽车对象，并使用对象的属性和方法：\",\"// 创建一个汽车对象 $car = new Car(); // 设置汽车属性 $car->brand = \\\"Toyota\\\"; $car->color = \\\"Red\\\"; $car->price = 20000; // 调用汽车方法 $car->start(); // 输出：The car is started. $car->accelerate(); // 输出：The car is accelerating. $car->brake(); // 输出：The car is braking. $car->stop(); // 输出：The car is stopped. \",\"通过面向对象的方式，我们将汽车的属性和行为封装在了一个类中，可以创建多个汽车对象并对其进行操作。这样的设计使得代码更加模块化和可维护，也提供了更大的灵活性和扩展性。\"]},\"584\":{\"h\":\"命名空间\",\"t\":[\"命名空间（Namespace）是一种用于组织和管理代码的机制。它可以避免不同代码之间的名称冲突，并提供更好的代码结构和可维护性。通过使用命名空间，可以将相关的类、函数和常量分组在一起，以便更好地组织和重用代码。\",\"定义命名空间： 在PHP代码文件的顶部使用 namespace 关键字来定义命名空间，例如：\",\"namespace MyNamespace; \",\"命名空间的使用：\",\"使用命名空间中的类、函数或常量时，可以使用完全限定名称（Fully Qualified Name），例如：$obj = new \\\\MyNamespace\\\\MyClass()\",\"还可以使用 use 关键字导入命名空间，以简化对其中成员的引用，例如：\",\"use MyNamespace\\\\MyClass; $obj = new MyClass(); \",\"命名空间的嵌套： 命名空间可以进行多级嵌套，使用 \\\\ 进行分隔，例如：\",\"namespace MyNamespace\\\\SubNamespace; \",\"自动加载： 在使用命名空间时，可以利用自动加载器（Autoloader）来自动加载所需的类文件。这样可以避免手动引入每个类文件的麻烦。\",\"命名空间的使用可以提高代码的可读性和可维护性，尤其在大型项目中特别有用。通过将相关的代码组织在一起，并避免名称冲突，可以更好地管理代码库并提高开发效率。\"]},\"585\":{\"h\":\"异常处理\",\"t\":[\"可以使用错误处理机制来捕获和处理运行时产生的错误。以下是一些常用的PHP错误处理技术：\"]},\"586\":{\"h\":\"错误报告级别\",\"t\":[\"通过设置错误报告级别，你可以控制PHP是否显示和记录错误。在开发过程中，建议将错误报告级别设置为最高，以便及时发现和修复问题。在生产环境中，通常将错误报告级别设置为更低，只记录严重错误，并将其记录到日志文件中。\",\"// 设置错误报告级别 error_reporting(E_ALL); // 关闭错误显示 ini_set('display_errors', 0); // 将错误记录到日志文件 ini_set('log_errors', 1); ini_set('error_log', '/path/to/error.log'); \"]},\"587\":{\"h\":\"自定义错误处理函数\",\"t\":[\"你可以定义一个自定义的错误处理函数来处理运行时错误。这个函数接收错误代码、错误消息、错误发生的文件和行号等信息作为参数。\",\"function customErrorHandler($errno, $errstr, $errfile, $errline) { // 处理错误，如记录到日志或发送邮件通知管理员 } // 注册自定义错误处理函数 set_error_handler(\\\"customErrorHandler\\\"); \"]},\"588\":{\"h\":\"异常处理\",\"t\":[\"PHP也支持异常处理机制，你可以使用try-catch语句块来捕获和处理异常。当发生异常时，会自动跳转到catch块，并执行相应的处理代码。\",\"try { // 可能抛出异常的代码 } catch (Exception $e) { // 处理异常，如记录到日志或显示错误信息给用户 } \"]},\"589\":{\"h\":\"异常类\",\"t\":[\"PHP提供了一些内置的异常类，如Exception、RuntimeException等。你也可以自定义异常类来表示特定类型的异常，并在需要时抛出它们。\",\"class CustomException extends Exception { // 自定义异常类 } try { if (...) { throw new CustomException(\\\"发生自定义异常\\\"); } } catch (CustomException $e) { // 处理自定义异常 } \",\"合理运用错误处理机制可以帮助你识别和解决问题，提高程序的可靠性和稳定性。\"]},\"590\":{\"h\":\"匿名函数和闭包\",\"t\":[\"匿名函数和闭包是PHP中的两个高级特性，它们提供了更灵活的函数定义和使用方式。\",\"匿名函数（Anonymous Functions）： 匿名函数是一种没有具体名称的函数，它可以在需要的地方直接定义和使用，而无需事先声明。匿名函数在PHP中使用function () { }语法定义，可以赋值给变量、作为参数传递给其他函数或方法，甚至可以作为返回值。\",\"以下是一个示例，演示如何定义并调用一个匿名函数：\",\"$greeting = function ($name) { echo \\\"Hello, $name!\\\"; }; $greeting('John'); // 输出：Hello, John! \",\"闭包（Closures）： 闭包是一种特殊的匿名函数，它可以在其被定义的上下文之外访问和操作该上下文中的变量。简单来说，闭包可以记住并使用其创建时所在环境的变量。闭包在函数中使用use关键字来引入外部变量，并使用它们。\",\"以下是一个示例，展示了闭包的使用：\",\"function multiply($factor) { return function ($number) use ($factor) { return $number * $factor; }; } $triple = multiply(3); echo $triple(5); // 输出：15 \",\"在上面的示例中，multiply() 函数返回了一个闭包，它记住了传递给 multiply() 函数的 $factor 变量。这使得我们可以用闭包来创建一个特定因子的乘法器。\",\"匿名函数和闭包使得在PHP中能够更灵活地定义函数，并实现一些高级编程技术，如函数式编程或回调函数。它们为开发者提供了更多的工具和选项来处理复杂的逻辑和业务需求。\"]},\"591\":{\"h\":\"接口和抽象类\",\"t\":[\"PHP中的接口（Interface）和抽象类（Abstract Class）都是用来定义规范和共享代码的机制，它们有一些相似之处，但也有一些区别。\",\"接口（Interface）： 接口是一种规范的定义，它只定义了一个类应该实现哪些方法，但没有提供这些方法的具体实现。接口通过 interface 关键字进行定义，并通过 implements 关键字在类中实现。\",\"以下是一个示例，展示了接口的使用：\",\"interface Shape { public function calculateArea(); public function calculatePerimeter(); } class Circle implements Shape { private $radius; public function __construct($radius) { $this->radius = $radius; } public function calculateArea() { return pi() * $this->radius * $this->radius; } public function calculatePerimeter() { return 2 * pi() * $this->radius; } } \",\"在上面的示例中，Shape 接口定义了 calculateArea() 和 calculatePerimeter() 方法，任何实现该接口的类都必须提供这两个方法的实现。Circle 类通过 implements 关键字实现了 Shape 接口，并提供了相应方法的具体实现。\",\"抽象类（Abstract Class）： 抽象类是一种不能直接被实例化的类，它可以包含已经实现的代码和抽象方法。抽象方法只有方法的声明，没有具体实现。抽象类通过 abstract 关键字进行定义。其他类可以继承抽象类，并实现其中的抽象方法。\",\"以下是一个示例，展示了抽象类的使用：\",\"abstract class Animal { public function eat() { echo \\\"The animal is eating.\\\"; } abstract public function sound(); } class Cat extends Animal { public function sound() { echo \\\"Meow!\\\"; } } \",\"在上面的示例中，Animal 抽象类包含了 eat() 方法的具体实现以及 sound() 方法的抽象声明。Cat 类继承了 Animal 抽象类并实现了 sound() 方法。\",\"区别：\",\"接口可以被多个类同时实现（多重继承），而类只能继承一个父类。\",\"接口只能定义方法的签名，没有实现代码；抽象类既可以包含已经实现的代码，也可以包含抽象方法。\",\"类可以同时实现多个接口，但只能继承一个抽象类。\",\"抽象类可以有属性，而接口只能有常量。\",\"接口和抽象类都是用来帮助开发者设计和组织代码的工具，具体使用哪种方式取决于情况和需求。接口适合描述行为、定义契约和规范，而抽象类适合作为具体类的基类，提供通用的实现逻辑。\"]},\"592\":{\"h\":\"设计模式\",\"t\":[\"PHP是一种非常灵活和强大的编程语言，可以使用各种设计模式来优化代码结构、提高可维护性并实现面向对象的开发。以下是几种常见的PHP设计模式：\",\"工厂模式（Factory Pattern）：用于创建对象的模式，通过工厂类来封装对象的创建逻辑，使代码更具可扩展性和可维护性。\",\"单例模式（Singleton Pattern）：确保一个类只有一个实例，并提供全局访问点。常用于需要共享资源的场景，如数据库连接。\",\"观察者模式（Observer Pattern）：定义了一种一对多的依赖关系，当对象状态发生变化时，所有依赖它的对象都会得到通知和自动更新。\",\"装饰器模式（Decorator Pattern）：动态地为对象添加额外的功能，这种模式以对客户端透明的方式扩展对象的功能。\",\"适配器模式（Adapter Pattern）：将一个类的接口转换成客户端希望的另一个接口，使原本不兼容的类可以合作。\",\"策略模式（Strategy Pattern）：定义一系列算法，并且将每个算法封装起来，使它们可以互相替换，使得算法可以独立于使用它的客户端变化。\",\"迭代器模式（Iterator Pattern）：提供一种方法顺序访问一个聚合对象中各个元素，而又不需要暴露该对象的内部表示。\",\"MVC模式（Model-View-Controller Pattern）：将应用程序分为模型、视图和控制器三个部分，实现了代码的解耦和逻辑的分离。\",\"这只是一部分常见的PHP设计模式，每种设计模式都有其特定的应用场景和优劣势。在实际开发中，根据具体的需求和问题，选择合适的设计模式可以提高代码的结构性、可维护性和可扩展性。\"]},\"593\":{\"h\":\"文件操作\"},\"594\":{\"h\":\"打开和关闭文件\",\"t\":[\"可以使用fopen()函数打开文件，并使用fclose()函数关闭文件\",\"$file = fopen(\\\"example.txt\\\", \\\"r\\\"); // 读取文件内容或执行其他操作 fclose($file); \"]},\"595\":{\"h\":\"读取文件内容\",\"t\":[\"可以使用fread()函数或fgets()函数逐行读取文件内容\",\"$file = fopen(\\\"example.txt\\\", \\\"r\\\"); while (!feof($file)) { $line = fgets($file); // 处理每一行的内容 } fclose($file); \"]},\"596\":{\"h\":\"写入文件\",\"t\":[\"可以使用fwrite()函数向文件写入内容\",\"$file = fopen(\\\"example.txt\\\", \\\"w\\\"); fwrite($file, \\\"Hello, World!\\\"); fclose($file); \"]},\"597\":{\"h\":\"复制、重命名和删除文件\",\"t\":[\"可以使用copy()函数将文件复制到新位置，使用rename()函数修改文件名，使用unlink()函数删除文件。以下是一些示例：\",\"// 复制文件 copy(\\\"source.txt\\\", \\\"destination.txt\\\"); // 重命名文件 rename(\\\"old_name.txt\\\", \\\"new_name.txt\\\"); // 删除文件 unlink(\\\"file_to_delete.txt\\\"); \"]},\"598\":{\"h\":\"获取文件信息\",\"t\":[\"可以使用file_exists()函数检查文件是否存在，使用filesize()函数获取文件大小，使用filemtime()函数获取文件最后修改时间等\",\"$file = \\\"example.txt\\\"; if (file_exists($file)) { echo \\\"文件存在，大小为：\\\" . filesize($file) . \\\"字节\\\"; echo \\\"最后修改时间：\\\" . date(\\\"Y-m-d H:i:s\\\", filemtime($file)); } else { echo \\\"文件不存在\\\"; } \"]},\"599\":{\"h\":\"包含文件\",\"t\":[\"可以使用include和require语句来包含其他文件。这些语句用于将一个文件的内容嵌入到另一个文件中，使得你可以在一个文件中重复使用共享的代码。\",\"include语句会在脚本执行时包含指定的文件。如果包含的文件不存在或出现错误，脚本会继续执行，并发出一个警告。示例：\",\"<?php // 包含文件 example.php include 'example.php'; // 继续执行后续的代码 echo \\\"Hello, World!\\\"; ?> \",\"require语句也可用于包含文件，但如果包含的文件不存在或出现错误，脚本会停止执行，并产生一个致命错误。示例：\",\"<?php // 引用文件 example.php require 'example.php'; // 如果 example.php 中有错误，这行代码不会被执行 echo \\\"Hello, World!\\\"; ?> \",\"另外，还有几个相关的语句：\",\"include_once和require_once：与include和require类似，但只会包含文件一次。如果已经包含过该文件，再次调用时会被忽略。\",\"包含文件的路径可以是相对路径（相对于当前执行脚本的位置）或绝对路径（服务器上的完整路径）。你可以根据自己的需要选择适合的方式来包含文件。\"]},\"600\":{\"h\":\"数据库连接与操作\",\"t\":[\"可以使用各种方法与数据库进行连接和操作。以下是一个简单的示例，说明如何使用PHP连接到MySQL数据库并执行一些基本的数据库操作：\",\"连接到数据库：\",\"$servername = \\\"localhost\\\"; // 数据库服务器名称 $username = \\\"root\\\"; // 用户名 $password = \\\"password\\\"; // 密码 $database = \\\"mydatabase\\\"; // 数据库名称 // 创建数据库连接 $conn = new mysqli($servername, $username, $password, $database); // 检查连接是否成功 if ($conn->connect_error) { die(\\\"数据库连接失败: \\\" . $conn->connect_error); } else { echo \\\"数据库连接成功\\\"; } \",\"执行查询操作：查询数据库中的数据：\",\"// 查询语句 $sql = \\\"SELECT * FROM users\\\"; // 执行查询 $result = $conn->query($sql); // 检查结果是否为空 if ($result->num_rows > 0) { // 输出数据 while ($row = $result->fetch_assoc()) { echo \\\"ID: \\\" . $row[\\\"id\\\"] . \\\", Name: \\\" . $row[\\\"name\\\"] . \\\", Email: \\\" . $row[\\\"email\\\"] . \\\"<br>\\\"; } } else { echo \\\"没有结果\\\"; } \",\"执行插入操作：将新的数据插入到数据库中：\",\"$name = \\\"John\\\"; $email = \\\"john@example.com\\\"; // 插入语句 $sql = \\\"INSERT INTO users (name, email) VALUES ('$name', '$email')\\\"; // 执行插入 if ($conn->query($sql) === TRUE) { echo \\\"数据插入成功\\\"; } else { echo \\\"数据插入失败: \\\" . $conn->error; } \",\"执行更新操作：更新数据库中的现有数据：\",\"$id = 1; $newName = \\\"Jane\\\"; // 更新语句 $sql = \\\"UPDATE users SET name='$newName' WHERE id=$id\\\"; // 执行更新 if ($conn->query($sql) === TRUE) { echo \\\"数据更新成功\\\"; } else { echo \\\"数据更新失败: \\\" . $conn->error; } \",\"执行删除操作：从数据库中删除数据：\",\"$id = 1; // 删除语句 $sql = \\\"DELETE FROM users WHERE id=$id\\\"; // 执行删除 if ($conn->query($sql) === TRUE) { echo \\\"数据删除成功\\\"; } else { echo \\\"数据删除失败: \\\" . $conn->error; } \",\"关闭数据库连接：\",\"$conn->close(); \",\"这只是一个简单的示例，实际情况可能更加复杂。在实际应用中，为了安全性和防止SQL注入攻击，建议使用预处理语句（prepared statements）来执行数据库操作。此外，还有许多PHP库和框架可以简化数据库操作的过程，如PDO（PHP Data Object）和ORM（Object-Relational Mapping）工具等。\"]},\"601\":{\"h\":\"缓存技术\",\"t\":[\"为了提高网站的性能，PHP支持将计算结果缓存起来，避免重复计算。常见的缓存技术包括文件缓存、内存缓存（如Redis、Memcached）以及HTTP缓存。\",\"Opcode缓存：PHP代码在执行之前需要被解析和编译成可执行的Opcode。Opcode缓存可以将编译后的Opcode保存在内存中，以避免每次请求都进行解析和编译的开销。一些流行的Opcode缓存工具包括APC（Alternative PHP Cache）、OPcache和XCache。\",\"文件缓存：文件缓存是将动态生成的内容缓存到静态文件中，然后在后续请求中直接读取该文件，而不必重新生成内容。这对于一些页面或数据不经常变化的场景非常有效。您可以使用文件系统或者一些专门的库来实现文件缓存。\",\"内存缓存：内存缓存是将数据存储在内存中，以提高读取速度。常用的内存缓存软件包括Memcached和Redis。它们可以用于缓存数据库查询结果、API响应等，并且支持分布式部署。\",\"片段缓存：片段缓存是指将动态页面的某个片段缓存起来，而不是整个页面。只有当该片段发生变化时，才需要重新生成和更新缓存。这样可以降低服务器的负载并提高响应速度。可以使用一些缓存库或自定义代码来实现片段缓存。\",\"HTTP缓存：HTTP缓存是通过设置合适的HTTP头信息来缓存页面或资源。通过使用ETag、Last-Modified和Cache-Control等头部字段，可以让浏览器缓存页面，并在没有变化时直接从缓存中获取内容。这样可以减少服务器的负载并提供更快的用户体验。\"]},\"602\":{\"h\":\"安全性和防护\",\"t\":[\"在PHP开发过程中，必须注意安全问题，比如输入验证、防止SQL注入、XSS攻击、CSRF攻击等。请始终使用安全的编码实践，并仔细阅读并理解相关的安全建议和最佳实践。\",\"输入验证：始终对所有用户输入进行验证和过滤，以防止恶意代码注入和跨站脚本攻击（XSS）。使用过滤函数或正则表达式来检查用户输入的格式和内容，并确保只接受合法和预期的值。\",\"防止SQL注入：使用参数化查询或预处理语句来执行数据库操作，而不是直接将用户输入拼接到SQL查询中。这样可以防止恶意用户通过注入恶意SQL代码来破坏、窃取或操纵数据库数据。\",\"防止跨站请求伪造（CSRF）：对于需要进行敏感操作或修改数据的请求，使用CSRF令牌来验证请求的合法性。生成令牌并将其包含在表单中，然后在处理请求时验证令牌，确保请求来源是合法的。\",\"密码安全：加强用户密码的安全性。使用哈希函数和盐值对密码进行加密存储。建议使用现代且安全的哈希算法，如bcrypt或Argon2。避免使用简单、容易被猜测或常见的密码策略，推荐用户使用强密码。\",\"错误处理和日志记录：准确处理错误信息，并且不要在生产环境中显示详细的错误消息给用户。通过使用适当的错误处理机制将敏感信息记录到日志文件中，以便追踪和调试问题。\",\"安全框架和库：使用已经被广泛验证和审查的安全框架和库。这些框架和库通常提供了一系列安全功能和最佳实践，帮助您构建更安全的应用程序。\",\"定期更新和漏洞修复：及时更新PHP版本、扩展和库，以获取最新的安全修复和增强功能。保持与开发社区的联系，关注已知的安全漏洞，并采取相应的补救措施。\"]},\"603\":{\"h\":\"过滤器\",\"t\":[\"在PHP中，过滤器(Filter)是一种用于验证和过滤用户输入数据的工具。它可以帮助你确保接收到的数据符合预期的格式、类型和范围，并减少安全风险。\",\"PHP提供了一些内置的过滤器函数和过滤器常量，可以通过使用这些函数来过滤和验证数据。\",\"下面是一些常用的PHP过滤器：\",\"filter_var()：用于对单个变量进行过滤操作。\",\"$filteredData = filter_var($data, $filter, $options); \",\"filter_input()：用于从外部源（如$_GET、$_POST等）获取并过滤输入数据。\",\"$inputData = filter_input($input_type, $variable_name, $filter, $options); \",\"其中，$filter参数指定要应用的过滤器类型，可以是以下之一：\",\"FILTER_VALIDATE_INT：验证是否为整数\",\"FILTER_VALIDATE_FLOAT：验证是否为浮点数\",\"FILTER_VALIDATE_BOOLEAN：验证是否为布尔值\",\"FILTER_VALIDATE_EMAIL：验证是否为有效的电子邮件地址\",\"FILTER_VALIDATE_IP：验证是否为有效的IP地址\",\"FILTER_VALIDATE_URL：验证是否为有效的URL\",\"filter_var_array()：对数组中的多个变量进行过滤操作。\",\"过滤器选项：可以使用一些选项来进一步自定义过滤器的行为，如设置最小值、最大值，指定要接受的字符集等。\",\"此外，PHP还提供了许多其他过滤器函数，用于过滤和处理不同类型的数据，如filter_input_array()、filter_list()、filter_has_var()等。\",\"详细的过滤器列表和用法可以查阅官方文档，以了解更多关于PHP过滤器的信息：PHP 过滤器。\"]},\"604\":{\"h\":\"JSON\",\"t\":[\"在PHP中，你可以使用内置的函数来处理JSON数据。以下是一些常用的PHP JSON函数：\",\"json_encode()：将PHP数组或对象转换为JSON字符串。\",\"$jsonString = json_encode($data); \",\"json_decode()：将JSON字符串转换回PHP数组或对象。\",\"$data = json_decode($jsonString, true); // 返回关联数组 \",\"你也可以通过省略第二个参数来返回一个对象。\",\"json_last_error()：获取最后发生的JSON操作的错误码。\",\"$errorCode = json_last_error(); \",\"json_last_error_msg()：获取最后发生的JSON操作的错误信息。\",\"$errorMessage = json_last_error_msg(); \",\"上述函数允许你在PHP中进行编码和解码JSON数据。通过json_encode()函数，你可以将PHP数据转换为JSON格式，以便存储、传输或与其他平台交互。而使用json_decode()函数，则可以将接收到的JSON数据解析成PHP可用的形式。\",\"值得注意的是，在转换过程中，PHP的JSON函数支持的数据类型和特性可能有所限制。例如，资源类型无法被编码为JSON。你还应注意安全问题，并验证和过滤你从外部来源接收的JSON数据，以防止潜在的安全漏洞。\",\"更多关于PHP中处理JSON的详细信息，请查阅官方文档：PHP JSON 函数。\",\"强类型声明（Scalar Type Declarations）：PHP 7开始支持强制标量类型声明，包括int、float、string和bool。通过类型声明，可以增强代码的可读性和可靠性。\",\"返回类型声明（Return Type Declarations）：PHP 7开始支持对函数和方法的返回类型进行声明。可以指定函数或方法的返回值类型，例如int、string或自定义类等，有助于提高代码的清晰度和可理解性。\",\"空合并运算符（Null Coalescing Operator）：PHP 7引入了??运算符，用于简化处理变量为空时的默认赋值操作。例如，$value = $x ?? $default;如果$x存在，则$value被赋值为$x的值；如果$x不存在或为null，则$value被赋值为$default。\",\"太空船操作符（Spaceship Operator）：PHP 7引入了太空船操作符（<=>），用于比较两个表达式的大小关系。它返回一个负整数、零或正整数，表示左操作数小于、等于或大于右操作数。\",\"匿名类（Anonymous Classes）：PHP 7引入了匿名类的概念，允许在运行时动态地创建临时的对象。匿名类可以直接实例化，并且可以继承自其他类或实现接口。\",\"运算符声明（Operator Declarations）：PHP 7.1开始支持通过关键字declare来定义运算符的优先级和关联性。这使得开发人员能够更好地控制运算符的使用方式，提高代码的可读性。\",\"正则表达式改进：PHP 7引入了一些正则表达式的增强功能，包括命名捕获组和Unicode编码支持。这些改进使得正则表达式的处理更加强大和灵活。\",\"废弃的api\",\"mysql扩展：mysql扩展在PHP 7.0中被废弃，并在PHP 7.1中完全移除。推荐使用mysqli或PDO扩展来连接和操作MySQL数据库。\",\"ereg函数系列：ereg、eregi、split、spliti等正则表达式相关函数，在PHP 7.0中被废弃，并在PHP 7.3中完全移除。推荐使用PCRE（Perl Compatible Regular Expressions）扩展提供的函数或preg系列函数来处理正则表达式。\",\"create_function函数：create_function函数在PHP 7.2中被废弃，并在PHP 8.0中完全移除。它用于动态创建匿名函数，现在建议使用闭包（Closure）代替。\",\"mcrypt扩展：mcrypt扩展在PHP 7.1中被废弃，并在PHP 7.2中完全移除。这个扩展提供了对数据加密和解密的函数，不过由于其设计存在安全性问题，推荐使用更安全的加密库如OpenSSL。\",\"image2wbmp函数：image2wbmp函数在PHP 7.4中被废弃，并在未来版本中可能会被移除。该函数用于将GD图像转换为WBMP格式，但由于WBMP格式的使用相对较少，所以决定废弃该函数。\",\"Laravel：Laravel 是目前最流行的 PHP 框架之一，它提供了简洁、优雅的语法和丰富的功能。Laravel 具有强大的路由系统、数据库抽象层、身份认证、缓存、队列等功能，并且拥有活跃的社区支持。\",\"Symfony：Symfony 是另一个广泛采用的 PHP 框架，它被设计为高性能、灵活可扩展的框架。Symfony 提供了组件化的结构，可以根据需要选择所需的组件来构建应用程序。\",\"CodeIgniter：CodeIgniter 是一个轻量级的 PHP 框架，适用于那些对速度和简单性有要求的项目。它具有简洁的代码库和直观的文件结构，易于学习和使用。\",\"Yii：Yii 是一个高性能的 PHP 框架，适用于开发大型企业级应用程序。它具有强大的缓存机制、安全性特性以及丰富的扩展性和易用性。\",\"Phalcon：Phalcon 是一个以 C 语言编写的高性能 PHP 框架，它被设计为快速且减少资源消耗。Phalcon 提供了一组功能丰富的库和工具，并与其他主流框架兼容。\",\"ThinkPHP：ThinkPHP 是一款开源的 PHP 框架，它简单易用、功能强大，并且有着较好的扩展性\"]}},\"dirtCount\":0,\"index\":[[\"队列等功能\",{\"1\":{\"604\":1}}],[\"废弃的api\",{\"1\":{\"604\":1}}],[\"匿名类可以直接实例化\",{\"1\":{\"604\":1}}],[\"匿名类\",{\"1\":{\"604\":1}}],[\"匿名函数在php中使用function\",{\"1\":{\"590\":1}}],[\"匿名函数是一种没有具体名称的函数\",{\"1\":{\"590\":1}}],[\"匿名函数和闭包使得在php中能够更灵活地定义函数\",{\"1\":{\"590\":1}}],[\"匿名函数和闭包是php中的两个高级特性\",{\"1\":{\"590\":1}}],[\"匿名函数和闭包\",{\"0\":{\"590\":1}}],[\"匿名函数通常会作为其他函数的参数或立即执行\",{\"1\":{\"313\":1}}],[\"匿名函数表达式\",{\"1\":{\"258\":1}}],[\"匿名函数\",{\"1\":{\"258\":1,\"313\":1,\"539\":1,\"590\":1}}],[\"零或正整数\",{\"1\":{\"604\":1}}],[\"零配置构建等\",{\"1\":{\"497\":1}}],[\"太空船操作符\",{\"1\":{\"604\":1}}],[\"详细的过滤器列表和用法可以查阅官方文档\",{\"1\":{\"603\":1}}],[\"详细来说\",{\"1\":{\"261\":1}}],[\"准确处理错误信息\",{\"1\":{\"602\":1}}],[\"准确的api文档\",{\"1\":{\"371\":1}}],[\"窃取或操纵数据库数据\",{\"1\":{\"602\":1}}],[\"始终对所有用户输入进行验证和过滤\",{\"1\":{\"602\":1}}],[\"始终可以得到相同的结果\",{\"1\":{\"404\":1}}],[\"策略模式\",{\"1\":{\"592\":1}}],[\"观察者模式\",{\"1\":{\"592\":1}}],[\"工具等\",{\"1\":{\"600\":1}}],[\"工厂模式\",{\"1\":{\"592\":1}}],[\"工作原理\",{\"0\":{\"426\":1}}],[\"抽象方法只有方法的声明\",{\"1\":{\"591\":1}}],[\"抽象类可以有属性\",{\"1\":{\"591\":1}}],[\"抽象类既可以包含已经实现的代码\",{\"1\":{\"591\":1}}],[\"抽象类并实现了\",{\"1\":{\"591\":1}}],[\"抽象类包含了\",{\"1\":{\"591\":1}}],[\"抽象类通过\",{\"1\":{\"591\":1}}],[\"抽象类是一种不能直接被实例化的类\",{\"1\":{\"591\":1}}],[\"抽象类\",{\"1\":{\"591\":1}}],[\"抽象和通用算法\",{\"1\":{\"466\":1}}],[\"任何实现该接口的类都必须提供这两个方法的实现\",{\"1\":{\"591\":1}}],[\"任务队列使我们能够以一种有序和非阻塞的方式处理这些异步任务\",{\"1\":{\"270\":1}}],[\"任务队列并非仅限于定时器和网络请求\",{\"1\":{\"270\":1}}],[\"任务队列确保异步任务按照它们添加到队列中的顺序被执行\",{\"1\":{\"270\":1}}],[\"任务队列是一种先进先出\",{\"1\":{\"270\":1}}],[\"任务队列是用于管理和调度异步任务的一种数据结构\",{\"1\":{\"270\":1}}],[\"任务队列的基本概念如下\",{\"1\":{\"270\":1}}],[\"任务队列通常与事件循环搭配使用\",{\"1\":{\"270\":1}}],[\"任务队列\",{\"0\":{\"270\":1},\"1\":{\"270\":1}}],[\"甚至可以作为返回值\",{\"1\":{\"590\":1}}],[\"甚至是命令行终端中的界面\",{\"1\":{\"61\":1}}],[\"尤其在大型项目中特别有用\",{\"1\":{\"584\":1}}],[\"尤其是现代前端开发\",{\"1\":{\"200\":1}}],[\"尤其是在数据量很大的情况下\",{\"1\":{\"53\":1}}],[\"刹车\",{\"1\":{\"583\":1}}],[\"价格\",{\"1\":{\"583\":1}}],[\"品牌\",{\"1\":{\"583\":1}}],[\"私有的成员只能在所属类内部访问\",{\"1\":{\"583\":1}}],[\"私有访问修饰符\",{\"1\":{\"312\":1}}],[\"公开的成员可以在任何地方访问\",{\"1\":{\"583\":1}}],[\"公司注册为商标\",{\"1\":{\"164\":1}}],[\"公司可以合法地使用\",{\"1\":{\"164\":1}}],[\"公司的商标\",{\"1\":{\"164\":1}}],[\"公司\",{\"1\":{\"164\":1}}],[\"缩写\",{\"1\":{\"583\":1}}],[\"缩放和倾斜等来实现各种炫酷的效果\",{\"1\":{\"150\":1}}],[\"缩放\",{\"1\":{\"121\":1,\"150\":1}}],[\"英语\",{\"1\":{\"583\":1}}],[\"邮箱和留言字段\",{\"1\":{\"580\":1}}],[\"邮箱是必填项\",{\"1\":{\"580\":1}}],[\"务必要注意安全性\",{\"1\":{\"580\":1}}],[\"交换数组中的键和值\",{\"1\":{\"578\":1}}],[\"交叉类型\",{\"1\":{\"319\":1}}],[\"交叉类型等复杂的类型\",{\"1\":{\"318\":1}}],[\"格式化日期和时间\",{\"1\":{\"570\":1}}],[\"格式定义矢量图形\",{\"1\":{\"237\":1}}],[\"乘积为\",{\"1\":{\"568\":2}}],[\"乘法运算符\",{\"1\":{\"254\":2,\"551\":1}}],[\"乘法和除法\",{\"1\":{\"254\":1}}],[\"蓝色\",{\"1\":{\"563\":1}}],[\"绿色\",{\"1\":{\"563\":1}}],[\"红色\",{\"1\":{\"563\":1}}],[\"星期二\",{\"1\":{\"557\":1}}],[\"星期一\",{\"1\":{\"557\":1}}],[\"待提高\",{\"1\":{\"556\":1}}],[\"良好\",{\"1\":{\"556\":1}}],[\"良好的命名和文档\",{\"1\":{\"466\":1}}],[\"良好的测试和调试实践可以提高应用程序的质量\",{\"1\":{\"372\":1}}],[\"去除首尾空格\",{\"0\":{\"548\":1}}],[\"去除字符串开头和结尾的空白字符\",{\"1\":{\"256\":1}}],[\"截取字符串的一部分\",{\"1\":{\"570\":1}}],[\"截取\",{\"0\":{\"545\":1}}],[\"松散比较\",{\"1\":{\"540\":1}}],[\"​\",{\"1\":{\"533\":1,\"557\":1}}],[\"八进制数\",{\"1\":{\"531\":1}}],[\"八进制表示\",{\"1\":{\"169\":1}}],[\"十六进制数\",{\"1\":{\"531\":1}}],[\"十六进制\",{\"1\":{\"531\":1}}],[\"十进制\",{\"1\":{\"531\":1}}],[\"里定义一个字符串的方法\",{\"1\":{\"527\":1}}],[\"像perl\",{\"1\":{\"527\":1}}],[\"像素是最常用的单位\",{\"1\":{\"145\":1}}],[\"像素\",{\"1\":{\"145\":1}}],[\"换行符\",{\"1\":{\"524\":1,\"540\":1}}],[\"他会根据上下文去推断数据类型\",{\"1\":{\"523\":1}}],[\"他们可以通过拉取和推送操作来同步仓库和分支\",{\"1\":{\"337\":1}}],[\"他们可以将自己的分支合并到主分支或其他目标分支中\",{\"1\":{\"337\":1}}],[\"他们会审查代码并提出修改意见\",{\"1\":{\"337\":1}}],[\"申明变量不必声明变量的数据类型\",{\"1\":{\"523\":1}}],[\"魔术变量\",{\"1\":{\"521\":1}}],[\"魔术常量\",{\"0\":{\"521\":1}}],[\"欢迎访问\",{\"1\":{\"519\":5,\"520\":2}}],[\"区分大小写的常量名\",{\"1\":{\"519\":1}}],[\"区分大小写的常量\",{\"1\":{\"519\":1}}],[\"区别\",{\"1\":{\"515\":1,\"591\":1}}],[\"很有趣\",{\"1\":{\"515\":1}}],[\"很好地集成在一起\",{\"1\":{\"400\":1}}],[\"快\",{\"1\":{\"515\":1}}],[\"快速失败并发执行异步任务\",{\"1\":{\"198\":1}}],[\"恭喜\",{\"1\":{\"508\":1}}],[\"终端\",{\"1\":{\"508\":1}}],[\"终止条件\",{\"1\":{\"269\":1}}],[\"说明如何使用php连接到mysql数据库并执行一些基本的数据库操作\",{\"1\":{\"600\":1}}],[\"说明安装成功\",{\"1\":{\"507\":1}}],[\"说明该对象不再被访问\",{\"1\":{\"276\":1}}],[\"窗口\",{\"1\":{\"507\":1,\"508\":1}}],[\"长度\",{\"0\":{\"543\":1}}],[\"长期支持\",{\"1\":{\"507\":1}}],[\"长效缓存的基本思想是给每个输出的文件\",{\"1\":{\"483\":1}}],[\"聊天应用\",{\"1\":{\"506\":1}}],[\"精简代码和资源\",{\"1\":{\"504\":1}}],[\"论坛和博客\",{\"1\":{\"503\":1}}],[\"逐步缩小问题所在的范围\",{\"1\":{\"501\":1}}],[\"逐步重构或排除因素\",{\"0\":{\"501\":1}}],[\"逐级向上查找\",{\"1\":{\"261\":1}}],[\"池和更高效的缓存策略\",{\"1\":{\"497\":1}}],[\"改进的错误处理和消息输出\",{\"1\":{\"497\":1}}],[\"改进的缓存组\",{\"1\":{\"497\":1}}],[\"改进的打包分析和优化工具\",{\"1\":{\"497\":1}}],[\"改进的多线程构建\",{\"1\":{\"497\":1}}],[\"改进了代码摇树\",{\"1\":{\"497\":1}}],[\"深入理解webpack\",{\"0\":{\"484\":1}}],[\"深拷贝方法有时会有性能和限制方面的考量\",{\"1\":{\"281\":1}}],[\"深拷贝创建一个全新的对象或数组\",{\"1\":{\"281\":1}}],[\"深拷贝\",{\"1\":{\"281\":1}}],[\"占位符来添加哈希值\",{\"1\":{\"483\":1}}],[\"占据了其首字母\",{\"1\":{\"340\":1}}],[\"排除node\",{\"1\":{\"476\":1}}],[\"排序会修改原数组\",{\"1\":{\"257\":1}}],[\"排序\",{\"1\":{\"257\":1}}],[\"排序和limit子句\",{\"1\":{\"135\":1}}],[\"源映射是一种将压缩后的代码映射回原始源代码的文件\",{\"1\":{\"468\":1}}],[\"库和框架使用\",{\"1\":{\"466\":1}}],[\"库的一部分\",{\"1\":{\"394\":1}}],[\"临时路径\",{\"1\":{\"581\":1}}],[\"临时文件路径等\",{\"1\":{\"521\":1}}],[\"临时数据等\",{\"1\":{\"465\":1}}],[\"临时重定向\",{\"1\":{\"354\":1}}],[\"促进了插件共享和社区合作\",{\"1\":{\"464\":1}}],[\"许多应用程序框架和工具都采用了插件系统\",{\"1\":{\"464\":1}}],[\"许多远程仓库服务提供问题跟踪功能\",{\"1\":{\"337\":1}}],[\"卸载指定的模块\",{\"1\":{\"510\":1}}],[\"卸载模块\",{\"1\":{\"510\":1}}],[\"卸载\",{\"1\":{\"464\":1}}],[\"卸载阶段\",{\"1\":{\"22\":1}}],[\"覆盖了几乎所有前端开发中可能遇到的资源处理需求\",{\"1\":{\"463\":1}}],[\"社区loader\",{\"1\":{\"463\":1}}],[\"社区支持\",{\"1\":{\"363\":1}}],[\"链式调用\",{\"1\":{\"463\":1}}],[\"链接才会被激活\",{\"1\":{\"394\":1}}],[\"链接\",{\"0\":{\"224\":1},\"1\":{\"507\":1}}],[\"配合使用\",{\"1\":{\"462\":1}}],[\"配置压缩\",{\"1\":{\"504\":1}}],[\"配置webpack的module\",{\"1\":{\"471\":1}}],[\"配置loader\",{\"1\":{\"463\":1}}],[\"配置反向代理\",{\"1\":{\"461\":1}}],[\"配置了将以\",{\"1\":{\"461\":1}}],[\"配置了一个简单的devserver\",{\"1\":{\"461\":1}}],[\"配置了导入模块时的别名\",{\"1\":{\"460\":1}}],[\"配置了模块解析时尝试的文件扩展名\",{\"1\":{\"460\":1}}],[\"配置了解析模块时搜索的目录\",{\"1\":{\"460\":1}}],[\"配置了带有参数的动态路径片段的路由会优先匹配\",{\"1\":{\"414\":1}}],[\"配置不同的加载器\",{\"1\":{\"455\":1}}],[\"配置开发服务器\",{\"1\":{\"454\":1,\"475\":1}}],[\"配置优化选项\",{\"1\":{\"454\":1}}],[\"配置模块解析的选项\",{\"1\":{\"454\":1}}],[\"配置插件\",{\"1\":{\"454\":1}}],[\"配置插件选项\",{\"1\":{\"439\":1}}],[\"配置加载器\",{\"1\":{\"454\":1}}],[\"配置文件使用commonjs规范进行导出\",{\"1\":{\"454\":1}}],[\"配置文件允许你自定义webpack的行为\",{\"1\":{\"454\":1}}],[\"配置文件\",{\"0\":{\"454\":1}}],[\"配置\",{\"0\":{\"450\":1}}],[\"配置vuex\",{\"1\":{\"438\":1}}],[\"配置vue应用\",{\"1\":{\"438\":1}}],[\"配置路由信息和对应的组件\",{\"1\":{\"412\":1}}],[\"配置路由\",{\"1\":{\"412\":1}}],[\"配置和使用不同的模式\",{\"0\":{\"479\":1}}],[\"配置和管理插件\",{\"1\":{\"464\":1}}],[\"配置和优化服务器参数\",{\"1\":{\"132\":1}}],[\"配置和维护的过程\",{\"1\":{\"88\":1}}],[\"配置mysql服务器\",{\"1\":{\"132\":1}}],[\"哪些代码未被使用\",{\"1\":{\"462\":1}}],[\"哪些文件已被添加到暂存区等信息\",{\"1\":{\"334\":1}}],[\"别名时\",{\"1\":{\"460\":1}}],[\"别名配置\",{\"1\":{\"454\":1}}],[\"绝对路径解析\",{\"1\":{\"460\":1}}],[\"绝对定位\",{\"1\":{\"147\":1}}],[\"热\",{\"1\":{\"459\":1}}],[\"热模块替换\",{\"0\":{\"459\":1},\"1\":{\"453\":2,\"457\":1,\"459\":1,\"461\":1}}],[\"防止跨站请求伪造\",{\"1\":{\"602\":1}}],[\"防止sql注入\",{\"1\":{\"602\":2}}],[\"防止安全漏洞\",{\"1\":{\"580\":1}}],[\"防止重复\",{\"1\":{\"458\":1}}],[\"防止浏览器默认行为聚焦到其他元素上\",{\"1\":{\"70\":1}}],[\"入口点是指webpack开始处理的javascript文件\",{\"1\":{\"485\":1}}],[\"入口点\",{\"0\":{\"485\":1}}],[\"入口点分割\",{\"1\":{\"480\":1}}],[\"入口文件路径\",{\"1\":{\"475\":1}}],[\"入口起点\",{\"1\":{\"458\":1}}],[\"入口指定webpack开始构建的入口模块\",{\"1\":{\"453\":1}}],[\"入口\",{\"1\":{\"453\":1}}],[\"核心概念\",{\"0\":{\"453\":1}}],[\"便捷和可维护\",{\"1\":{\"448\":1}}],[\"便于维护和重用\",{\"1\":{\"63\":1}}],[\"便于开发和维护复杂的ui界面\",{\"1\":{\"8\":1}}],[\"仍然需要使用模块名来访问\",{\"1\":{\"444\":1}}],[\"仍然可以访问和引用\",{\"1\":{\"268\":1}}],[\"仍然可以访问到新添加的方法\",{\"1\":{\"267\":1}}],[\"启用多线程构建\",{\"1\":{\"504\":1}}],[\"启用长期缓存\",{\"1\":{\"504\":1}}],[\"启用source\",{\"1\":{\"500\":1}}],[\"启用和禁用插件\",{\"1\":{\"464\":1}}],[\"启用tree\",{\"1\":{\"462\":1}}],[\"启用了热模块替换功能\",{\"1\":{\"461\":1}}],[\"启用了命名空间的模块中的状态\",{\"1\":{\"444\":1}}],[\"启用热模块替换\",{\"1\":{\"461\":1}}],[\"启动\",{\"1\":{\"583\":1}}],[\"启动devserver后\",{\"1\":{\"461\":1}}],[\"启动应用程序\",{\"1\":{\"364\":1,\"367\":1,\"368\":1}}],[\"启动应用并监听端口\",{\"1\":{\"364\":1}}],[\"启动mysql服务器\",{\"1\":{\"132\":1}}],[\"明确指定模块的名称\",{\"1\":{\"444\":1}}],[\"批量修改状态\",{\"1\":{\"443\":1}}],[\"批量操作\",{\"1\":{\"128\":1}}],[\"名为increment\",{\"1\":{\"441\":1}}],[\"名称都会发生变化\",{\"1\":{\"495\":1}}],[\"名称\",{\"1\":{\"243\":1}}],[\"我定义了一个名为\",{\"1\":{\"537\":1}}],[\"我车的品牌是\",{\"1\":{\"515\":1}}],[\"我要学\",{\"1\":{\"515\":1}}],[\"我将为你提供一个简单的vuex应用程序示例\",{\"1\":{\"440\":1}}],[\"我们假设在vuex的store中定义了名为increment\",{\"1\":{\"441\":1}}],[\"我们指定了要持久化的模块为\",{\"1\":{\"439\":1}}],[\"我们简单地打印出了提交的mutation类型和新的state\",{\"1\":{\"437\":1}}],[\"我们返回了一个包含页面标题的对象\",{\"1\":{\"422\":1}}],[\"我们设置了默认重定向路径为\",{\"1\":{\"418\":1}}],[\"我们设置了网格项之间的间距为10px\",{\"1\":{\"156\":1}}],[\"我们就可以根据不同的路由路径来展示不同的内容\",{\"1\":{\"413\":1}}],[\"我们就可以在vue\",{\"1\":{\"415\":1}}],[\"我们就可以在vue项目中使用动态路由了\",{\"1\":{\"413\":1}}],[\"我们就可以在模板中使用这个异步组件了\",{\"1\":{\"95\":1}}],[\"我们有一个名为home的组件\",{\"1\":{\"412\":1}}],[\"我们有一个全局变量globalvariable\",{\"1\":{\"261\":1}}],[\"我们实现了一个简单的计数器应用\",{\"1\":{\"406\":1}}],[\"我们实现了next\",{\"1\":{\"184\":1}}],[\"我们展示了如何使用redux\",{\"1\":{\"405\":1}}],[\"我们展示了redux的工作原理\",{\"1\":{\"403\":1}}],[\"我们根据redux状态中的loading和error字段展示不同的信息\",{\"1\":{\"405\":1}}],[\"我们触发fetch\",{\"1\":{\"405\":1}}],[\"我们触发一个fetch\",{\"1\":{\"405\":1}}],[\"我们希望通过异步操作获取用户数据\",{\"1\":{\"405\":1}}],[\"我们派发相应的redux\",{\"1\":{\"403\":1}}],[\"我们派发decrement\",{\"1\":{\"403\":1}}],[\"我们派发increment\",{\"1\":{\"403\":1}}],[\"我们的reducer根据不同的action类型来更新状态\",{\"1\":{\"403\":1}}],[\"我们定义一个reducer函数来处理计数器的状态变化\",{\"1\":{\"403\":1}}],[\"我们定义了四个路由\",{\"1\":{\"415\":1}}],[\"我们定义了两个路由规则\",{\"1\":{\"413\":1}}],[\"我们定义了两个组件\",{\"1\":{\"413\":1}}],[\"我们定义了两个变量\",{\"1\":{\"161\":2}}],[\"我们定义了两个类名\",{\"1\":{\"98\":1}}],[\"我们定义了网格容器的两列\",{\"1\":{\"156\":1}}],[\"我们定义了一个根路径为\",{\"1\":{\"417\":2}}],[\"我们定义了一个初始状态\",{\"1\":{\"403\":1}}],[\"我们定义了一个\",{\"1\":{\"312\":5,\"330\":2}}],[\"我们定义了一个loadimageasync函数\",{\"1\":{\"264\":1}}],[\"我们定义了一个loadimage函数\",{\"1\":{\"264\":1}}],[\"我们定义了一个person对象\",{\"1\":{\"259\":1}}],[\"我们定义了一个obj对象\",{\"1\":{\"184\":1}}],[\"我们定义了一个按钮和一个具有过渡效果的元素\",{\"1\":{\"98\":1}}],[\"我们定义了一个混入对象mymixin\",{\"1\":{\"97\":1}}],[\"我们定义了一个子组件childcomponent\",{\"1\":{\"96\":1}}],[\"我们定义了一个名为\",{\"1\":{\"86\":1,\"92\":1,\"310\":1,\"314\":1,\"569\":1,\"579\":1}}],[\"我们定义了一个reducer函数来处理状态的更新逻辑\",{\"1\":{\"41\":1}}],[\"我们也可以根据需要自定义转场动画\",{\"1\":{\"395\":1}}],[\"我们也输出了一些同步代码\",{\"1\":{\"270\":1}}],[\"我们需要在路由配置文件\",{\"1\":{\"420\":1}}],[\"我们需要在应用的入口点渲染\",{\"1\":{\"394\":1}}],[\"我们需要定义一个reducer来处理这些action\",{\"1\":{\"405\":1}}],[\"我们需要将redux\",{\"1\":{\"403\":1}}],[\"我们需要创建redux\",{\"1\":{\"403\":1}}],[\"我们需要安装redux和react\",{\"1\":{\"406\":1}}],[\"我们需要安装redux库\",{\"1\":{\"403\":1}}],[\"我们需要安装\",{\"1\":{\"394\":1}}],[\"我们告诉\",{\"1\":{\"310\":1}}],[\"我们给第一个常量\",{\"1\":{\"310\":1}}],[\"我们给选中的按钮注册了一个点击事件监听器\",{\"1\":{\"272\":1}}],[\"我们检查元素是否可见\",{\"1\":{\"265\":1}}],[\"我们克隆了一个元素\",{\"1\":{\"265\":1}}],[\"我们创建一个vuex\",{\"1\":{\"440\":1}}],[\"我们创建一个redux\",{\"1\":{\"406\":1}}],[\"我们创建一个\",{\"1\":{\"330\":1}}],[\"我们创建一个新的div元素\",{\"1\":{\"265\":1}}],[\"我们创建了一个简单的待办事项列表应用程序\",{\"1\":{\"407\":1}}],[\"我们创建了一个简单的发布\",{\"1\":{\"272\":1}}],[\"我们创建了一个闭包\",{\"1\":{\"268\":1}}],[\"我们创建了一个新的div元素\",{\"1\":{\"265\":1}}],[\"我们创建了一个混合器\",{\"1\":{\"161\":1}}],[\"我们创建了一个混合器gradient\",{\"1\":{\"161\":2}}],[\"我们创建了一个\",{\"1\":{\"87\":1,\"312\":2}}],[\"我们创建了一个名为handlestatechange的回调函数\",{\"1\":{\"401\":1}}],[\"我们创建了一个名为myplugin的插件对象\",{\"1\":{\"437\":1}}],[\"我们创建了一个名为my\",{\"1\":{\"97\":1}}],[\"我们创建了一个名为\",{\"1\":{\"92\":1,\"150\":1,\"152\":1}}],[\"我们创建了一个名为usecounter的自定义hooks\",{\"1\":{\"42\":1}}],[\"我们创建了一个名为themecontext的context对象\",{\"1\":{\"41\":1}}],[\"我们创建了一个名为app的函数组件\",{\"1\":{\"19\":1}}],[\"我们获取了元素的自定义属性\",{\"1\":{\"265\":1}}],[\"我们获取了父元素的子元素数量\",{\"1\":{\"265\":1}}],[\"我们添加了一个css类\",{\"1\":{\"265\":1}}],[\"我们修改了元素的颜色和字体大小\",{\"1\":{\"265\":1}}],[\"我们修改了元素的文本内容\",{\"1\":{\"265\":1}}],[\"我们从父元素中移除了一个子元素\",{\"1\":{\"265\":1}}],[\"我们调用loadimage函数\",{\"1\":{\"264\":1}}],[\"我们可能希望立即中止其他任务的执行\",{\"1\":{\"198\":1}}],[\"我们可以扩展vuex的功能\",{\"1\":{\"437\":1}}],[\"我们可以定义一个名为user的路由\",{\"1\":{\"420\":1}}],[\"我们可以定义一组路由规则\",{\"1\":{\"394\":1}}],[\"我们可以根据不同的需求\",{\"1\":{\"413\":1}}],[\"我们可以根据需要使用这个参数\",{\"1\":{\"391\":1}}],[\"我们可以根据需要选择适合的特性和方法\",{\"1\":{\"152\":1}}],[\"我们可以调用相应的操作函数来更新redux中的状态\",{\"1\":{\"407\":1}}],[\"我们可以调用相应子类的方法\",{\"1\":{\"312\":1}}],[\"我们可以构建更复杂和可扩展的应用程序\",{\"1\":{\"406\":1}}],[\"我们可以创建多个对象\",{\"1\":{\"579\":1}}],[\"我们可以创建一个订阅函数来打印每次状态变化时的日志\",{\"1\":{\"401\":1}}],[\"我们可以创建一个action对象并将其派发到store中\",{\"1\":{\"401\":1}}],[\"我们可以创建组件的ui结构\",{\"1\":{\"22\":1}}],[\"我们可以更好地组织和管理应用程序的状态\",{\"1\":{\"425\":1}}],[\"我们可以更好地组织和管理常量\",{\"1\":{\"314\":1}}],[\"我们可以更加灵活和强大地管理路由过渡\",{\"1\":{\"395\":1}}],[\"我们可以更简洁地定义路由过渡\",{\"1\":{\"395\":1}}],[\"我们可以监视路由的变化并根据需要执行过渡操作\",{\"1\":{\"395\":1}}],[\"我们可以对类进行任意操作\",{\"1\":{\"324\":1}}],[\"我们可以对html文档进行增加\",{\"1\":{\"129\":1}}],[\"我们可以限制属性和方法的访问范围\",{\"1\":{\"312\":1}}],[\"我们可以明确指定对象应该具备的结构和行为\",{\"1\":{\"312\":1}}],[\"我们可以确保对象符合特定的结构\",{\"1\":{\"312\":1}}],[\"我们可以捕获和处理可能出现的错误\",{\"1\":{\"272\":1}}],[\"我们可以在回调中对模块进行操作\",{\"1\":{\"467\":1}}],[\"我们可以在访问模块中的状态\",{\"1\":{\"444\":1}}],[\"我们可以在app\",{\"1\":{\"420\":1}}],[\"我们可以在user组件的模板中显示用户的id\",{\"1\":{\"420\":1}}],[\"我们可以在页面中同时显示多个视图\",{\"1\":{\"417\":1}}],[\"我们可以在同一个页面中同时展示多个视图\",{\"1\":{\"417\":1}}],[\"我们可以在一个路由配置的子项中再次配置路由\",{\"1\":{\"415\":1}}],[\"我们可以在一些需要多样化类型支持的场景下\",{\"1\":{\"320\":1}}],[\"我们可以在应用中使用<counter>组件\",{\"1\":{\"406\":1}}],[\"我们可以在应用的根组件中定义路由\",{\"1\":{\"394\":1}}],[\"我们可以在状态变化时执行各种操作\",{\"1\":{\"401\":1}}],[\"我们可以在redux中实现各种不同的状态操作\",{\"1\":{\"401\":2}}],[\"我们可以在代码中判断一个变量是否具有特定的类型\",{\"1\":{\"317\":1}}],[\"我们可以在程序中使用和操作这些数据\",{\"1\":{\"311\":1}}],[\"我们可以在\",{\"1\":{\"272\":1}}],[\"我们可以看到异步任务是如何通过任务队列和事件循环来进行管理和调度的\",{\"1\":{\"270\":1}}],[\"我们可以执行其他操作\",{\"1\":{\"264\":1}}],[\"我们可以实现在状态变化时执行自定义操作的需求\",{\"1\":{\"401\":1}}],[\"我们可以实现更加平滑和连续的页面切换效果\",{\"1\":{\"395\":1}}],[\"我们可以实现对象之间的继承和共享\",{\"1\":{\"267\":1}}],[\"我们可以实现高效的异步编程\",{\"1\":{\"264\":1}}],[\"我们可以实现并发加载多张图片\",{\"1\":{\"264\":1}}],[\"我们可以实现多个组件共享相同的计数逻辑和方法\",{\"1\":{\"97\":1}}],[\"我们可以访问并操作对象的属性和方法\",{\"1\":{\"259\":1}}],[\"我们可以通过以下代码来定义这个汽车类\",{\"1\":{\"583\":1}}],[\"我们可以通过以下方式定义和使用函数\",{\"1\":{\"313\":1}}],[\"我们可以通过对象访问属性和方法\",{\"1\":{\"579\":1}}],[\"我们可以通过\",{\"1\":{\"422\":1}}],[\"我们可以通过$route\",{\"1\":{\"420\":1}}],[\"我们可以通过在vuerouter实例中的routes配置项来定义路由\",{\"1\":{\"415\":1}}],[\"我们可以通过比较枚举值来进行条件判断\",{\"1\":{\"314\":1}}],[\"我们可以通过枚举的名称和常量名来访问枚举的成员\",{\"1\":{\"310\":1}}],[\"我们可以通过索引来访问元组的元素\",{\"1\":{\"310\":1}}],[\"我们可以通过event\",{\"1\":{\"263\":1}}],[\"我们可以通过then方法获取导入的模块\",{\"1\":{\"202\":1}}],[\"我们可以通过该变量访问模块中的所有导出内容\",{\"1\":{\"202\":1}}],[\"我们可以通过converted对象访问state对象的属性和值\",{\"1\":{\"102\":1}}],[\"我们可以像同步代码一样使用\",{\"1\":{\"196\":1}}],[\"我们可以拦截属性的读取和写入操作\",{\"1\":{\"188\":1}}],[\"我们可以以统一的方式遍历不同类型的数据集合\",{\"1\":{\"184\":1}}],[\"我们可以统一地调用\",{\"1\":{\"183\":1}}],[\"我们可以使用router\",{\"1\":{\"420\":1}}],[\"我们可以使用react的过渡库\",{\"1\":{\"395\":1}}],[\"我们可以使用以下方式定义命名视图\",{\"1\":{\"417\":1}}],[\"我们可以使用<router\",{\"1\":{\"415\":1}}],[\"我们可以使用store\",{\"1\":{\"401\":1,\"402\":1}}],[\"我们可以使用对象字面量来创建它\",{\"1\":{\"394\":1}}],[\"我们可以使用枚举类型来声明变量\",{\"1\":{\"314\":1}}],[\"我们可以使用css属性和样式来控制网格项的外观\",{\"1\":{\"156\":1}}],[\"我们可以使用html标签和组件来描述ui的结构\",{\"1\":{\"13\":1}}],[\"我们可以控制网格内的元素的位置和大小\",{\"1\":{\"156\":1}}],[\"我们可以控制组件的行为\",{\"1\":{\"22\":1}}],[\"我们可以获取到新旧两个值\",{\"1\":{\"110\":1}}],[\"我们可以将redux状态映射为组件的属性\",{\"1\":{\"403\":1}}],[\"我们可以将共享的属性和方法定义在原型上\",{\"1\":{\"267\":1}}],[\"我们可以将异步操作的代码看起来像是同步的\",{\"1\":{\"195\":1}}],[\"我们可以将数据隐藏在对象内部\",{\"1\":{\"183\":1}}],[\"我们可以将组件的内容进行动态的分发和替换\",{\"1\":{\"96\":1}}],[\"我们可以将一些具有相似功能或具有共同需求的组件逻辑进行提取和复用\",{\"1\":{\"23\":1}}],[\"我们可以动态地插入变量name\",{\"1\":{\"13\":1}}],[\"我们传入一个执行器函数\",{\"1\":{\"192\":1}}],[\"我们在模板中使用插值表达式\",{\"1\":{\"440\":1}}],[\"我们在模板中添加了两个路由链接\",{\"1\":{\"413\":1}}],[\"我们在创建实例\",{\"1\":{\"267\":1}}],[\"我们在这个函数中进行异步操作\",{\"1\":{\"192\":1}}],[\"我们在\",{\"1\":{\"161\":3}}],[\"我们在counter组件中使用了usecounter自定义hooks\",{\"1\":{\"42\":1}}],[\"我们为元素添加了一个点击事件的监听器\",{\"1\":{\"265\":1}}],[\"我们为这些属性添加了过渡效果\",{\"1\":{\"152\":1}}],[\"我们为transform属性添加了过渡效果\",{\"1\":{\"150\":1}}],[\"我们还可以手动指定枚举成员的值\",{\"1\":{\"314\":1}}],[\"我们还可以对元组的元素进行解构赋值\",{\"1\":{\"310\":1}}],[\"我们还可以使用点号或方括号运算符动态添加\",{\"1\":{\"259\":1}}],[\"我们还可以使用\",{\"1\":{\"110\":1}}],[\"我们还将具名函数表达式赋值给变量multiply\",{\"1\":{\"258\":1}}],[\"我们还使用了\",{\"1\":{\"70\":1}}],[\"我们对\",{\"1\":{\"110\":1}}],[\"我们通过axios发送请求\",{\"1\":{\"405\":1}}],[\"我们通过调用this\",{\"1\":{\"440\":2}}],[\"我们通过调用props\",{\"1\":{\"403\":1}}],[\"我们通过调用store\",{\"1\":{\"401\":1}}],[\"我们通过protectedroute高阶组件来包装需要保护的路由\",{\"1\":{\"385\":1}}],[\"我们通过javascript获取了一个具有特定id\",{\"1\":{\"263\":1}}],[\"我们通过点号和方括号运算符动态添加\",{\"1\":{\"259\":1}}],[\"我们通过在\",{\"1\":{\"188\":1}}],[\"我们通过设置column\",{\"1\":{\"154\":1}}],[\"我们通过\",{\"1\":{\"110\":1,\"267\":1,\"270\":1,\"312\":1}}],[\"我们通过useimperativehandle定义了子组件\",{\"1\":{\"41\":1}}],[\"我们首先引入vue和app组件\",{\"1\":{\"440\":1}}],[\"我们首先引入vue和vuex\",{\"1\":{\"440\":1}}],[\"我们首先使用\",{\"1\":{\"397\":1}}],[\"我们首先定义了两个sass变量\",{\"1\":{\"161\":1}}],[\"我们首先创建了一个名为state的响应式对象\",{\"1\":{\"102\":1}}],[\"我们首先创建了一个上下文对象mycontext\",{\"1\":{\"37\":1}}],[\"我们首先导出一个名为\",{\"1\":{\"95\":1}}],[\"我们将汽车的属性和行为封装在了一个类中\",{\"1\":{\"583\":1}}],[\"我们将函数名存储在变量\",{\"1\":{\"569\":1}}],[\"我们将vuex的store对象放在一个单独的文件中\",{\"1\":{\"440\":1}}],[\"我们将vuex\",{\"1\":{\"439\":1}}],[\"我们将计数器值减1\",{\"1\":{\"403\":1}}],[\"我们将计数器值加1\",{\"1\":{\"403\":1}}],[\"我们将匿名函数表达式赋值给变量greet\",{\"1\":{\"258\":1}}],[\"我们将它的display属性设置为grid\",{\"1\":{\"156\":1}}],[\"我们将它的display属性设置为flex\",{\"1\":{\"155\":1}}],[\"我们将它们的flex属性设置为1\",{\"1\":{\"155\":1}}],[\"我们将宽度\",{\"1\":{\"152\":1}}],[\"我们将组件添加到\",{\"1\":{\"95\":1}}],[\"我们将\",{\"1\":{\"85\":1,\"110\":1,\"330\":1}}],[\"我们将一个对象字面量\",{\"1\":{\"82\":1}}],[\"我们注册了一个名为\",{\"1\":{\"70\":1}}],[\"我们使用react的useeffect\",{\"1\":{\"405\":1}}],[\"我们使用react的connect函数将我们的react组件连接到redux\",{\"1\":{\"403\":1}}],[\"我们使用react\",{\"1\":{\"403\":1}}],[\"我们使用createstore函数来创建redux\",{\"1\":{\"403\":1}}],[\"我们使用axios库发起一个get请求来获取用户数据\",{\"1\":{\"405\":1}}],[\"我们使用addeventlistener方法为指定的按钮元素添加了一个点击事件的监听器\",{\"1\":{\"263\":1}}],[\"我们使用arguments对象来获取函数参数列表中的所有参数\",{\"1\":{\"172\":1}}],[\"我们使用匿名函数创建一个函数作用域\",{\"1\":{\"258\":1}}],[\"我们使用数组的symbol\",{\"1\":{\"184\":1}}],[\"我们使用stylus的语法来定义变量和混合器\",{\"1\":{\"161\":1}}],[\"我们使用less语法进行变量和混合器的定义\",{\"1\":{\"161\":1}}],[\"我们使用torefs函数将state对象转化为ref对象\",{\"1\":{\"102\":1}}],[\"我们使用<transition>组件将目标元素包裹起来\",{\"1\":{\"98\":1}}],[\"我们使用\",{\"1\":{\"95\":1,\"102\":1,\"267\":1,\"315\":1,\"394\":2,\"422\":1,\"579\":1}}],[\"我们使用uselayouteffect来在dom更新之后同步测量内容的高度\",{\"1\":{\"41\":1}}],[\"我们使用usememo来缓存a\",{\"1\":{\"41\":1}}],[\"我们使用usecallback创建一个记忆化的increment回调函数\",{\"1\":{\"41\":1}}],[\"我们使用useref创建了一个名为inputref的引用\",{\"1\":{\"41\":1}}],[\"我们使用usestate创建了一个名为count的状态变量和一个名为setcount的更新状态的函数\",{\"1\":{\"41\":1}}],[\"我们使用一个没有名称的函数将两个数字相加\",{\"1\":{\"258\":1}}],[\"我们使用一个空的依赖项数组\",{\"1\":{\"41\":1}}],[\"我们使用一个函数作为子组件\",{\"1\":{\"37\":1}}],[\"我们使用了file\",{\"1\":{\"455\":1}}],[\"我们使用了stylus变量primary\",{\"1\":{\"161\":1}}],[\"我们使用了sass变量$primary\",{\"1\":{\"161\":1}}],[\"我们使用了less变量\",{\"1\":{\"161\":1}}],[\"我们使用了rotate\",{\"1\":{\"150\":1}}],[\"我们使用了\",{\"1\":{\"95\":1}}],[\"我们使用了对象语法来动态地决定是否添加\",{\"1\":{\"82\":1}}],[\"我们使用了三元运算符来动态地决定是否添加\",{\"1\":{\"82\":1}}],[\"我们使用了数组语法\",{\"1\":{\"82\":1,\"85\":1}}],[\"我们使用了一个名为\",{\"1\":{\"330\":1}}],[\"我们使用了一个对象字面量\",{\"1\":{\"82\":1}}],[\"我们使用了一个第三方库mitt来创建一个事件总线eventbus\",{\"1\":{\"38\":1}}],[\"我们使用了<div>\",{\"1\":{\"13\":1}}],[\"我们导入了react和reactdom库\",{\"1\":{\"16\":1}}],[\"购物车信息等\",{\"1\":{\"439\":1}}],[\"划分模块之后\",{\"1\":{\"435\":1}}],[\"订单管理等业务领域来划分模块\",{\"1\":{\"435\":1}}],[\"订阅state\",{\"1\":{\"402\":1}}],[\"订阅是通过调用store\",{\"1\":{\"401\":1}}],[\"订阅的回调函数将在状态发生变化时被调用\",{\"1\":{\"401\":1}}],[\"订阅的回调函数将被调用\",{\"1\":{\"401\":2,\"402\":1}}],[\"订阅\",{\"1\":{\"401\":3}}],[\"订阅者只需要关心自己感兴趣的事件\",{\"1\":{\"38\":1}}],[\"订阅者的事件处理函数将被调用\",{\"1\":{\"38\":1}}],[\"订阅者可以使用eventbus\",{\"1\":{\"38\":1}}],[\"订阅者\",{\"1\":{\"38\":1}}],[\"订阅模式实现\",{\"1\":{\"272\":1}}],[\"订阅模式是一种用于多个部分间进行解耦的异步编程模式\",{\"1\":{\"272\":1}}],[\"订阅模式的一种常见方式\",{\"1\":{\"38\":1}}],[\"订阅模式\",{\"1\":{\"38\":2,\"272\":1}}],[\"订阅事件\",{\"1\":{\"22\":1,\"38\":1}}],[\"订阅事件等副作用操作\",{\"1\":{\"22\":2}}],[\"商品管理\",{\"1\":{\"435\":1}}],[\"团队成员可以并行地开发不同的模块\",{\"1\":{\"434\":1}}],[\"团队技能和个人偏好\",{\"1\":{\"10\":1}}],[\"团队技能\",{\"1\":{\"10\":1}}],[\"经过一系列的转换处理后\",{\"1\":{\"463\":1}}],[\"经过上述步骤\",{\"1\":{\"427\":1}}],[\"经典模块解析是\",{\"1\":{\"328\":1}}],[\"经典模块解析\",{\"1\":{\"328\":2}}],[\"兄弟关系等复杂的通信关系\",{\"1\":{\"425\":1}}],[\"产生的每个可被导航到的路由都会生成一个单独的异步块\",{\"1\":{\"423\":1}}],[\"权限控制等逻辑的处理\",{\"1\":{\"421\":1}}],[\"侧边栏视图\",{\"1\":{\"417\":2}}],[\"硬编码路径\",{\"1\":{\"414\":1}}],[\"硬件和基础设施优化\",{\"1\":{\"138\":1}}],[\"看到主页的内容\",{\"1\":{\"412\":1}}],[\"看完上面的内容\",{\"1\":{\"98\":1}}],[\"容易被猜测或常见的密码策略\",{\"1\":{\"602\":1}}],[\"容易上手和学习\",{\"1\":{\"363\":1}}],[\"容易上手和理解\",{\"1\":{\"200\":1}}],[\"容易上手\",{\"1\":{\"203\":1}}],[\"容器组件负责与redux\",{\"1\":{\"407\":1}}],[\"仔细设计和规划应用程序的状态结构\",{\"1\":{\"407\":1}}],[\"副作用管理\",{\"1\":{\"405\":1}}],[\"副作用函数\",{\"1\":{\"110\":1}}],[\"副作用函数在组件渲染到屏幕上后执行\",{\"1\":{\"41\":1}}],[\"旧状态和新状态等\",{\"1\":{\"405\":1}}],[\"给定相同的状态和动作\",{\"1\":{\"404\":1}}],[\"给我们提供了为进入和离开动画指定不同速度曲线的能力\",{\"1\":{\"125\":1}}],[\"归纳器\",{\"1\":{\"403\":1}}],[\"归约器\",{\"1\":{\"400\":1,\"401\":2}}],[\"仓库\",{\"1\":{\"403\":1}}],[\"纯函数具有输入确定则输出确定的特性\",{\"1\":{\"404\":1}}],[\"纯函数更新\",{\"1\":{\"402\":1}}],[\"纯函数不应该有副作用\",{\"1\":{\"401\":1}}],[\"纯文本\",{\"1\":{\"355\":1}}],[\"描述了要进行的状态更新操作\",{\"1\":{\"401\":1}}],[\"描述等\",{\"1\":{\"208\":1}}],[\"派生类\",{\"1\":{\"583\":1}}],[\"派生类的定义\",{\"1\":{\"324\":1}}],[\"派发actions\",{\"1\":{\"402\":1}}],[\"派发\",{\"1\":{\"401\":3}}],[\"了store的部分\",{\"1\":{\"400\":1}}],[\"了解并运用这些模块\",{\"1\":{\"508\":1}}],[\"了解并熟练运用css盒模型是进行网页布局和设计的基础\",{\"1\":{\"146\":1}}],[\"了解和合理使用连接管理的技术可以对应用的性能和可伸缩性带来积极的影响\",{\"1\":{\"358\":1}}],[\"了解它的基本概念和特性对于理解web通信和构建高效的web应用是非常重要的\",{\"1\":{\"351\":1}}],[\"了解哪些文件被修改过\",{\"1\":{\"334\":1}}],[\"了解数据类型之间的隐式转换规则可以帮助编写更清晰\",{\"1\":{\"252\":1}}],[\"了解组件的生命周期可以帮助我们更好地管理组件的状态和执行逻辑\",{\"1\":{\"22\":1}}],[\"演示如何定义并调用一个匿名函数\",{\"1\":{\"590\":1}}],[\"演示如何在vue\",{\"1\":{\"415\":1}}],[\"演示如何在vue中使用动态路由\",{\"1\":{\"413\":1}}],[\"演示如何在父组件中使用\",{\"1\":{\"396\":1}}],[\"演示了使用\",{\"1\":{\"367\":1}}],[\"演示了如何在vue组件中使用插槽\",{\"1\":{\"96\":1}}],[\"激活的导航链接会自动添加一个类名为\",{\"1\":{\"394\":1}}],[\"钩子获取到动态路由参数\",{\"1\":{\"391\":1}}],[\"钩子来获取动态路由参数\",{\"1\":{\"391\":2}}],[\"钩子或者\",{\"1\":{\"386\":2}}],[\"钩子函数和\",{\"1\":{\"394\":1}}],[\"钩子函数提供了一个\",{\"1\":{\"393\":1}}],[\"钩子函数来访问它\",{\"1\":{\"393\":1}}],[\"钩子函数来实现\",{\"1\":{\"70\":1}}],[\"钩子函数可以获取到\",{\"1\":{\"393\":1}}],[\"钩子函数也接收三个参数\",{\"1\":{\"70\":1}}],[\"钩子函数接收三个参数\",{\"1\":{\"70\":1}}],[\"钩子函数\",{\"1\":{\"70\":2,\"393\":1}}],[\"带单引号则不解释内嵌的变量和转义符号\",{\"1\":{\"528\":1}}],[\"带有通配符的路径\",{\"1\":{\"414\":1}}],[\"带有参数的动态路径片段和通配符路径\",{\"1\":{\"414\":1}}],[\"带有参数的动态路径片段\",{\"1\":{\"414\":1}}],[\"带有历史记录的跳转\",{\"0\":{\"384\":1}}],[\"带参数的路由\",{\"0\":{\"381\":1}}],[\"跳转的路径\",{\"1\":{\"421\":1}}],[\"跳转到下一个钩子\",{\"1\":{\"421\":1}}],[\"跳转到指定路径\",{\"1\":{\"421\":1}}],[\"跳转到用户详情页面\",{\"1\":{\"420\":1}}],[\"跳转到上一个页面\",{\"1\":{\"393\":1}}],[\"跳转到\",{\"1\":{\"393\":1}}],[\"跳转\",{\"0\":{\"380\":1}}],[\"概念\",{\"0\":{\"374\":1}}],[\"评估应用程序的性能和可扩展性\",{\"1\":{\"372\":1}}],[\"稳定性和用户体验\",{\"1\":{\"372\":1}}],[\"稳定性和性能\",{\"1\":{\"372\":1}}],[\"稳定性和易用性使其成为最受欢迎的关系型数据库之一\",{\"1\":{\"131\":1}}],[\"部署和维护\",{\"1\":{\"371\":1}}],[\"部分\",{\"1\":{\"360\":1}}],[\"设计模式\",{\"0\":{\"592\":1}}],[\"设计清晰的状态结构\",{\"1\":{\"407\":1}}],[\"设计api\",{\"1\":{\"371\":1}}],[\"设置错误报告级别\",{\"1\":{\"586\":1}}],[\"设置汽车属性\",{\"1\":{\"583\":1}}],[\"设置常量\",{\"1\":{\"519\":1}}],[\"设置\",{\"0\":{\"519\":1}}],[\"设置了一些选项\",{\"1\":{\"463\":1}}],[\"设置了文本内容\",{\"1\":{\"265\":1}}],[\"设置为\",{\"1\":{\"461\":3}}],[\"设置别名\",{\"1\":{\"419\":2}}],[\"设置默认重定向至\",{\"1\":{\"418\":1}}],[\"设置模板引擎为\",{\"1\":{\"367\":1}}],[\"设置请求的类型\",{\"1\":{\"345\":1}}],[\"设置图像源\",{\"1\":{\"300\":1}}],[\"设置输入框的值\",{\"1\":{\"294\":1}}],[\"设置指定名称字段的值\",{\"1\":{\"282\":1}}],[\"设置一个回调函数\",{\"1\":{\"271\":1}}],[\"设置延迟为0毫秒\",{\"1\":{\"271\":1}}],[\"设置目标对象的原型对象\",{\"1\":{\"191\":1}}],[\"设置网格间距\",{\"1\":{\"156\":1}}],[\"设置网格布局的容器和项目属性\",{\"1\":{\"144\":1}}],[\"设置透视点的距离为500px\",{\"1\":{\"150\":1}}],[\"设置单独边框的样式\",{\"1\":{\"144\":1}}],[\"设置边框的圆角半径\",{\"1\":{\"144\":1}}],[\"设置边框的颜色\",{\"1\":{\"144\":1}}],[\"设置边框的宽度\",{\"1\":{\"144\":1}}],[\"设置边框的样式\",{\"1\":{\"144\":1}}],[\"设置弹性布局的子项属性\",{\"1\":{\"144\":1}}],[\"设置元素相对于其定位父级的位置\",{\"1\":{\"144\":1}}],[\"设置元素的属性值\",{\"1\":{\"304\":1}}],[\"设置元素的样式属性值\",{\"1\":{\"295\":1}}],[\"设置元素的最小高度限制\",{\"1\":{\"144\":1}}],[\"设置元素的最小宽度限制\",{\"1\":{\"144\":1}}],[\"设置元素的最大高度限制\",{\"1\":{\"144\":1}}],[\"设置元素的最大宽度限制\",{\"1\":{\"144\":1}}],[\"设置元素的浮动方式\",{\"1\":{\"144\":1}}],[\"设置元素的显示方式\",{\"1\":{\"144\":1}}],[\"设置元素的堆叠顺序\",{\"1\":{\"144\":1}}],[\"设置元素的定位方式\",{\"1\":{\"144\":1}}],[\"设置元素的背景图片\",{\"1\":{\"144\":1}}],[\"设置元素的背景颜色\",{\"1\":{\"144\":1}}],[\"设置元素的边框样式和边框宽度\",{\"1\":{\"144\":1}}],[\"设置元素的内边距\",{\"1\":{\"144\":1}}],[\"设置元素的外边距\",{\"1\":{\"144\":1}}],[\"设置元素的高度\",{\"1\":{\"144\":2}}],[\"设置元素的宽度\",{\"1\":{\"144\":2}}],[\"设置背景图片的重复方式\",{\"1\":{\"144\":1}}],[\"设置背景图片的位置\",{\"1\":{\"144\":1}}],[\"设置背景图片的尺寸\",{\"1\":{\"144\":1}}],[\"设置文本的修饰效果\",{\"1\":{\"144\":1}}],[\"设置文本的对齐方式\",{\"1\":{\"144\":1}}],[\"设置文本的颜色\",{\"1\":{\"144\":1}}],[\"设置字体的粗细\",{\"1\":{\"144\":1}}],[\"设置字体的大小\",{\"1\":{\"144\":1}}],[\"设置字体的名称\",{\"1\":{\"144\":1}}],[\"设置隔离级别\",{\"1\":{\"137\":1}}],[\"设置保存点\",{\"1\":{\"137\":1}}],[\"设置用户和权限\",{\"1\":{\"132\":1}}],[\"角色\",{\"1\":{\"370\":1}}],[\"角色和权限的组合关系\",{\"1\":{\"370\":1}}],[\"系统测试可以包括功能测试\",{\"1\":{\"372\":1}}],[\"系统测试\",{\"1\":{\"372\":1}}],[\"系统可以判断用户是否有权访问特定的资源\",{\"1\":{\"370\":1}}],[\"系统将验证这些凭据是否有效\",{\"1\":{\"370\":1}}],[\"系统将撤销所有之前的操作到事务开始的状态\",{\"1\":{\"137\":1}}],[\"授权决定用户是否被允许执行特定的操作\",{\"1\":{\"370\":1}}],[\"授权\",{\"1\":{\"370\":1}}],[\"身份认证\",{\"1\":{\"370\":1,\"604\":1}}],[\"身份认证和授权是保护web应用程序安全性的重要组成部分\",{\"1\":{\"370\":1}}],[\"身份认证和授权是在web应用程序中用于确保用户的身份验证和控制访问权限的关键概念\",{\"1\":{\"370\":1}}],[\"身份认证和授权\",{\"0\":{\"370\":1}}],[\"身份验证和授权\",{\"1\":{\"371\":1}}],[\"身份验证\",{\"1\":{\"359\":1}}],[\"密码安全\",{\"1\":{\"602\":1}}],[\"密码\",{\"1\":{\"600\":1}}],[\"密码等信息\",{\"1\":{\"369\":1}}],[\"密码输入框\",{\"1\":{\"30\":1}}],[\"路由元数据\",{\"1\":{\"422\":1}}],[\"路由元信息\",{\"0\":{\"422\":1}}],[\"路由独享守卫会在路由切换之前被调用\",{\"1\":{\"421\":1}}],[\"路由独享守卫\",{\"1\":{\"421\":1}}],[\"路由守卫\",{\"0\":{\"421\":1}}],[\"路由配置\",{\"1\":{\"417\":1}}],[\"路由配置对象包含了多个路由对象\",{\"1\":{\"398\":1}}],[\"路由可以通过嵌套来实现多层级的组件嵌套渲染\",{\"1\":{\"414\":1}}],[\"路由的优先级由路由定义的顺序决定\",{\"1\":{\"414\":1}}],[\"路由的优先级越高\",{\"1\":{\"414\":1}}],[\"路由的匹配规则是基于路径的\",{\"1\":{\"414\":1}}],[\"路由的匹配规则\",{\"0\":{\"414\":1}}],[\"路由定义的顺序决定了匹配的优先级\",{\"1\":{\"414\":1}}],[\"路由别名是指使用alias字段来为某个路由路径设置一个别名\",{\"1\":{\"419\":1}}],[\"路由别名\",{\"0\":{\"419\":1},\"1\":{\"412\":1}}],[\"路由是指应用中不同页面间的切换和导航\",{\"1\":{\"410\":1}}],[\"路由hook\",{\"0\":{\"398\":1}}],[\"路由懒加载可以使用\",{\"1\":{\"397\":1}}],[\"路由懒加载是一种优化技术\",{\"1\":{\"397\":1}}],[\"路由懒加载\",{\"0\":{\"397\":1,\"423\":1},\"1\":{\"423\":3}}],[\"路由状态管理\",{\"1\":{\"395\":1}}],[\"路由过渡\",{\"0\":{\"395\":1}}],[\"路由规则被定义为一个路由配置对象\",{\"1\":{\"394\":1}}],[\"路由高亮功能可以通过使用\",{\"1\":{\"394\":1}}],[\"路由高亮\",{\"0\":{\"394\":1}}],[\"路由历史对象是一个没有\",{\"1\":{\"393\":1}}],[\"路由历史对象\",{\"1\":{\"393\":1}}],[\"路由跳转\",{\"0\":{\"393\":1}}],[\"路由匹配规则包括硬编码路径\",{\"1\":{\"414\":1}}],[\"路由匹配优先级\",{\"1\":{\"414\":1}}],[\"路由匹配是通过<routes>组件来实现的\",{\"1\":{\"392\":1}}],[\"路由匹配\",{\"0\":{\"392\":1}}],[\"路由匹配组件\",{\"1\":{\"388\":1}}],[\"路由模式\",{\"0\":{\"390\":1}}],[\"路由重定向来导航到指定的路径\",{\"1\":{\"418\":1}}],[\"路由重定向可以通过使用\",{\"1\":{\"389\":1}}],[\"路由重定向\",{\"0\":{\"389\":1}}],[\"路由发生变化\",{\"1\":{\"387\":1}}],[\"路由事件\",{\"0\":{\"387\":1}}],[\"路由路径参数\",{\"1\":{\"386\":1}}],[\"路由保护\",{\"0\":{\"385\":1}}],[\"路由\",{\"0\":{\"377\":1}}],[\"路由组件传参\",{\"0\":{\"420\":1}}],[\"路由组件\",{\"1\":{\"376\":1}}],[\"路由器可以根据该参数的值匹配到对应的组件\",{\"1\":{\"414\":1}}],[\"路由器会根据定义的路由规则找到匹配的组件\",{\"1\":{\"414\":1}}],[\"路由器将会使用历史记录对应的\",{\"1\":{\"384\":1}}],[\"路由器\",{\"0\":{\"376\":1}}],[\"路由下进行日志记录\",{\"1\":{\"366\":1}}],[\"路由级中间件\",{\"1\":{\"366\":1}}],[\"路由处理\",{\"1\":{\"366\":1}}],[\"路由参数传递\",{\"0\":{\"386\":1}}],[\"路由参数\",{\"1\":{\"365\":1,\"386\":1}}],[\"路由用于定义应用程序如何响应特定的\",{\"1\":{\"365\":1}}],[\"路由和处理请求\",{\"0\":{\"365\":1}}],[\"路径对应about组件\",{\"1\":{\"413\":1}}],[\"路径时渲染的子组件\",{\"1\":{\"396\":2}}],[\"路径时\",{\"1\":{\"389\":1}}],[\"路径下\",{\"1\":{\"366\":1}}],[\"路径\",{\"1\":{\"357\":1,\"360\":2,\"389\":1,\"396\":2,\"413\":1}}],[\"路径和查询参数组成\",{\"1\":{\"352\":1}}],[\"路径别名等问题\",{\"1\":{\"328\":1}}],[\"路径映射\",{\"1\":{\"328\":1}}],[\"官方文档以获得更详细的函数列表和使用说明\",{\"1\":{\"570\":1}}],[\"官方的路由管理器\",{\"1\":{\"409\":1}}],[\"官方网站\",{\"1\":{\"364\":1}}],[\"官方提供的脚手架工具\",{\"1\":{\"88\":1}}],[\"拥有全局作用域\",{\"1\":{\"525\":1}}],[\"拥有庞大的开发者社区和活跃的维护者\",{\"1\":{\"363\":1}}],[\"拥有更多的功能和生命周期方法\",{\"1\":{\"18\":1}}],[\"强类型声明\",{\"1\":{\"604\":1}}],[\"强大的异步和事件驱动特性\",{\"1\":{\"363\":1}}],[\"强制缓存\",{\"1\":{\"352\":1}}],[\"四次挥手的过程可能会出现延迟\",{\"1\":{\"361\":1}}],[\"四次挥手\",{\"1\":{\"361\":1}}],[\"释放连接资源\",{\"1\":{\"360\":1}}],[\"证书链是一系列的ssl证书\",{\"1\":{\"359\":1}}],[\"证书链\",{\"1\":{\"359\":1}}],[\"证书包含服务器公钥\",{\"1\":{\"359\":1}}],[\"颁发的数字证书\",{\"1\":{\"359\":1}}],[\"补充\",{\"1\":{\"359\":1}}],[\"越来越多的网站和应用程序采用了https来保护用户数据和隐私\",{\"1\":{\"359\":1}}],[\"得到对称密钥\",{\"1\":{\"359\":1}}],[\"机制来实现\",{\"1\":{\"483\":1}}],[\"机制来实现异步操作的流程控制\",{\"1\":{\"195\":1}}],[\"机制\",{\"1\":{\"358\":1}}],[\"域\",{\"1\":{\"357\":1}}],[\"域名\",{\"1\":{\"352\":1,\"359\":1,\"360\":1}}],[\"攻击\",{\"1\":{\"355\":1}}],[\"永久重定向\",{\"1\":{\"354\":1}}],[\"永远不会有可达的终点\",{\"1\":{\"310\":1}}],[\"信息性状态码\",{\"1\":{\"354\":1}}],[\"客户端ip地址等\",{\"1\":{\"521\":1}}],[\"客户端集成\",{\"1\":{\"371\":1}}],[\"客户端向服务器发送一个fin包\",{\"1\":{\"361\":1}}],[\"客户端向服务器发送一个syn包\",{\"1\":{\"361\":1}}],[\"客户端收到服务器的fin包后\",{\"1\":{\"361\":1}}],[\"客户端收到服务器的syn\",{\"1\":{\"361\":1}}],[\"客户端收到服务器响应后\",{\"1\":{\"359\":1}}],[\"客户端通过验证证书的有效性和合法性\",{\"1\":{\"359\":1}}],[\"客户端通过信任的证书颁发机构对服务器证书进行验证\",{\"1\":{\"359\":1}}],[\"客户端可以验证接收到的数据是否完整和未被篡改\",{\"1\":{\"359\":1}}],[\"客户端可以向服务器请求数据\",{\"1\":{\"351\":1}}],[\"客户端发起https连接请求\",{\"1\":{\"359\":1}}],[\"客户端发送请求时\",{\"1\":{\"355\":2}}],[\"客户端发送请求到服务器\",{\"1\":{\"352\":1}}],[\"客户端将不再发送该cookie\",{\"1\":{\"357\":1}}],[\"客户端在后续的请求中会自动携带该session\",{\"1\":{\"357\":1}}],[\"客户端在后续的请求中可以携带该值\",{\"1\":{\"356\":1}}],[\"客户端在后续的请求中可以发送该值\",{\"1\":{\"356\":1}}],[\"客户端在以后的请求中会自动将这些cookie信息包含在请求头中发送给服务器\",{\"1\":{\"357\":1}}],[\"客户端在接收到带有缓存头部信息的响应后\",{\"1\":{\"356\":1}}],[\"客户端错误状态码\",{\"1\":{\"354\":1}}],[\"响应\",{\"1\":{\"367\":1}}],[\"响应对象\",{\"1\":{\"366\":1}}],[\"响应报文中包含了状态码\",{\"1\":{\"360\":1}}],[\"响应状态码等\",{\"1\":{\"353\":1}}],[\"响应由状态码\",{\"1\":{\"352\":1}}],[\"响应模式\",{\"1\":{\"352\":2}}],[\"响应式编程适用于复杂的异步场景\",{\"1\":{\"278\":1}}],[\"响应式编程是一种以数据流为基础的开发模式\",{\"1\":{\"278\":1}}],[\"响应式编程\",{\"1\":{\"278\":1}}],[\"响应式图片\",{\"0\":{\"239\":1}}],[\"响应式框架是用于创建适应不同屏幕大小和设备的网页布局的工具\",{\"1\":{\"233\":1}}],[\"响应式框架\",{\"0\":{\"233\":1}}],[\"响应式设计\",{\"0\":{\"148\":1,\"297\":1}}],[\"响应式数据对象\",{\"1\":{\"102\":1}}],[\"响应式数据注入\",{\"1\":{\"23\":1}}],[\"响应式\",{\"0\":{\"102\":1},\"1\":{\"428\":1}}],[\"响应式系统升级\",{\"1\":{\"99\":1}}],[\"头部视图\",{\"1\":{\"417\":3}}],[\"头部信息在http通信中非常重要\",{\"1\":{\"355\":1}}],[\"头部信息由一系列的键值对组成\",{\"1\":{\"355\":1}}],[\"头部信息和其他一些选项\",{\"1\":{\"353\":1}}],[\"头部信息和响应体组成\",{\"1\":{\"352\":1}}],[\"头部信息包括\",{\"1\":{\"352\":1}}],[\"头部信息\",{\"1\":{\"352\":1,\"360\":2}}],[\"头部信息用于在请求和响应中传递相关的元数据\",{\"1\":{\"351\":1}}],[\"头部区域\",{\"1\":{\"207\":1}}],[\"清晰的命名和文档可以提高代码的可读性和易用性\",{\"1\":{\"466\":1}}],[\"清空之前的建议\",{\"1\":{\"347\":1}}],[\"清除未被标记的对象\",{\"1\":{\"276\":1}}],[\"清除\",{\"1\":{\"276\":1}}],[\"清除浮动元素对布局的影响\",{\"1\":{\"144\":1}}],[\"清除计时器等\",{\"1\":{\"41\":1}}],[\"清除计时器\",{\"1\":{\"22\":1}}],[\"清除默认的react组件和样式\",{\"1\":{\"5\":1}}],[\"搜索并安装vue\",{\"1\":{\"438\":1}}],[\"搜索引擎通常会更青睐使用https的网站\",{\"1\":{\"359\":1}}],[\"搜索引擎和辅助技术可以更好地理解和解析网页内容\",{\"1\":{\"226\":1}}],[\"搜索\",{\"1\":{\"347\":1}}],[\"电子邮件\",{\"1\":{\"346\":1}}],[\"电子邮件输入框\",{\"1\":{\"30\":1}}],[\"姓名是必填项\",{\"1\":{\"580\":1}}],[\"姓名\",{\"1\":{\"346\":1}}],[\"广泛用于ajax应用中进行数据传输和解析\",{\"1\":{\"343\":1}}],[\"广泛用于node\",{\"1\":{\"200\":1}}],[\"出现在vue\",{\"1\":{\"438\":1}}],[\"出现了许多工具和框架\",{\"1\":{\"340\":1}}],[\"出现的索引\",{\"1\":{\"256\":2}}],[\"好的\",{\"1\":{\"440\":1}}],[\"好\",{\"1\":{\"338\":1}}],[\"坏\",{\"1\":{\"338\":1}}],[\"跟踪进度以及与团队成员进行讨论\",{\"1\":{\"337\":1}}],[\"问题跟踪\",{\"1\":{\"337\":1}}],[\"风格和一致性\",{\"1\":{\"337\":1}}],[\"协议之上的\",{\"1\":{\"359\":1}}],[\"协议来建立安全的通信通道\",{\"1\":{\"359\":1}}],[\"协作开发可以提高团队的协同效率\",{\"1\":{\"337\":1}}],[\"协作开发是多个开发者共同参与一个项目的开发过程\",{\"1\":{\"337\":1}}],[\"协作开发\",{\"0\":{\"337\":1}}],[\"协同工作\",{\"1\":{\"336\":1}}],[\"共享代码库\",{\"1\":{\"337\":1}}],[\"共享代码和进行代码审查\",{\"1\":{\"337\":1}}],[\"共享和协作开发代码\",{\"1\":{\"336\":1}}],[\"共输出5次\",{\"1\":{\"260\":1}}],[\"紧密结合\",{\"1\":{\"336\":1}}],[\"紧接着是装饰器函数\",{\"1\":{\"204\":1}}],[\"拉取与推送\",{\"1\":{\"336\":1}}],[\"克隆远程仓库\",{\"1\":{\"336\":1}}],[\"克隆元素\",{\"1\":{\"265\":1}}],[\"远程分支\",{\"1\":{\"336\":1}}],[\"远程分支管理\",{\"1\":{\"335\":1}}],[\"远程仓库服务通常提供权限和访问控制功能\",{\"1\":{\"337\":1}}],[\"远程仓库权限管理\",{\"1\":{\"337\":1}}],[\"远程仓库协作\",{\"1\":{\"337\":1}}],[\"远程仓库是指托管在网络上的git仓库\",{\"1\":{\"336\":1}}],[\"远程仓库通常也有多个分支\",{\"1\":{\"335\":1}}],[\"远程仓库\",{\"0\":{\"336\":1},\"1\":{\"334\":1}}],[\"忽略\",{\"1\":{\"334\":1}}],[\"忽略所有以\",{\"1\":{\"334\":1}}],[\"忽略文件\",{\"1\":{\"334\":1}}],[\"感叹号\",{\"1\":{\"334\":1}}],[\"暂存区是将要被提交的文件的集合\",{\"1\":{\"334\":1}}],[\"暂停视频\",{\"1\":{\"300\":1}}],[\"辅助函数以去除不必要的空格和转义特殊字符\",{\"1\":{\"580\":1}}],[\"辅助函数\",{\"1\":{\"330\":1}}],[\"供其他人使用\",{\"1\":{\"325\":1}}],[\"泛型可以提高代码的可复用性和类型安全性\",{\"1\":{\"320\":1}}],[\"泛型约束\",{\"1\":{\"320\":1}}],[\"泛型接口\",{\"1\":{\"320\":1}}],[\"泛型类\",{\"1\":{\"320\":1}}],[\"泛型函数\",{\"1\":{\"320\":1}}],[\"泛型\",{\"0\":{\"320\":1},\"1\":{\"320\":1}}],[\"ksh\",{\"1\":{\"527\":1}}],[\"kit\",{\"1\":{\"371\":1}}],[\"kind\",{\"1\":{\"319\":4}}],[\"k\",{\"1\":{\"319\":1}}],[\"keep\",{\"1\":{\"126\":8,\"358\":4}}],[\"kebab\",{\"1\":{\"91\":1}}],[\"keyword=\",{\"1\":{\"347\":1}}],[\"keyword\",{\"1\":{\"347\":2}}],[\"keyof\",{\"1\":{\"319\":4,\"321\":4}}],[\"key2\",{\"1\":{\"177\":5,\"179\":4,\"259\":2}}],[\"keyfor\",{\"1\":{\"174\":2}}],[\"keyframe\",{\"1\":{\"152\":1}}],[\"keyframes规则可以定义关键帧动画\",{\"1\":{\"152\":1}}],[\"keyframes\",{\"1\":{\"144\":2,\"150\":1,\"151\":1}}],[\"key1\",{\"1\":{\"174\":3,\"177\":4,\"179\":5,\"259\":2}}],[\"keys\",{\"1\":{\"170\":3,\"171\":3,\"189\":2,\"191\":2,\"578\":2}}],[\"key用于为每个生成的元素提供唯一的标识\",{\"1\":{\"70\":1}}],[\"key的作用有以下几点\",{\"1\":{\"70\":1}}],[\"key属性用于追踪和标识每个被渲染的元素\",{\"1\":{\"70\":1}}],[\"key属性主要用于react在进行列表更新时识别和比较元素\",{\"1\":{\"46\":1}}],[\"key属性是在react元素列表中唯一标识每个列表项的属性\",{\"1\":{\"46\":1}}],[\"keypress\",{\"1\":{\"28\":1}}],[\"keydown\",{\"1\":{\"27\":1,\"28\":1}}],[\"key\",{\"1\":{\"25\":4,\"27\":1,\"52\":8,\"134\":1,\"171\":2,\"174\":4,\"177\":4,\"191\":2,\"281\":4,\"305\":2,\"310\":5,\"319\":1,\"439\":1,\"570\":1,\"582\":2}}],[\"key=\",{\"1\":{\"3\":1,\"5\":1,\"23\":1,\"70\":2,\"385\":2,\"407\":1}}],[\"keyup\",{\"1\":{\"3\":2,\"28\":1}}],[\"联合类型\",{\"1\":{\"318\":1,\"319\":1}}],[\"推送与拉取\",{\"1\":{\"334\":1}}],[\"推断\",{\"1\":{\"316\":10}}],[\"推荐使用更安全的加密库如openssl\",{\"1\":{\"604\":1}}],[\"推荐使用pcre\",{\"1\":{\"604\":1}}],[\"推荐使用mysqli或pdo扩展来连接和操作mysql数据库\",{\"1\":{\"604\":1}}],[\"推荐使用模块化的方式来管理代码\",{\"1\":{\"326\":1}}],[\"推荐用户使用强密码\",{\"1\":{\"602\":1}}],[\"推荐的替代方案是使用\",{\"1\":{\"331\":1}}],[\"推荐在项目中使用\",{\"1\":{\"201\":1}}],[\"推荐首选使用let和const\",{\"1\":{\"165\":1}}],[\"推荐\",{\"1\":{\"91\":1}}],[\"反向映射\",{\"1\":{\"314\":1}}],[\"反映\",{\"0\":{\"190\":1}}],[\"委托函数是将特定的功能委托给其他函数来实现\",{\"1\":{\"313\":1}}],[\"委托和回调函数\",{\"1\":{\"313\":1}}],[\"立即执行\",{\"1\":{\"313\":1}}],[\"立即调用的函数表达式\",{\"1\":{\"258\":1}}],[\"斐波那契数列等\",{\"1\":{\"313\":1}}],[\"受保护的成员只能在类内部和子类中访问\",{\"1\":{\"583\":1}}],[\"受保护的访问修饰符\",{\"1\":{\"312\":1}}],[\"受到影响的组件就会根据新的状态值来重新渲染视图\",{\"1\":{\"428\":1}}],[\"受控组件的优点是可以完全控制表单元素的状态\",{\"1\":{\"31\":1}}],[\"受控组件\",{\"1\":{\"31\":1}}],[\"受控组件和非受控组件\",{\"0\":{\"31\":1},\"1\":{\"31\":1}}],[\"遵循单一职责原则\",{\"1\":{\"407\":1}}],[\"遵循以下作用域规则\",{\"1\":{\"311\":1}}],[\"遵循先进后出\",{\"1\":{\"273\":1}}],[\"超类\",{\"1\":{\"583\":1}}],[\"超级全局变量\",{\"0\":{\"522\":1},\"1\":{\"522\":1}}],[\"超文本传输协议\",{\"1\":{\"351\":1}}],[\"超出该块级作用域后不可访问\",{\"1\":{\"311\":1}}],[\"超过了系统分配给堆栈的空间大小\",{\"1\":{\"277\":1}}],[\"位于开始标记和结束标记之间的变量可以被正常解析\",{\"1\":{\"528\":1}}],[\"位于无限循环之后的代码\",{\"1\":{\"310\":1}}],[\"位置过渡为绿色\",{\"1\":{\"153\":1}}],[\"位置过渡为蓝色\",{\"1\":{\"153\":1}}],[\"位置到100\",{\"1\":{\"153\":1}}],[\"位置\",{\"1\":{\"153\":1}}],[\"意味着该函数执行结束后没有任何返回值\",{\"1\":{\"310\":1}}],[\"意味着只有一个主线程负责执行代码\",{\"1\":{\"264\":1}}],[\"枚举是在\",{\"1\":{\"314\":1}}],[\"枚举在以下场景中特别有用\",{\"1\":{\"314\":1}}],[\"枚举在处理一组相关的常量时非常有用\",{\"1\":{\"314\":1}}],[\"枚举的使用场景\",{\"1\":{\"314\":1}}],[\"枚举的成员可以通过值或名称进行访问\",{\"1\":{\"310\":1}}],[\"枚举成员名称与成员值之间是双向映射的\",{\"1\":{\"314\":1}}],[\"枚举成员可以包含字符串或数字值\",{\"1\":{\"314\":1}}],[\"枚举成员从0开始自动编号\",{\"1\":{\"314\":1}}],[\"枚举还有一些其他的特性\",{\"1\":{\"314\":1}}],[\"枚举还可以通过值来获取对应的名称\",{\"1\":{\"310\":1}}],[\"枚举\",{\"0\":{\"314\":1,\"537\":1},\"1\":{\"314\":1}}],[\"枚举可以为一组相关的常量赋予容易记忆的名字\",{\"1\":{\"310\":1}}],[\"枚举类型在\",{\"1\":{\"537\":1}}],[\"枚举类型\",{\"1\":{\"136\":1}}],[\"播放\",{\"1\":{\"300\":1}}],[\"验证是否为有效的url\",{\"1\":{\"603\":1}}],[\"验证是否为有效的ip地址\",{\"1\":{\"603\":1}}],[\"验证是否为有效的电子邮件地址\",{\"1\":{\"603\":1}}],[\"验证是否为布尔值\",{\"1\":{\"603\":1}}],[\"验证是否为浮点数\",{\"1\":{\"603\":1}}],[\"验证是否为整数\",{\"1\":{\"603\":1}}],[\"验证数据并显示错误信息\",{\"1\":{\"580\":1}}],[\"验证用户交互是否符合预期\",{\"1\":{\"372\":1}}],[\"验证用户的身份\",{\"1\":{\"371\":1}}],[\"验证其行为是否符合预期\",{\"1\":{\"372\":1}}],[\"验证表单\",{\"1\":{\"294\":1}}],[\"验证表单等\",{\"1\":{\"294\":1}}],[\"验证结果可以存储在组件状态中\",{\"1\":{\"32\":1}}],[\"筛选包含特定文本的元素\",{\"1\":{\"291\":1}}],[\"筛选奇数位置的元素\",{\"1\":{\"291\":1}}],[\"筛选最后一个元素\",{\"1\":{\"291\":1}}],[\"筛选第一个元素\",{\"1\":{\"291\":1}}],[\"隐藏内部实现的细节\",{\"1\":{\"327\":1}}],[\"隐藏图像\",{\"1\":{\"300\":1}}],[\"隐藏\",{\"1\":{\"290\":1}}],[\"隐式类型转换\",{\"1\":{\"252\":1}}],[\"隐式转换\",{\"1\":{\"252\":1}}],[\"序列化和反序列化\",{\"1\":{\"281\":1}}],[\"浅拷贝创建一个新的对象或数组\",{\"1\":{\"281\":1}}],[\"浅拷贝\",{\"1\":{\"281\":1}}],[\"拷贝\",{\"0\":{\"281\":1},\"1\":{\"281\":1}}],[\"词法作用域是由代码中的变量和函数声明的位置决定的\",{\"1\":{\"280\":1}}],[\"词法作用域\",{\"1\":{\"280\":1}}],[\"词法环境和词法作用域是\",{\"1\":{\"280\":1}}],[\"词法环境是变量和函数声明的存储位置和管理机制\",{\"1\":{\"280\":1}}],[\"词法环境是在执行\",{\"1\":{\"280\":1}}],[\"词法环境由两个主要组成部分构成\",{\"1\":{\"280\":1}}],[\"词法环境\",{\"1\":{\"280\":2}}],[\"词法环境与作用域\",{\"0\":{\"280\":1}}],[\"环境支持\",{\"1\":{\"467\":1}}],[\"环境变量注入等\",{\"1\":{\"453\":1}}],[\"环境和大部分常见的场景\",{\"1\":{\"328\":1}}],[\"环境记录器\",{\"1\":{\"280\":1}}],[\"环境中\",{\"1\":{\"270\":1}}],[\"依此类推\",{\"1\":{\"393\":1}}],[\"依次输出\",{\"1\":{\"323\":1}}],[\"依次改变状态和执行操作\",{\"1\":{\"278\":1}}],[\"依赖关系和优化的有用信息\",{\"1\":{\"497\":1}}],[\"依赖关系和技术选择等问题\",{\"1\":{\"9\":1}}],[\"依赖关系等信息\",{\"1\":{\"492\":1}}],[\"依赖关系等\",{\"1\":{\"464\":1}}],[\"依赖于它的组件会自动进行更新\",{\"1\":{\"426\":1}}],[\"依赖于它的组件会自动更新\",{\"1\":{\"426\":1}}],[\"依赖注入\",{\"0\":{\"117\":1},\"1\":{\"117\":1}}],[\"依赖项数组\",{\"1\":{\"41\":1}}],[\"命令行界面\",{\"1\":{\"507\":1}}],[\"命令来初始化项目\",{\"1\":{\"364\":1}}],[\"命令式编程是一种以编写明确指令的方式来描述计算过程和控制流程的开发模式\",{\"1\":{\"278\":1}}],[\"命令式编程\",{\"1\":{\"278\":1}}],[\"命名视图是一种在路由中定义多个同级视图的方式\",{\"1\":{\"417\":1}}],[\"命名视图\",{\"1\":{\"417\":1}}],[\"命名路由只是一种方便的开发方式\",{\"1\":{\"417\":1}}],[\"命名路由是用来给路由配置一个名称\",{\"1\":{\"417\":1}}],[\"命名路由\",{\"1\":{\"417\":1}}],[\"命名路由和视图\",{\"0\":{\"417\":1}}],[\"命名导入\",{\"1\":{\"327\":1}}],[\"命名导出\",{\"1\":{\"327\":1}}],[\"命名空间可以进行多级嵌套\",{\"1\":{\"584\":1}}],[\"命名空间可以嵌套在其他命名空间中\",{\"1\":{\"326\":1}}],[\"命名空间的嵌套\",{\"1\":{\"584\":1}}],[\"命名空间的使用可以提高代码的可读性和可维护性\",{\"1\":{\"584\":1}}],[\"命名空间的使用\",{\"1\":{\"584\":1}}],[\"命名空间的内容会被合并到同一个命名空间中\",{\"1\":{\"329\":1}}],[\"命名空间是一种将模块组织和划分的机制\",{\"1\":{\"444\":1}}],[\"命名空间主要用于组织代码和避免全局变量的冲突\",{\"1\":{\"326\":1}}],[\"命名空间与模块\",{\"1\":{\"326\":1}}],[\"命名空间别名\",{\"1\":{\"326\":1}}],[\"命名空间内容\",{\"1\":{\"326\":2}}],[\"命名空间\",{\"0\":{\"326\":1,\"584\":1},\"1\":{\"326\":1,\"434\":1,\"584\":1}}],[\"命名规则\",{\"1\":{\"42\":1}}],[\"面向对象\",{\"0\":{\"583\":1},\"1\":{\"583\":1}}],[\"面向对象编程强调数据的封装\",{\"1\":{\"583\":1}}],[\"面向对象编程是一种将代码组织为对象的开发模式\",{\"1\":{\"278\":1}}],[\"面向对象编程\",{\"1\":{\"278\":1}}],[\"面向过程编程是一种将代码组织为一系列函数的开发模式\",{\"1\":{\"278\":1}}],[\"面向过程编程\",{\"1\":{\"278\":1}}],[\"增加维护复杂度\",{\"1\":{\"466\":1}}],[\"增加代码的通用性\",{\"1\":{\"466\":1}}],[\"增加代码的清晰度\",{\"1\":{\"316\":1}}],[\"增加代码的可靠性和可读性\",{\"1\":{\"313\":1}}],[\"增加系统堆栈大小的限制\",{\"1\":{\"277\":1}}],[\"增强了开发效率和可维护性\",{\"1\":{\"444\":1}}],[\"增强了组件的可维护性和可重用性\",{\"1\":{\"9\":1}}],[\"增强性能\",{\"1\":{\"342\":2}}],[\"增强应用程序性能并提高效率\",{\"1\":{\"340\":1}}],[\"增强代码的可读性和可维护性\",{\"1\":{\"272\":1}}],[\"针对图像文件\",{\"1\":{\"455\":1}}],[\"针对redux的reducer\",{\"1\":{\"407\":1}}],[\"针对应用程序的最小可测试单元\",{\"1\":{\"372\":1}}],[\"针对堆栈溢出问题\",{\"1\":{\"277\":1}}],[\"针对不同代的对象采用不同的回收策略\",{\"1\":{\"276\":1}}],[\"针对特定表单元素\",{\"1\":{\"33\":1}}],[\"及时更新php版本\",{\"1\":{\"602\":1}}],[\"及时更新和修复可能存在的bug\",{\"1\":{\"466\":1}}],[\"及时释放不再使用的对象和资源\",{\"1\":{\"276\":1}}],[\"及时释放不再需要的对象和资源\",{\"1\":{\"274\":1}}],[\"及时释放不再需要的资源\",{\"1\":{\"268\":1}}],[\"及时发现和解决潜在的内存泄漏问题\",{\"1\":{\"275\":1}}],[\"及时移除事件监听器\",{\"1\":{\"275\":1}}],[\"垃圾回收器会自动追踪和回收不再被程序引用的内存\",{\"1\":{\"276\":1}}],[\"垃圾回收器会定期扫描内存\",{\"1\":{\"274\":1}}],[\"垃圾回收是一种自动管理内存的机制\",{\"1\":{\"276\":1}}],[\"垃圾回收是由\",{\"1\":{\"276\":1}}],[\"垃圾回收是\",{\"1\":{\"274\":1}}],[\"垃圾回收\",{\"0\":{\"276\":1},\"1\":{\"274\":1,\"276\":1}}],[\"栈继续被写入数据\",{\"1\":{\"274\":1}}],[\"栈溢出是指当栈空间被超出其容量时\",{\"1\":{\"274\":1}}],[\"栈溢出\",{\"1\":{\"274\":1}}],[\"栈用于存储简单数据类型\",{\"1\":{\"273\":1}}],[\"栈将释放这些变量\",{\"1\":{\"273\":1}}],[\"栈操作速度较快\",{\"1\":{\"273\":1}}],[\"栈的大小是固定的\",{\"1\":{\"273\":1}}],[\"栈中存储的是简单数据类型的值\",{\"1\":{\"273\":1}}],[\"栈是一种线性数据结构\",{\"1\":{\"273\":1}}],[\"栈\",{\"1\":{\"273\":1}}],[\"堆栈跟踪等功能\",{\"1\":{\"372\":1}}],[\"堆栈中需要存储的信息也会随之增加\",{\"1\":{\"277\":1}}],[\"堆栈是一种用于管理函数调用和局部变量的内存区域\",{\"1\":{\"277\":1}}],[\"堆栈是栈和堆的组合概念\",{\"1\":{\"274\":1}}],[\"堆栈溢出错误通常是由代码逻辑错误或算法设计问题导致的\",{\"1\":{\"277\":1}}],[\"堆栈溢出错误就会发生\",{\"1\":{\"277\":1}}],[\"堆栈溢出通常是由以下几种情况引起的\",{\"1\":{\"277\":1}}],[\"堆栈溢出\",{\"0\":{\"277\":1},\"1\":{\"277\":1}}],[\"堆栈\",{\"1\":{\"274\":1}}],[\"堆用于存储复杂数据类型\",{\"1\":{\"273\":1}}],[\"堆的大小相对较大\",{\"1\":{\"273\":1}}],[\"堆是动态分配内存的区域\",{\"1\":{\"273\":1}}],[\"堆\",{\"1\":{\"273\":2}}],[\"堆和栈\",{\"0\":{\"273\":1}}],[\"负责加载\",{\"1\":{\"464\":1}}],[\"负责处理用户相关的状态和操作\",{\"1\":{\"435\":1}}],[\"负责存储和管理整个应用程序的状态树\",{\"1\":{\"401\":1}}],[\"负责执行的\",{\"1\":{\"276\":1}}],[\"负责发布事件\",{\"1\":{\"272\":1}}],[\"负数\",{\"1\":{\"169\":1,\"531\":1}}],[\"秒后返回数据\",{\"1\":{\"272\":1}}],[\"秒后增加\",{\"1\":{\"102\":1}}],[\"微任务是一个细粒度的任务\",{\"1\":{\"271\":1}}],[\"微任务\",{\"1\":{\"271\":1}}],[\"微数据\",{\"0\":{\"231\":1},\"1\":{\"231\":1}}],[\"宏任务代表一组要在事件循环中处理的任务\",{\"1\":{\"271\":1}}],[\"宏任务\",{\"1\":{\"271\":1}}],[\"消息队列是一个fifo\",{\"1\":{\"271\":1}}],[\"消息队列\",{\"0\":{\"271\":1},\"1\":{\"271\":1}}],[\"消除冗余数据\",{\"1\":{\"138\":1}}],[\"两个数不相等\",{\"1\":{\"553\":2}}],[\"两个数相等\",{\"1\":{\"553\":2}}],[\"两个数的余数为\",{\"1\":{\"551\":2}}],[\"两个数的商为\",{\"1\":{\"551\":2}}],[\"两个数的积为\",{\"1\":{\"551\":2}}],[\"两个数的差为\",{\"1\":{\"551\":2}}],[\"两个数的和为\",{\"1\":{\"551\":2}}],[\"两个异步任务被添加到任务队列中\",{\"1\":{\"270\":1}}],[\"两种类型的action\",{\"1\":{\"401\":1}}],[\"两种\",{\"1\":{\"86\":1}}],[\"步\",{\"1\":{\"270\":1}}],[\"迭代给另一个生成器函数\",{\"1\":{\"323\":1}}],[\"迭代\",{\"1\":{\"269\":1}}],[\"迭代器模式\",{\"1\":{\"592\":1}}],[\"迭代器提供了一种逐个访问数据的方法\",{\"1\":{\"582\":1}}],[\"迭代器是一个实现了特定接口的对象\",{\"1\":{\"582\":1}}],[\"迭代器是一个对象\",{\"1\":{\"323\":1}}],[\"迭代器通过实现\",{\"1\":{\"323\":1}}],[\"迭代器和生成器是处理和遍历数据集合的有用工具\",{\"1\":{\"582\":1}}],[\"迭代器和生成器为处理集合和序列提供了一种更加简洁和可读性的方式\",{\"1\":{\"323\":1}}],[\"迭代器和生成器\",{\"0\":{\"323\":1,\"582\":1}}],[\"迭代器生成器等\",{\"1\":{\"184\":1}}],[\"迭代器的应用可以在各种场景中发挥作用\",{\"1\":{\"184\":1}}],[\"迭代器具有非常广泛的应用\",{\"1\":{\"184\":1}}],[\"迭代器会返回一个对象\",{\"1\":{\"184\":1}}],[\"迭代器必须实现迭代器协议\",{\"1\":{\"184\":1}}],[\"迭代器\",{\"0\":{\"184\":1},\"1\":{\"184\":1,\"323\":1}}],[\"达到终止条件时\",{\"1\":{\"269\":1}}],[\"递归拷贝可能会导致栈溢出\",{\"1\":{\"281\":1}}],[\"递归拷贝对象属性\",{\"1\":{\"281\":1}}],[\"递归拷贝数组元素\",{\"1\":{\"281\":1}}],[\"递归函数常用于解决需要重复执行相同操作的问题\",{\"1\":{\"313\":1}}],[\"递归函数\",{\"1\":{\"313\":1}}],[\"递归函数没有正确的终止条件\",{\"1\":{\"277\":1}}],[\"递归函数通常用于解决可以被拆分成更小\",{\"1\":{\"269\":1}}],[\"递归在解决某些问题上非常有用\",{\"1\":{\"269\":1}}],[\"递归可能会占用大量的堆栈空间\",{\"1\":{\"269\":1}}],[\"递归停止并返回\",{\"1\":{\"269\":1}}],[\"递归调用\",{\"1\":{\"269\":1}}],[\"递归的示例\",{\"1\":{\"269\":1}}],[\"递归\",{\"0\":{\"269\":1},\"1\":{\"269\":1}}],[\"尽可能地减少打包文件的体积\",{\"1\":{\"462\":1}}],[\"尽管\",{\"1\":{\"268\":1}}],[\"尽管它不是标准属性\",{\"1\":{\"267\":1}}],[\"尽量优化函数的设计和逻辑\",{\"1\":{\"277\":1}}],[\"尽量使用局部变量和适当的作用域控制\",{\"1\":{\"276\":1}}],[\"尽量使用前缀匹配\",{\"1\":{\"138\":1}}],[\"尽量避免循环引用\",{\"1\":{\"276\":1}}],[\"尽量避免\",{\"1\":{\"91\":1}}],[\"尽量避免将索引作为key值\",{\"1\":{\"46\":1}}],[\"利用浏览器缓存机制\",{\"1\":{\"504\":1}}],[\"利用多个cpu核心并行处理构建任务\",{\"1\":{\"504\":1}}],[\"利用\",{\"1\":{\"363\":1}}],[\"利用了\",{\"1\":{\"363\":1}}],[\"利用原型和原型链的机制\",{\"1\":{\"267\":1}}],[\"利用props接收父组件传递的数据\",{\"1\":{\"93\":1}}],[\"原始数组会被修改\",{\"1\":{\"578\":4}}],[\"原理\",{\"0\":{\"341\":1}}],[\"原型可以包含属性和方法\",{\"1\":{\"267\":1}}],[\"原型属性和方法\",{\"1\":{\"267\":1}}],[\"原型对象是可以随时改变的\",{\"1\":{\"267\":1}}],[\"原型的改变和继承的动态性\",{\"1\":{\"267\":1}}],[\"原型继承是一种通过指定对象的原型来实现继承的方式\",{\"1\":{\"267\":1}}],[\"原型继承\",{\"1\":{\"267\":1}}],[\"原型链的终点通常是\",{\"1\":{\"267\":1}}],[\"原型链的终点\",{\"1\":{\"267\":1}}],[\"原型链\",{\"1\":{\"267\":1}}],[\"原型\",{\"1\":{\"267\":2}}],[\"原型与原型链\",{\"0\":{\"267\":1}}],[\"原子性\",{\"1\":{\"137\":2}}],[\"遍历数组\",{\"0\":{\"577\":1}}],[\"遍历和异步编程等场景\",{\"1\":{\"323\":1}}],[\"遍历和过滤\",{\"0\":{\"291\":1}}],[\"遍历和操作子元素\",{\"1\":{\"265\":1}}],[\"遍历事件流\",{\"1\":{\"198\":2}}],[\"移除数组中重复的值\",{\"1\":{\"578\":1}}],[\"移除数组中的第一个元素\",{\"1\":{\"578\":1}}],[\"移除数组中的最后一个元素\",{\"1\":{\"578\":1}}],[\"移除未使用的代码\",{\"1\":{\"462\":1,\"480\":1}}],[\"移除css类\",{\"1\":{\"288\":1}}],[\"移除元素\",{\"1\":{\"265\":1,\"296\":1}}],[\"移动和改变大小\",{\"1\":{\"290\":1}}],[\"移动窗口的位置\",{\"1\":{\"266\":1}}],[\"移动应用和大数据分析等领域\",{\"1\":{\"131\":1}}],[\"移动端\",{\"1\":{\"61\":1}}],[\"移动设备等\",{\"1\":{\"355\":1}}],[\"移动设备\",{\"1\":{\"28\":1}}],[\"假设我们要创建一个汽车类\",{\"1\":{\"583\":1}}],[\"假设我们正在构建一个待办事项列表的应用程序\",{\"1\":{\"407\":1}}],[\"假设我们有一个增加计数器的操作\",{\"1\":{\"401\":1}}],[\"假设我们有一个带有\",{\"1\":{\"401\":1}}],[\"假设我们有一个父组件parent和一个子组件child\",{\"1\":{\"93\":1}}],[\"假设我们需要异步加载两个图片并在加载完成后执行一些操作\",{\"1\":{\"264\":1}}],[\"严格比较\",{\"1\":{\"540\":1}}],[\"严格模式\",{\"1\":{\"262\":1}}],[\"严格判断\",{\"1\":{\"169\":1}}],[\"找到不再被引用或无法访问的对象\",{\"1\":{\"274\":1}}],[\"找到后输出其值为\",{\"1\":{\"261\":1}}],[\"找出性能问题并进行优化\",{\"1\":{\"372\":1}}],[\"找出低效的查询和瓶颈点\",{\"1\":{\"138\":1}}],[\"找出二者之间的差异\",{\"1\":{\"128\":1}}],[\"停止\",{\"1\":{\"583\":1}}],[\"停止执行\",{\"1\":{\"260\":1}}],[\"停止事件冒泡传播到父元素\",{\"1\":{\"27\":1}}],[\"停止事件冒泡传播\",{\"1\":{\"27\":1}}],[\"周期性执行\",{\"1\":{\"260\":1}}],[\"键\",{\"1\":{\"259\":1}}],[\"键盘按键事件\",{\"1\":{\"28\":1}}],[\"键盘按下事件\",{\"1\":{\"28\":1}}],[\"键盘松开事件\",{\"1\":{\"28\":1}}],[\"键盘事件\",{\"1\":{\"28\":1}}],[\"键盘输入\",{\"1\":{\"25\":1}}],[\"闭包是一种特殊的匿名函数\",{\"1\":{\"590\":1}}],[\"闭包是指一个函数可以访问和操作在其父函数作用域之外定义的变量\",{\"1\":{\"258\":1}}],[\"闭包可能会引发内存泄漏问题\",{\"1\":{\"268\":1}}],[\"闭包可以记住并使用其创建时所在环境的变量\",{\"1\":{\"590\":1}}],[\"闭包可以创建私有化的作用域\",{\"1\":{\"268\":1}}],[\"闭包可以保持对外部作用域的引用\",{\"1\":{\"268\":1}}],[\"闭包可以捕获并存储在其作用域链中的外部函数的变量和参数\",{\"1\":{\"268\":1}}],[\"闭包可以访问外部函数作用域的变量\",{\"1\":{\"261\":1}}],[\"闭包中的\",{\"1\":{\"268\":1}}],[\"闭包的使用场景和优点包括\",{\"1\":{\"268\":1}}],[\"闭包在函数中使用use关键字来引入外部变量\",{\"1\":{\"590\":1}}],[\"闭包在\",{\"1\":{\"268\":1}}],[\"闭包\",{\"0\":{\"268\":1},\"1\":{\"258\":1,\"268\":1,\"590\":1}}],[\"个元素\",{\"1\":{\"257\":1}}],[\"切换协议\",{\"1\":{\"354\":1}}],[\"切换分支\",{\"1\":{\"335\":1}}],[\"切换元素的\",{\"1\":{\"70\":1}}],[\"切片等\",{\"1\":{\"257\":1}}],[\"符号开始\",{\"1\":{\"517\":1}}],[\"符号后跟一个函数名来定义\",{\"1\":{\"324\":1}}],[\"符号来指定变量或函数参数的类型\",{\"1\":{\"315\":1}}],[\"符号和空格等字符\",{\"1\":{\"256\":1}}],[\"符号表示变量\",{\"1\":{\"161\":1}}],[\"捕获并处理异常的代码块\",{\"1\":{\"255\":1}}],[\"捕获并处理代码块中的异常\",{\"1\":{\"255\":1}}],[\"异常类\",{\"0\":{\"589\":1}}],[\"异常处理\",{\"0\":{\"585\":1,\"588\":1}}],[\"异常处理语句\",{\"1\":{\"255\":1}}],[\"异步获取数据等\",{\"1\":{\"436\":1}}],[\"异步处理或者触发其他额外的副作用\",{\"1\":{\"405\":1}}],[\"异步和事件驱动的特性\",{\"1\":{\"363\":1}}],[\"异步提交表单\",{\"1\":{\"340\":1}}],[\"异步库和框架\",{\"1\":{\"272\":1}}],[\"异步编程有助于避免阻塞主线程\",{\"1\":{\"511\":1}}],[\"异步编程通常通过回调函数\",{\"1\":{\"511\":1}}],[\"异步编程是一种编程范式\",{\"1\":{\"511\":1}}],[\"异步编程是一种处理非阻塞操作的编程方式\",{\"1\":{\"322\":1}}],[\"异步编程是一种处理非阻塞操作的编程范式\",{\"1\":{\"272\":1}}],[\"异步编程使得我们可以更高效地处理耗时的操作\",{\"1\":{\"322\":1}}],[\"异步编程\",{\"0\":{\"272\":1,\"322\":1,\"511\":1}}],[\"异步任务完成\",{\"1\":{\"271\":1}}],[\"异步加载\",{\"1\":{\"201\":1}}],[\"异步迭代器\",{\"1\":{\"198\":1}}],[\"异步生成器\",{\"1\":{\"197\":1}}],[\"异步函数的错误处理\",{\"1\":{\"196\":1}}],[\"异步操作失败时的处理\",{\"1\":{\"432\":2}}],[\"异步操作成功后的处理\",{\"1\":{\"432\":2}}],[\"异步操作示例\",{\"1\":{\"432\":2,\"433\":1}}],[\"异步操作和提交action\",{\"0\":{\"432\":1}}],[\"异步操作和中间件\",{\"1\":{\"407\":1}}],[\"异步操作等等\",{\"1\":{\"401\":2}}],[\"异步操作完成时解决deferred对象\",{\"1\":{\"306\":1}}],[\"异步操作通常会使用回调函数\",{\"1\":{\"264\":1}}],[\"异步操作的串行执行\",{\"1\":{\"193\":1}}],[\"异步操作\",{\"1\":{\"192\":1,\"193\":3,\"427\":1,\"444\":1}}],[\"异步组件的命名必须是唯一的\",{\"1\":{\"95\":1}}],[\"异步组件的加载不会阻塞父组件的渲染\",{\"1\":{\"95\":1}}],[\"异步组件是通过使用\",{\"1\":{\"95\":1}}],[\"异步组件\",{\"0\":{\"95\":1}}],[\"异步模块定义\",{\"1\":{\"56\":1}}],[\"异步请求等\",{\"1\":{\"432\":1}}],[\"异步请求会被触发\",{\"1\":{\"50\":1}}],[\"异步请求数据\",{\"1\":{\"22\":1}}],[\"判断和增量操作\",{\"1\":{\"255\":1}}],[\"判断字符串是否包含指定的字符\",{\"1\":{\"167\":1}}],[\"判断字符串是否以指定的字符结尾\",{\"1\":{\"167\":1}}],[\"判断字符串是否以指定的字符开头\",{\"1\":{\"167\":1}}],[\"逗号运算符\",{\"1\":{\"254\":1}}],[\"未找到\",{\"1\":{\"354\":1}}],[\"未授权\",{\"1\":{\"354\":1}}],[\"未修改\",{\"1\":{\"354\":1}}],[\"未成年人\",{\"1\":{\"254\":2,\"558\":1}}],[\"未定义\",{\"1\":{\"251\":1}}],[\"成绩不合格\",{\"1\":{\"555\":1}}],[\"成绩合格\",{\"1\":{\"555\":1}}],[\"成功\",{\"1\":{\"354\":1}}],[\"成功状态码\",{\"1\":{\"354\":1}}],[\"成为了最受欢迎和使用的版本控制系统之一\",{\"1\":{\"333\":1}}],[\"成为企业级开发语言\",{\"1\":{\"163\":1}}],[\"成年人\",{\"1\":{\"254\":1,\"558\":1}}],[\"三元运算符\",{\"0\":{\"558\":1},\"1\":{\"558\":1}}],[\"三元条件运算符\",{\"1\":{\"254\":2}}],[\"三次握手建立了连接的双向确认和初始化序列号\",{\"1\":{\"361\":1}}],[\"三次握手和四次挥手的目的是确保连接的可靠建立和关闭\",{\"1\":{\"361\":1}}],[\"三次握手和四次挥手都是tcp协议中用于建立和关闭连接的过程\",{\"1\":{\"361\":1}}],[\"三次握手\",{\"1\":{\"361\":1}}],[\"三次握手与四次挥手\",{\"0\":{\"361\":1}}],[\"三斜线指令在较新的\",{\"1\":{\"331\":1}}],[\"三斜线指令以\",{\"1\":{\"331\":1}}],[\"三斜线指令是一种特殊的注释语法\",{\"1\":{\"331\":1}}],[\"三斜线指令\",{\"0\":{\"331\":1}}],[\"三大特性\",{\"1\":{\"183\":1}}],[\"逻辑非运算符\",{\"1\":{\"254\":2}}],[\"逻辑或运算符\",{\"1\":{\"254\":2}}],[\"逻辑与运算符\",{\"1\":{\"254\":2}}],[\"逻辑运算符\",{\"1\":{\"135\":1,\"254\":1}}],[\"复制文件\",{\"1\":{\"597\":1}}],[\"复制\",{\"0\":{\"597\":1}}],[\"复制静态文件或文件夹到输出目录\",{\"1\":{\"456\":1}}],[\"复杂算法的实现等\",{\"1\":{\"269\":1}}],[\"复合赋值运算符\",{\"1\":{\"254\":5,\"552\":1}}],[\"复选框\",{\"1\":{\"30\":1}}],[\"赋值初始值为\",{\"1\":{\"311\":1}}],[\"赋值运算符\",{\"0\":{\"552\":1},\"1\":{\"254\":1,\"552\":1}}],[\"赋值不生效\",{\"1\":{\"191\":1}}],[\"除法运算符\",{\"1\":{\"254\":2,\"551\":1}}],[\"除了比较值\",{\"1\":{\"540\":1}}],[\"除了函数外\",{\"1\":{\"525\":1}}],[\"除了函数的返回类型\",{\"1\":{\"310\":1}}],[\"除了管理模块和依赖\",{\"1\":{\"510\":1}}],[\"除了之前提到的特性\",{\"1\":{\"497\":1}}],[\"除了代码压缩外\",{\"1\":{\"469\":1}}],[\"除了在路由组件之间实现过渡效果外\",{\"1\":{\"395\":1}}],[\"除了重定向\",{\"1\":{\"389\":1}}],[\"除了描述对象类型外\",{\"1\":{\"318\":1}}],[\"除了默认编号\",{\"1\":{\"314\":1}}],[\"除了默认插槽外\",{\"1\":{\"96\":1}}],[\"除了存储变量和简单数据类型的值的栈区域\",{\"1\":{\"274\":1}}],[\"除了原生的异步编程机制外\",{\"1\":{\"272\":1}}],[\"除了浏览器环境的异步任务外\",{\"1\":{\"270\":1}}],[\"除了浏览器缓存外\",{\"1\":{\"55\":1}}],[\"除了直接在对象字面量中定义属性和方法\",{\"1\":{\"259\":1}}],[\"除了以上列举的运算符\",{\"1\":{\"254\":1}}],[\"除了按需导入具名的模块内容\",{\"1\":{\"202\":1}}],[\"除了通过export和import关键字导入和导出具名的模块内容\",{\"1\":{\"202\":1}}],[\"除了\",{\"1\":{\"192\":1,\"240\":1,\"327\":1}}],[\"除了拦截属性的读取和写入\",{\"1\":{\"188\":1}}],[\"除了生成器函数返回的迭代器对象具有\",{\"1\":{\"186\":1}}],[\"除了使用javascript编写配置文件外\",{\"1\":{\"454\":1}}],[\"除了使用\",{\"1\":{\"187\":1,\"391\":1}}],[\"除了使用s修饰符外\",{\"1\":{\"168\":1}}],[\"除了使用props传递数据外\",{\"1\":{\"93\":1}}],[\"除了flex属性\",{\"1\":{\"155\":1}}],[\"除了column\",{\"1\":{\"154\":1}}],[\"除了css过渡外\",{\"1\":{\"98\":1}}],[\"除了可以侦听单个属性外\",{\"1\":{\"110\":1}}],[\"除了基本类型的初始值\",{\"1\":{\"102\":1}}],[\"除了上述示例中的插件\",{\"1\":{\"456\":1}}],[\"除了上述示例中的加载器\",{\"1\":{\"455\":1}}],[\"除了上述示例外\",{\"1\":{\"189\":1}}],[\"除了上述特性和方法之外\",{\"1\":{\"152\":1}}],[\"除了上述常见的数据类型\",{\"1\":{\"136\":1}}],[\"除了上述的主要变化之外\",{\"1\":{\"99\":1}}],[\"除了上述工具\",{\"1\":{\"58\":1}}],[\"除了核心功能默认内置的指令\",{\"1\":{\"70\":1}}],[\"除了常用的事件对象属性\",{\"1\":{\"27\":1}}],[\"算术运算符\",{\"0\":{\"551\":1},\"1\":{\"254\":1}}],[\"美元符号\",{\"1\":{\"249\":1}}],[\"听力或移动功能受限的用户\",{\"1\":{\"246\":1}}],[\"脚本会停止执行\",{\"1\":{\"599\":1}}],[\"脚本会继续执行\",{\"1\":{\"599\":1}}],[\"脚本中变量可被引用的部分\",{\"1\":{\"524\":1}}],[\"脚本以\",{\"1\":{\"514\":1}}],[\"脚本可以放在文档中的任何位置\",{\"1\":{\"514\":1}}],[\"脚本来操纵和填充数据\",{\"1\":{\"245\":1}}],[\"脚手架就安装好了\",{\"1\":{\"88\":1}}],[\"脚手架创建和管理\",{\"1\":{\"88\":1}}],[\"脚手架可以简化项目创建\",{\"1\":{\"88\":1}}],[\"脚手架\",{\"0\":{\"88\":1},\"1\":{\"88\":3}}],[\"拖动结束时触发\",{\"1\":{\"242\":1}}],[\"拖动元素在目标元素上释放时触发\",{\"1\":{\"242\":1}}],[\"拖动元素在目标元素上方时触发\",{\"1\":{\"242\":1}}],[\"拖动元素离开目标元素时触发\",{\"1\":{\"242\":1}}],[\"拖动元素进入目标元素时触发\",{\"1\":{\"242\":1}}],[\"拖动开始时触发\",{\"1\":{\"242\":1}}],[\"拖放事件\",{\"1\":{\"242\":1}}],[\"拖放功能\",{\"0\":{\"242\":1}}],[\"拖拽过来\",{\"1\":{\"70\":1}}],[\"跨站请求伪造\",{\"1\":{\"359\":1}}],[\"跨域请求\",{\"1\":{\"349\":1}}],[\"跨域资源共享\",{\"1\":{\"238\":1}}],[\"跨文档通信\",{\"0\":{\"238\":1}}],[\"跨平台\",{\"1\":{\"45\":1,\"128\":1,\"513\":1}}],[\"跨平台开发\",{\"1\":{\"9\":1}}],[\"弃用的技术\",{\"1\":{\"236\":1}}],[\"存储的键名\",{\"1\":{\"439\":1}}],[\"存储的是复杂数据类型\",{\"1\":{\"273\":1}}],[\"存储应用程序的状态数据\",{\"1\":{\"425\":1}}],[\"存储数据的一种机制\",{\"1\":{\"357\":1}}],[\"存储数据\",{\"1\":{\"305\":1}}],[\"存储之外\",{\"1\":{\"240\":1}}],[\"存储方式\",{\"1\":{\"236\":1}}],[\"存储\",{\"0\":{\"236\":1},\"1\":{\"236\":1,\"400\":1,\"401\":2}}],[\"希伯来语\",{\"1\":{\"235\":1}}],[\"希望以上的回答对您有帮助\",{\"1\":{\"415\":1}}],[\"希望这个回答对你有帮助\",{\"1\":{\"319\":1}}],[\"希望这种语言能够成为国际标准\",{\"1\":{\"164\":1}}],[\"希望能够帮助你更好地学习react\",{\"1\":{\"6\":1}}],[\"技术\",{\"1\":{\"234\":1}}],[\"地理定位\",{\"0\":{\"229\":1}}],[\"地址\",{\"1\":{\"227\":1}}],[\"绘制\",{\"1\":{\"237\":1}}],[\"绘制图形和动画效果\",{\"1\":{\"228\":1}}],[\"绘图等\",{\"1\":{\"225\":1}}],[\"音频\",{\"0\":{\"222\":1},\"1\":{\"368\":1}}],[\"音频和视频\",{\"1\":{\"220\":1}}],[\"音频或视频的\",{\"1\":{\"211\":1}}],[\"限制文件大小等\",{\"1\":{\"581\":1}}],[\"限制其必须满足指定的条件\",{\"1\":{\"320\":1}}],[\"限制变量的取值范围\",{\"1\":{\"314\":1}}],[\"限制输入字段的最大长度\",{\"1\":{\"217\":1}}],[\"限制所返回的数据行\",{\"1\":{\"135\":1}}],[\"空合并运算符\",{\"1\":{\"604\":1}}],[\"空数组\",{\"1\":{\"257\":1}}],[\"空字符串\",{\"1\":{\"252\":1}}],[\"空值\",{\"0\":{\"536\":1},\"1\":{\"251\":1}}],[\"空值合并运算符\",{\"1\":{\"173\":2}}],[\"空格\",{\"1\":{\"213\":1}}],[\"顶部和底部会有额外的空白\",{\"1\":{\"210\":1}}],[\"加强用户密码的安全性\",{\"1\":{\"602\":1}}],[\"加速\",{\"1\":{\"583\":1}}],[\"加密等\",{\"1\":{\"506\":1}}],[\"加快构建速度\",{\"1\":{\"504\":1}}],[\"加快重新构建的速度\",{\"1\":{\"504\":1}}],[\"加快对相同查询的响应速度\",{\"1\":{\"465\":1}}],[\"加快用户访问速度\",{\"1\":{\"465\":1}}],[\"加快开发迭代的速度\",{\"1\":{\"459\":1}}],[\"加快开发速度\",{\"1\":{\"453\":1,\"459\":1}}],[\"加快开发效率\",{\"1\":{\"438\":1}}],[\"加快资源加载速度\",{\"1\":{\"356\":1}}],[\"加法运算符\",{\"1\":{\"254\":2,\"551\":1}}],[\"加粗标签\",{\"1\":{\"209\":1}}],[\"加载顺序\",{\"1\":{\"463\":1}}],[\"加载器可以通过webpack配置文件中的module\",{\"1\":{\"476\":1}}],[\"加载器可以通过test字段匹配文件\",{\"1\":{\"455\":1}}],[\"加载器可以在模块导入阶段应用转换\",{\"1\":{\"476\":1}}],[\"加载器可以在导入模块时对其进行转换\",{\"1\":{\"455\":1}}],[\"加载器的作用是在模块被添加到依赖图中之前\",{\"1\":{\"455\":1}}],[\"加载器使用链式调用\",{\"1\":{\"453\":1}}],[\"加载器允许webpack处理非javascript的文件\",{\"1\":{\"453\":1}}],[\"加载器\",{\"0\":{\"455\":1},\"1\":{\"453\":1,\"454\":1,\"455\":1}}],[\"加载数据时要避免频繁的请求\",{\"1\":{\"349\":1}}],[\"加载更多\",{\"1\":{\"348\":1}}],[\"加载完成后的处理\",{\"1\":{\"301\":1}}],[\"加载完成后显示组件\",{\"1\":{\"51\":1}}],[\"加载并插入html内容\",{\"1\":{\"301\":1}}],[\"加载时机\",{\"1\":{\"203\":1}}],[\"加载时间线\",{\"1\":{\"58\":1}}],[\"加载对应的组件来更新页面的内容\",{\"1\":{\"63\":1}}],[\"锚点元素\",{\"1\":{\"209\":1}}],[\"段落元素\",{\"1\":{\"209\":1}}],[\"到构建目标文件夹\",{\"1\":{\"476\":1}}],[\"到redux的store时\",{\"1\":{\"401\":1}}],[\"到redux的store中\",{\"1\":{\"401\":1}}],[\"到另一个\",{\"1\":{\"374\":1}}],[\"到\",{\"1\":{\"209\":1,\"226\":1,\"257\":1}}],[\"到50\",{\"1\":{\"153\":1}}],[\"元组的长度是固定的\",{\"1\":{\"310\":1}}],[\"元组的每个元素按照定义时的顺序进行访问\",{\"1\":{\"310\":1}}],[\"元组使用\",{\"1\":{\"310\":1}}],[\"元数据用于提供关于文档的额外信息\",{\"1\":{\"208\":1}}],[\"元数据\",{\"0\":{\"208\":1}}],[\"元素时\",{\"1\":{\"275\":1}}],[\"元素添加事件监听器\",{\"1\":{\"275\":1}}],[\"元素中使用\",{\"1\":{\"246\":1}}],[\"元素中添加快捷键\",{\"1\":{\"232\":1}}],[\"元素和\",{\"1\":{\"235\":1}}],[\"元素创建链接\",{\"1\":{\"224\":1}}],[\"元素可以包含属性\",{\"1\":{\"211\":1}}],[\"元素根据其在页面上显示的方式被分为块级元素和内联元素\",{\"1\":{\"210\":1}}],[\"元素将以平滑的动画效果在1秒的时间内从初始状态过渡到悬停状态\",{\"1\":{\"152\":1}}],[\"元素将以平滑动画效果在1秒的时间内从初始状态过渡到悬停状态\",{\"1\":{\"150\":1}}],[\"元素按照其在html文档中的顺序自动流动\",{\"1\":{\"147\":1}}],[\"元素的值\",{\"1\":{\"281\":1}}],[\"元素的引用\",{\"1\":{\"281\":1}}],[\"元素的大小会相对于父元素或视口的大小进行调整\",{\"1\":{\"148\":1}}],[\"元素的位置由其前面的元素决定\",{\"1\":{\"147\":1}}],[\"元素的宽度和高度属性将包括内边距和边框\",{\"1\":{\"146\":1}}],[\"元素的宽度和高度属性\",{\"1\":{\"146\":2}}],[\"元素的样式也会相应地更新\",{\"1\":{\"85\":1}}],[\"元素选择器通过html元素的名称选择元素\",{\"1\":{\"143\":1}}],[\"元素选择器\",{\"1\":{\"143\":1}}],[\"元素会以淡入淡出的效果进行过渡\",{\"1\":{\"98\":1}}],[\"元素被\",{\"1\":{\"70\":1}}],[\"元素进行底层操作\",{\"1\":{\"70\":1}}],[\"元素\",{\"1\":{\"70\":1,\"228\":2,\"239\":1,\"244\":1,\"245\":1,\"246\":1}}],[\"元素总是会被渲染\",{\"1\":{\"70\":1}}],[\"页面展示的内容等等\",{\"1\":{\"401\":1}}],[\"页面的一部分或者是一段纯文本\",{\"1\":{\"367\":1}}],[\"页面的内容\",{\"1\":{\"207\":1}}],[\"页面导航和历史操作\",{\"1\":{\"266\":1}}],[\"页面历史记录\",{\"1\":{\"266\":1}}],[\"页面之间进行安全的通信和数据共享\",{\"1\":{\"238\":1}}],[\"页面之间进行跨文档通信是很常见的需求\",{\"1\":{\"238\":1}}],[\"页面内容\",{\"1\":{\"207\":1}}],[\"页面加载于\",{\"1\":{\"70\":1}}],[\"阮一峰es6入门教程\",{\"1\":{\"204\":1}}],[\"转义\",{\"0\":{\"549\":1}}],[\"转换选项等\",{\"1\":{\"463\":1}}],[\"转换文件格式等方式\",{\"1\":{\"455\":1}}],[\"转换为小写或大写\",{\"0\":{\"547\":1}}],[\"转换为javascript模块\",{\"1\":{\"463\":1}}],[\"转换为webpack可以处理的模块\",{\"1\":{\"455\":1}}],[\"转换为false\",{\"1\":{\"252\":1}}],[\"转场动画是一种在路由切换过程中应用于页面元素的动画效果\",{\"1\":{\"395\":1}}],[\"转场动画\",{\"1\":{\"395\":1}}],[\"转译器或构建工具来支持装饰器的使用\",{\"1\":{\"204\":1}}],[\"转化后的ref对象是响应式的\",{\"1\":{\"102\":1}}],[\"参与webpack的社区讨论\",{\"1\":{\"503\":1}}],[\"参与依赖\",{\"1\":{\"43\":1}}],[\"参数是在参数列表中声明的\",{\"1\":{\"526\":1}}],[\"参数是通过调用代码将值传递给函数的局部变量\",{\"1\":{\"526\":1}}],[\"参数作用域\",{\"0\":{\"526\":1}}],[\"参数和查询字符串等信息\",{\"1\":{\"398\":2}}],[\"参数和局部变量\",{\"1\":{\"277\":1}}],[\"参数的值\",{\"1\":{\"392\":1}}],[\"参数列表和返回类型\",{\"1\":{\"313\":1}}],[\"参数\",{\"1\":{\"260\":2,\"313\":1,\"315\":1,\"366\":1,\"515\":1}}],[\"参数装饰器用于装饰函数或方法的参数\",{\"1\":{\"204\":1}}],[\"参数装饰器\",{\"1\":{\"204\":1}}],[\"参考网站\",{\"1\":{\"204\":1}}],[\"装饰器模式\",{\"1\":{\"592\":1}}],[\"装饰器模式等\",{\"1\":{\"313\":1}}],[\"装饰器函数接收一个字符串参数\",{\"1\":{\"324\":1}}],[\"装饰器目前仍处于提案阶段\",{\"1\":{\"204\":1}}],[\"装饰器是一种强大的元编程特性\",{\"1\":{\"204\":1}}],[\"装饰器组合可以通过将多个装饰器放置在同一行\",{\"1\":{\"204\":1}}],[\"装饰器组合\",{\"1\":{\"204\":1}}],[\"装饰器可以在运行时对参数进行检查或修改\",{\"1\":{\"204\":1}}],[\"装饰器通过使用特殊的语法\",{\"1\":{\"204\":1}}],[\"装饰器\",{\"0\":{\"204\":1}}],[\"装饰器的例子\",{\"1\":{\"52\":1}}],[\"灵活可扩展的框架\",{\"1\":{\"604\":1}}],[\"灵活性\",{\"1\":{\"363\":1}}],[\"灵活的\",{\"1\":{\"363\":1}}],[\"灵活选择合适的打包工具\",{\"1\":{\"201\":1}}],[\"灵活和易读\",{\"1\":{\"172\":1}}],[\"显式地指定了初始值为\",{\"1\":{\"310\":1}}],[\"显式释放不再需要的资源和引用\",{\"1\":{\"275\":1}}],[\"显式类型转换\",{\"1\":{\"252\":1}}],[\"显式转换\",{\"1\":{\"252\":1}}],[\"显式转换和隐式转换\",{\"1\":{\"252\":1}}],[\"显式导入和导出\",{\"1\":{\"201\":1}}],[\"显示表单错误信息\",{\"1\":{\"580\":1}}],[\"显示home组件\",{\"1\":{\"377\":1}}],[\"显示服务器的响应\",{\"1\":{\"346\":1}}],[\"显示\",{\"1\":{\"300\":1}}],[\"显示和操作图像和其他多媒体元素\",{\"1\":{\"300\":1}}],[\"显示或隐藏元素\",{\"1\":{\"288\":1}}],[\"显示数据库列表\",{\"1\":{\"133\":1}}],[\"显示为\",{\"1\":{\"16\":1}}],[\"测试多个组件或模块的集成\",{\"1\":{\"372\":1}}],[\"测试和单一职责原则\",{\"1\":{\"407\":1}}],[\"测试和调试是迭代的过程\",{\"1\":{\"372\":1}}],[\"测试和调试是软件开发过程中关键的环节\",{\"1\":{\"372\":1}}],[\"测试和调试\",{\"0\":{\"372\":1},\"1\":{\"434\":1}}],[\"测试和重用\",{\"1\":{\"199\":1}}],[\"测试应用程序的用户界面\",{\"1\":{\"372\":1}}],[\"测试应用程序\",{\"1\":{\"364\":1}}],[\"测试匹配\",{\"1\":{\"279\":1}}],[\"测试完成后\",{\"1\":{\"58\":1}}],[\"继续\",{\"1\":{\"354\":1}}],[\"继续从任务队列中取出任务执行\",{\"1\":{\"270\":1}}],[\"继续执行后续的代码\",{\"1\":{\"599\":1}}],[\"继续执行父级元素的事件处理函数\",{\"1\":{\"263\":1}}],[\"继续执行生成器函数的下一个\",{\"1\":{\"197\":1}}],[\"继承父类\",{\"1\":{\"583\":1}}],[\"继承允许创建新的类\",{\"1\":{\"583\":1}}],[\"继承是面向对象编程中的一种重要机制\",{\"1\":{\"312\":1}}],[\"继承是指一个类\",{\"1\":{\"183\":1}}],[\"继承实现了代码的重用和层次化的组织\",{\"1\":{\"183\":1}}],[\"继承\",{\"1\":{\"183\":1,\"312\":1,\"583\":2}}],[\"继承和多态等概念\",{\"1\":{\"278\":1}}],[\"继承和多态是面向对象编程的核心特性\",{\"1\":{\"183\":1}}],[\"继承和多态\",{\"1\":{\"183\":1}}],[\"值相等\",{\"1\":{\"540\":2}}],[\"值指明一个变量是否为空值\",{\"1\":{\"536\":1}}],[\"值表示变量没有值\",{\"1\":{\"536\":1}}],[\"值得注意的是\",{\"1\":{\"433\":1,\"604\":1}}],[\"值得一提的是\",{\"1\":{\"266\":1}}],[\"值2\",{\"1\":{\"254\":1}}],[\"值1\",{\"1\":{\"254\":1}}],[\"值\",{\"1\":{\"196\":2,\"256\":2}}],[\"值以及其他匹配条件来选择元素\",{\"1\":{\"143\":1}}],[\"情况\",{\"1\":{\"193\":1}}],[\"时执行的回调函数\",{\"1\":{\"193\":2}}],[\"时\",{\"1\":{\"193\":1,\"263\":1,\"267\":1,\"272\":1,\"310\":2,\"330\":2,\"392\":4,\"401\":2,\"528\":1}}],[\"时间戳\",{\"1\":{\"570\":2}}],[\"时间达到定时器设定的延迟时间\",{\"1\":{\"270\":1}}],[\"时间的单位可以是毫秒\",{\"1\":{\"151\":2}}],[\"时间等特定场景\",{\"1\":{\"145\":1}}],[\"时间和日期时间数据\",{\"1\":{\"136\":1}}],[\"赛跑\",{\"1\":{\"193\":1}}],[\"失败\",{\"1\":{\"193\":4}}],[\"操作系统类型等\",{\"1\":{\"509\":1}}],[\"操作和获取方法\",{\"1\":{\"444\":1}}],[\"操作和getter划分到不同的模块\",{\"1\":{\"435\":1}}],[\"操作和getter\",{\"1\":{\"434\":1}}],[\"操作\",{\"1\":{\"434\":1,\"435\":1,\"444\":3}}],[\"操作失败时调用\",{\"1\":{\"322\":1}}],[\"操作失败的处理逻辑\",{\"1\":{\"192\":1}}],[\"操作成功时调用\",{\"1\":{\"322\":1}}],[\"操作成功完成的处理逻辑\",{\"1\":{\"192\":1}}],[\"操作提供了许多方法来操纵网页的内容\",{\"1\":{\"265\":1}}],[\"操作符\",{\"1\":{\"259\":1}}],[\"操作网页元素以及与服务器进行通信等\",{\"1\":{\"248\":1}}],[\"读取文件内容\",{\"0\":{\"595\":1}}],[\"读取文件内容或执行其他操作\",{\"1\":{\"594\":1}}],[\"读取文件内容并以字符串形式返回\",{\"1\":{\"570\":1}}],[\"读取文件内容并打印在控制台上\",{\"1\":{\"509\":1}}],[\"读取文件等\",{\"1\":{\"192\":1}}],[\"读取\",{\"1\":{\"509\":1}}],[\"读已提交\",{\"1\":{\"137\":1}}],[\"已创建\",{\"1\":{\"354\":1}}],[\"已拒绝\",{\"1\":{\"192\":1}}],[\"已完成\",{\"1\":{\"192\":1,\"196\":1}}],[\"已经被git跟踪的文件不受\",{\"1\":{\"334\":1}}],[\"已经内置了许多常用库的声明文件\",{\"1\":{\"325\":1}}],[\"已经执行完毕\",{\"1\":{\"268\":1}}],[\"已经废弃了reflect\",{\"1\":{\"191\":1}}],[\"已经在\",{\"1\":{\"163\":1}}],[\"已废弃\",{\"1\":{\"191\":1}}],[\"陷阱\",{\"1\":{\"189\":1}}],[\"先使用npm\",{\"1\":{\"512\":1}}],[\"先使用css\",{\"1\":{\"476\":1}}],[\"先使用sass\",{\"1\":{\"463\":1}}],[\"先进先出\",{\"1\":{\"264\":1,\"271\":1}}],[\"先调用\",{\"1\":{\"189\":1}}],[\"先执行所有的微任务\",{\"1\":{\"271\":1}}],[\"先执行进入动画\",{\"1\":{\"123\":1}}],[\"先执行离开动画\",{\"1\":{\"123\":1}}],[\"撤销某些操作或查找丢失的提交很有帮助\",{\"1\":{\"338\":1}}],[\"撤销修改\",{\"1\":{\"334\":1}}],[\"撤销代理\",{\"1\":{\"189\":1}}],[\"撤销事务的所有操作\",{\"1\":{\"137\":1}}],[\"拦截获取属性描述符操作\",{\"1\":{\"189\":1}}],[\"拦截获取和设置原型操作\",{\"1\":{\"189\":2}}],[\"拦截阻止扩展操作\",{\"1\":{\"189\":1}}],[\"拦截对象的可扩展性操作\",{\"1\":{\"189\":1}}],[\"拦截对象的可扩展性\",{\"1\":{\"189\":1}}],[\"拦截构造函数和函数的调用操作\",{\"1\":{\"189\":1}}],[\"拦截构造函数的调用操作\",{\"1\":{\"189\":3}}],[\"拦截构造函数调用操作\",{\"1\":{\"188\":1}}],[\"拦截函数的调用操作\",{\"1\":{\"189\":3}}],[\"拦截函数调用操作\",{\"1\":{\"188\":1}}],[\"拦截属性描述符\",{\"1\":{\"189\":1}}],[\"拦截属性的定义操作\",{\"1\":{\"189\":1}}],[\"拦截属性的删除操作\",{\"1\":{\"189\":2}}],[\"拦截属性的写入操作\",{\"1\":{\"188\":1}}],[\"拦截属性的写入\",{\"1\":{\"188\":2}}],[\"拦截属性的读取操作\",{\"1\":{\"188\":1}}],[\"拦截属性的读取\",{\"1\":{\"188\":3}}],[\"拦截设置原型操作\",{\"1\":{\"189\":2}}],[\"拦截\",{\"1\":{\"188\":1,\"189\":4}}],[\"写入文件\",{\"0\":{\"596\":1}}],[\"写入和删除文件等\",{\"1\":{\"509\":1}}],[\"写入\",{\"1\":{\"369\":1}}],[\"写入操作\",{\"1\":{\"188\":1}}],[\"写法\",{\"0\":{\"82\":1,\"85\":1},\"1\":{\"18\":1}}],[\"理解和处理\",{\"1\":{\"354\":1}}],[\"理解和合理运用这些特性对于设计和实现面向对象的系统非常重要\",{\"1\":{\"183\":1}}],[\"理解事件循环是理解javascript异步编程的关键\",{\"1\":{\"264\":1}}],[\"理解this的指向对于编写复杂的javascript代码和避免常见错误非常重要\",{\"1\":{\"262\":1}}],[\"理解作用域链对于正确编写和理解javascript代码至关重要\",{\"1\":{\"261\":1}}],[\"理想情况下\",{\"1\":{\"46\":1}}],[\"封装是指将数据和对数据的操作封装在类的内部\",{\"1\":{\"583\":1}}],[\"封装是将数据和操作数据的方法捆绑在一起\",{\"1\":{\"183\":1}}],[\"封装性和信息隐藏\",{\"1\":{\"327\":1}}],[\"封装通过将相关的数据和方法组织在一起\",{\"1\":{\"312\":1}}],[\"封装数据和行为\",{\"1\":{\"268\":1}}],[\"封装\",{\"1\":{\"183\":3,\"312\":2,\"583\":1}}],[\"称为handler\",{\"1\":{\"436\":1}}],[\"称为type\",{\"1\":{\"436\":1}}],[\"称为\",{\"1\":{\"183\":1,\"236\":1,\"425\":1,\"428\":1,\"482\":1}}],[\"称之为生命周期\",{\"1\":{\"112\":1}}],[\"弱类型语言\",{\"0\":{\"523\":1}}],[\"弱映射\",{\"0\":{\"179\":1}}],[\"弱集合\",{\"0\":{\"178\":1}}],[\"映射类型\",{\"1\":{\"319\":1}}],[\"映射\",{\"0\":{\"177\":1}}],[\"管理项目的脚本命令等\",{\"1\":{\"510\":1}}],[\"管理和复用代码的开发方法\",{\"1\":{\"327\":1}}],[\"管理全局symbol\",{\"1\":{\"174\":1}}],[\"管理组件之间的通信\",{\"1\":{\"9\":1}}],[\"运算符声明\",{\"1\":{\"604\":1}}],[\"运算符来连接两个字符串\",{\"1\":{\"544\":1}}],[\"运算符将多个类型组合成一个交叉类型\",{\"1\":{\"319\":1}}],[\"运算符将多个类型组合成一个联合类型\",{\"1\":{\"319\":1}}],[\"运算符将字符串拼接在一起\",{\"1\":{\"256\":1}}],[\"运算符访问第一个字符\",{\"1\":{\"256\":1}}],[\"运算符返回的结果是一个布尔值\",{\"1\":{\"253\":1}}],[\"运算符返回的结果是一个字符串\",{\"1\":{\"253\":1}}],[\"运算符可以用来判断一个对象是否是某个类的实例\",{\"1\":{\"253\":1}}],[\"运算符可以用来检测一个值的数据类型\",{\"1\":{\"253\":1}}],[\"运算符进行类型检测\",{\"1\":{\"253\":1}}],[\"运算符和\",{\"1\":{\"189\":1,\"253\":1}}],[\"运算符的操作\",{\"1\":{\"188\":1,\"189\":1}}],[\"运算符\",{\"0\":{\"173\":1,\"254\":1,\"550\":1},\"1\":{\"253\":2,\"256\":1,\"604\":1}}],[\"运行以下命令来安装webpack及相关依赖\",{\"1\":{\"475\":1}}],[\"运行\",{\"0\":{\"451\":1}}],[\"运行应用程序\",{\"1\":{\"440\":1}}],[\"运行应用程序并访问静态文件或资源的路径\",{\"1\":{\"368\":1}}],[\"运行应用程序并在浏览器中访问\",{\"1\":{\"367\":1}}],[\"运行应用\",{\"1\":{\"412\":1}}],[\"运行顺序和不支持多重继承等问题\",{\"1\":{\"330\":1}}],[\"运行时环境\",{\"1\":{\"276\":1,\"363\":1,\"364\":1,\"506\":1}}],[\"运行时环境的一部分\",{\"1\":{\"270\":1}}],[\"运行sql查询\",{\"1\":{\"132\":1}}],[\"运行安装程序\",{\"1\":{\"132\":1,\"507\":1}}],[\"运行你的应用程序\",{\"1\":{\"5\":1}}],[\"运行项目自定义的脚本命令\",{\"1\":{\"510\":1}}],[\"运行项目的测试脚本\",{\"1\":{\"510\":1}}],[\"运行项目的启动脚本\",{\"1\":{\"510\":1}}],[\"运行项目\",{\"0\":{\"5\":1},\"1\":{\"88\":1,\"100\":1}}],[\"某些字符具有特殊的含义\",{\"1\":{\"213\":1}}],[\"某些特性可能需要在目标环境中进行支持或使用特定的语法转换工具\",{\"1\":{\"172\":1}}],[\"某些数据库还支持特定的数据类型\",{\"1\":{\"136\":1}}],[\"抛出异常或进入无限循环等情况\",{\"1\":{\"310\":1}}],[\"抛出错误\",{\"1\":{\"204\":1}}],[\"抛出\",{\"1\":{\"172\":1,\"189\":1}}],[\"尾部逗号被忽略\",{\"1\":{\"172\":1}}],[\"尾调用优化\",{\"1\":{\"172\":1}}],[\"尾调用优化允许js引擎优化尾部调用\",{\"1\":{\"172\":1}}],[\"尾递归是一种特殊的尾调用\",{\"1\":{\"172\":1}}],[\"尾递归\",{\"1\":{\"172\":2}}],[\"扩展提供的函数或preg系列函数来处理正则表达式\",{\"1\":{\"604\":1}}],[\"扩展和库\",{\"1\":{\"602\":1}}],[\"扩展性和模块化\",{\"1\":{\"467\":1}}],[\"扩展jquery\",{\"0\":{\"298\":1}}],[\"扩展的函数支持\",{\"1\":{\"172\":1}}],[\"扩展运算符可以将一个数组展开为逗号分隔的参数序列\",{\"1\":{\"170\":1}}],[\"扩展运算符\",{\"1\":{\"170\":1}}],[\"剩余参数允许将多个函数参数收集到一个数组中\",{\"1\":{\"172\":1}}],[\"剩余参数\",{\"1\":{\"172\":1,\"313\":1}}],[\"展开为单独的元素\",{\"1\":{\"173\":1}}],[\"展开运算符\",{\"1\":{\"173\":2}}],[\"展开操作符\",{\"1\":{\"172\":2}}],[\"展示tree\",{\"1\":{\"462\":1}}],[\"展示组件只负责显示数据和交互\",{\"1\":{\"407\":1}}],[\"展示如何创建和使用类装饰器\",{\"1\":{\"324\":1}}],[\"展示如何创建和使用迭代器\",{\"1\":{\"323\":1}}],[\"展示如何使用路由重定向\",{\"1\":{\"418\":1}}],[\"展示如何使用生成器函数创建迭代器\",{\"1\":{\"323\":1}}],[\"展示如何使用\",{\"1\":{\"192\":1}}],[\"展示加载的数据\",{\"1\":{\"50\":1}}],[\"展示了抽象类的使用\",{\"1\":{\"591\":1}}],[\"展示了接口的使用\",{\"1\":{\"591\":1}}],[\"展示了闭包的使用\",{\"1\":{\"590\":1}}],[\"展示了redux与react的集成\",{\"1\":{\"406\":1}}],[\"展示了生成器函数的异步应用\",{\"1\":{\"197\":1}}],[\"展示了css盒模型的不同部分\",{\"1\":{\"146\":1}}],[\"展示了如何实现一个基本的自定义迭代器类\",{\"1\":{\"582\":1}}],[\"展示了如何接收用户输入\",{\"1\":{\"580\":1}}],[\"展示了如何在\",{\"1\":{\"422\":1}}],[\"展示了如何创建一个自定义的计数器hooks\",{\"1\":{\"42\":1}}],[\"展示了如何使用任务队列来处理异步任务\",{\"1\":{\"270\":1}}],[\"展示了如何使用css过渡来创建基本的元素动画效果\",{\"1\":{\"152\":1}}],[\"展示了如何使用css的2d转换方法来创建基本的元素动画效果\",{\"1\":{\"150\":1}}],[\"展示了如何使用\",{\"1\":{\"126\":1}}],[\"展示了如何使用事件总线实现发布\",{\"1\":{\"38\":1}}],[\"展示了如何使用上下文api\",{\"1\":{\"37\":1}}],[\"展示了如何使用属性传递在父组件中向子组件传递数据和函数\",{\"1\":{\"36\":1}}],[\"展示了使用jsx编写一个react组件的ui结构\",{\"1\":{\"13\":1}}],[\"传输或与其他平台交互\",{\"1\":{\"604\":1}}],[\"传统匿名函数仍然是更适合的选择\",{\"1\":{\"571\":1}}],[\"传统匿名函数\",{\"1\":{\"571\":1}}],[\"传统的web应用程序在与服务器进行数据交换时\",{\"1\":{\"340\":1}}],[\"传统的函数表达式\",{\"1\":{\"172\":1}}],[\"传递\",{\"1\":{\"519\":1}}],[\"传递一些参数\",{\"1\":{\"428\":1}}],[\"传递一个空数组作为依赖项\",{\"1\":{\"50\":1}}],[\"传递身份验证信息\",{\"1\":{\"355\":1}}],[\"传递了一个名为name的数据和名为handleclick的函数\",{\"1\":{\"36\":1}}],[\"传递属性等操作\",{\"1\":{\"19\":1}}],[\"箭头函数在某些情况下可以使代码更加简洁和易读\",{\"1\":{\"571\":1}}],[\"箭头函数有以下几个限制\",{\"1\":{\"571\":1}}],[\"箭头函数没有显式的\",{\"1\":{\"571\":1}}],[\"箭头函数使用\",{\"1\":{\"571\":1}}],[\"箭头函数提供了一种更紧凑和直观的方式来编写小型的回调或匿名函数\",{\"1\":{\"571\":1}}],[\"箭头函数提供了一种简洁的语法来定义函数\",{\"1\":{\"258\":1}}],[\"箭头函数add接受两个参数\",{\"1\":{\"258\":1}}],[\"箭头函数是一种更简洁的函数语法形式\",{\"1\":{\"172\":1}}],[\"箭头函数\",{\"0\":{\"571\":1},\"1\":{\"172\":2,\"258\":1,\"313\":1,\"571\":1}}],[\"静态资源缓存\",{\"1\":{\"480\":1}}],[\"静态文件和资源允许直接从服务器发送给客户端\",{\"1\":{\"368\":1}}],[\"静态文件和资源的存放位置一般是在\",{\"1\":{\"368\":1}}],[\"静态文件和资源是指在\",{\"1\":{\"368\":1}}],[\"静态文件和资源\",{\"0\":{\"368\":1}}],[\"静态解析\",{\"1\":{\"201\":1}}],[\"静态方法和静态属性\",{\"1\":{\"183\":1}}],[\"静态方法类似\",{\"1\":{\"170\":1}}],[\"静态站点生成\",{\"1\":{\"61\":1}}],[\"90\",{\"1\":{\"469\":1}}],[\"9007199254740993n\",{\"1\":{\"173\":1}}],[\"9007199254740991n\",{\"1\":{\"310\":1}}],[\"9007199254740991\",{\"1\":{\"169\":2,\"310\":1}}],[\"93804002589985\",{\"1\":{\"183\":1}}],[\"9\",{\"0\":{\"493\":1},\"1\":{\"169\":2,\"183\":2,\"279\":3,\"517\":1,\"531\":1}}],[\"999\",{\"1\":{\"144\":1}}],[\"引发副作用等\",{\"1\":{\"407\":1}}],[\"引擎的\",{\"1\":{\"506\":1}}],[\"引擎在代码解析和执行过程中的内部概念\",{\"1\":{\"280\":1}}],[\"引擎中的一项自动内存管理机制\",{\"1\":{\"274\":1}}],[\"引擎自动管理\",{\"1\":{\"273\":1}}],[\"引用文件\",{\"1\":{\"599\":1}}],[\"引用计数算法无法处理循环引用的情况\",{\"1\":{\"276\":1}}],[\"引用计数\",{\"1\":{\"276\":1}}],[\"引用类型的值可以共享和修改\",{\"1\":{\"273\":1}}],[\"引用类型的值在堆中分配内存\",{\"1\":{\"273\":1}}],[\"引用类型\",{\"1\":{\"273\":1}}],[\"引用已匹配的子字符串\",{\"1\":{\"168\":1}}],[\"引入到html中\",{\"1\":{\"476\":1}}],[\"引入插件\",{\"1\":{\"439\":1}}],[\"引入\",{\"1\":{\"331\":1}}],[\"引入某个类型定义文件\",{\"1\":{\"331\":1}}],[\"引入模块\",{\"1\":{\"327\":1}}],[\"引入jquery库\",{\"0\":{\"284\":1}}],[\"引入的新组件\",{\"1\":{\"397\":1}}],[\"引入的异步编程语法糖\",{\"1\":{\"272\":1}}],[\"引入的\",{\"1\":{\"192\":1,\"195\":1}}],[\"引入了箭头函数\",{\"1\":{\"571\":1}}],[\"引入了拖放功能\",{\"1\":{\"242\":1}}],[\"引入了地理定位\",{\"1\":{\"229\":1}}],[\"引入了一些用于在客户端存储数据的机制\",{\"1\":{\"236\":1}}],[\"引入了一些新的表单元素和属性\",{\"1\":{\"227\":1}}],[\"引入了一些内置的表单验证功能\",{\"1\":{\"217\":1}}],[\"引入了许多新特性和改进\",{\"1\":{\"225\":1}}],[\"引入了具名捕获组的语法\",{\"1\":{\"168\":1}}],[\"引入了\",{\"1\":{\"168\":2,\"170\":1,\"228\":1,\"245\":1}}],[\"引入了两个新的变量声明关键字\",{\"1\":{\"165\":1}}],[\"引入vuex\",{\"1\":{\"439\":1}}],[\"引入vuex的store实例\",{\"1\":{\"427\":1}}],[\"引入vue和vuex\",{\"1\":{\"427\":1}}],[\"引入vue和vue\",{\"1\":{\"412\":1}}],[\"引入vue\",{\"0\":{\"65\":1}}],[\"α\",{\"1\":{\"168\":1}}],[\"匹配以\",{\"1\":{\"476\":2}}],[\"匹配以pattern结尾的字符串\",{\"1\":{\"279\":1}}],[\"匹配以pattern开头的字符串\",{\"1\":{\"279\":1}}],[\"匹配\",{\"1\":{\"396\":2}}],[\"匹配根路径时渲染的子组件\",{\"1\":{\"396\":1}}],[\"匹配一个或多个数字\",{\"1\":{\"279\":1}}],[\"匹配任意非元音字母\",{\"1\":{\"279\":1}}],[\"匹配任意元音字母\",{\"1\":{\"279\":1}}],[\"匹配任意字母或数字\",{\"1\":{\"279\":1}}],[\"匹配任意字符\",{\"1\":{\"168\":2}}],[\"匹配任意数字\",{\"1\":{\"279\":1}}],[\"匹配任意小写字母\",{\"1\":{\"279\":1}}],[\"匹配abc字符串\",{\"1\":{\"279\":1}}],[\"匹配操作会从目标字符串的当前索引位置开始\",{\"1\":{\"168\":1}}],[\"粘连修饰符\",{\"1\":{\"168\":1}}],[\"^aeiou\",{\"1\":{\"279\":1}}],[\"^pattern\",{\"1\":{\"279\":1}}],[\"^\",{\"1\":{\"168\":2}}],[\"正在拖动时触发\",{\"1\":{\"242\":1}}],[\"正数\",{\"1\":{\"169\":1}}],[\"正常匹配\",{\"1\":{\"168\":1}}],[\"正则表达式改进\",{\"1\":{\"604\":1}}],[\"正则表达式等特殊对象时\",{\"1\":{\"281\":1}}],[\"正则表达式等\",{\"1\":{\"281\":1}}],[\"正则表达式的构造函数\",{\"1\":{\"168\":1}}],[\"正则表达式\",{\"0\":{\"168\":1,\"279\":1},\"1\":{\"279\":1}}],[\"正规化数据库结构\",{\"1\":{\"138\":1}}],[\"😃\",{\"1\":{\"167\":1}}],[\"😂\",{\"1\":{\"167\":1}}],[\"😁\",{\"1\":{\"167\":1}}],[\"掌握解构赋值的使用方法可以提高编码效率和代码质量\",{\"1\":{\"166\":1}}],[\"掌握虚拟dom的概念和使用可能需要一些时间和学习成本\",{\"1\":{\"128\":1}}],[\"易懂\",{\"1\":{\"195\":1}}],[\"易读\",{\"1\":{\"166\":1,\"196\":1,\"314\":1}}],[\"易于学习和使用\",{\"1\":{\"604\":1}}],[\"易于调试\",{\"1\":{\"404\":2}}],[\"易于使用和定制\",{\"1\":{\"160\":1}}],[\"易于理解和维护的代码\",{\"1\":{\"40\":1}}],[\"易于理解和维护\",{\"1\":{\"18\":1}}],[\"易于追踪和调试\",{\"1\":{\"9\":1}}],[\"报错\",{\"1\":{\"165\":1}}],[\"块执行错误处理逻辑\",{\"1\":{\"198\":1}}],[\"块\",{\"1\":{\"198\":1,\"272\":1}}],[\"块将捕获错误并进行处理\",{\"1\":{\"196\":1}}],[\"块进行处理\",{\"1\":{\"196\":1}}],[\"块来捕获可能发生的错误\",{\"1\":{\"198\":1}}],[\"块来捕获错误\",{\"1\":{\"196\":1}}],[\"块来捕获并处理异步操作中的错误\",{\"1\":{\"196\":1}}],[\"块来处理清理和善后的逻辑\",{\"1\":{\"186\":1}}],[\"块中的代码会在生成器终止前被执行\",{\"1\":{\"186\":1}}],[\"块中重新声明一个新的变量\",{\"1\":{\"165\":1}}],[\"块级元素\",{\"1\":{\"210\":1}}],[\"块级元素与内联元素\",{\"0\":{\"210\":1}}],[\"块级函数是在块作用域中定义的函数\",{\"1\":{\"172\":1}}],[\"块级函数等\",{\"1\":{\"172\":1}}],[\"块级作用域可以是函数\",{\"1\":{\"311\":1}}],[\"块级作用域是在大括号\",{\"1\":{\"311\":1}}],[\"块级作用域是指由一对花括号\",{\"1\":{\"261\":1}}],[\"块级作用域是指在大括号\",{\"1\":{\"165\":1}}],[\"块级作用域\",{\"1\":{\"201\":1,\"261\":1,\"311\":2}}],[\"块级作用域内的变量无法在声明之前访问\",{\"1\":{\"165\":1}}],[\"块级作用域内的变量\",{\"1\":{\"165\":1}}],[\"循环执行的代码块\",{\"1\":{\"560\":1,\"561\":1,\"562\":1}}],[\"循环是无限的\",{\"1\":{\"310\":1}}],[\"循环和递归等\",{\"1\":{\"276\":1}}],[\"循环和事件处理等\",{\"1\":{\"15\":1}}],[\"循环引用\",{\"1\":{\"275\":1}}],[\"循环前会进行初始化\",{\"1\":{\"255\":1}}],[\"循环语句或条件语句中的大括号\",{\"1\":{\"311\":1}}],[\"循环语句\",{\"0\":{\"559\":1},\"1\":{\"255\":1}}],[\"循环等\",{\"1\":{\"196\":1}}],[\"循环遍历生成器函数的结果\",{\"1\":{\"198\":1}}],[\"循环遍历\",{\"1\":{\"185\":1}}],[\"循环进行遍历\",{\"1\":{\"185\":1}}],[\"循环或任意块中定义函数\",{\"1\":{\"172\":1}}],[\"循环\",{\"1\":{\"165\":1,\"185\":2,\"198\":2,\"269\":1}}],[\"前缀为\",{\"1\":{\"531\":1}}],[\"前缀的特殊属性\",{\"1\":{\"70\":1}}],[\"前后不能衔接任何空白和字符\",{\"1\":{\"528\":1}}],[\"前往node\",{\"1\":{\"507\":1}}],[\"前一个loader的输出结果作为下一个loader的输入\",{\"1\":{\"463\":1}}],[\"前置路由守卫\",{\"1\":{\"421\":1}}],[\"前称jade\",{\"1\":{\"367\":1}}],[\"前进到下一个页面\",{\"1\":{\"266\":1}}],[\"前行断言用于匹配某个位置之后的内容或者不匹配某个位置之后的内容\",{\"1\":{\"168\":1}}],[\"前行断言\",{\"1\":{\"168\":1}}],[\"前者是后者的规格\",{\"1\":{\"164\":1}}],[\"二进制表示\",{\"1\":{\"169\":1}}],[\"二进制和八进制表示法\",{\"1\":{\"169\":1}}],[\"二进制类型\",{\"1\":{\"136\":1}}],[\"二是想体现这门语言的制定者是\",{\"1\":{\"164\":1}}],[\"本身对单双引号转义\",{\"1\":{\"528\":1}}],[\"本身也已经被\",{\"1\":{\"164\":1}}],[\"本地缓存等场景\",{\"1\":{\"236\":1}}],[\"本地过滤器\",{\"1\":{\"86\":1}}],[\"版本才能使用枚举\",{\"1\":{\"537\":1}}],[\"版本之后不建议使用\",{\"1\":{\"519\":1}}],[\"版本范围或标签\",{\"1\":{\"510\":1}}],[\"版本控制和维护\",{\"1\":{\"466\":1}}],[\"版本\",{\"1\":{\"464\":1}}],[\"版本中的\",{\"1\":{\"396\":2}}],[\"版本中已经不再推荐使用\",{\"1\":{\"331\":1}}],[\"版本号管理\",{\"1\":{\"328\":1}}],[\"版本要求\",{\"1\":{\"43\":1}}],[\"版\",{\"1\":{\"164\":1}}],[\"规定了浏览器脚本语言的标准\",{\"1\":{\"164\":1}}],[\"规则来定义动画的不同阶段\",{\"1\":{\"144\":1}}],[\"规则由选择器和声明块组成\",{\"1\":{\"141\":1}}],[\"号标准文件\",{\"1\":{\"164\":1}}],[\"次年\",{\"1\":{\"164\":1}}],[\"决定将\",{\"1\":{\"164\":1}}],[\"决定是否返回true\",{\"1\":{\"48\":1}}],[\"月\",{\"1\":{\"164\":1}}],[\"月正式发布了\",{\"1\":{\"163\":1}}],[\"年龄和职业\",{\"1\":{\"231\":1}}],[\"年\",{\"1\":{\"163\":1,\"164\":1}}],[\"语义化标记可以使页面结构更清晰\",{\"1\":{\"230\":1}}],[\"语义化标记是指使用适当的语义元素来描述内容的结构和含义\",{\"1\":{\"230\":1}}],[\"语义化标记\",{\"0\":{\"230\":1}}],[\"语义化图表\",{\"0\":{\"228\":1}}],[\"语义化表单验证与\",{\"0\":{\"234\":1}}],[\"语义化表单\",{\"0\":{\"227\":1}}],[\"语义化表格\",{\"0\":{\"215\":1}}],[\"语义化是指使用合适的标记元素来正确表示内容的结构和含义\",{\"1\":{\"226\":1}}],[\"语义化\",{\"0\":{\"226\":1}}],[\"语句永远不会执行\",{\"1\":{\"310\":1}}],[\"语句返回一个值\",{\"1\":{\"310\":1}}],[\"语句捕获和处理错误\",{\"1\":{\"187\":1}}],[\"语句来代理\",{\"1\":{\"187\":1}}],[\"语句逐个产生值\",{\"1\":{\"186\":1}}],[\"语句时会返回一个包含\",{\"1\":{\"186\":1}}],[\"语句处暂停执行\",{\"1\":{\"186\":1}}],[\"语句\",{\"1\":{\"186\":2,\"187\":1,\"571\":1}}],[\"语言编写的高性能\",{\"1\":{\"604\":1}}],[\"语言制定的\",{\"1\":{\"164\":1}}],[\"语言可以用来编写复杂的大型应用程序\",{\"1\":{\"163\":1}}],[\"语言的下一代标准\",{\"1\":{\"163\":1}}],[\"语法定义\",{\"1\":{\"590\":1}}],[\"语法来实现路由懒加载\",{\"1\":{\"423\":1}}],[\"语法来表示一个unicode码点\",{\"1\":{\"167\":1}}],[\"语法和\",{\"1\":{\"331\":1}}],[\"语法差异\",{\"1\":{\"203\":1}}],[\"语法返回一个promise\",{\"1\":{\"202\":1}}],[\"语法将add函数导入\",{\"1\":{\"202\":1}}],[\"语法用于将整个模块导入到变量calculator中\",{\"1\":{\"202\":1}}],[\"语法用于导入默认导出的内容\",{\"1\":{\"202\":1}}],[\"语法比较简单\",{\"1\":{\"161\":1}}],[\"语法\",{\"0\":{\"141\":1,\"514\":1},\"1\":{\"18\":1,\"69\":1,\"168\":2,\"260\":2,\"480\":1}}],[\"语法规则\",{\"1\":{\"14\":1}}],[\"预处理器可以在开发过程中增加灵活性和可维护性\",{\"1\":{\"161\":1}}],[\"让我们创建一个简单的计数器组件\",{\"1\":{\"406\":1}}],[\"让我们创建我们的应用程序的界面\",{\"1\":{\"403\":1}}],[\"让我们来看一个使用事件循环的例子\",{\"1\":{\"264\":1}}],[\"让开发者能够更高效地编写css样式\",{\"1\":{\"161\":1}}],[\"让一个元素在显示和隐藏时具有淡入淡出的过渡效果\",{\"1\":{\"98\":1}}],[\"变异方法\",{\"1\":{\"440\":1}}],[\"变异\",{\"1\":{\"436\":1,\"444\":1}}],[\"变更\",{\"1\":{\"425\":1}}],[\"变量进行比较\",{\"1\":{\"540\":1}}],[\"变量不需要用连接符\",{\"1\":{\"528\":1}}],[\"变量以\",{\"1\":{\"517\":1}}],[\"变量规则\",{\"0\":{\"517\":1}}],[\"变量查看\",{\"1\":{\"372\":1}}],[\"变量在声明的位置之前是不可访问的\",{\"1\":{\"311\":1}}],[\"变量是用于存储数据的名称\",{\"1\":{\"311\":1}}],[\"变量存储的是对象和数组在堆中的引用地址\",{\"1\":{\"273\":1}}],[\"变量存储的是引用地址\",{\"1\":{\"273\":1}}],[\"变量被创建在栈中\",{\"1\":{\"273\":1}}],[\"变量和函数的声明会被提前到其所在作用域的顶部\",{\"1\":{\"249\":1}}],[\"变量提升\",{\"1\":{\"249\":1}}],[\"变量类型\",{\"1\":{\"249\":1}}],[\"变量的作用域规则与\",{\"1\":{\"311\":1}}],[\"变量的作用域指的是该变量在代码中可访问的范围\",{\"1\":{\"249\":1}}],[\"变量的类型是可以为\",{\"1\":{\"310\":1}}],[\"变量的类型可以根据赋给它们的值自动推断和改变\",{\"1\":{\"249\":1}}],[\"变量的状态\",{\"1\":{\"198\":1}}],[\"变量作用域\",{\"0\":{\"524\":1},\"1\":{\"249\":1}}],[\"变量名对大小写敏感\",{\"1\":{\"569\":1}}],[\"变量名是区分大小写的\",{\"1\":{\"517\":1}}],[\"变量名不能包含空格\",{\"1\":{\"517\":1}}],[\"变量名只能包含字母\",{\"1\":{\"517\":1}}],[\"变量名必须以字母或者下划线字符开始\",{\"1\":{\"517\":1}}],[\"变量名区分大小写\",{\"1\":{\"249\":1}}],[\"变量名可以包含字母\",{\"1\":{\"249\":1}}],[\"变量命名规则\",{\"1\":{\"249\":1}}],[\"变量赋值\",{\"1\":{\"249\":1}}],[\"变量声明\",{\"1\":{\"249\":1}}],[\"变量用于存储数据值或引用对象\",{\"1\":{\"249\":1}}],[\"变量来标记操作是否被取消\",{\"1\":{\"198\":1}}],[\"变量\",{\"0\":{\"165\":1,\"249\":1,\"311\":1,\"516\":1},\"1\":{\"310\":1,\"525\":4,\"590\":1}}],[\"变量直接采用赋值符号=进行定义\",{\"1\":{\"161\":1}}],[\"变为\",{\"1\":{\"110\":3}}],[\"混合器和嵌套选择器来简化css的编写\",{\"1\":{\"161\":3}}],[\"混合器\",{\"1\":{\"161\":1}}],[\"混入可以帮助你更好地组织和复用代码\",{\"1\":{\"97\":1}}],[\"混入可以被全局注册\",{\"1\":{\"97\":1}}],[\"混入的使用可以帮助实现多个组件之间的代码共享和复用\",{\"1\":{\"97\":1}}],[\"混入链\",{\"1\":{\"97\":1}}],[\"混入对象的方法会被添加到组件的方法中\",{\"1\":{\"97\":1}}],[\"混入对象的数据会被合并到组件的数据中\",{\"1\":{\"97\":1}}],[\"混入对象的选项会在组件中的选项之前被合并\",{\"1\":{\"97\":1}}],[\"混入对象是一个普通的javascript对象\",{\"1\":{\"97\":1}}],[\"混入\",{\"0\":{\"97\":1},\"1\":{\"97\":1,\"330\":1}}],[\"节省开发时间和精力\",{\"1\":{\"160\":1}}],[\"节点可以有子节点和兄弟节点\",{\"1\":{\"129\":1}}],[\"节点树可以具有不同的定义和用途\",{\"1\":{\"129\":1}}],[\"节点树\",{\"1\":{\"129\":1}}],[\"节点\",{\"0\":{\"127\":1,\"129\":1}}],[\"节点上\",{\"1\":{\"87\":1}}],[\"帮助您构建更安全的应用程序\",{\"1\":{\"602\":1}}],[\"帮助你追踪和解决问题\",{\"1\":{\"499\":1}}],[\"帮助你进行性能优化\",{\"1\":{\"492\":1}}],[\"帮助你处理复杂的类型逻辑和增强类型系统的表达能力\",{\"1\":{\"319\":1}}],[\"帮助你高效地开发用户界面\",{\"1\":{\"60\":1}}],[\"帮助我们处理复杂的类型逻辑\",{\"1\":{\"317\":1}}],[\"帮助开发者快速搭建网页\",{\"1\":{\"160\":1}}],[\"列表项元素\",{\"1\":{\"209\":1}}],[\"列选择器可以选择表格中特定列的元素\",{\"1\":{\"159\":1}}],[\"列选择器\",{\"1\":{\"159\":1}}],[\"列名\",{\"1\":{\"134\":1}}],[\"~\",{\"1\":{\"159\":1}}],[\"固定在元素区域不随滚动而移动\",{\"1\":{\"158\":1}}],[\"背景图像随元素内部内容滚动\",{\"1\":{\"158\":1}}],[\"背景图像的起始位置相对于内容框\",{\"1\":{\"158\":1}}],[\"背景\",{\"0\":{\"158\":1}}],[\"背景属性\",{\"1\":{\"144\":1}}],[\"横向或纵向\",{\"1\":{\"157\":1}}],[\"屏幕分辨率\",{\"1\":{\"157\":1}}],[\"屏幕高度\",{\"1\":{\"157\":1}}],[\"屏幕宽度\",{\"1\":{\"157\":1}}],[\"屏幕方向\",{\"1\":{\"157\":2}}],[\"智能手机等\",{\"1\":{\"157\":1}}],[\"桌面电脑\",{\"1\":{\"157\":1}}],[\"平板电脑\",{\"1\":{\"157\":2}}],[\"平移\",{\"1\":{\"150\":1}}],[\"博客等需要分栏显示的场景\",{\"1\":{\"154\":1}}],[\"qualified\",{\"1\":{\"584\":1}}],[\"quality\",{\"1\":{\"469\":1}}],[\"queue\",{\"1\":{\"271\":1}}],[\"queries\",{\"0\":{\"157\":1},\"1\":{\"148\":2,\"157\":1}}],[\"queryselectorall\",{\"1\":{\"265\":1}}],[\"queryselector\",{\"1\":{\"265\":1,\"272\":1,\"282\":1}}],[\"query\",{\"1\":{\"131\":1,\"365\":3,\"416\":1,\"570\":1}}],[\"quote\",{\"1\":{\"549\":2}}],[\"quotient\",{\"1\":{\"254\":2}}],[\"quot\",{\"1\":{\"213\":1}}],[\"quis\",{\"1\":{\"154\":1}}],[\"颜色\",{\"1\":{\"314\":1,\"583\":1}}],[\"颜色以及添加更多的颜色过渡点\",{\"1\":{\"153\":1}}],[\"颜色从红色到橙色再到黄色\",{\"1\":{\"153\":1}}],[\"形状\",{\"1\":{\"153\":1}}],[\"形成\",{\"1\":{\"583\":1}}],[\"形成嵌套的结构\",{\"1\":{\"415\":1}}],[\"形成了一个闭包\",{\"1\":{\"258\":1}}],[\"形成了树状结构\",{\"1\":{\"129\":1}}],[\"形成一个独立的单元的过程\",{\"1\":{\"183\":1}}],[\"形成一个混入链\",{\"1\":{\"97\":1}}],[\"形成父子和兄弟关系\",{\"1\":{\"129\":1}}],[\"形成层次结构\",{\"1\":{\"15\":1}}],[\"径向渐变的语法如下\",{\"1\":{\"153\":1}}],[\"径向渐变以一个中心点为基准\",{\"1\":{\"153\":1}}],[\"径向渐变\",{\"1\":{\"153\":1}}],[\"再次调用时会被忽略\",{\"1\":{\"599\":1}}],[\"再使用style\",{\"1\":{\"476\":1}}],[\"再向服务器发送一个ack包\",{\"1\":{\"361\":1}}],[\"再回到执行微任务的阶段\",{\"1\":{\"271\":1}}],[\"再进行比较\",{\"1\":{\"252\":1}}],[\"再从50\",{\"1\":{\"153\":1}}],[\"再执行离开动画\",{\"1\":{\"123\":1}}],[\"再执行进入动画\",{\"1\":{\"123\":1}}],[\"起始点\",{\"1\":{\"153\":1}}],[\"起什么作用\",{\"1\":{\"70\":1}}],[\"线性\",{\"1\":{\"338\":1}}],[\"线性渐变的语法如下\",{\"1\":{\"153\":1}}],[\"线性渐变沿着一条直线方向进行过渡\",{\"1\":{\"153\":1}}],[\"线性渐变\",{\"1\":{\"153\":2}}],[\"线程池大小等系统参数\",{\"1\":{\"138\":1}}],[\"关注已知的安全漏洞\",{\"1\":{\"602\":1}}],[\"关闭错误显示\",{\"1\":{\"586\":1}}],[\"关闭打开的文件句柄\",{\"1\":{\"570\":1}}],[\"关闭数据库连接\",{\"1\":{\"369\":2,\"600\":1}}],[\"关闭tcp连接\",{\"1\":{\"360\":1}}],[\"关闭网络连接等\",{\"1\":{\"276\":1}}],[\"关闭当前窗口\",{\"1\":{\"266\":1}}],[\"关键字实现了\",{\"1\":{\"591\":1}}],[\"关键字进行定义\",{\"1\":{\"591\":2}}],[\"关键字导入命名空间\",{\"1\":{\"584\":1}}],[\"关键字后跟参数列表和箭头\",{\"1\":{\"571\":1}}],[\"关键字后面等待这个新的\",{\"1\":{\"196\":1}}],[\"关键字后面的表达式可以是一个\",{\"1\":{\"196\":1}}],[\"关键字定义枚举类型\",{\"1\":{\"537\":1}}],[\"关键字为命名空间创建别名\",{\"1\":{\"326\":1}}],[\"关键字对类型参数进行约束\",{\"1\":{\"320\":1}}],[\"关键字给现有类型起一个别名\",{\"1\":{\"319\":1}}],[\"关键字将命名空间导出\",{\"1\":{\"326\":1}}],[\"关键字将枚举对象标记为常量枚举\",{\"1\":{\"314\":1}}],[\"关键字将其继承自\",{\"1\":{\"312\":1}}],[\"关键字调用了父类的构造函数\",{\"1\":{\"312\":1}}],[\"关键字创建了两个\",{\"1\":{\"579\":1}}],[\"关键字创建了一个\",{\"1\":{\"312\":1}}],[\"关键字创建自定义类型\",{\"1\":{\"318\":2}}],[\"关键字创建新的实例\",{\"1\":{\"267\":1}}],[\"关键字在类中实现\",{\"1\":{\"591\":1}}],[\"关键字在块级作用域内声明的变量只在该块级作用域内可见\",{\"1\":{\"311\":1}}],[\"关键字在函数内部声明的变量具有块级作用域\",{\"1\":{\"311\":1}}],[\"关键字可以声明不可变的常量\",{\"1\":{\"311\":1}}],[\"关键字可以声明可变的变量\",{\"1\":{\"311\":1}}],[\"关键字用于\",{\"1\":{\"272\":1}}],[\"关键字用于等待一个\",{\"1\":{\"196\":1}}],[\"关键字声明为异步函数\",{\"1\":{\"272\":1}}],[\"关键字this用于引用当前执行代码的上下文对象\",{\"1\":{\"262\":1}}],[\"关键字暂停和恢复函数的执行\",{\"1\":{\"198\":1}}],[\"关键字暂停函数的执行\",{\"1\":{\"197\":1}}],[\"关键字和\",{\"1\":{\"198\":1}}],[\"关键字等待它们全部完成\",{\"1\":{\"198\":1}}],[\"关键字等待所有操作完成\",{\"1\":{\"196\":1}}],[\"关键字等待异步操作的结果\",{\"1\":{\"196\":1}}],[\"关键字只能在异步函数内部使用\",{\"1\":{\"196\":1}}],[\"关键字来定义命名空间\",{\"1\":{\"584\":1}}],[\"关键字来定义一个命名空间\",{\"1\":{\"326\":1}}],[\"关键字来指定每次迭代的返回值\",{\"1\":{\"323\":1}}],[\"关键字来指向正在创建的对象\",{\"1\":{\"267\":1}}],[\"关键字来创建新的类型\",{\"1\":{\"319\":1}}],[\"关键字来创建自定义类型\",{\"1\":{\"318\":1}}],[\"关键字来声明一个函数\",{\"1\":{\"313\":1}}],[\"关键字来实现继承\",{\"1\":{\"312\":1}}],[\"关键字来实现\",{\"1\":{\"312\":1}}],[\"关键字来调用\",{\"1\":{\"267\":1}}],[\"关键字来调用父类的方法\",{\"1\":{\"171\":1}}],[\"关键字来等待异步操作的结果\",{\"1\":{\"196\":2}}],[\"关键字来等待一个异步操作的结果\",{\"1\":{\"196\":1}}],[\"关键字返回一个值\",{\"1\":{\"196\":1}}],[\"关键字会将其后面的表达式转化为一个\",{\"1\":{\"195\":1}}],[\"关键字表示该函数是一个异步函数\",{\"1\":{\"194\":1}}],[\"关键字\",{\"1\":{\"171\":1,\"196\":1,\"310\":1,\"312\":2,\"319\":1,\"325\":1,\"525\":1,\"582\":1}}],[\"关键帧动画允许在动画过程中定义多个关键帧\",{\"1\":{\"152\":1}}],[\"关键帧动画\",{\"1\":{\"152\":1}}],[\"关联数组使用自定义的键\",{\"1\":{\"574\":1}}],[\"关联数组\",{\"0\":{\"574\":1}}],[\"关联\",{\"1\":{\"134\":1}}],[\"关联和连接表\",{\"1\":{\"134\":1}}],[\"结合webpack的动态导入能力\",{\"1\":{\"458\":1}}],[\"结合使用react\",{\"1\":{\"407\":1}}],[\"结束标记必须顶头写\",{\"1\":{\"528\":1}}],[\"结束标记结束\",{\"1\":{\"528\":1}}],[\"结束标识必须顶格独自占一行\",{\"1\":{\"528\":1}}],[\"结束需要独立一行且前后不能空格\",{\"1\":{\"528\":2}}],[\"结束\",{\"1\":{\"514\":1}}],[\"结束请求\",{\"1\":{\"361\":1}}],[\"结束值和过渡时间\",{\"1\":{\"152\":1}}],[\"结构和样式\",{\"1\":{\"265\":1}}],[\"结构性伪类选择器选取的是符合文档结构特定条件的元素\",{\"1\":{\"159\":1}}],[\"结构性伪类选择器\",{\"1\":{\"159\":1}}],[\"结尾的文件\",{\"1\":{\"334\":1}}],[\"结尾\",{\"1\":{\"256\":1}}],[\"结果会被放入事件队列中\",{\"1\":{\"264\":1}}],[\"结果\",{\"1\":{\"193\":1}}],[\"结果渲染\",{\"1\":{\"82\":1}}],[\"结果渲染为\",{\"1\":{\"82\":2}}],[\"速度曲线和延迟时间\",{\"1\":{\"151\":1}}],[\"速度曲线定义了过渡的加速和减速效果\",{\"1\":{\"151\":1}}],[\"宽度和高度分别变为200px\",{\"1\":{\"151\":1}}],[\"宽度和颜色\",{\"1\":{\"144\":2,\"146\":1}}],[\"匀速\",{\"1\":{\"151\":1}}],[\"缓慢开始和结束\",{\"1\":{\"151\":1}}],[\"缓存技术\",{\"0\":{\"601\":1}}],[\"缓存优化\",{\"1\":{\"504\":1}}],[\"缓存和持久化缓存\",{\"0\":{\"481\":1},\"1\":{\"481\":1}}],[\"缓存和数据请求优化是优化前端性能的关键技术\",{\"1\":{\"55\":1}}],[\"缓存和数据请求优化是在前端开发中常用的性能优化技术\",{\"1\":{\"55\":1}}],[\"缓存和数据请求优化\",{\"0\":{\"55\":1}}],[\"缓存配置\",{\"1\":{\"469\":1}}],[\"缓存是一种权衡\",{\"1\":{\"465\":1}}],[\"缓存是计算机系统中一种常用的性能优化技术\",{\"1\":{\"465\":1}}],[\"缓存需要占用一定的内存空间\",{\"1\":{\"465\":1}}],[\"缓存需要及时更新或失效\",{\"1\":{\"465\":1}}],[\"缓存容量控制\",{\"1\":{\"465\":1}}],[\"缓存策略\",{\"0\":{\"482\":1},\"1\":{\"465\":1}}],[\"缓存一致性\",{\"1\":{\"465\":1}}],[\"缓存可以用于存储和重用已经获取过的数据\",{\"1\":{\"465\":1}}],[\"缓存系统\",{\"1\":{\"357\":1}}],[\"缓存头部信息需要在服务器端和客户端都正确配置和解析\",{\"1\":{\"356\":1}}],[\"缓存机制可以提高性能\",{\"1\":{\"351\":1}}],[\"缓存\",{\"0\":{\"465\":1,\"495\":1},\"1\":{\"351\":1,\"352\":1,\"604\":1}}],[\"缓存了中间计算结果\",{\"1\":{\"52\":1}}],[\"持久化缓存是在浏览器中缓存资源\",{\"1\":{\"483\":1}}],[\"持久化缓存\",{\"0\":{\"483\":1},\"1\":{\"497\":1}}],[\"持久化状态\",{\"1\":{\"437\":1}}],[\"持久化数据等\",{\"1\":{\"401\":1}}],[\"持久连接允许在单个tcp连接上发送和接收多个http请求和响应\",{\"1\":{\"358\":1}}],[\"持久连接\",{\"1\":{\"358\":1}}],[\"持久性\",{\"1\":{\"137\":1}}],[\"持续时间和速度曲线\",{\"1\":{\"151\":1}}],[\"持续时间\",{\"1\":{\"151\":2}}],[\"透视\",{\"1\":{\"150\":1}}],[\"透明度\",{\"1\":{\"144\":1}}],[\"垂直方向上倾斜\",{\"1\":{\"150\":1}}],[\"垂直方向上缩放0\",{\"1\":{\"150\":1}}],[\"倾斜\",{\"1\":{\"150\":1}}],[\"旋转z轴\",{\"1\":{\"150\":1}}],[\"旋转y轴\",{\"1\":{\"150\":1}}],[\"旋转x轴\",{\"1\":{\"150\":1}}],[\"旋转\",{\"1\":{\"150\":2}}],[\"功能强大\",{\"1\":{\"513\":1,\"604\":1}}],[\"功能或优化的效果\",{\"1\":{\"372\":1}}],[\"功能\",{\"0\":{\"149\":1},\"1\":{\"461\":1}}],[\"媒体查询的基本语法如下\",{\"1\":{\"157\":1}}],[\"媒体查询\",{\"0\":{\"157\":1},\"1\":{\"148\":1}}],[\"顺序和对齐方式\",{\"1\":{\"147\":1}}],[\"顺序重要\",{\"1\":{\"43\":1}}],[\"弹性盒子\",{\"0\":{\"155\":1}}],[\"弹性盒子布局\",{\"1\":{\"148\":1}}],[\"弹性布局\",{\"1\":{\"147\":1}}],[\"弹出消息框等方式来呈现错误信息\",{\"1\":{\"32\":1}}],[\"网站和应用程序仍然需要采取其他安全措施\",{\"1\":{\"359\":1}}],[\"网站应该尽量避免mixed\",{\"1\":{\"359\":1}}],[\"网络请求或数据库查询\",{\"1\":{\"511\":1}}],[\"网络请求的结果\",{\"1\":{\"401\":1}}],[\"网络请求模拟\",{\"1\":{\"270\":1}}],[\"网络请求\",{\"1\":{\"270\":1,\"508\":1}}],[\"网络请求等方面的详细信息\",{\"1\":{\"58\":1}}],[\"网页的主体部分\",{\"1\":{\"207\":1}}],[\"网格布局\",{\"0\":{\"156\":1},\"1\":{\"147\":1,\"148\":1}}],[\"浮点数是带小数部分的数字\",{\"1\":{\"532\":1}}],[\"浮点数类型\",{\"1\":{\"136\":1}}],[\"浮点型\",{\"0\":{\"532\":1}}],[\"浮动元素可以使其他元素环绕在其周围\",{\"1\":{\"147\":1}}],[\"浮动\",{\"1\":{\"147\":1}}],[\"流控制\",{\"1\":{\"272\":1}}],[\"流动单元\",{\"1\":{\"148\":1}}],[\"流式布局是默认的布局方式\",{\"1\":{\"147\":1}}],[\"流式布局\",{\"1\":{\"147\":1}}],[\"流畅的用户体验\",{\"1\":{\"45\":1}}],[\"怪异盒模型\",{\"1\":{\"146\":2}}],[\"标识客户端的类型和版本\",{\"1\":{\"352\":1,\"355\":1}}],[\"标准库或其他类似库的声明文件\",{\"1\":{\"331\":1}}],[\"标准盒模型更常用\",{\"1\":{\"146\":1}}],[\"标准盒模型是css中的默认盒模型\",{\"1\":{\"146\":1}}],[\"标准盒模型\",{\"1\":{\"146\":1}}],[\"标准盒模型和ie盒模型\",{\"1\":{\"146\":1}}],[\"标记该路由需要保护\",{\"1\":{\"385\":1}}],[\"标记\",{\"1\":{\"244\":1,\"276\":1}}],[\"标记列表\",{\"1\":{\"219\":1}}],[\"标记元素\",{\"0\":{\"209\":1}}],[\"标题元素\",{\"1\":{\"209\":1}}],[\"标志\",{\"1\":{\"168\":2}}],[\"标签来表示标题的层级\",{\"1\":{\"226\":1}}],[\"标签来提供其他元数据\",{\"1\":{\"208\":1}}],[\"标签内部使用\",{\"1\":{\"126\":1}}],[\"标签内时\",{\"1\":{\"126\":1}}],[\"标签内使用\",{\"1\":{\"70\":1}}],[\"标签自闭合\",{\"1\":{\"15\":1}}],[\"标签可以相互嵌套\",{\"1\":{\"15\":1}}],[\"标签需要正确闭合\",{\"1\":{\"15\":1}}],[\"标签名称可以是html标签或自定义的react组件\",{\"1\":{\"15\":1}}],[\"标签\",{\"1\":{\"15\":1,\"94\":1}}],[\"边距和边框\",{\"1\":{\"146\":1}}],[\"边框或文本中创建平滑过渡效果的方法\",{\"1\":{\"153\":1}}],[\"边框是围绕内容和内边距的线条或样式\",{\"1\":{\"146\":1}}],[\"边框\",{\"1\":{\"146\":1}}],[\"边框和文本等元素的样式中\",{\"1\":{\"153\":1}}],[\"边框和文本等属性上应用渐变\",{\"1\":{\"144\":1}}],[\"边框和外边距\",{\"1\":{\"146\":1}}],[\"边框和外边距组成\",{\"1\":{\"146\":1}}],[\"边框属性\",{\"1\":{\"144\":1}}],[\"毫米\",{\"1\":{\"145\":1}}],[\"厘米\",{\"1\":{\"145\":1}}],[\"7引入了一些正则表达式的增强功能\",{\"1\":{\"604\":1}}],[\"7引入了匿名类的概念\",{\"1\":{\"604\":1}}],[\"7引入了太空船操作符\",{\"1\":{\"604\":1}}],[\"7引入了\",{\"1\":{\"604\":1}}],[\"7开始支持对函数和方法的返回类型进行声明\",{\"1\":{\"604\":1}}],[\"7开始支持强制标量类型声明\",{\"1\":{\"604\":1}}],[\"75\",{\"1\":{\"218\":1,\"259\":2,\"469\":1,\"555\":1}}],[\"75vw\",{\"1\":{\"145\":1}}],[\"78\",{\"1\":{\"183\":1,\"330\":1}}],[\"7\",{\"0\":{\"491\":1},\"1\":{\"172\":1,\"183\":1,\"256\":5,\"257\":5,\"519\":1,\"537\":1,\"571\":1,\"604\":9}}],[\"768px\",{\"1\":{\"148\":1}}],[\"72大小\",{\"1\":{\"145\":1}}],[\"点\",{\"1\":{\"145\":1}}],[\"点击它即可\",{\"1\":{\"507\":1}}],[\"点击事件\",{\"1\":{\"287\":1}}],[\"点击事件将只会触发一次\",{\"1\":{\"70\":1}}],[\"点击按钮后\",{\"1\":{\"126\":1,\"229\":1}}],[\"点击按钮后需要修改child组件中的某个数据\",{\"1\":{\"93\":1}}],[\"点击按钮时\",{\"1\":{\"51\":1,\"98\":1,\"442\":2}}],[\"点击\",{\"1\":{\"58\":1,\"345\":1,\"348\":1}}],[\"视为模块\",{\"1\":{\"448\":1}}],[\"视频等\",{\"1\":{\"368\":1}}],[\"视频\",{\"0\":{\"223\":1}}],[\"视口高度\",{\"1\":{\"145\":1}}],[\"视图和控制器三个部分\",{\"1\":{\"592\":1}}],[\"视图与动态数据进行渲染\",{\"1\":{\"367\":1}}],[\"视图通常与路由和控制器配合使用\",{\"1\":{\"367\":1}}],[\"视图根据动态数据和模板引擎生成最终的输出\",{\"1\":{\"367\":1}}],[\"视图是\",{\"1\":{\"367\":1}}],[\"视图\",{\"1\":{\"62\":1}}],[\"视图层负责界面的显示\",{\"1\":{\"62\":1}}],[\"视图层和模型层\",{\"1\":{\"62\":1}}],[\"百分比或关键字\",{\"1\":{\"158\":1}}],[\"百分比基于父元素的尺寸进行计算\",{\"1\":{\"145\":1}}],[\"百分比\",{\"1\":{\"145\":1}}],[\"盒模型\",{\"0\":{\"146\":1}}],[\"盒模型属性\",{\"1\":{\"144\":1}}],[\"盒子阴影\",{\"1\":{\"144\":1}}],[\"溢出\",{\"1\":{\"144\":1}}],[\"渐变可以应用于背景\",{\"1\":{\"153\":1}}],[\"渐变可以是从一种颜色到另一种颜色的过渡\",{\"1\":{\"153\":1}}],[\"渐变\",{\"0\":{\"153\":1}}],[\"渐变属性\",{\"1\":{\"144\":1}}],[\"渐出等\",{\"1\":{\"152\":1}}],[\"渐入\",{\"1\":{\"152\":1}}],[\"渐进式网络应用是一种结合了传统网页和原生应用功能的应用程序\",{\"1\":{\"243\":1}}],[\"渐进式网络应用\",{\"0\":{\"243\":1}}],[\"渐进式增强静态的\",{\"1\":{\"61\":1}}],[\"渐进式框架\",{\"0\":{\"61\":1}}],[\"尺寸属性\",{\"1\":{\"144\":1}}],[\"布尔型可以是\",{\"1\":{\"533\":1}}],[\"布尔型\",{\"0\":{\"533\":1}}],[\"布尔值和指针等\",{\"1\":{\"273\":2}}],[\"布尔值\",{\"1\":{\"251\":1}}],[\"布尔类型\",{\"1\":{\"136\":1,\"249\":1,\"252\":1}}],[\"布局模型\",{\"1\":{\"148\":1}}],[\"布局\",{\"0\":{\"147\":1}}],[\"布局属性\",{\"1\":{\"144\":1}}],[\"z0\",{\"1\":{\"279\":1}}],[\"za\",{\"1\":{\"256\":1,\"279\":1}}],[\"zurb\",{\"1\":{\"160\":1}}],[\"z\",{\"1\":{\"144\":2,\"166\":2,\"168\":1,\"256\":1,\"279\":1,\"517\":1}}],[\"字节\",{\"1\":{\"598\":1}}],[\"字段来管理模块之间的依赖关系和声明文件的引入\",{\"1\":{\"331\":1}}],[\"字面量类型\",{\"1\":{\"319\":1}}],[\"字体文件等\",{\"1\":{\"486\":1}}],[\"字体等文件\",{\"1\":{\"476\":1}}],[\"字体等静态资源\",{\"1\":{\"473\":1}}],[\"字体等\",{\"1\":{\"455\":2,\"463\":1,\"491\":1}}],[\"字体\",{\"1\":{\"211\":1,\"476\":1}}],[\"字体和文本属性\",{\"1\":{\"144\":1}}],[\"字符编码\",{\"1\":{\"208\":1,\"235\":1}}],[\"字符串处理函数\",{\"1\":{\"570\":1}}],[\"字符串或混合类型的常量赋予一个易于记忆和使用的名称\",{\"1\":{\"314\":1}}],[\"字符串裁剪方法\",{\"1\":{\"256\":1}}],[\"字符串替换方法\",{\"1\":{\"256\":1}}],[\"字符串转换方法\",{\"1\":{\"256\":1}}],[\"字符串切割方法\",{\"1\":{\"256\":1}}],[\"字符串搜索方法\",{\"1\":{\"256\":1}}],[\"字符串访问方法\",{\"1\":{\"256\":1}}],[\"字符串方法\",{\"1\":{\"256\":1}}],[\"字符串拼接\",{\"1\":{\"256\":2}}],[\"字符串长度\",{\"1\":{\"256\":1}}],[\"字符串操作\",{\"1\":{\"256\":1}}],[\"字符串可以包含字母\",{\"1\":{\"256\":1}}],[\"字符串是由零个或多个字符组成的文本数据\",{\"1\":{\"256\":1}}],[\"字符串与数字的比较\",{\"1\":{\"252\":1}}],[\"字符串与布尔值的比较\",{\"1\":{\"252\":1}}],[\"字符串使用引号\",{\"1\":{\"251\":1}}],[\"字符串的长度为\",{\"1\":{\"543\":2}}],[\"字符串的拼接\",{\"1\":{\"252\":1}}],[\"字符串的迭代器\",{\"1\":{\"167\":1}}],[\"字符串的常用方法拓展\",{\"1\":{\"167\":1}}],[\"字符串解构赋值\",{\"1\":{\"167\":1}}],[\"字符串`\",{\"1\":{\"167\":1}}],[\"字符串\",{\"0\":{\"167\":1,\"256\":1,\"530\":1,\"542\":1},\"1\":{\"167\":1,\"251\":1,\"257\":1,\"515\":1,\"574\":1}}],[\"字符串类型\",{\"1\":{\"131\":1,\"136\":1,\"249\":1,\"252\":1}}],[\"字符集\",{\"1\":{\"132\":1}}],[\"伪元素选择器以两个冒号\",{\"1\":{\"143\":1}}],[\"伪元素选择器用于选择元素的特殊部分或位置\",{\"1\":{\"143\":1}}],[\"伪元素选择器\",{\"1\":{\"143\":1}}],[\"伪类选择器以冒号\",{\"1\":{\"143\":1}}],[\"伪类选择器用于选择元素的特殊状态或行为\",{\"1\":{\"143\":1}}],[\"伪类选择器\",{\"1\":{\"143\":1}}],[\"后面的路由不会再进行匹配\",{\"1\":{\"414\":1}}],[\"后面跟随枚举名称和花括号包裹的常量列表\",{\"1\":{\"310\":1}}],[\"后面跟着变量的名称\",{\"1\":{\"517\":1}}],[\"后面跟着伪元素的名称\",{\"1\":{\"143\":1}}],[\"后面跟着伪类的名称\",{\"1\":{\"143\":1}}],[\"后面跟着id名称\",{\"1\":{\"143\":1}}],[\"后面跟着类名\",{\"1\":{\"143\":1}}],[\"后的键值对\",{\"1\":{\"365\":1}}],[\"后续的成员会自动递增\",{\"1\":{\"314\":1}}],[\"后续的常量会自动递增\",{\"1\":{\"310\":1}}],[\"后修改了\",{\"1\":{\"267\":1}}],[\"后端集成\",{\"0\":{\"241\":1}}],[\"后\",{\"1\":{\"198\":1}}],[\"后行断言可以匹配某个位置之前的内容或者不匹配某个位置之前的内容\",{\"1\":{\"168\":1}}],[\"后行断言\",{\"1\":{\"168\":1}}],[\"后者是前者的一种实现\",{\"1\":{\"164\":1}}],[\"后代选择器使用空格分隔不同的元素名称\",{\"1\":{\"143\":1}}],[\"后代选择器选择某个元素的后代元素\",{\"1\":{\"143\":1}}],[\"后代选择器\",{\"1\":{\"143\":1}}],[\"后台耗时任务\",{\"1\":{\"57\":1}}],[\"外部只能通过公开的方法访问和修改对象的状态\",{\"1\":{\"583\":1}}],[\"外部模块声明使用\",{\"1\":{\"325\":1}}],[\"外部模块声明\",{\"1\":{\"325\":1}}],[\"外部函数的作用域不会被销毁\",{\"1\":{\"268\":1}}],[\"外部函数作用域的变量\",{\"1\":{\"261\":1}}],[\"外部样式表\",{\"1\":{\"142\":1}}],[\"外边距是盒子与周围元素之间的空间\",{\"1\":{\"146\":1}}],[\"外边距\",{\"1\":{\"146\":1}}],[\"外键等\",{\"1\":{\"131\":1}}],[\"书写方式\",{\"0\":{\"142\":1}}],[\"声明合并将\",{\"1\":{\"330\":1}}],[\"声明合并的特性可以让你逐步扩展已存在的类型声明\",{\"1\":{\"329\":1}}],[\"声明合并是\",{\"1\":{\"329\":1}}],[\"声明合并\",{\"0\":{\"329\":1},\"1\":{\"329\":1}}],[\"声明是一种用来扩展全局变量\",{\"1\":{\"325\":1}}],[\"声明文件解析\",{\"1\":{\"328\":1}}],[\"声明文件是使\",{\"1\":{\"325\":1}}],[\"声明文件使用\",{\"1\":{\"325\":1}}],[\"声明文件语法\",{\"1\":{\"325\":1}}],[\"声明文件应该与库的\",{\"1\":{\"325\":1}}],[\"声明文件通常以\",{\"1\":{\"325\":1}}],[\"声明文件的后缀名\",{\"1\":{\"325\":1}}],[\"声明文件可以提供类型定义\",{\"1\":{\"325\":1}}],[\"声明文件\",{\"0\":{\"325\":1},\"1\":{\"325\":1}}],[\"声明文档类型为\",{\"1\":{\"207\":1}}],[\"声明一个名为\",{\"1\":{\"311\":5}}],[\"声明变量的语法如下\",{\"1\":{\"311\":1}}],[\"声明数组的方式有两种\",{\"1\":{\"310\":1}}],[\"声明生成器函数外\",{\"1\":{\"187\":1}}],[\"声明\",{\"1\":{\"186\":1,\"311\":1,\"323\":1,\"325\":1}}],[\"声明块中包含一个或多个属性声明\",{\"1\":{\"141\":1}}],[\"声明式渲染\",{\"0\":{\"66\":1}}],[\"声明式编程\",{\"1\":{\"8\":1}}],[\"吞吐量\",{\"1\":{\"138\":1}}],[\"定制化自己的应用程序\",{\"1\":{\"363\":1}}],[\"定时器和事件监听器等\",{\"1\":{\"275\":1}}],[\"定时器未清除\",{\"1\":{\"275\":1}}],[\"定时器操作\",{\"1\":{\"266\":1}}],[\"定时器\",{\"0\":{\"260\":1},\"1\":{\"260\":1,\"266\":1,\"270\":1}}],[\"定位属性\",{\"1\":{\"144\":1}}],[\"定期更新和漏洞修复\",{\"1\":{\"602\":1}}],[\"定期检查并更新版本\",{\"1\":{\"504\":1}}],[\"定期检查并更新webpack和插件版本\",{\"1\":{\"504\":1}}],[\"定期备份数据库\",{\"1\":{\"138\":1}}],[\"定期维护和优化\",{\"1\":{\"138\":1}}],[\"定期监控数据库性能指标\",{\"1\":{\"138\":1}}],[\"定义一系列算法\",{\"1\":{\"592\":1}}],[\"定义一个函数来计算两个数的乘积并返回结果\",{\"1\":{\"568\":1}}],[\"定义一个简单的函数来计算两个数的和\",{\"1\":{\"566\":1}}],[\"定义一个action创建函数来触发异步操作\",{\"1\":{\"405\":1}}],[\"定义一个错误处理中间件\",{\"1\":{\"365\":1}}],[\"定义一个目标类\",{\"1\":{\"330\":1}}],[\"定义一个\",{\"1\":{\"330\":1}}],[\"定义一个异步任务\",{\"1\":{\"271\":1}}],[\"定义一个独立的文章或内容块\",{\"1\":{\"230\":1}}],[\"定义一个表单\",{\"1\":{\"216\":1}}],[\"定义一个表格\",{\"1\":{\"215\":1}}],[\"定义一个常量\",{\"1\":{\"165\":1}}],[\"定义一个用于决定要渲染哪个组件的数据属性\",{\"1\":{\"94\":1}}],[\"定义一个名为\",{\"1\":{\"91\":1}}],[\"定义契约和规范\",{\"1\":{\"591\":1}}],[\"定义函数\",{\"0\":{\"566\":1}}],[\"定义不区分大小写的常量已被弃用\",{\"1\":{\"519\":1}}],[\"定义了一种一对多的依赖关系\",{\"1\":{\"592\":1}}],[\"定义了一个人物信息的结构\",{\"1\":{\"231\":1}}],[\"定义了应用程序中允许插件进行扩展的特定区域或接口\",{\"1\":{\"464\":1}}],[\"定义了插件应该实现的接口或规范\",{\"1\":{\"464\":1}}],[\"定义了两个loader规则\",{\"1\":{\"463\":1}}],[\"定义了用于获取计算属性的方法\",{\"1\":{\"440\":1}}],[\"定义了用于触发异步操作的方法\",{\"1\":{\"440\":1}}],[\"定义了用于修改状态的同步方法\",{\"1\":{\"440\":1}}],[\"定义getter函数来获取状态\",{\"1\":{\"430\":1}}],[\"定义mutations来修改state中的属性\",{\"1\":{\"429\":1}}],[\"定义initial\",{\"1\":{\"429\":1}}],[\"定义纯函数reducers来处理状态的更新逻辑\",{\"1\":{\"402\":1}}],[\"定义actions\",{\"1\":{\"402\":1}}],[\"定义api应该提供哪些数据和操作\",{\"1\":{\"371\":1}}],[\"定义路由组件\",{\"1\":{\"413\":1}}],[\"定义路由配置\",{\"1\":{\"385\":1,\"415\":1}}],[\"定义路由和处理请求的常见方法\",{\"1\":{\"365\":1}}],[\"定义哪些用户具有对资源的访问权限\",{\"1\":{\"370\":1}}],[\"定义根路由\",{\"1\":{\"367\":1}}],[\"定义带有路由参数的路由\",{\"1\":{\"365\":1}}],[\"定义命名空间\",{\"1\":{\"326\":1,\"584\":1}}],[\"定义命名空间等\",{\"1\":{\"325\":1}}],[\"定义接口\",{\"1\":{\"325\":1}}],[\"定义与主要内容相关但不属于主要流的部分\",{\"1\":{\"230\":1}}],[\"定义导航链接\",{\"1\":{\"226\":1}}],[\"定义导航链接的容器\",{\"1\":{\"225\":1,\"230\":1}}],[\"定义文档中的一个区域\",{\"1\":{\"230\":1}}],[\"定义文档的主要内容\",{\"1\":{\"225\":1,\"230\":1}}],[\"定义文档或区域的页眉\",{\"1\":{\"225\":1,\"230\":1}}],[\"定义图像无法显示时的替代文本\",{\"1\":{\"221\":1}}],[\"定义单个框架\",{\"1\":{\"218\":1}}],[\"定义框架集\",{\"1\":{\"218\":1}}],[\"定义输入字段的最小值和最大值\",{\"1\":{\"217\":1}}],[\"定义数据单元格\",{\"1\":{\"215\":1}}],[\"定义表单字段的标签\",{\"1\":{\"216\":1}}],[\"定义表格的数据单元格\",{\"1\":{\"215\":1}}],[\"定义表格的行\",{\"1\":{\"215\":1}}],[\"定义表格的表头单元格\",{\"1\":{\"215\":1}}],[\"定义表格的表头内容\",{\"1\":{\"215\":1}}],[\"定义表格的页脚内容\",{\"1\":{\"215\":1}}],[\"定义表格的主体内容\",{\"1\":{\"215\":1}}],[\"定义表格标题\",{\"1\":{\"215\":1}}],[\"定义表格元素\",{\"1\":{\"215\":1}}],[\"定义表格中的一行\",{\"1\":{\"215\":1}}],[\"定义表头单元格\",{\"1\":{\"215\":1}}],[\"定义网页的标题\",{\"1\":{\"207\":1}}],[\"定义异步任务\",{\"1\":{\"198\":1}}],[\"定义或修改目标对象的属性\",{\"1\":{\"191\":1}}],[\"定义类型别名\",{\"1\":{\"325\":1}}],[\"定义类\",{\"1\":{\"183\":1}}],[\"定义对象行为\",{\"1\":{\"174\":1}}],[\"定义对象行为等方面非常有用\",{\"1\":{\"174\":1}}],[\"定义样式规则\",{\"1\":{\"161\":3}}],[\"定义混合器\",{\"1\":{\"161\":3}}],[\"定义混入对象\",{\"1\":{\"97\":1}}],[\"定义混入\",{\"1\":{\"97\":1}}],[\"定义变量以保存用户输入和错误信息\",{\"1\":{\"580\":1}}],[\"定义变量\",{\"1\":{\"161\":3}}],[\"定义两列网格\",{\"1\":{\"156\":1}}],[\"定义flex容器中的主轴方向\",{\"1\":{\"155\":1}}],[\"定义渐变的颜色\",{\"1\":{\"153\":1}}],[\"定义为混入对象\",{\"1\":{\"97\":1}}],[\"定义\",{\"0\":{\"90\":1},\"1\":{\"365\":4}}],[\"定义reducer函数\",{\"1\":{\"41\":1}}],[\"监控和调试\",{\"1\":{\"138\":1}}],[\"监听3000端口\",{\"1\":{\"490\":1}}],[\"监听localhost的3000端口\",{\"1\":{\"490\":1}}],[\"监听状态的变化\",{\"1\":{\"402\":1}}],[\"监听器会被触发\",{\"1\":{\"401\":1}}],[\"监听器中的回调函数会被触发\",{\"1\":{\"272\":1}}],[\"监听promise对象的完成事件\",{\"1\":{\"306\":1}}],[\"监听页面滚动事件\",{\"1\":{\"301\":1}}],[\"监听事件\",{\"1\":{\"93\":1,\"265\":1}}],[\"监听web\",{\"1\":{\"57\":1}}],[\"监听来自主线程的消息\",{\"1\":{\"57\":1}}],[\"监听滚动事件\",{\"1\":{\"53\":1}}],[\"监听表单提交事件\",{\"1\":{\"33\":1}}],[\"合并文件\",{\"1\":{\"504\":1}}],[\"合并冲突解决\",{\"1\":{\"335\":1}}],[\"合并分支\",{\"1\":{\"335\":1}}],[\"合并两个数组\",{\"1\":{\"257\":1}}],[\"合并两个或多个数组\",{\"1\":{\"257\":1}}],[\"合并规则如下\",{\"1\":{\"329\":1}}],[\"合并规则\",{\"1\":{\"97\":1}}],[\"合理运用错误处理机制可以帮助你识别和解决问题\",{\"1\":{\"589\":1}}],[\"合理地使用动态导入\",{\"1\":{\"467\":1}}],[\"合理地进行公共代码的提取和优化\",{\"1\":{\"466\":1}}],[\"合理使用计算属性\",{\"1\":{\"443\":1}}],[\"合理使用分支可以帮助你进行并行开发\",{\"1\":{\"335\":1}}],[\"合理使用这些语义化标签将提高网页的可读性\",{\"1\":{\"226\":1}}],[\"合理配置日志记录级别和频率\",{\"1\":{\"138\":1}}],[\"合法\",{\"1\":{\"172\":1,\"318\":2,\"319\":5}}],[\"建立索引等\",{\"1\":{\"369\":1}}],[\"建立tcp连接\",{\"1\":{\"360\":1}}],[\"建立适当的索引来加速数据检索\",{\"1\":{\"138\":1}}],[\"建议使用现代且安全的哈希算法\",{\"1\":{\"602\":1}}],[\"建议使用预处理语句\",{\"1\":{\"600\":1}}],[\"建议使用受控组件\",{\"1\":{\"31\":1}}],[\"建议将错误报告级别设置为最高\",{\"1\":{\"586\":1}}],[\"建议选择lts版本\",{\"1\":{\"507\":1}}],[\"建议在需要时添加适当的类型注解\",{\"1\":{\"315\":1}}],[\"建议尽量避免使用它们\",{\"1\":{\"22\":1}}],[\"旨在将大型代码库分解为可重用\",{\"1\":{\"327\":1}}],[\"旨在简化网页开发流程和提供一致的设计模式\",{\"1\":{\"160\":1}}],[\"旨在减少查询时间\",{\"1\":{\"138\":1}}],[\"旨在提高代码的可维护性\",{\"1\":{\"56\":1}}],[\"允许通过变量来调用函数\",{\"1\":{\"569\":1}}],[\"允许用户根据需求选择性地加载和使用不同的插件\",{\"1\":{\"464\":1}}],[\"允许我们注入自定义逻辑以满足应用程序的需求\",{\"1\":{\"437\":1}}],[\"允许你构建具有复杂页面导航需求的单页应用\",{\"1\":{\"409\":1}}],[\"允许你对全局作用域中的变量\",{\"1\":{\"329\":1}}],[\"允许你拦截和自定义对象的操作\",{\"1\":{\"188\":1}}],[\"允许应用向用户发送推送通知\",{\"1\":{\"243\":1}}],[\"允许定义应用的元数据\",{\"1\":{\"243\":1}}],[\"允许使用离线缓存和后台同步功能\",{\"1\":{\"243\":1}}],[\"允许使用多个背景图像来创建复合背景效果\",{\"1\":{\"158\":1}}],[\"允许网页在离线状态下访问和加载资源\",{\"1\":{\"240\":1}}],[\"允许网页获取用户的地理位置信息\",{\"1\":{\"229\":1}}],[\"允许在运行时动态地创建临时的对象\",{\"1\":{\"604\":1}}],[\"允许在不同域之间进行跨域请求\",{\"1\":{\"238\":1}}],[\"允许在不同的窗口或框架之间发送消息\",{\"1\":{\"238\":1}}],[\"允许在事务内部设置一个保存点\",{\"1\":{\"137\":1}}],[\"允许开发者更加灵活地控制和定制动画效果\",{\"1\":{\"152\":1}}],[\"允许将一个组件的渲染位置移动到\",{\"1\":{\"119\":1}}],[\"回调或可调用类型在许多情况下都很有用\",{\"1\":{\"539\":1}}],[\"回调\",{\"1\":{\"539\":1}}],[\"回调函数是一种将函数作为参数传递给另一个函数\",{\"1\":{\"322\":1}}],[\"回调函数是在某个操作完成后被调用的函数\",{\"1\":{\"313\":1}}],[\"回调函数是在异步操作完成后被调用的函数\",{\"1\":{\"258\":1}}],[\"回调函数是最早用于处理异步操作的方式之一\",{\"1\":{\"272\":1}}],[\"回调函数和其他任务的执行顺序\",{\"1\":{\"264\":1}}],[\"回调函数的参数是异步操作的错误信息\",{\"1\":{\"192\":1}}],[\"回调函数的参数是异步操作的结果\",{\"1\":{\"192\":1}}],[\"回调函数将被触发执行\",{\"1\":{\"110\":1}}],[\"回调函数会被触发执行\",{\"1\":{\"110\":1}}],[\"回调函数\",{\"1\":{\"35\":1,\"258\":1,\"272\":1,\"322\":1,\"511\":1,\"539\":1}}],[\"回溯mutation的执行\",{\"1\":{\"438\":1}}],[\"回到第\",{\"1\":{\"270\":1}}],[\"回到步骤2\",{\"1\":{\"264\":1}}],[\"回退到上一个页面\",{\"1\":{\"266\":1}}],[\"回滚事务\",{\"1\":{\"137\":1}}],[\"脏读\",{\"1\":{\"137\":1}}],[\"互不干扰\",{\"1\":{\"137\":1}}],[\"隔离性\",{\"1\":{\"137\":1}}],[\"隔离性和持久性\",{\"1\":{\"137\":1}}],[\"事务的持久性要求一旦事务提交成功\",{\"1\":{\"137\":1}}],[\"事务的隔离性要求每个事务的执行都与其他事务相互隔离\",{\"1\":{\"137\":1}}],[\"事务的一致性要求在执行事务之前和之后\",{\"1\":{\"137\":1}}],[\"事务的原子性要求其中的所有操作要么全部成功执行\",{\"1\":{\"137\":1}}],[\"事务是一组逻辑上相关的数据库操作\",{\"1\":{\"137\":1}}],[\"事务处理是数据库管理系统的重要概念\",{\"1\":{\"137\":1}}],[\"事务处理\",{\"0\":{\"137\":1}}],[\"事件监听\",{\"1\":{\"322\":1}}],[\"事件监听器未移除\",{\"1\":{\"275\":1}}],[\"事件监听器是一种常见的异步编程模式\",{\"1\":{\"272\":1}}],[\"事件监听器\",{\"1\":{\"272\":1}}],[\"事件回调函数等\",{\"1\":{\"270\":1}}],[\"事件循环会从消息队列中取出一个任务\",{\"1\":{\"271\":1}}],[\"事件循环会按照\",{\"1\":{\"270\":1}}],[\"事件循环是管理javascript引擎如何处理事件的机制\",{\"1\":{\"271\":1}}],[\"事件循环是\",{\"1\":{\"270\":1}}],[\"事件循环采用了一种非常鲜明的\",{\"1\":{\"264\":1}}],[\"事件循环的工作原理如下\",{\"1\":{\"264\":1}}],[\"事件循环\",{\"1\":{\"264\":1,\"270\":1,\"271\":1}}],[\"事件流\",{\"0\":{\"264\":1}}],[\"事件委托机制将事件处理器绑定到容器元素上\",{\"1\":{\"263\":1}}],[\"事件委托利用事件冒泡的特性\",{\"1\":{\"263\":1}}],[\"事件委托是将事件处理器绑定到父级元素而不是每个子级元素上\",{\"1\":{\"263\":1}}],[\"事件委托\",{\"0\":{\"302\":1},\"1\":{\"263\":1,\"302\":1}}],[\"事件冒泡是指当一个特定元素上的事件被触发时\",{\"1\":{\"263\":1}}],[\"事件冒泡\",{\"1\":{\"263\":1}}],[\"事件等信息\",{\"1\":{\"128\":1}}],[\"事件配置已经完成\",{\"1\":{\"87\":1}}],[\"事件配置之前被调用\",{\"1\":{\"87\":1}}],[\"事件修饰符\",{\"1\":{\"70\":1}}],[\"事件\",{\"1\":{\"70\":1}}],[\"事件总线是全局的\",{\"1\":{\"38\":1}}],[\"事件总线还可以用于跨组件通信\",{\"1\":{\"38\":1}}],[\"事件总线提供了一种集中式的机制\",{\"1\":{\"38\":1}}],[\"事件总线\",{\"1\":{\"38\":2}}],[\"事件触发和状态管理等功能\",{\"1\":{\"35\":1}}],[\"事件传参\",{\"1\":{\"25\":1}}],[\"事件对象在合成事件还是原生事件之间存在一些差异\",{\"1\":{\"27\":1}}],[\"事件对象通常作为事件处理函数的第一个参数传递\",{\"1\":{\"27\":1}}],[\"事件对象是在事件处理函数被调用时自动传递给事件处理函数的一个参数\",{\"1\":{\"27\":1}}],[\"事件对象和事件参数\",{\"0\":{\"27\":1}}],[\"事件对象\",{\"1\":{\"25\":1,\"263\":1}}],[\"事件绑定\",{\"1\":{\"25\":1}}],[\"事件处理允许你对网页上发生的事件\",{\"1\":{\"263\":1}}],[\"事件处理和渲染控制\",{\"1\":{\"45\":1}}],[\"事件处理函数的参数event包含了事件的相关信息\",{\"1\":{\"263\":1}}],[\"事件处理函数\",{\"1\":{\"38\":1}}],[\"事件处理函数等注入到原组件中\",{\"1\":{\"23\":1}}],[\"事件处理程序可以更新组件的状态\",{\"1\":{\"25\":1}}],[\"事件处理程序通常是在类组件的方法中定义\",{\"1\":{\"25\":1}}],[\"事件处理程序的参数通常是一个事件对象\",{\"1\":{\"25\":1}}],[\"事件处理程序是一个javascript函数\",{\"1\":{\"25\":1}}],[\"事件处理程序\",{\"1\":{\"25\":1}}],[\"事件处理是指在web应用程序中对用户交互事件\",{\"1\":{\"25\":1}}],[\"事件处理的基本概念\",{\"0\":{\"25\":1}}],[\"事件处理\",{\"0\":{\"24\":1,\"263\":1,\"287\":1}}],[\"集成测试可以确保组件之间的接口能够正确传递数据和消息\",{\"1\":{\"372\":1}}],[\"集成测试\",{\"1\":{\"372\":1}}],[\"集成得很好\",{\"1\":{\"9\":1}}],[\"集合的元素可以是任意类型\",{\"1\":{\"176\":1}}],[\"集合\",{\"0\":{\"176\":1},\"1\":{\"369\":1}}],[\"集合类型\",{\"1\":{\"136\":1}}],[\"整数可以是正数或负数\",{\"1\":{\"531\":1}}],[\"整数是没有小数点的\",{\"1\":{\"531\":1}}],[\"整数是一个没有小数的数字\",{\"1\":{\"531\":1}}],[\"整数不能包含逗号或空格\",{\"1\":{\"531\":1}}],[\"整数必须至少有一个数字\",{\"1\":{\"531\":1}}],[\"整数规则\",{\"1\":{\"531\":1}}],[\"整数类型\",{\"1\":{\"136\":1}}],[\"整型可以用三种格式来指定\",{\"1\":{\"531\":1}}],[\"整型\",{\"0\":{\"531\":1}}],[\"整个应用程序的组件树都可以访问到redux的store\",{\"1\":{\"406\":1}}],[\"整个应用的ui只有一个html页面\",{\"1\":{\"63\":1}}],[\"整个牛项目\",{\"1\":{\"70\":1}}],[\"小于运算符\",{\"1\":{\"254\":2,\"553\":1}}],[\"小于号\",{\"1\":{\"213\":1}}],[\"小于等于运算符\",{\"1\":{\"254\":2}}],[\"小于等于\",{\"1\":{\"135\":1}}],[\"小于\",{\"1\":{\"135\":1,\"553\":1}}],[\"子路由需要在父级路由的组件中定义一个路由出口\",{\"1\":{\"414\":1}}],[\"子路由的路径\",{\"1\":{\"415\":1}}],[\"子路由的路径可以使用相对路径\",{\"1\":{\"392\":1}}],[\"子路由的第二个路径是\",{\"1\":{\"392\":1}}],[\"子模块允许项目之间保持独立性\",{\"1\":{\"338\":1}}],[\"子类可以复用父类的代码\",{\"1\":{\"312\":1}}],[\"子类可以获得父类的特性\",{\"1\":{\"183\":1}}],[\"子类和其他类访问\",{\"1\":{\"312\":1}}],[\"子类\",{\"1\":{\"183\":1,\"324\":1,\"583\":1}}],[\"子元素选择器使用大于号\",{\"1\":{\"143\":1}}],[\"子元素选择器选择某个元素的直接子元素\",{\"1\":{\"143\":1}}],[\"子元素选择器\",{\"1\":{\"143\":1}}],[\"子查询是在一个查询内嵌套使用的查询语句\",{\"1\":{\"135\":1}}],[\"子查询和嵌套查询\",{\"1\":{\"135\":1}}],[\"子组件渲染的位置\",{\"1\":{\"396\":1}}],[\"子组件或具有ref属性的组件实例\",{\"1\":{\"93\":1}}],[\"子组件使用了props\",{\"1\":{\"36\":1}}],[\"子组件通过调用父组件传递的回调函数来改变父组件中的状态\",{\"1\":{\"35\":1}}],[\"子组件通过props接收到的属性是只读的\",{\"1\":{\"36\":1}}],[\"子组件通过props接收这些属性\",{\"1\":{\"36\":1}}],[\"子组件通过props接收并使用这些数据\",{\"1\":{\"35\":1}}],[\"子组件通过props接收数据\",{\"1\":{\"8\":1,\"9\":1}}],[\"子组件接收到message后将其显示在页面上\",{\"1\":{\"35\":1}}],[\"子组件可以使用这些属性来渲染数据\",{\"1\":{\"36\":1}}],[\"子组件可以向父组件发送数据或请求执行某些操作\",{\"1\":{\"35\":1}}],[\"子组件可以调用该回调函数来向父组件传递数据或触发特定的事件\",{\"1\":{\"35\":1}}],[\"子组件可以通过事件将数据传递给父组件\",{\"1\":{\"93\":1}}],[\"子组件可以通过mycontext\",{\"1\":{\"37\":1}}],[\"子组件可以通过props来读取传递的数据\",{\"1\":{\"35\":1}}],[\"子组件可以通过this\",{\"1\":{\"20\":1}}],[\"子组件\",{\"1\":{\"20\":1,\"35\":1,\"36\":1,\"37\":1,\"93\":1,\"96\":1,\"117\":1}}],[\"子组件不能直接修改父组件传递的属性\",{\"1\":{\"20\":1}}],[\"聚合函数用于在查询中进行计算和汇总数据\",{\"1\":{\"135\":1}}],[\"聚合函数和group\",{\"1\":{\"135\":1}}],[\"索引\",{\"1\":{\"578\":1}}],[\"索引从0开始递增\",{\"1\":{\"573\":1}}],[\"索引数组使用数字作为元素的索引\",{\"1\":{\"573\":1}}],[\"索引数组\",{\"0\":{\"573\":1}}],[\"索引类型\",{\"1\":{\"319\":1}}],[\"索引可以加速数据检索\",{\"1\":{\"134\":1}}],[\"索引和约束\",{\"1\":{\"134\":1}}],[\"替换字符串中的指定子串\",{\"1\":{\"570\":1}}],[\"替换\",{\"0\":{\"546\":1}}],[\"替换掉原来的状态\",{\"1\":{\"402\":1}}],[\"替换路由\",{\"1\":{\"393\":1}}],[\"替换或扩展\",{\"1\":{\"324\":1}}],[\"替换匹配\",{\"1\":{\"279\":1}}],[\"替换元素\",{\"1\":{\"265\":1}}],[\"替换子字符串为\",{\"1\":{\"256\":1}}],[\"替换username\",{\"1\":{\"133\":1}}],[\"替换为你的项目名称\",{\"1\":{\"88\":1}}],[\"备份代码等\",{\"1\":{\"336\":1}}],[\"备份和还原数据库时还有其他高级选项\",{\"1\":{\"133\":1}}],[\"备份和恢复数据\",{\"1\":{\"132\":1}}],[\"备份数据库\",{\"1\":{\"133\":2}}],[\"端口号和查询参数等组成部分\",{\"1\":{\"360\":1}}],[\"端口号\",{\"1\":{\"132\":1,\"352\":1}}],[\"连接\",{\"0\":{\"544\":1}}],[\"连接组件和redux\",{\"1\":{\"407\":1}}],[\"连接数据库\",{\"1\":{\"369\":2}}],[\"连接数据库等\",{\"1\":{\"363\":1,\"364\":1}}],[\"连接超时\",{\"1\":{\"358\":1}}],[\"连接超时和最大请求数限制\",{\"1\":{\"358\":1}}],[\"连接池可以提高连接的复用性\",{\"1\":{\"358\":1}}],[\"连接池是一种管理和复用连接的机制\",{\"1\":{\"358\":1}}],[\"连接池\",{\"1\":{\"358\":1}}],[\"连接管理在http协议中起着重要的作用\",{\"1\":{\"358\":1}}],[\"连接管理是关于在http协议中如何处理和管理网络连接的概念\",{\"1\":{\"358\":1}}],[\"连接管理\",{\"0\":{\"358\":1}}],[\"连接包括inner\",{\"1\":{\"134\":1}}],[\"连接到数据库\",{\"1\":{\"600\":1}}],[\"连接到\",{\"1\":{\"369\":1}}],[\"连接到已运行的mysql服务器\",{\"1\":{\"132\":1}}],[\"连接到mysql服务器后\",{\"1\":{\"132\":1}}],[\"连接到mysql服务器\",{\"1\":{\"132\":1}}],[\"连字符\",{\"1\":{\"91\":1}}],[\"日志记录等\",{\"1\":{\"405\":1}}],[\"日志记录和错误追踪\",{\"1\":{\"372\":1}}],[\"日志文件位置等\",{\"1\":{\"132\":1}}],[\"日期\",{\"1\":{\"334\":1}}],[\"日期和时间处理函数\",{\"1\":{\"570\":1}}],[\"日期和时间处理\",{\"1\":{\"570\":1}}],[\"日期和时间格式\",{\"1\":{\"235\":1}}],[\"日期和时间类型\",{\"1\":{\"136\":1}}],[\"日期和时间类型等\",{\"1\":{\"131\":1}}],[\"日常场合\",{\"1\":{\"164\":1}}],[\"您已经成功创建并运行了一个简单的node\",{\"1\":{\"508\":1}}],[\"您已经成功安装了node\",{\"1\":{\"507\":1}}],[\"您应该在命令行中看到输出\",{\"1\":{\"508\":1}}],[\"您应该能看到输出\",{\"1\":{\"364\":1}}],[\"您需要首先通过npm安装它们\",{\"1\":{\"509\":1}}],[\"您需要建立与数据库的连接\",{\"1\":{\"369\":1}}],[\"您需要安装适用于您选定数据库的驱动程序或库\",{\"1\":{\"369\":1}}],[\"您需要配置mysql服务器\",{\"1\":{\"132\":1}}],[\"您将看到一个推荐下载的按钮\",{\"1\":{\"507\":1}}],[\"您将看到两个不同的版本可供选择\",{\"1\":{\"507\":1}}],[\"您将看到生成的动态页面内容\",{\"1\":{\"367\":1}}],[\"您将需要提供数据库服务器的地址\",{\"1\":{\"132\":1}}],[\"您还可以编写自定义的中间件函数\",{\"1\":{\"366\":1}}],[\"您的位置是\",{\"1\":{\"229\":1}}],[\"您可以创建一个函数或方法\",{\"1\":{\"582\":1}}],[\"您可以定义自己的迭代器类\",{\"1\":{\"582\":1}}],[\"您可以定义更多的路由\",{\"1\":{\"364\":1}}],[\"您可以查阅\",{\"1\":{\"570\":1}}],[\"您可以通过数组来表示类方法的回调\",{\"1\":{\"539\":1}}],[\"您可以通过以下命令来验证npm是否正确安装\",{\"1\":{\"507\":1}}],[\"您可以直接将函数名作为字符串传递给接受回调参数的函数或方法\",{\"1\":{\"539\":1}}],[\"您可以更容易地处理异步操作的结果\",{\"1\":{\"511\":1}}],[\"您可以访问npm官方文档\",{\"1\":{\"510\":1}}],[\"您可以指定具体的版本号\",{\"1\":{\"510\":1}}],[\"您可以轻松地扩展您的node\",{\"1\":{\"509\":1}}],[\"您可以轻松地为应用程序提供静态文件和资源\",{\"1\":{\"368\":1}}],[\"您可以使用文件系统或者一些专门的库来实现文件缓存\",{\"1\":{\"601\":1}}],[\"您可以使用$\",{\"1\":{\"580\":1}}],[\"您可以使用条件语句结合html表单来显示相应的错误消息\",{\"1\":{\"580\":1}}],[\"您可以使用这些常量来比较和表示特定的枚举值\",{\"1\":{\"537\":1}}],[\"您可以使用\",{\"1\":{\"537\":1}}],[\"您可以使用类似同步代码的语法编写异步操作\",{\"1\":{\"511\":1}}],[\"您可以使用它们来处理文件系统\",{\"1\":{\"508\":1}}],[\"您可以使用驱动程序提供的api执行各种数据库操作\",{\"1\":{\"369\":1}}],[\"您可以执行以下命令来创建一个名为\",{\"1\":{\"364\":1}}],[\"您可以在一个函数中指定一个回调函数作为参数\",{\"1\":{\"511\":1}}],[\"您可以在app\",{\"1\":{\"508\":1}}],[\"您可以在应用程序中定义多个路由\",{\"1\":{\"365\":1}}],[\"您可以在\",{\"1\":{\"364\":1}}],[\"您可以根据自己的业务逻辑来编写处理请求的代码\",{\"1\":{\"365\":1}}],[\"您可以根据自己的需求编写和使用中间件\",{\"1\":{\"366\":1}}],[\"您可以根据自己的需求和业务逻辑进行扩展和定制\",{\"1\":{\"364\":1}}],[\"您可以根据自己的需求选择适合的版本\",{\"1\":{\"132\":1}}],[\"您可以根据请求的路径和方法来定义路由\",{\"1\":{\"365\":1}}],[\"您可以根据您的需求处理\",{\"1\":{\"282\":1}}],[\"您可以参考官方文档以获得更具体的指导\",{\"1\":{\"132\":1}}],[\"您可以进行更多的配置和管理操作\",{\"1\":{\"132\":1}}],[\"您可以启动mysql服务器\",{\"1\":{\"132\":1}}],[\"您可以选择要安装的组件\",{\"1\":{\"132\":1}}],[\"双方都有可能主动发起关闭\",{\"1\":{\"361\":1}}],[\"双方使用对称密钥进行通信\",{\"1\":{\"359\":1}}],[\"双引号\",{\"1\":{\"213\":1}}],[\"双击运行下载的mysql安装程序\",{\"1\":{\"132\":1}}],[\"双大括号\",{\"1\":{\"69\":1}}],[\"储存引擎\",{\"1\":{\"131\":1}}],[\"安全框架和库\",{\"1\":{\"602\":1}}],[\"安全整数范围\",{\"1\":{\"169\":1}}],[\"安全性特性以及丰富的扩展性和易用性\",{\"1\":{\"604\":1}}],[\"安全性和防护\",{\"0\":{\"602\":1}}],[\"安全性测试等\",{\"1\":{\"372\":1}}],[\"安全性提示\",{\"1\":{\"359\":1}}],[\"安全性方面\",{\"1\":{\"351\":1}}],[\"安全性方面也需要考虑\",{\"1\":{\"340\":1}}],[\"安全性等方面的内容\",{\"1\":{\"351\":1}}],[\"安全性考虑\",{\"1\":{\"349\":1}}],[\"安全性\",{\"1\":{\"131\":1,\"352\":1,\"467\":1}}],[\"安装一个模块\",{\"1\":{\"510\":1}}],[\"安装webpack\",{\"1\":{\"475\":1}}],[\"安装node\",{\"0\":{\"507\":1},\"1\":{\"475\":1}}],[\"安装url\",{\"1\":{\"473\":1}}],[\"安装依赖\",{\"1\":{\"444\":1}}],[\"安装插件\",{\"1\":{\"439\":1}}],[\"安装并使用redux\",{\"1\":{\"407\":1}}],[\"安装redux和react\",{\"1\":{\"407\":1}}],[\"安装redux\",{\"1\":{\"405\":1}}],[\"安装react\",{\"0\":{\"375\":1}}],[\"安装数据库驱动程序\",{\"1\":{\"369\":1}}],[\"安装必要的依赖\",{\"1\":{\"367\":1}}],[\"安装和更新模块\",{\"1\":{\"510\":1}}],[\"安装和设置\",{\"1\":{\"440\":1}}],[\"安装和基本配置\",{\"0\":{\"364\":1}}],[\"安装和配置webpack\",{\"0\":{\"475\":1}}],[\"安装和配置redux\",{\"1\":{\"406\":1}}],[\"安装和配置需要一定的技术知识和经验\",{\"1\":{\"132\":1}}],[\"安装和配置mysql通常包括以下步骤\",{\"1\":{\"132\":1}}],[\"安装和配置\",{\"0\":{\"132\":1}}],[\"安装git\",{\"1\":{\"334\":1}}],[\"安装完成后\",{\"1\":{\"132\":1,\"507\":1}}],[\"安装路径和其他选项\",{\"1\":{\"132\":1}}],[\"安装vue\",{\"1\":{\"100\":1,\"412\":1,\"438\":1}}],[\"安装所需的依赖项\",{\"0\":{\"2\":1}}],[\"安装\",{\"0\":{\"449\":1},\"1\":{\"1\":1,\"88\":2,\"364\":2}}],[\"查阅webpack官方文档\",{\"1\":{\"503\":1}}],[\"查阅webpack文档和社区资源\",{\"0\":{\"503\":1}}],[\"查明错误产生的原因\",{\"1\":{\"501\":1}}],[\"查看错误信息\",{\"0\":{\"499\":1}}],[\"查看输出目录中生成的文件\",{\"1\":{\"475\":1}}],[\"查看构建结果\",{\"1\":{\"475\":1}}],[\"查看用户详情\",{\"1\":{\"420\":1}}],[\"查看每个action的信息\",{\"1\":{\"405\":1}}],[\"查看每个action对状态的影响\",{\"1\":{\"404\":1}}],[\"查看远程仓库\",{\"1\":{\"336\":1}}],[\"查看分支\",{\"1\":{\"335\":1}}],[\"查看提交历史\",{\"1\":{\"334\":1}}],[\"查看状态\",{\"1\":{\"334\":1}}],[\"查看是否可以合并或优化变量的使用方式\",{\"1\":{\"277\":1}}],[\"查看你的\",{\"1\":{\"88\":1}}],[\"查找字符串中第一次出现某个子串的位置\",{\"1\":{\"570\":1}}],[\"查找匹配\",{\"1\":{\"279\":1}}],[\"查找\",{\"1\":{\"257\":1}}],[\"查询语句\",{\"1\":{\"600\":1}}],[\"查询语言\",{\"0\":{\"135\":1},\"1\":{\"131\":1,\"135\":1}}],[\"查询\",{\"1\":{\"570\":1}}],[\"查询参数是附加到\",{\"1\":{\"365\":1}}],[\"查询参数\",{\"1\":{\"360\":1,\"365\":1,\"386\":2}}],[\"查询结果缓存等\",{\"1\":{\"138\":1}}],[\"查询数据库中的数据\",{\"1\":{\"600\":1}}],[\"查询数据\",{\"1\":{\"134\":1,\"369\":1}}],[\"查询优化器和缓存机制等功能\",{\"1\":{\"131\":1}}],[\"多重继承\",{\"1\":{\"591\":1}}],[\"多线程构建可以更好地利用计算资源\",{\"1\":{\"497\":1}}],[\"多次相同的delete请求应该产生相同的结果\",{\"1\":{\"353\":1}}],[\"多次相同的put请求应该产生相同的结果\",{\"1\":{\"353\":1}}],[\"多库共存\",{\"0\":{\"307\":1}}],[\"多媒体支持\",{\"1\":{\"225\":1}}],[\"多媒体\",{\"0\":{\"220\":1}}],[\"多个\",{\"1\":{\"515\":1}}],[\"多个独立的应用程序可以共享彼此的模块\",{\"1\":{\"497\":1}}],[\"多个loader可以通过管道方式串联起来\",{\"1\":{\"463\":1}}],[\"多个参数之间使用\",{\"1\":{\"365\":1}}],[\"多个装饰器的执行顺序\",{\"1\":{\"324\":1}}],[\"多个装饰器可以按照从上到下的顺序应用于目标对象\",{\"1\":{\"204\":1}}],[\"多个异步操作的并行与顺序执行\",{\"1\":{\"196\":1}}],[\"多个根节点支持\",{\"1\":{\"99\":1}}],[\"多态性可以通过抽象类\",{\"1\":{\"583\":1}}],[\"多态性通常与继承一起使用\",{\"1\":{\"312\":1}}],[\"多态允许子类对象表现出与父类相同的行为\",{\"1\":{\"583\":1}}],[\"多态允许我们使用统一的接口来处理不同的对象\",{\"1\":{\"183\":1}}],[\"多态和动态绑定等特性\",{\"1\":{\"583\":1}}],[\"多态通过使用父类类型的引用来引用子类对象\",{\"1\":{\"312\":1}}],[\"多态是面向对象编程的一个重要特性\",{\"1\":{\"312\":1}}],[\"多态是指在不同的对象上调用相同的方法\",{\"1\":{\"183\":1}}],[\"多态提高了代码的灵活性\",{\"1\":{\"183\":1}}],[\"多态\",{\"1\":{\"183\":1,\"312\":1,\"583\":1}}],[\"多行\",{\"1\":{\"167\":2}}],[\"多行字符串\",{\"1\":{\"167\":1}}],[\"多列布局可以帮助你有效地呈现大段文本内容\",{\"1\":{\"154\":1}}],[\"多列布局\",{\"0\":{\"154\":1}}],[\"多种查询语言\",{\"1\":{\"131\":1}}],[\"主机名\",{\"1\":{\"360\":1}}],[\"主要用于移除未使用的代码\",{\"1\":{\"462\":1}}],[\"主要用于浏览器环境和一些特殊的场景\",{\"1\":{\"328\":1}}],[\"主要有以下三种访问修饰符\",{\"1\":{\"312\":1}}],[\"主要关注的是如何在不同的作用域中定义和使用变量以及理解作用域链的机制\",{\"1\":{\"280\":1}}],[\"主要是一种前端语言\",{\"1\":{\"241\":1}}],[\"主题色等\",{\"1\":{\"243\":1}}],[\"主键\",{\"1\":{\"131\":1}}],[\"主线程中的同步代码执行完毕后\",{\"1\":{\"270\":1}}],[\"主线程可以向web\",{\"1\":{\"57\":1}}],[\"主线程与web\",{\"1\":{\"57\":1}}],[\"支持使用匿名函数定义回调\",{\"1\":{\"539\":1}}],[\"支持持久化缓存的多种构建模式\",{\"1\":{\"497\":1}}],[\"支持\",{\"1\":{\"497\":3}}],[\"支持插件的自动发现和加载\",{\"1\":{\"464\":1}}],[\"支持多行文本和插入表达式\",{\"1\":{\"256\":1}}],[\"支持用户和权限管理\",{\"1\":{\"131\":1}}],[\"支持sql\",{\"1\":{\"131\":1}}],[\"支持定义和执行数据约束\",{\"1\":{\"131\":1}}],[\"支持常见的数值类型\",{\"1\":{\"131\":1}}],[\"支持嵌套和数组响应\",{\"1\":{\"99\":1}}],[\"检测字符串是否匹配正则表达式\",{\"1\":{\"279\":1}}],[\"检测内存泄漏问题\",{\"1\":{\"58\":1}}],[\"检查结果是否为空\",{\"1\":{\"600\":1}}],[\"检查连接是否成功\",{\"1\":{\"600\":1}}],[\"检查表单是否提交\",{\"1\":{\"580\":1}}],[\"检查一个值是否存在于数组中\",{\"1\":{\"578\":1}}],[\"检查数组中是否存在指定的键名\",{\"1\":{\"570\":1}}],[\"检查项目中已安装的模块是否有可用的更新\",{\"1\":{\"510\":1}}],[\"检查每个插件和配置的文档和示例\",{\"1\":{\"502\":1}}],[\"检查各个插件和配置\",{\"0\":{\"502\":1}}],[\"检查哪个步骤引起了错误\",{\"1\":{\"501\":1}}],[\"检查当前用户是否已认证\",{\"1\":{\"385\":1}}],[\"检查递归函数并确保添加正确的终止条件\",{\"1\":{\"277\":1}}],[\"检查和修改元素的可见性\",{\"1\":{\"265\":1}}],[\"检查任务队列\",{\"1\":{\"264\":1}}],[\"检查字符串是否以\",{\"1\":{\"256\":2}}],[\"检查字符串是否以指定的子字符串结尾\",{\"1\":{\"256\":1}}],[\"检查字符串是否以指定的子字符串开头\",{\"1\":{\"256\":1}}],[\"检查字符串是否包含\",{\"1\":{\"256\":1}}],[\"检查字符串是否包含指定子字符串\",{\"1\":{\"256\":1}}],[\"检查第一个值是否小于或等于第二个值\",{\"1\":{\"254\":1}}],[\"检查第一个值是否小于第二个值\",{\"1\":{\"254\":1}}],[\"检查第一个值是否大于或等于第二个值\",{\"1\":{\"254\":1}}],[\"检查第一个值是否大于第二个值\",{\"1\":{\"254\":1}}],[\"检查两个值是否不严格相等\",{\"1\":{\"254\":1}}],[\"检查两个值是否不相等\",{\"1\":{\"254\":1}}],[\"检查两个值是否严格相等\",{\"1\":{\"254\":1}}],[\"检查两个值是否相等\",{\"1\":{\"254\":1}}],[\"检查目标对象是否可扩展\",{\"1\":{\"191\":1}}],[\"检查目标对象是否具有指定的属性\",{\"1\":{\"191\":1}}],[\"检查\",{\"1\":{\"177\":1,\"282\":1}}],[\"检查集合中是否存在指定元素\",{\"1\":{\"176\":1}}],[\"检索和管理\",{\"1\":{\"131\":1}}],[\"企业级软件\",{\"1\":{\"131\":1}}],[\"目标是将代码按照合理且易于理解和维护的方式组织起来\",{\"1\":{\"435\":1}}],[\"目标元素等\",{\"1\":{\"263\":1}}],[\"目标类的原型和属性名\",{\"1\":{\"204\":1}}],[\"目标类的原型\",{\"1\":{\"204\":2}}],[\"目前由oracle公司维护和支持\",{\"1\":{\"131\":1}}],[\"目录下\",{\"1\":{\"368\":1}}],[\"目录中的文件映射到\",{\"1\":{\"366\":1}}],[\"目录中\",{\"1\":{\"325\":1}}],[\"目录中创建一个新的目录\",{\"1\":{\"3\":1}}],[\"目录中创建\",{\"1\":{\"3\":2}}],[\"目录\",{\"1\":{\"3\":1,\"328\":1,\"367\":1,\"460\":1,\"461\":1}}],[\"由linus\",{\"1\":{\"333\":1}}],[\"由内容\",{\"1\":{\"146\":1}}],[\"由瑞典公司mysql\",{\"1\":{\"131\":1}}],[\"由于资源类型变量保存有为打开文件\",{\"1\":{\"538\":1}}],[\"由于每种模式都针对不同环境和需求进行了优化\",{\"1\":{\"479\":1}}],[\"由于只有模块内的状态和操作可以访问和修改模块的状态\",{\"1\":{\"434\":1}}],[\"由于状态的集中管理\",{\"1\":{\"428\":1}}],[\"由于vuex使用了vue的响应式系统\",{\"1\":{\"426\":1}}],[\"由于virtual\",{\"1\":{\"45\":1}}],[\"由于redux的状态是单一且可预测的\",{\"1\":{\"404\":1}}],[\"由于react使用virtual\",{\"1\":{\"45\":1}}],[\"由于react的合成事件系统\",{\"1\":{\"27\":1}}],[\"由于网络环境的不确定性\",{\"1\":{\"361\":1}}],[\"由于https提供更高的安全性和隐私保护\",{\"1\":{\"359\":1}}],[\"由于浏览器的同源策略\",{\"1\":{\"349\":1}}],[\"由于浏览器的安全策略\",{\"1\":{\"340\":1}}],[\"由于模拟的异步操作具有2秒的延迟\",{\"1\":{\"271\":1}}],[\"由于闭包中引用了外部作用域的变量\",{\"1\":{\"268\":1}}],[\"由于闭包可以捕获外部作用域的变量\",{\"1\":{\"268\":1}}],[\"由于闭包的存在\",{\"1\":{\"268\":1}}],[\"由于原型的动态性\",{\"1\":{\"267\":1}}],[\"由于无法在外部函数作用域找到变量globalvariable\",{\"1\":{\"261\":1}}],[\"由于无法在内部函数作用域找到变量outervariable\",{\"1\":{\"261\":1}}],[\"由于writable为false\",{\"1\":{\"191\":1}}],[\"由于web\",{\"1\":{\"57\":1}}],[\"由于定义了过渡属性\",{\"1\":{\"151\":1}}],[\"由于之前定义了过渡效果\",{\"1\":{\"150\":1,\"152\":1}}],[\"由于\",{\"1\":{\"102\":1,\"267\":1,\"310\":1,\"330\":1}}],[\"由于props是单向数据流\",{\"1\":{\"93\":1}}],[\"由于数据更改导致的重新渲染和打补丁已经完成\",{\"1\":{\"87\":1}}],[\"由于实际dom操作是非常昂贵的\",{\"1\":{\"45\":1}}],[\"由于传入了空依赖项数组\",{\"1\":{\"41\":1}}],[\"根节点是document\",{\"1\":{\"129\":1}}],[\"根据移动结果输出相应的提示\",{\"1\":{\"581\":1}}],[\"根据本地化设置格式化日期和时间\",{\"1\":{\"570\":1}}],[\"根据您的操作系统\",{\"1\":{\"507\":1}}],[\"根据您的应用程序需求和所选的数据库系统\",{\"1\":{\"369\":1}}],[\"根据错误信息来定位问题\",{\"1\":{\"499\":1}}],[\"根据不同环境配置多个配置文件\",{\"1\":{\"454\":1}}],[\"根据不同模块的独立可复用性进行划分\",{\"1\":{\"435\":1}}],[\"根据不同的操作系统\",{\"1\":{\"334\":1}}],[\"根据不同的情况执行不同的代码块\",{\"1\":{\"255\":1}}],[\"根据不同的情况\",{\"1\":{\"32\":1}}],[\"根据业务领域将相关的功能划分为模块\",{\"1\":{\"435\":1}}],[\"根据action的类型\",{\"1\":{\"403\":1}}],[\"根据你的项目需求\",{\"1\":{\"475\":1}}],[\"根据你的具体业务情况\",{\"1\":{\"385\":1}}],[\"根据你的需求场景\",{\"1\":{\"61\":1}}],[\"根据用户认证状态进行路由渲染\",{\"1\":{\"385\":1}}],[\"根据用户的身份和角色\",{\"1\":{\"370\":1}}],[\"根据用户的行为和页面展示的需求\",{\"1\":{\"55\":1}}],[\"根据应用程序的需求\",{\"1\":{\"371\":1}}],[\"根据应用程序的要求选择合适的数据库\",{\"1\":{\"369\":1}}],[\"根据设计的api规范\",{\"1\":{\"371\":1}}],[\"根据路由的路径和参数\",{\"1\":{\"365\":1}}],[\"根据需求选择适合的插件\",{\"1\":{\"504\":1}}],[\"根据需求处理不同的http请求\",{\"1\":{\"365\":1}}],[\"根据需要进行版本控制\",{\"1\":{\"371\":1}}],[\"根据需要自动调整每列的高度\",{\"1\":{\"154\":1}}],[\"根据请求的路径和其他信息\",{\"1\":{\"360\":1}}],[\"根据现有类型中的属性生成新的属性集合\",{\"1\":{\"319\":1}}],[\"根据文本内容选择元素\",{\"1\":{\"299\":1}}],[\"根据属性选择元素\",{\"1\":{\"299\":1}}],[\"根据属性和内容筛选元素等\",{\"1\":{\"299\":1}}],[\"根据对象生命周期的特点将堆中的对象分成多个代\",{\"1\":{\"276\":1}}],[\"根据多个条件执行不同的代码块\",{\"1\":{\"255\":1}}],[\"根据条件选择不同的类型进行定义\",{\"1\":{\"319\":1}}],[\"根据条件输出\",{\"1\":{\"254\":1}}],[\"根据条件返回不同的值\",{\"1\":{\"254\":1}}],[\"根据条件列表切换class\",{\"1\":{\"82\":1}}],[\"根据授权协议\",{\"1\":{\"164\":1}}],[\"根据具体情况\",{\"1\":{\"466\":1}}],[\"根据具体的需求和问题\",{\"1\":{\"592\":1}}],[\"根据具体的应用场景和需求\",{\"1\":{\"443\":1}}],[\"根据具体的情况和需求\",{\"1\":{\"328\":1,\"444\":1}}],[\"根据具体的场景和需求\",{\"1\":{\"35\":1}}],[\"根据具体需求\",{\"1\":{\"142\":1}}],[\"根据节点的类型不同\",{\"1\":{\"129\":1}}],[\"根据项目的需求和组件的复用性\",{\"1\":{\"91\":1}}],[\"根据ui组件的功能和复用性\",{\"1\":{\"56\":1}}],[\"根据滚动位置的变化更新可见数据范围\",{\"1\":{\"53\":1}}],[\"根据滚动容器的滚动位置\",{\"1\":{\"53\":1}}],[\"根据每条数据的高度和总数据量\",{\"1\":{\"53\":1}}],[\"根据当前页面的数据范围从整个数据集合中筛选出要展示的数据\",{\"1\":{\"53\":1}}],[\"根据当前页数和每页显示的数据量计算当前页面的数据范围\",{\"1\":{\"53\":1}}],[\"根据数据总量和每页显示的数据量计算总页数\",{\"1\":{\"53\":1}}],[\"根据参数生成一个唯一的key\",{\"1\":{\"52\":1}}],[\"根据这些值的变化情况\",{\"1\":{\"48\":1}}],[\"根据提交的结果\",{\"1\":{\"33\":1}}],[\"真实dom是平台特定的\",{\"1\":{\"128\":1}}],[\"真正\",{\"1\":{\"70\":1}}],[\"影响性能\",{\"1\":{\"128\":1}}],[\"树\",{\"0\":{\"129\":1}}],[\"树和虚拟dom\",{\"0\":{\"127\":1}}],[\"树的另一个位置\",{\"1\":{\"119\":1}}],[\"离开的路由\",{\"1\":{\"421\":1}}],[\"离开路由\",{\"1\":{\"387\":1}}],[\"离开动画的结束状态\",{\"1\":{\"125\":1}}],[\"离开动画的生效状态\",{\"1\":{\"125\":1}}],[\"离开动画的起始状态\",{\"1\":{\"125\":1}}],[\"离开时生效\",{\"1\":{\"122\":2}}],[\"被广泛应用于前端开发中\",{\"1\":{\"448\":1}}],[\"被广泛应用于各种规模的应用程序\",{\"1\":{\"131\":1}}],[\"被称为\",{\"1\":{\"401\":1}}],[\"被称为作用域链\",{\"1\":{\"261\":1}}],[\"被标注为类型为\",{\"1\":{\"310\":1}}],[\"被赋值为\",{\"1\":{\"310\":2}}],[\"被执行\",{\"1\":{\"270\":1}}],[\"被点击的按钮元素\",{\"1\":{\"263\":1}}],[\"被拒绝\",{\"1\":{\"193\":1}}],[\"被解决\",{\"1\":{\"193\":1,\"195\":1}}],[\"被代理的对象\",{\"1\":{\"188\":1}}],[\"被移除的同时\",{\"1\":{\"125\":2}}],[\"被react解析和渲染到最终的dom结构中\",{\"1\":{\"13\":1}}],[\"延迟\",{\"1\":{\"405\":1}}],[\"延迟执行\",{\"1\":{\"260\":2,\"313\":1}}],[\"延迟的时间\",{\"1\":{\"260\":1}}],[\"延迟时间和时间间隔都是以毫秒为单位\",{\"1\":{\"260\":1}}],[\"延迟时间和过渡速度曲线\",{\"1\":{\"151\":1}}],[\"延迟时间\",{\"1\":{\"152\":1}}],[\"延迟与速度曲线类型\",{\"1\":{\"125\":2}}],[\"延迟渲染不可见部分的数据\",{\"1\":{\"53\":1}}],[\"动作和获取方法\",{\"1\":{\"444\":1}}],[\"动作\",{\"1\":{\"400\":1,\"401\":2,\"403\":1,\"425\":1,\"436\":1,\"440\":1}}],[\"动画效果\",{\"0\":{\"290\":1}}],[\"动画回调等\",{\"1\":{\"270\":1}}],[\"动画填充模式用于定义动画在播放前和播放后的状态\",{\"1\":{\"152\":1}}],[\"动画填充模式\",{\"1\":{\"152\":1}}],[\"动画速度曲线用于定义动画属性在动画过程中的变化速度\",{\"1\":{\"152\":1}}],[\"动画速度曲线\",{\"1\":{\"152\":1}}],[\"动画\",{\"0\":{\"152\":1}}],[\"动画结束前和开始之后\",{\"1\":{\"144\":1}}],[\"动画结束时触发\",{\"1\":{\"124\":4}}],[\"动画属性用于定义动画的持续时间\",{\"1\":{\"152\":1}}],[\"动画属性\",{\"1\":{\"144\":1,\"152\":1}}],[\"动画开始时触发\",{\"1\":{\"124\":2}}],[\"动画开始前触发\",{\"1\":{\"124\":2}}],[\"动态地为对象添加额外的功能\",{\"1\":{\"592\":1}}],[\"动态地改变网页的外观和布局\",{\"1\":{\"148\":1}}],[\"动态函数调用等\",{\"1\":{\"539\":1}}],[\"动态路由是指在vue框架中\",{\"1\":{\"413\":1}}],[\"动态路由可以通过使用\",{\"1\":{\"391\":1}}],[\"动态路由\",{\"0\":{\"391\":1,\"413\":1}}],[\"动态内容加载\",{\"0\":{\"348\":1}}],[\"动态内容加载等等\",{\"1\":{\"340\":1}}],[\"动态加载内容\",{\"1\":{\"301\":1}}],[\"动态导入等\",{\"1\":{\"493\":1}}],[\"动态导入可以增加程序的扩展性和模块化\",{\"1\":{\"467\":1}}],[\"动态导入可能会增加代码的加载和执行时间\",{\"1\":{\"467\":1}}],[\"动态导入可能会导致错误和异常\",{\"1\":{\"467\":1}}],[\"动态导入使得程序可以在运行时加载和执行外部代码\",{\"1\":{\"467\":1}}],[\"动态导入的模块会被webpack自动分割成独立的代码块\",{\"1\":{\"467\":1}}],[\"动态导入一个模块\",{\"1\":{\"467\":1}}],[\"动态导入对于按需加载模块或根据条件加载模块非常有用\",{\"1\":{\"202\":1}}],[\"动态导入\",{\"0\":{\"467\":1},\"1\":{\"200\":1,\"202\":1,\"203\":1,\"458\":1,\"480\":1}}],[\"动态跟踪数据的变化\",{\"1\":{\"102\":1}}],[\"动态组件是\",{\"1\":{\"94\":1}}],[\"动态组件\",{\"0\":{\"94\":1}}],[\"动态调整滚动容器的实际高度\",{\"1\":{\"53\":1}}],[\"动态规划等\",{\"1\":{\"52\":1}}],[\"首次渲染时生效\",{\"1\":{\"122\":4}}],[\"首先检查请求方法是否为post\",{\"1\":{\"581\":1}}],[\"首先要查看错误信息以了解具体的问题\",{\"1\":{\"499\":1}}],[\"首先安装bootstrap和style\",{\"1\":{\"474\":1}}],[\"首先安装sass\",{\"1\":{\"472\":1}}],[\"首先查找\",{\"1\":{\"460\":2}}],[\"首先匹配到的路由会被渲染到路由出口中\",{\"1\":{\"414\":1}}],[\"首先导入vue和vuerouter\",{\"1\":{\"413\":1}}],[\"首先使用css\",{\"1\":{\"455\":1}}],[\"首先使用\",{\"1\":{\"369\":1}}],[\"首先需要选择适合应用程序需求的数据库\",{\"1\":{\"369\":1}}],[\"首先需要创建一个空的\",{\"1\":{\"282\":1}}],[\"首先需要创建一个网格容器\",{\"1\":{\"156\":1}}],[\"首先定义一个类\",{\"1\":{\"330\":1}}],[\"首先执行主线程中的同步代码\",{\"1\":{\"270\":1}}],[\"首先确保你安装了\",{\"1\":{\"88\":1}}],[\"首先\",{\"1\":{\"57\":1,\"93\":2,\"94\":1,\"98\":1,\"270\":1,\"271\":1,\"364\":1,\"371\":1,\"384\":1,\"394\":1,\"397\":1,\"403\":1,\"405\":3,\"406\":2,\"420\":1,\"439\":1,\"440\":1,\"444\":1}}],[\"滑动或其他类型的过渡来实现\",{\"1\":{\"395\":1}}],[\"滑动效果\",{\"1\":{\"290\":1}}],[\"滑动\",{\"1\":{\"121\":1}}],[\"淡入淡出效果\",{\"1\":{\"290\":1}}],[\"淡入淡出\",{\"1\":{\"121\":1}}],[\"局部作用域\",{\"1\":{\"525\":1}}],[\"局部变量\",{\"1\":{\"249\":1,\"525\":1}}],[\"局部组件会通过\",{\"1\":{\"116\":1}}],[\"局部组件只能在当前组件中使用\",{\"1\":{\"116\":1}}],[\"局部注册\",{\"1\":{\"116\":1}}],[\"局部注册组件\",{\"1\":{\"91\":1}}],[\"此处相当与q和qq的用法\",{\"1\":{\"528\":1}}],[\"此处的this可能指向全局对象\",{\"1\":{\"262\":1}}],[\"此处的this指向person对象\",{\"1\":{\"262\":1}}],[\"此时连接关闭\",{\"1\":{\"361\":1}}],[\"此时没有异步任务\",{\"1\":{\"264\":1}}],[\"此时可以使用其他变量\",{\"1\":{\"262\":1}}],[\"此时\",{\"1\":{\"114\":7,\"397\":1}}],[\"此外\",{\"1\":{\"9\":2,\"22\":1,\"26\":1,\"110\":1,\"136\":1,\"145\":1,\"156\":1,\"173\":1,\"174\":1,\"260\":1,\"281\":1,\"310\":2,\"314\":1,\"340\":2,\"404\":1,\"414\":1,\"438\":1,\"457\":3,\"464\":1,\"479\":2,\"503\":1,\"507\":1,\"581\":1,\"600\":1,\"603\":1}}],[\"销毁等一系列过程\",{\"1\":{\"112\":1}}],[\"编程式导航仅仅是改变了url地址\",{\"1\":{\"416\":1}}],[\"编程式导航的实践\",{\"1\":{\"416\":1}}],[\"编程式导航的参数\",{\"1\":{\"416\":1}}],[\"编程式导航的方法\",{\"1\":{\"416\":1}}],[\"编程式导航是vue\",{\"1\":{\"416\":1}}],[\"编程式导航\",{\"0\":{\"383\":1,\"416\":1}}],[\"编码数据的中间件\",{\"1\":{\"366\":1}}],[\"编译后的输出\",{\"1\":{\"314\":1}}],[\"编译器或运行时环境如何找到和加载该模块的过程\",{\"1\":{\"328\":1}}],[\"编译器可能无法推断出准确的类型\",{\"1\":{\"316\":1}}],[\"编译器可以对该变量的类型不进行检查\",{\"1\":{\"310\":1}}],[\"编译器会对它们进行合并\",{\"1\":{\"329\":1}}],[\"编译器会按照一定规则去查找该模块\",{\"1\":{\"328\":2}}],[\"编译器会根据配置文件\",{\"1\":{\"328\":1}}],[\"编译器会根据模块解析策略找到并加载指定路径的模块\",{\"1\":{\"328\":1}}],[\"编译器会根据\",{\"1\":{\"328\":2}}],[\"编译器会根据赋值表达式的右侧推导出变量的类型\",{\"1\":{\"316\":1}}],[\"编译器会给出相应的错误提示\",{\"1\":{\"310\":1}}],[\"编译器该函数不会返回任何值\",{\"1\":{\"310\":1}}],[\"编译模板\",{\"1\":{\"112\":1}}],[\"编写一个函数来检查用户的认证状态\",{\"1\":{\"385\":1}}],[\"编写测试代码\",{\"1\":{\"372\":1}}],[\"编写清晰\",{\"1\":{\"371\":1}}],[\"编写处理客户端请求的代码\",{\"1\":{\"371\":1}}],[\"编写基本配置\",{\"1\":{\"364\":1}}],[\"编写高效的查询语句\",{\"1\":{\"138\":1}}],[\"编写需要在后台执行的任务代码\",{\"1\":{\"57\":1}}],[\"编写web\",{\"1\":{\"57\":1}}],[\"基类\",{\"1\":{\"583\":1}}],[\"基类的定义\",{\"1\":{\"324\":1}}],[\"基于表单的身份认证\",{\"1\":{\"370\":1}}],[\"基于条件返回一个值\",{\"1\":{\"254\":1}}],[\"基础\",{\"0\":{\"334\":1,\"411\":1}}],[\"基础知识\",{\"0\":{\"7\":1}}],[\"基本匹配规则\",{\"1\":{\"414\":1}}],[\"基本用法\",{\"0\":{\"388\":1}}],[\"基本路由定义\",{\"1\":{\"365\":1}}],[\"基本类型推断\",{\"1\":{\"316\":1}}],[\"基本类型注解\",{\"1\":{\"315\":1}}],[\"基本的事件循环工作流程如下\",{\"1\":{\"270\":1}}],[\"基本上\",{\"1\":{\"267\":1}}],[\"基本结构\",{\"0\":{\"207\":1}}],[\"基本使用\",{\"0\":{\"105\":1}}],[\"打包分析工具可以帮助你了解打包后的文件结构和体积\",{\"1\":{\"492\":1}}],[\"打包分析\",{\"0\":{\"492\":1}}],[\"打包结果\",{\"0\":{\"452\":1}}],[\"打印\",{\"1\":{\"538\":3}}],[\"打印日志\",{\"1\":{\"443\":1}}],[\"打印出\",{\"1\":{\"271\":4}}],[\"打印出0\",{\"1\":{\"102\":1}}],[\"打开和关闭文件\",{\"0\":{\"594\":1}}],[\"打开文件或\",{\"1\":{\"570\":1}}],[\"打开一个文本编辑器或集成开发环境\",{\"1\":{\"508\":1}}],[\"打开一个新窗口或标签页\",{\"1\":{\"266\":1}}],[\"打开终端\",{\"1\":{\"507\":1}}],[\"打开终端并创建一个新的目录\",{\"1\":{\"1\":1}}],[\"打开命令行\",{\"1\":{\"508\":1}}],[\"打开命令行终端窗口\",{\"1\":{\"364\":1}}],[\"打开命令行工具\",{\"1\":{\"88\":1}}],[\"打开浏览器的扩展程序商店\",{\"1\":{\"438\":1}}],[\"打开浏览器\",{\"1\":{\"5\":1,\"440\":1}}],[\"打开\",{\"1\":{\"3\":1}}],[\"特性的运行顺序很重要\",{\"1\":{\"330\":1}}],[\"特性\",{\"1\":{\"330\":2}}],[\"特性与方法\",{\"1\":{\"314\":1}}],[\"特性和方法\",{\"1\":{\"313\":1}}],[\"特别适用于web开发\",{\"1\":{\"513\":1}}],[\"特别适用于处理用户交互\",{\"1\":{\"272\":1}}],[\"特别适合于大型项目\",{\"1\":{\"482\":1}}],[\"特别要注意的是\",{\"1\":{\"261\":1}}],[\"特别是当回调函数非常简单时\",{\"1\":{\"571\":1}}],[\"特别是当函数组件接收的props有限且不可变时\",{\"1\":{\"47\":1}}],[\"特别是如果加载的内容具有不同的高度或者宽度时\",{\"1\":{\"349\":1}}],[\"特别是在处理包含循环引用\",{\"1\":{\"281\":1}}],[\"特别是在动态生成和移除\",{\"1\":{\"275\":1}}],[\"特别是在需要根据其他数据进行复杂计算的情况下\",{\"1\":{\"108\":1}}],[\"特点和用法\",{\"0\":{\"196\":1}}],[\"特点\",{\"1\":{\"102\":1}}],[\"练习实战\",{\"1\":{\"102\":1}}],[\"取余运算符\",{\"1\":{\"551\":1}}],[\"取决于url的协议部分\",{\"1\":{\"360\":1}}],[\"取消由setinterval创建的定时器\",{\"1\":{\"266\":1}}],[\"取消由settimeout创建的定时器\",{\"1\":{\"266\":1}}],[\"取消操作\",{\"1\":{\"198\":1}}],[\"取消订阅\",{\"1\":{\"22\":1,\"401\":1}}],[\"取代了vue\",{\"1\":{\"99\":1}}],[\"采用了proxy代理作为底层实现\",{\"1\":{\"99\":1}}],[\"采用异步请求\",{\"1\":{\"55\":1}}],[\"与include和require类似\",{\"1\":{\"599\":1}}],[\"与传统匿名函数不同\",{\"1\":{\"571\":1}}],[\"与传统的css较为接近\",{\"1\":{\"161\":1}}],[\"与while循环类似\",{\"1\":{\"562\":1}}],[\"与数据库进行交互等\",{\"1\":{\"513\":1}}],[\"与html代码相互交互\",{\"1\":{\"513\":1}}],[\"与http相比\",{\"1\":{\"359\":1}}],[\"与应用程序的代码分开打包\",{\"1\":{\"458\":1}}],[\"与file\",{\"1\":{\"455\":1}}],[\"与后端同步等等\",{\"1\":{\"437\":1}}],[\"与react的无缝集成\",{\"1\":{\"404\":1}}],[\"与服务器进行验证\",{\"1\":{\"352\":1}}],[\"与ajax不同\",{\"1\":{\"343\":1}}],[\"与因子相乘\",{\"1\":{\"258\":1}}],[\"与表单元素结合使用\",{\"1\":{\"246\":1}}],[\"与其他元素共享同一行\",{\"1\":{\"210\":1}}],[\"与全局的parsefloat\",{\"1\":{\"169\":1}}],[\"与全局的parseint\",{\"1\":{\"169\":1}}],[\"与全局的issafeinteger\",{\"1\":{\"169\":1}}],[\"与全局的isnan\",{\"1\":{\"169\":1}}],[\"与全局的isinteger\",{\"1\":{\"169\":1}}],[\"与全局的isfinite\",{\"1\":{\"169\":1}}],[\"与sass不同的是\",{\"1\":{\"161\":1}}],[\"与特定环境绑定\",{\"1\":{\"128\":1}}],[\"与真实dom\",{\"1\":{\"128\":1}}],[\"与\",{\"1\":{\"110\":1,\"170\":1}}],[\"与vue\",{\"1\":{\"99\":1}}],[\"与之前的虚拟dom树进行比较\",{\"1\":{\"45\":1}}],[\"组成一个信任链\",{\"1\":{\"359\":1}}],[\"组成\",{\"1\":{\"357\":1}}],[\"组织和管理代码\",{\"1\":{\"268\":1}}],[\"组合reducers\",{\"1\":{\"402\":1}}],[\"组合\",{\"1\":{\"198\":1}}],[\"组合式api\",{\"1\":{\"99\":1}}],[\"组件通过调用dispatch方法触发一个action\",{\"1\":{\"428\":1}}],[\"组件通信\",{\"0\":{\"34\":1,\"93\":1}}],[\"组件触发action\",{\"1\":{\"428\":1}}],[\"组件与store的通信\",{\"1\":{\"426\":1}}],[\"组件之间存在着父子关系\",{\"1\":{\"425\":1}}],[\"组件之间的通信可以通过父子组件的props和事件以及兄弟组件或者任意组件之间通过vue实例的事件总线和vuex状态管理来实现\",{\"1\":{\"93\":1}}],[\"组件内的路由守卫会在路由切换之前被调用\",{\"1\":{\"421\":1}}],[\"组件内的路由守卫\",{\"1\":{\"421\":1}}],[\"组件内部\",{\"1\":{\"394\":1}}],[\"组件只需要订阅状态的变化并根据变化进行渲染\",{\"1\":{\"404\":1}}],[\"组件解耦和与react无缝集成等优点\",{\"1\":{\"404\":1}}],[\"组件解耦\",{\"1\":{\"404\":1}}],[\"组件用于指定在加载路由组件时显示的加载指示符\",{\"1\":{\"397\":1}}],[\"组件用于在路由匹配失败时进行重定向\",{\"1\":{\"382\":1}}],[\"组件位置上\",{\"1\":{\"396\":1}}],[\"组件位于导航菜单和页脚之间的位置\",{\"1\":{\"396\":1}}],[\"组件分别对应了\",{\"1\":{\"396\":1}}],[\"组件被配置为根路径的子组件\",{\"1\":{\"396\":1}}],[\"组件定义了一个包含导航菜单和页脚的父组件\",{\"1\":{\"396\":1}}],[\"组件式过渡\",{\"1\":{\"395\":1}}],[\"组件会被渲染\",{\"1\":{\"391\":1}}],[\"组件都可以通过\",{\"1\":{\"389\":1}}],[\"组件实现的\",{\"1\":{\"389\":1}}],[\"组件实例化时调用\",{\"1\":{\"22\":1}}],[\"组件来渲染对应的子组件\",{\"1\":{\"396\":1}}],[\"组件来完成\",{\"1\":{\"394\":1}}],[\"组件来创建导航链接\",{\"1\":{\"384\":1,\"394\":1}}],[\"组件来定义每个路由规则\",{\"1\":{\"394\":1}}],[\"组件来定义每个路由\",{\"1\":{\"384\":1}}],[\"组件已经被从\",{\"1\":{\"114\":1}}],[\"组件已经渲染到了\",{\"1\":{\"114\":1}}],[\"组件仍然存在于\",{\"1\":{\"114\":1}}],[\"组件模板中包含了两个按钮\",{\"1\":{\"97\":1}}],[\"组件中\",{\"1\":{\"391\":1}}],[\"组件中定义多个组件\",{\"1\":{\"94\":1}}],[\"组件中导入它\",{\"1\":{\"92\":1}}],[\"组件包含一个模板\",{\"1\":{\"92\":1}}],[\"组件命名示例\",{\"1\":{\"91\":1}}],[\"组件命名需要遵循以下规则\",{\"1\":{\"91\":1}}],[\"组件名应遵循\",{\"1\":{\"91\":1}}],[\"组件名应尽可能简洁\",{\"1\":{\"91\":1}}],[\"组件注册\",{\"0\":{\"91\":1,\"116\":1}}],[\"组件是在\",{\"1\":{\"389\":1}}],[\"组件是一种用于封装可重用和独立功能的自定义\",{\"1\":{\"244\":1}}],[\"组件是\",{\"1\":{\"90\":1,\"393\":2}}],[\"组件是可复用的\",{\"1\":{\"89\":1}}],[\"组件组织\",{\"1\":{\"89\":1}}],[\"组件及其所有的子节点将被视为静态内容并跳过\",{\"1\":{\"70\":1}}],[\"组件化是一种将页面拆分成多个组件的架构模式\",{\"1\":{\"89\":1}}],[\"组件化是将模块化应用到用户界面\",{\"1\":{\"56\":1}}],[\"组件化\",{\"0\":{\"89\":1}}],[\"组件化的编程模型\",{\"1\":{\"60\":1}}],[\"组件化开发\",{\"1\":{\"8\":1,\"9\":1,\"45\":1,\"63\":1,\"407\":1}}],[\"组件拆分\",{\"1\":{\"56\":1}}],[\"组件即将从dom中移除时调用\",{\"1\":{\"22\":1}}],[\"组件更新完成后调用\",{\"1\":{\"22\":1}}],[\"组件第一次渲染完成后调用\",{\"1\":{\"22\":1}}],[\"组件经历的不同阶段和触发的特定方法\",{\"1\":{\"22\":1}}],[\"组件可以通过从store中读取状态和触发mutations或actions来更新或获取数据\",{\"1\":{\"426\":1}}],[\"组件可以通过vue\",{\"1\":{\"90\":1}}],[\"组件可以订阅store的状态变化通过subscribe\",{\"1\":{\"401\":1}}],[\"组件可以嵌套在其他组件中\",{\"1\":{\"396\":1}}],[\"组件可以包含多个\",{\"1\":{\"389\":1}}],[\"组件可以包含模板\",{\"1\":{\"90\":1}}],[\"组件可以管理自己的数据\",{\"1\":{\"20\":1}}],[\"组件可以接收外部的数据\",{\"1\":{\"20\":1}}],[\"组件可以是类组件\",{\"1\":{\"11\":1}}],[\"组件的扩展\",{\"1\":{\"393\":1}}],[\"组件的\",{\"1\":{\"389\":2,\"391\":2,\"397\":1}}],[\"组件的属性已经被更新\",{\"1\":{\"114\":2}}],[\"组件的定义方式有两种\",{\"1\":{\"90\":1}}],[\"组件的生命周期包括挂载阶段\",{\"1\":{\"22\":1}}],[\"组件的生命周期包括三个阶段\",{\"1\":{\"22\":1}}],[\"组件的生命周期指的是在组件存在期间\",{\"1\":{\"22\":1}}],[\"组件的生命周期\",{\"0\":{\"22\":1}}],[\"组件的渲染是通过render方法来实现的\",{\"1\":{\"21\":1}}],[\"组件的渲染是指将组件的结构和内容转换为实际的dom元素\",{\"1\":{\"21\":1}}],[\"组件的渲染\",{\"0\":{\"21\":1}}],[\"组件的状态\",{\"0\":{\"20\":1}}],[\"组件的状态是组件内部管理数据的一种方式\",{\"1\":{\"11\":1}}],[\"组件的输入参数通常被命名为props\",{\"1\":{\"19\":1}}],[\"组件的高度复用性也提高了开发效率\",{\"1\":{\"9\":1}}],[\"组件具有输入项\",{\"1\":{\"11\":1}}],[\"组件\",{\"0\":{\"11\":1,\"17\":1,\"115\":1,\"244\":1,\"376\":1,\"377\":1},\"1\":{\"11\":1,\"119\":2,\"122\":2,\"244\":2,\"382\":1,\"384\":2,\"389\":2,\"393\":2,\"394\":1,\"396\":2,\"412\":1}}],[\"组件文件\",{\"1\":{\"3\":3}}],[\"组件和\",{\"0\":{\"3\":1},\"1\":{\"389\":1,\"396\":1}}],[\"另一个是\",{\"1\":{\"413\":1}}],[\"另一个生成器函数或可迭代对象的迭代\",{\"1\":{\"187\":1}}],[\"另一个用于打印计数\",{\"1\":{\"97\":1}}],[\"另外的\",{\"1\":{\"164\":1}}],[\"另外\",{\"1\":{\"43\":1,\"49\":1,\"52\":1,\"54\":1,\"55\":1,\"93\":1,\"126\":1,\"165\":1,\"258\":1,\"269\":1,\"281\":1,\"331\":1,\"455\":1,\"599\":1}}],[\"具有强大的路由系统\",{\"1\":{\"604\":1}}],[\"具有适当的写权限\",{\"1\":{\"581\":1}}],[\"具有以下几个优点\",{\"1\":{\"404\":1}}],[\"具有简洁的\",{\"1\":{\"363\":1}}],[\"具有更好的离线访问和交互特性\",{\"1\":{\"243\":1}}],[\"具有更强大的功能和更容易使用的\",{\"1\":{\"177\":1}}],[\"具有更短的语法和更直接的词法作用域绑定\",{\"1\":{\"172\":1}}],[\"具有灵活的栅格系统和各种可定制的组件\",{\"1\":{\"160\":1}}],[\"具名函数表达式\",{\"1\":{\"258\":1}}],[\"具名捕获组\",{\"1\":{\"168\":1}}],[\"具名插槽可以通过<template>标签的v\",{\"1\":{\"96\":1}}],[\"具名插槽\",{\"1\":{\"96\":1}}],[\"具体的安装方式请参考vuex的官方文档\",{\"1\":{\"441\":1}}],[\"具体步骤如下\",{\"1\":{\"361\":2}}],[\"具体使用哪种方式取决于情况和需求\",{\"1\":{\"591\":1}}],[\"具体使用哪种方法取决于你所需的拷贝方式\",{\"1\":{\"281\":1}}],[\"具体使用哪种盒模型取决于你的需求和个人偏好\",{\"1\":{\"146\":1}}],[\"具体取决于路由的匹配情况\",{\"1\":{\"389\":1}}],[\"具体取决于代码的执行方式和使用场景\",{\"1\":{\"262\":1}}],[\"具体取决于你的需求\",{\"1\":{\"42\":1}}],[\"具体方法取决于操作系统\",{\"1\":{\"132\":1}}],[\"具体要根据应用程序的具体需求和场景进行评估和调整\",{\"1\":{\"49\":1}}],[\"分割到一个单独的文件中\",{\"1\":{\"480\":1}}],[\"分割代码块\",{\"1\":{\"479\":1}}],[\"分发动作\",{\"1\":{\"441\":1}}],[\"分发其他action或获取getter的值\",{\"1\":{\"436\":1}}],[\"分发内容\",{\"1\":{\"96\":1}}],[\"分工协作\",{\"1\":{\"434\":1}}],[\"分配任务\",{\"1\":{\"337\":1}}],[\"分支合并\",{\"1\":{\"337\":1}}],[\"分支的修改合并到当前分支\",{\"1\":{\"335\":1}}],[\"分支是git版本控制中一项重要的功能\",{\"1\":{\"335\":1}}],[\"分支管理是git中的核心概念之一\",{\"1\":{\"335\":1}}],[\"分支管理\",{\"0\":{\"335\":1},\"1\":{\"334\":1,\"337\":1}}],[\"分代回收\",{\"1\":{\"276\":1}}],[\"分别赋给变量\",{\"1\":{\"579\":1}}],[\"分别用于增加和减少count的值\",{\"1\":{\"440\":1}}],[\"分别对应根路径和\",{\"1\":{\"413\":1}}],[\"分别是直接跳转到\",{\"1\":{\"416\":1}}],[\"分别是home\",{\"1\":{\"415\":1}}],[\"分别是一个字符串\",{\"1\":{\"310\":1}}],[\"分别是正则表达式的模式和标志\",{\"1\":{\"168\":1}}],[\"分别使用0b和0o作为前缀\",{\"1\":{\"169\":1}}],[\"分别代表主要颜色和次要颜色\",{\"1\":{\"161\":3}}],[\"分别定义径向渐变的起始点和结束点\",{\"1\":{\"153\":1}}],[\"分辨率等\",{\"1\":{\"157\":1}}],[\"分隔\",{\"1\":{\"365\":1}}],[\"分隔两个选择器\",{\"1\":{\"143\":1}}],[\"分隔不同的元素名称\",{\"1\":{\"143\":1}}],[\"分离第三方库\",{\"1\":{\"504\":1}}],[\"分离出协议\",{\"1\":{\"360\":1}}],[\"分离的命名空间\",{\"1\":{\"326\":1}}],[\"分离\",{\"1\":{\"140\":1}}],[\"分批处理大量数据\",{\"1\":{\"138\":1}}],[\"分页和虚拟滚动是处理大量数据展示和滚动问题的常用优化技术\",{\"1\":{\"53\":1}}],[\"分页和虚拟滚动是两种常用的优化技术\",{\"1\":{\"53\":1}}],[\"分页可以减少一次性加载大量数据而导致的性能问题\",{\"1\":{\"53\":1}}],[\"分页是将大量的数据划分为多个页面进行展示的一种方式\",{\"1\":{\"53\":1}}],[\"分页\",{\"1\":{\"53\":1}}],[\"就相当于告诉\",{\"1\":{\"310\":1}}],[\"就使用它\",{\"1\":{\"261\":1}}],[\"就会跳转到用户详情页面\",{\"1\":{\"420\":1}}],[\"就会产生冲突\",{\"1\":{\"337\":1}}],[\"就会创建一个新的词法环境\",{\"1\":{\"280\":1}}],[\"就会创建一个新的函数作用域\",{\"1\":{\"261\":1}}],[\"就会发生堆栈溢出错误\",{\"1\":{\"277\":1}}],[\"就会沿着原型链向上查找\",{\"1\":{\"267\":2}}],[\"就会导致页面卡顿和阻塞用户界面\",{\"1\":{\"264\":1}}],[\"就会解析\",{\"1\":{\"95\":1}}],[\"就是生命周期\",{\"1\":{\"112\":1}}],[\"就简单得多\",{\"1\":{\"70\":1}}],[\"请查阅官方文档\",{\"1\":{\"604\":1}}],[\"请始终使用安全的编码实践\",{\"1\":{\"602\":1}}],[\"请确保目标目录\",{\"1\":{\"581\":1}}],[\"请确保对代码进行适当的编译和转换\",{\"1\":{\"467\":1}}],[\"请单击\",{\"1\":{\"507\":1}}],[\"请参考webpack官方文档\",{\"1\":{\"480\":1,\"483\":1}}],[\"请根据你的项目需求进行相应的配置\",{\"1\":{\"475\":1}}],[\"请按照以下步骤进行操作\",{\"1\":{\"439\":1,\"507\":1,\"508\":1}}],[\"请随时提问\",{\"1\":{\"319\":1,\"415\":1}}],[\"请先引入相应的插件脚本\",{\"1\":{\"293\":1}}],[\"请求和响应格式\",{\"1\":{\"371\":1}}],[\"请求参数和预期的响应格式\",{\"1\":{\"371\":1}}],[\"请求的路由\",{\"1\":{\"365\":4}}],[\"请求的资源未找到\",{\"1\":{\"352\":1}}],[\"请求报文中包含了请求的方法\",{\"1\":{\"360\":1}}],[\"请求头中会包含connection字段\",{\"1\":{\"358\":1}}],[\"请求成功\",{\"1\":{\"352\":1}}],[\"请求成功时的处理\",{\"1\":{\"292\":1}}],[\"请求方法\",{\"1\":{\"352\":1,\"521\":1}}],[\"请求由请求方法\",{\"1\":{\"352\":1}}],[\"请求\",{\"1\":{\"352\":1,\"365\":1,\"506\":1}}],[\"请求已完成\",{\"1\":{\"341\":1}}],[\"请求已接收\",{\"1\":{\"341\":1}}],[\"请求处理中\",{\"1\":{\"341\":1}}],[\"请求未初始化\",{\"1\":{\"341\":1}}],[\"请求完成时的处理\",{\"1\":{\"292\":1}}],[\"请求失败时的处理\",{\"1\":{\"292\":1}}],[\"请在进行操作前阅读相关文档和参考资料\",{\"1\":{\"132\":1}}],[\"请注意\",{\"1\":{\"94\":1,\"98\":1,\"132\":1,\"133\":1,\"218\":1,\"229\":1,\"253\":1,\"266\":1,\"270\":1,\"389\":1,\"537\":1,\"580\":1}}],[\"请输入内容\",{\"1\":{\"294\":1}}],[\"请输入消息\",{\"1\":{\"30\":1}}],[\"请输入用户名\",{\"1\":{\"30\":1}}],[\"举个例子说明作用域链的工作原理\",{\"1\":{\"261\":1}}],[\"举个例子\",{\"1\":{\"93\":1}}],[\"样式来进行高亮显示\",{\"1\":{\"394\":1}}],[\"样式操作\",{\"0\":{\"295\":1}}],[\"样式属性\",{\"0\":{\"144\":1}}],[\"样式\",{\"1\":{\"92\":1,\"140\":1,\"210\":1}}],[\"样式和脚本\",{\"1\":{\"244\":1}}],[\"样式和栅格系统\",{\"1\":{\"233\":1}}],[\"样式和逻辑\",{\"1\":{\"92\":1}}],[\"样式和行为逻辑\",{\"1\":{\"90\":1}}],[\"短横线命名法\",{\"1\":{\"91\":1}}],[\"那么最后一个混入的\",{\"1\":{\"330\":1}}],[\"那么拷贝后的对象或数组中的相应属性或元素仍然引用同一个对象\",{\"1\":{\"281\":1}}],[\"那么等待新的任务进入队列\",{\"1\":{\"264\":1}}],[\"那么该异常将会被\",{\"1\":{\"196\":1}}],[\"那么\",{\"1\":{\"196\":1}}],[\"那么torefs只会将该属性本身转化为ref对象\",{\"1\":{\"102\":1}}],[\"那么当一个组件改变了\",{\"1\":{\"90\":1}}],[\"那么它们共享的状态和逻辑将通过闭包的方式与自定义hooks形成依赖关系\",{\"1\":{\"43\":1}}],[\"下划线\",{\"1\":{\"518\":1}}],[\"下载完成后\",{\"1\":{\"507\":1}}],[\"下载适合您操作系统的最新版本并进行安装\",{\"1\":{\"364\":1}}],[\"下载适合您操作系统的mysql安装程序\",{\"1\":{\"132\":1}}],[\"下载最新版本的jquery库并将其引入到html文件中\",{\"1\":{\"284\":1}}],[\"下载mysql安装程序\",{\"1\":{\"132\":1}}],[\"下载并安装\",{\"1\":{\"88\":1}}],[\"下面将详细介绍react\",{\"1\":{\"398\":1}}],[\"下面的代码在类外部会报错\",{\"1\":{\"312\":2}}],[\"下面介绍几种常见的redux中间件\",{\"1\":{\"405\":1}}],[\"下面介绍几种常见的拷贝方法\",{\"1\":{\"281\":1}}],[\"下面介绍一些常见的高级类型\",{\"1\":{\"319\":1}}],[\"下面介绍两种常用的模块化方案\",{\"1\":{\"199\":1}}],[\"下面对它们进行简要说明\",{\"1\":{\"280\":1}}],[\"下面对每个特性进行详细说明\",{\"1\":{\"183\":1}}],[\"下面对这些概念进行详细说明\",{\"1\":{\"11\":1}}],[\"下面详细介绍解构赋值的语法和用法\",{\"1\":{\"166\":1}}],[\"下面我将介绍代码优化和分割的几种常用方式\",{\"1\":{\"480\":1}}],[\"下面我将介绍代码拆分和模块化的概念和实践方法\",{\"1\":{\"56\":1}}],[\"下面我将介绍几种常见的性能分析工具及其使用方法\",{\"1\":{\"58\":1}}],[\"下面我将介绍几种常见的图片优化方法\",{\"1\":{\"54\":1}}],[\"下面我将介绍如何使用web\",{\"1\":{\"57\":1}}],[\"下面我将介绍缓存和数据请求优化的一些常见方法\",{\"1\":{\"55\":1}}],[\"下面我将介绍分页和虚拟滚动的概念和实现方法\",{\"1\":{\"53\":1}}],[\"下面我将介绍使用memoized函数和记忆化技术的概念及实现方法\",{\"1\":{\"52\":1}}],[\"下面我将分别介绍懒加载和按需加载的概念及实现方法\",{\"1\":{\"51\":1}}],[\"下面我将分别介绍使用类组件的生命周期方法和函数式组件的effect钩子来进行异步加载\",{\"1\":{\"50\":1}}],[\"下面我会分别介绍这些常用的hooks函数及其用法\",{\"1\":{\"41\":1}}],[\"下面举一个简单的例子来说明父子组件通信的实现方式\",{\"1\":{\"35\":1}}],[\"下面是箭头函数和传统匿名函数的对比示例\",{\"1\":{\"571\":1}}],[\"下面是对这些概念的简要说明\",{\"1\":{\"511\":1}}],[\"下面是webpack与现代前端工具的一些整合方式\",{\"1\":{\"470\":1}}],[\"下面是vue路由匹配规则的详细解释\",{\"1\":{\"414\":1}}],[\"下面是virtual\",{\"1\":{\"45\":1}}],[\"下面是redux与react集成的一般步骤\",{\"1\":{\"406\":1}}],[\"下面是redux的基本工作流程\",{\"1\":{\"402\":1}}],[\"下面是react与几个常见前端框架的比较\",{\"1\":{\"10\":1}}],[\"下面是如何在\",{\"1\":{\"384\":1}}],[\"下面是关于变量的一些重要概念\",{\"1\":{\"249\":1}}],[\"下面是es6中正则表达式的一些新特性\",{\"1\":{\"168\":1}}],[\"下面是使用模块的一些示例\",{\"1\":{\"509\":1}}],[\"下面是使用action和mutation处理异步逻辑的一般步骤\",{\"1\":{\"433\":1}}],[\"下面是使用\",{\"1\":{\"365\":1}}],[\"下面是使用es6模块化的示例\",{\"1\":{\"201\":1}}],[\"下面是使用commonjs模块化的示例\",{\"1\":{\"200\":1}}],[\"下面是使用css过渡的基本语法\",{\"1\":{\"151\":1}}],[\"下面是使用shouldcomponentupdate进行手动优化的一般步骤\",{\"1\":{\"48\":1}}],[\"下面是事务处理的主要特性和相关概念\",{\"1\":{\"137\":1}}],[\"下面是\",{\"1\":{\"86\":1,\"195\":1}}],[\"下面是它们的介绍和使用场景\",{\"1\":{\"47\":1}}],[\"下面是创建自定义hooks的一般步骤\",{\"1\":{\"42\":1}}],[\"下面是表单元素的基本用法\",{\"1\":{\"30\":1}}],[\"下面是一些关于优化配置的要点\",{\"1\":{\"469\":1}}],[\"下面是一些关于调试配置的要点\",{\"1\":{\"468\":1}}],[\"下面是一些需要在vuex中进行模块化的原因\",{\"1\":{\"434\":1}}],[\"下面是一些常用的php过滤器\",{\"1\":{\"603\":1}}],[\"下面是一些常用的2d和3d转换方法\",{\"1\":{\"150\":1}}],[\"下面是一些常见情况下的this指向\",{\"1\":{\"262\":1}}],[\"下面是一些常见的问题和解决方法\",{\"1\":{\"498\":1}}],[\"下面是一些常见的数据库集成的步骤\",{\"1\":{\"369\":1}}],[\"下面是一些常见的开发模式和相应的示例\",{\"1\":{\"278\":1}}],[\"下面是一些常见的垃圾回收算法\",{\"1\":{\"276\":1}}],[\"下面是一些常见的bom操作\",{\"1\":{\"266\":1}}],[\"下面是一些常见的dom操作\",{\"1\":{\"265\":1}}],[\"下面是一些常见的运算符\",{\"1\":{\"254\":1}}],[\"下面是一些常见的使用es6装饰器的示例\",{\"1\":{\"204\":1}}],[\"下面是一些常见的用于实现响应式设计的css技术和方法\",{\"1\":{\"148\":1}}],[\"下面是一些常见的性能优化和调优方法\",{\"1\":{\"138\":1}}],[\"下面是一些常见的事件类型\",{\"1\":{\"28\":1}}],[\"下面是一般的步骤\",{\"1\":{\"432\":1}}],[\"下面是一个例子来说明如何进行路由匹配\",{\"1\":{\"392\":1}}],[\"下面是一个基本的示例\",{\"1\":{\"367\":1}}],[\"下面是一个路由级中间件\",{\"1\":{\"366\":1}}],[\"下面是一个返回类型为\",{\"1\":{\"310\":1}}],[\"下面是一个堆的示例\",{\"1\":{\"273\":1}}],[\"下面是一个栈的示例\",{\"1\":{\"273\":1}}],[\"下面是一个使用第三方模块的示例\",{\"1\":{\"509\":1}}],[\"下面是一个使用内置模块的示例\",{\"1\":{\"509\":1}}],[\"下面是一个使用插件扩展vuex功能的示例\",{\"1\":{\"437\":1}}],[\"下面是一个使用redux\",{\"1\":{\"405\":1}}],[\"下面是一个使用\",{\"1\":{\"196\":1,\"282\":1}}],[\"下面是一个使用css\",{\"1\":{\"156\":1}}],[\"下面是一个使用flex布局的简单示例\",{\"1\":{\"155\":1}}],[\"下面是一个简单的webpack配置文件示例\",{\"1\":{\"454\":1}}],[\"下面是一个简单的自定义中间件\",{\"1\":{\"366\":1}}],[\"下面是一个简单的媒体查询的示例\",{\"1\":{\"157\":1}}],[\"下面是一个简单的异步组件示例\",{\"1\":{\"95\":1}}],[\"下面是一个简单的例子\",{\"1\":{\"42\":1,\"96\":1,\"406\":1,\"417\":1}}],[\"下面是一个简单的示例\",{\"1\":{\"13\":1,\"37\":1,\"38\":1,\"192\":1,\"270\":1,\"323\":2,\"324\":1,\"413\":1,\"415\":1,\"462\":1,\"581\":1}}],[\"下面是一个示例来演示如何在webpack\",{\"1\":{\"467\":1}}],[\"下面是一个示例来说明如何在\",{\"1\":{\"368\":1}}],[\"下面是一个示例来说明原型和原型链的概念\",{\"1\":{\"267\":1}}],[\"下面是一个示例\",{\"1\":{\"36\":1,\"126\":1,\"197\":1,\"330\":1,\"391\":1}}],[\"下面是组件的生命周期和对应的方法\",{\"1\":{\"22\":1}}],[\"图形画布区域等的特殊句柄\",{\"1\":{\"538\":1}}],[\"图形画布区域等\",{\"1\":{\"538\":1}}],[\"图形\",{\"1\":{\"237\":1}}],[\"图形化与绘图\",{\"0\":{\"237\":1}}],[\"图像处理等各种常见的web开发任务\",{\"1\":{\"513\":1}}],[\"图像和其他资源文件的热替换\",{\"1\":{\"459\":1}}],[\"图像\",{\"0\":{\"221\":1},\"1\":{\"368\":2}}],[\"图像元素\",{\"1\":{\"209\":1}}],[\"图像等\",{\"1\":{\"146\":1}}],[\"图示\",{\"1\":{\"87\":1,\"89\":1}}],[\"图片和其他静态资源\",{\"0\":{\"473\":1}}],[\"图片和多媒体操作\",{\"0\":{\"300\":1}}],[\"图片\",{\"1\":{\"455\":1,\"463\":1}}],[\"图片等\",{\"1\":{\"448\":1,\"465\":1}}],[\"图片等资源放在一起开发和维护\",{\"1\":{\"89\":1}}],[\"图片加载完成后的处理\",{\"1\":{\"300\":1}}],[\"图片加载完成事件\",{\"1\":{\"300\":1}}],[\"图片描述\",{\"1\":{\"221\":1}}],[\"图片自适应\",{\"1\":{\"148\":1}}],[\"图片懒加载是一种延迟加载图片的技术\",{\"1\":{\"54\":1}}],[\"图片懒加载\",{\"1\":{\"54\":1}}],[\"图片优化是为了减小图片的文件大小\",{\"1\":{\"54\":1}}],[\"图片优化\",{\"0\":{\"54\":1},\"1\":{\"469\":1}}],[\"相乘\",{\"1\":{\"269\":1}}],[\"相等运算符\",{\"1\":{\"254\":2}}],[\"相当于\",{\"1\":{\"254\":4}}],[\"相当于十进制的10\",{\"1\":{\"169\":2}}],[\"相关组件会自动更新\",{\"1\":{\"428\":1}}],[\"相关联来构建一个动态的\",{\"1\":{\"374\":1}}],[\"相关技术和工具\",{\"0\":{\"343\":1}}],[\"相关主题\",{\"1\":{\"223\":1}}],[\"相关的回调函数会被添加到消息队列中\",{\"1\":{\"271\":1}}],[\"相关的视图会自动更新\",{\"1\":{\"102\":1}}],[\"相关的\",{\"1\":{\"87\":1}}],[\"相同结构的子问题的问题\",{\"1\":{\"269\":1}}],[\"相同\",{\"1\":{\"193\":1,\"311\":1}}],[\"相同索引位置的元素可能会发生变化\",{\"1\":{\"46\":1}}],[\"相比于传统的页面刷新方式\",{\"1\":{\"342\":1}}],[\"相比于传统的var关键字\",{\"1\":{\"165\":1}}],[\"相比于对象\",{\"1\":{\"177\":1}}],[\"相比之下\",{\"1\":{\"128\":4}}],[\"相对路径解析\",{\"1\":{\"460\":1}}],[\"相对路径\",{\"1\":{\"224\":1}}],[\"相对定位\",{\"1\":{\"147\":1}}],[\"相对于当前执行脚本的位置\",{\"1\":{\"599\":1}}],[\"相对于当前字体中数字0的宽度\",{\"1\":{\"145\":1}}],[\"相对于当前字体中小写字母x的高度\",{\"1\":{\"145\":1}}],[\"相对于最近的具有定位属性\",{\"1\":{\"147\":2}}],[\"相对于根元素\",{\"1\":{\"145\":1}}],[\"相对于元素的字体大小\",{\"1\":{\"145\":1}}],[\"相邻兄弟选择器使用加号\",{\"1\":{\"143\":1}}],[\"相邻兄弟选择器选择某个元素之后紧邻的兄弟元素\",{\"1\":{\"143\":1}}],[\"相邻兄弟选择器\",{\"1\":{\"143\":1}}],[\"相应的ref对象也会更新\",{\"1\":{\"102\":1}}],[\"之前是实验性的功能\",{\"1\":{\"537\":1}}],[\"之前版本\",{\"1\":{\"507\":1}}],[\"之前被调用\",{\"1\":{\"87\":1}}],[\"之间的子数组\",{\"1\":{\"257\":1}}],[\"之间的子字符串\",{\"1\":{\"256\":3}}],[\"之间切换\",{\"1\":{\"126\":1}}],[\"之后的版本引入了原生的枚举类型\",{\"1\":{\"537\":1}}],[\"之后调用\",{\"1\":{\"437\":1}}],[\"之后\",{\"1\":{\"114\":1,\"276\":1}}],[\"之外\",{\"1\":{\"70\":1}}],[\"效果\",{\"1\":{\"86\":1}}],[\"|\",{\"1\":{\"86\":3,\"146\":35,\"310\":2,\"317\":3,\"318\":1,\"319\":11,\"321\":6,\"329\":1}}],[\"||\",{\"1\":{\"52\":2,\"254\":2,\"281\":1}}],[\"过滤和转义\",{\"1\":{\"580\":1}}],[\"过滤器选项\",{\"1\":{\"603\":1}}],[\"过滤器不会修改数据\",{\"1\":{\"86\":1}}],[\"过滤器的使用方法及注意事项\",{\"1\":{\"86\":1}}],[\"过滤器分为全局过滤器和私有过滤器\",{\"1\":{\"86\":1}}],[\"过滤器\",{\"0\":{\"86\":1,\"603\":1},\"1\":{\"603\":2}}],[\"过多的缓存可能会导致内存压力过大\",{\"1\":{\"465\":1}}],[\"过多的栈内存使用可能导致栈溢出\",{\"1\":{\"273\":1}}],[\"过期后\",{\"1\":{\"357\":1}}],[\"过度滥用可变函数可能会导致代码可读性和维护性下降\",{\"1\":{\"569\":1}}],[\"过度地使用\",{\"1\":{\"310\":1}}],[\"过度使用事件总线可能会导致代码的维护困难和调试问题\",{\"1\":{\"38\":1}}],[\"过度使用上下文api可能会导致组件耦合性增加\",{\"1\":{\"37\":1}}],[\"过渡组件是一个独立的组件\",{\"1\":{\"395\":1}}],[\"过渡组件\",{\"1\":{\"395\":1}}],[\"过渡是一种在状态之间平滑过渡的效果\",{\"1\":{\"152\":1}}],[\"过渡\",{\"0\":{\"151\":1},\"1\":{\"152\":1}}],[\"过渡时间为1秒\",{\"1\":{\"150\":1,\"152\":1}}],[\"过渡钩子\",{\"0\":{\"124\":1}}],[\"过渡模式\",{\"0\":{\"123\":1}}],[\"过渡状态\",{\"0\":{\"122\":1}}],[\"过渡效果可以通过在路由组件之间进行淡入淡出\",{\"1\":{\"395\":1}}],[\"过渡效果将在1秒内平滑进行\",{\"1\":{\"151\":1}}],[\"过渡效果\",{\"0\":{\"121\":1}}],[\"过渡效果图示\",{\"1\":{\"120\":1}}],[\"过渡和动画在vue中的使用是基于css的\",{\"1\":{\"98\":1}}],[\"过渡和动画是用于为组件在状态改变时添加平滑的效果和动画效果的功能\",{\"1\":{\"98\":1}}],[\"过渡类名\",{\"0\":{\"125\":1},\"1\":{\"98\":1}}],[\"过渡与动画\",{\"0\":{\"98\":1}}],[\"会创建一个action对象并将其派发\",{\"1\":{\"401\":1}}],[\"会在需要渲染该路由时自动加载该组件\",{\"1\":{\"397\":1}}],[\"会在当前宏任务执行完成后立即执行\",{\"1\":{\"271\":1}}],[\"会渲染<notfound>组件\",{\"1\":{\"392\":1}}],[\"会渲染<userdetail>组件\",{\"1\":{\"392\":1}}],[\"会渲染<userslist>组件\",{\"1\":{\"392\":1}}],[\"会渲染<users>组件\",{\"1\":{\"392\":1}}],[\"会渲染<about>组件\",{\"1\":{\"392\":1}}],[\"会渲染<home>组件\",{\"1\":{\"392\":1}}],[\"会为每个会话生成一个唯一的session\",{\"1\":{\"357\":1}}],[\"会自动替换成\",{\"1\":{\"460\":1}}],[\"会自动跳转到catch块\",{\"1\":{\"588\":1}}],[\"会自动跳转到\",{\"1\":{\"418\":1}}],[\"会自动匹配到相应的子路由\",{\"1\":{\"396\":1}}],[\"会自动重定向到\",{\"1\":{\"389\":1}}],[\"会自动定位并发送相应的文件内容\",{\"1\":{\"368\":1}}],[\"会自动查找与导入的模块名称匹配的声明文件\",{\"1\":{\"328\":1}}],[\"会自动根据模块解析策略添加适当的文件扩展名\",{\"1\":{\"328\":1}}],[\"会自动将这些样式应用到对应的元素上\",{\"1\":{\"85\":1}}],[\"会根据路由规则进行匹配\",{\"1\":{\"394\":1}}],[\"会根据请求的路由决定需要使用哪个视图来生成响应\",{\"1\":{\"367\":1}}],[\"会根据响应的内容进行相应的解析和渲染\",{\"1\":{\"360\":1}}],[\"会根据上下文自动推导变量的类型\",{\"1\":{\"315\":1}}],[\"会根据浏览器视口的大小而自动调整\",{\"1\":{\"147\":1}}],[\"会导致内存泄漏\",{\"1\":{\"276\":1}}],[\"会按顺序将函数调用添加到执行栈中\",{\"1\":{\"271\":1}}],[\"会沿着原型链向上查找\",{\"1\":{\"267\":1}}],[\"会输出\",{\"1\":{\"263\":1}}],[\"会先执行该元素的事件处理函数\",{\"1\":{\"263\":1}}],[\"会报错\",{\"1\":{\"249\":1}}],[\"会显示在浏览器的标题栏上\",{\"1\":{\"207\":1}}],[\"会将自己的ssl证书\",{\"1\":{\"359\":1}}],[\"会将之前从服务器获取的cookie信息放在请求头中传递给服务器\",{\"1\":{\"355\":1}}],[\"会将正则表达式解析为unicode模式\",{\"1\":{\"168\":1}}],[\"会将模板编译成高度优化的\",{\"1\":{\"68\":1}}],[\"会得到以下的css输出\",{\"1\":{\"161\":3}}],[\"会包括内容区域\",{\"1\":{\"146\":1}}],[\"会生成一棵描述如何将旧dom树更新为新dom树的补丁树\",{\"1\":{\"128\":1}}],[\"会通过解析组件的模板或jsx语法\",{\"1\":{\"128\":1}}],[\"会重新计算\",{\"1\":{\"104\":1}}],[\"会触发changedata方法\",{\"1\":{\"93\":1}}],[\"否则编译通不过\",{\"1\":{\"528\":1}}],[\"否则会导致无限递归调用\",{\"1\":{\"269\":1}}],[\"否则\",{\"1\":{\"269\":1}}],[\"否则执行另一个代码块\",{\"1\":{\"255\":1}}],[\"否则返回值2\",{\"1\":{\"254\":1}}],[\"否则返回false\",{\"1\":{\"191\":1}}],[\"否则返回\",{\"1\":{\"170\":1}}],[\"否则返回参数本身\",{\"1\":{\"102\":1}}],[\"否则不添加任何类名\",{\"1\":{\"82\":2}}],[\"否则计算函数结果并保存到缓存中\",{\"1\":{\"52\":1}}],[\"第二个元素是需要调用的方法名\",{\"1\":{\"539\":1}}],[\"第二个<route>的路径是\",{\"1\":{\"392\":1}}],[\"第二个参数是字段的值\",{\"1\":{\"282\":1}}],[\"第二个异步任务的延迟时间也到达\",{\"1\":{\"270\":1}}],[\"第二种写法\",{\"1\":{\"82\":1}}],[\"第三个<route>的路径是\",{\"1\":{\"392\":1}}],[\"第三个参数newtarget可选\",{\"1\":{\"191\":1}}],[\"第三方模块\",{\"1\":{\"509\":1}}],[\"第三方库分离\",{\"1\":{\"458\":1}}],[\"第三方身份提供者\",{\"1\":{\"370\":1}}],[\"第三方动画库\",{\"1\":{\"98\":1}}],[\"第一个<route>的路径是\",{\"1\":{\"392\":1}}],[\"第一个参数是字段的名称\",{\"1\":{\"282\":1}}],[\"第一个异步任务的延迟时间到达\",{\"1\":{\"270\":1}}],[\"第一个子元素和最后一个子元素\",{\"1\":{\"265\":1}}],[\"第一个vue3应用\",{\"0\":{\"100\":1}}],[\"第一个vue应用\",{\"0\":{\"64\":1}}],[\"第一次的fin包是由发起关闭的一方发送的\",{\"1\":{\"361\":1}}],[\"第一次出现在索引\",{\"1\":{\"257\":1}}],[\"第一次出现的索引\",{\"1\":{\"256\":1}}],[\"第一次计算\",{\"1\":{\"52\":4}}],[\"第一种写法\",{\"1\":{\"82\":1}}],[\"作者\",{\"1\":{\"208\":1,\"464\":1}}],[\"作用域提升等\",{\"1\":{\"453\":1}}],[\"作用域规则是指在程序中定义变量时\",{\"1\":{\"311\":1}}],[\"作用域规则\",{\"1\":{\"311\":1}}],[\"作用域链决定了在哪个作用域范围内进行变量查找\",{\"1\":{\"261\":1}}],[\"作用域链的工作原理如下\",{\"1\":{\"261\":1}}],[\"作用域链的构成如下\",{\"1\":{\"261\":1}}],[\"作用域链是由多个作用域对象组成的链式结构\",{\"1\":{\"261\":1}}],[\"作用域具有层级结构\",{\"1\":{\"261\":1}}],[\"作用域及作用域链\",{\"0\":{\"261\":1}}],[\"作用域\",{\"1\":{\"203\":1,\"261\":1}}],[\"作用域插槽允许父组件在插槽中使用子组件的数据\",{\"1\":{\"96\":1}}],[\"作用域插槽\",{\"1\":{\"70\":1,\"96\":1}}],[\"作用是用于对文本进行格式化的作用\",{\"1\":{\"86\":1}}],[\"作为参数传递给其他函数或方法\",{\"1\":{\"590\":1}}],[\"作为函数声明的一部分\",{\"1\":{\"526\":1}}],[\"作为函数参数\",{\"1\":{\"313\":1}}],[\"作为一种更简洁和面向对象的语法糖\",{\"1\":{\"183\":1}}],[\"作为属性名传递给\",{\"1\":{\"85\":1}}],[\"作为\",{\"1\":{\"82\":4,\"85\":1}}],[\"该类具有以下属性和方法\",{\"1\":{\"583\":1}}],[\"该类将包含你想要共享的属性和方法\",{\"1\":{\"330\":1}}],[\"该变量仍然是函数的局部变量\",{\"1\":{\"524\":1}}],[\"该变量将会保留着函数前一次被调用时的值\",{\"1\":{\"524\":1}}],[\"该变量将一直存在于内存中\",{\"1\":{\"275\":1}}],[\"该常量则大小写不敏感\",{\"1\":{\"519\":1}}],[\"该模块管理与该页面或组件相关的状态和操作\",{\"1\":{\"435\":1}}],[\"该应用程序具有添加待办事项\",{\"1\":{\"407\":1}}],[\"该钩子返回一个函数\",{\"1\":{\"398\":1}}],[\"该组件会自动为你添加相应的点击事件\",{\"1\":{\"384\":1}}],[\"该组件会被缓存起来\",{\"1\":{\"126\":1}}],[\"该响应会发送给客户端进行展示\",{\"1\":{\"367\":1}}],[\"该目录将被用作版本控制\",{\"1\":{\"334\":1}}],[\"该参数将被用作新对象的属性和值\",{\"1\":{\"310\":1}}],[\"该函数用于将gd图像转换为wbmp格式\",{\"1\":{\"604\":1}}],[\"该函数有三个参数\",{\"1\":{\"519\":1}}],[\"该函数将在异步操作完成后被调用\",{\"1\":{\"511\":1}}],[\"该函数会在每次mutation被提交后执行\",{\"1\":{\"437\":1}}],[\"该函数接收一个路径参数和一个可选的导航选项对象\",{\"1\":{\"398\":1}}],[\"该函数接收一个路径参数并根据路由配置返回匹配的组件\",{\"1\":{\"398\":1}}],[\"该函数仅处理对象和数组的深拷贝\",{\"1\":{\"281\":1}}],[\"该函数就会被调用\",{\"1\":{\"272\":1}}],[\"该深拷贝函数会先检查传入的值的类型\",{\"1\":{\"281\":1}}],[\"该新函数将传递的数值\",{\"1\":{\"258\":1}}],[\"该浏览器不支持地理定位\",{\"1\":{\"229\":1}}],[\"该值将作为\",{\"1\":{\"196\":1}}],[\"该方法接受两个参数\",{\"1\":{\"282\":1}}],[\"该方法可以添加多个事件监听器\",{\"1\":{\"263\":1}}],[\"该方法可以在类的实例上使用\",{\"1\":{\"204\":1}}],[\"该方法返回一个包含value和done属性的对象\",{\"1\":{\"184\":1}}],[\"该方法是最有用的\",{\"1\":{\"76\":1}}],[\"该标准从一开始就是针对\",{\"1\":{\"164\":1}}],[\"该对象包含了匹配的路径\",{\"1\":{\"398\":1}}],[\"该对象包含当前路径\",{\"1\":{\"398\":1}}],[\"该对象包含一个指向响应式数据的单一属性\",{\"1\":{\"102\":1}}],[\"该对象携带有关事件的信息\",{\"1\":{\"263\":1}}],[\"该对象的每个属性都是\",{\"1\":{\"102\":1}}],[\"该对象的所有属性也都是对象\",{\"1\":{\"102\":2}}],[\"该对象的所有属性也都是响应式代理\",{\"1\":{\"102\":1}}],[\"该对象的current属性可以被赋值为任意值\",{\"1\":{\"41\":1}}],[\"该对象可以直接作为vue实例的数据对象进行响应式处理\",{\"1\":{\"102\":1}}],[\"该文件包含组件的模板\",{\"1\":{\"92\":1}}],[\"且在结束标记末尾要有分号\",{\"1\":{\"528\":1}}],[\"且在动画结束后保持动画效果\",{\"1\":{\"122\":4}}],[\"且响应已就绪\",{\"1\":{\"341\":1}}],[\"且具有相同的成员列表\",{\"1\":{\"329\":1}}],[\"且不能使用javascript的关键字或保留字作为变量名\",{\"1\":{\"249\":1}}],[\"且不能再次赋值\",{\"1\":{\"165\":1}}],[\"且\",{\"1\":{\"164\":1}}],[\"且是响应式的\",{\"1\":{\"102\":1}}],[\"且当需要在数据变化时执行异步或开销较大的操作时\",{\"1\":{\"76\":1}}],[\"且可以根据需求方便地添加\",{\"1\":{\"56\":1}}],[\"侦听属性是可异步的\",{\"1\":{\"76\":1}}],[\"侦听器是数据变化时执行的函数\",{\"1\":{\"111\":1}}],[\"侦听器还支持可选的第三个参数\",{\"1\":{\"110\":1}}],[\"侦听器的实现方式与之前的版本有些不同\",{\"1\":{\"110\":1}}],[\"侦听器适用于异步操作\",{\"1\":{\"78\":1}}],[\"侦听器可以用来监听数据的变化\",{\"1\":{\"76\":1}}],[\"侦听器\",{\"0\":{\"75\":1,\"78\":1,\"110\":1},\"1\":{\"78\":1,\"110\":1}}],[\"计算一个数字的阶乘\",{\"1\":{\"269\":1}}],[\"计算属性名\",{\"1\":{\"171\":1}}],[\"计算属性与方法最大的区别在于计算属性是基于它们的依赖进行缓存的\",{\"1\":{\"109\":1}}],[\"计算属性与方法的区别\",{\"0\":{\"109\":1}}],[\"计算属性与侦听器的区别\",{\"0\":{\"111\":1}}],[\"计算属性与侦听器\",{\"0\":{\"71\":1}}],[\"计算属性在很多场景下非常有用\",{\"1\":{\"108\":1}}],[\"计算属性应用场景\",{\"0\":{\"108\":1}}],[\"计算属性会重新计算\",{\"1\":{\"107\":1}}],[\"计算属性依赖\",{\"0\":{\"107\":1}}],[\"计算属性具有缓存机制\",{\"1\":{\"106\":1,\"443\":1}}],[\"计算属性缓存\",{\"0\":{\"106\":1}}],[\"计算属性适用于计算值\",{\"1\":{\"78\":1}}],[\"计算属性都是用来监听数据的改变\",{\"1\":{\"78\":1}}],[\"计算属性的值依赖于其他数据的值\",{\"1\":{\"107\":1}}],[\"计算属性的值就会被缓存起来\",{\"1\":{\"106\":1}}],[\"计算属性的\",{\"1\":{\"74\":1}}],[\"计算属性默认只有\",{\"1\":{\"73\":1}}],[\"计算属性是基于其他数据进行计算的\",{\"1\":{\"108\":1}}],[\"计算属性是基于它们的依赖进行缓存的\",{\"1\":{\"73\":1,\"78\":1,\"111\":1}}],[\"计算属性是惰性的\",{\"1\":{\"108\":1}}],[\"计算属性是vue实例的一个属性\",{\"1\":{\"104\":1}}],[\"计算属性是可缓存的\",{\"1\":{\"73\":1}}],[\"计算属性\",{\"0\":{\"72\":1,\"78\":1,\"103\":1}}],[\"计算出当前可见的数据范围\",{\"1\":{\"53\":1}}],[\"计算出滚动容器的实际高度\",{\"1\":{\"53\":1}}],[\"全等运算符\",{\"1\":{\"254\":2}}],[\"全球化\",{\"0\":{\"235\":1}}],[\"全体元素选择器使用星号\",{\"1\":{\"143\":1}}],[\"全体元素选择器选择所有的html元素\",{\"1\":{\"143\":1}}],[\"全体元素选择器\",{\"1\":{\"143\":1}}],[\"全局后置守卫会在每次路由切换之后被调用\",{\"1\":{\"421\":1}}],[\"全局后置守卫\",{\"1\":{\"421\":1}}],[\"全局前置守卫会在路由切换之前被调用\",{\"1\":{\"421\":1}}],[\"全局声明合并\",{\"1\":{\"329\":1}}],[\"全局对象等\",{\"1\":{\"325\":1}}],[\"全局对象是window对象\",{\"1\":{\"262\":1}}],[\"全局函数\",{\"1\":{\"325\":1}}],[\"全局命名空间或模块的类型定义的方式\",{\"1\":{\"325\":1}}],[\"全局作用域和局部作用域\",{\"0\":{\"525\":1}}],[\"全局作用域通常是在文件的顶层定义的变量\",{\"1\":{\"311\":1}}],[\"全局作用域是整个程序范围内可见的作用域\",{\"1\":{\"311\":1}}],[\"全局作用域是指在函数外部声明的变量\",{\"1\":{\"261\":1}}],[\"全局作用域以及嵌套的内部作用域中的变量\",{\"1\":{\"280\":1}}],[\"全局作用域\",{\"1\":{\"261\":1,\"262\":1,\"311\":2,\"525\":1}}],[\"全局变量可以被脚本中的任何部分访问\",{\"1\":{\"525\":1}}],[\"全局变量\",{\"1\":{\"249\":1,\"261\":1,\"275\":1,\"329\":1,\"525\":1}}],[\"全局symbol注册表\",{\"1\":{\"174\":1}}],[\"全局api的调整等\",{\"1\":{\"99\":1}}],[\"全局注册的组件会通过\",{\"1\":{\"116\":1}}],[\"全局注册的组件可以在任何模板中使用\",{\"1\":{\"116\":1}}],[\"全局注册的组件可以在整个应用的任何地方使用\",{\"1\":{\"91\":1}}],[\"全局注册\",{\"1\":{\"116\":1}}],[\"全局注册组件\",{\"1\":{\"91\":1}}],[\"全局组件可以在任何地方使用\",{\"1\":{\"90\":1}}],[\"全局组件和局部组件\",{\"1\":{\"90\":1}}],[\"全局安装\",{\"1\":{\"88\":1}}],[\"全局过滤器可以在任何地方使用\",{\"1\":{\"86\":1}}],[\"全局指令可以在任何地方使用\",{\"1\":{\"70\":1}}],[\"全栈\",{\"1\":{\"61\":1}}],[\"输出数据\",{\"1\":{\"600\":1}}],[\"输出数组的长度\",{\"1\":{\"257\":1}}],[\"输出变量的类型和值\",{\"1\":{\"531\":1}}],[\"输出的速度比\",{\"1\":{\"515\":1}}],[\"输出方式\",{\"0\":{\"515\":1}}],[\"输出包括构建后的javascript文件\",{\"1\":{\"486\":1}}],[\"输出文件名\",{\"1\":{\"475\":1}}],[\"输出文件名等\",{\"1\":{\"463\":1}}],[\"输出目录路径\",{\"1\":{\"475\":1}}],[\"输出处理后的结果\",{\"1\":{\"463\":1}}],[\"输出指定webpack构建结果的输出目录和文件名\",{\"1\":{\"453\":1}}],[\"输出参数\",{\"1\":{\"324\":1}}],[\"输出字符长度\",{\"1\":{\"320\":1}}],[\"输出字符串的长度\",{\"1\":{\"256\":2}}],[\"输出结果\",{\"1\":{\"569\":1,\"579\":3}}],[\"输出结果将是\",{\"1\":{\"271\":1}}],[\"输出结果为\",{\"1\":{\"270\":2}}],[\"输出其值为\",{\"1\":{\"261\":2}}],[\"输出被删除的元素组成的数组\",{\"1\":{\"257\":1}}],[\"输出被删除的元素\",{\"1\":{\"257\":2}}],[\"输出第三个元素\",{\"1\":{\"257\":1}}],[\"输出第一个元素\",{\"1\":{\"257\":1}}],[\"输出地域设置的小写字符串\",{\"1\":{\"256\":1}}],[\"输出地域设置的大写字符串\",{\"1\":{\"256\":1}}],[\"输出全小写字符串\",{\"1\":{\"256\":1}}],[\"输出全大写字符串\",{\"1\":{\"256\":1}}],[\"输出错误信息\",{\"1\":{\"193\":1}}],[\"输出\",{\"0\":{\"486\":1},\"1\":{\"70\":2,\"165\":2,\"166\":19,\"167\":18,\"168\":21,\"169\":30,\"170\":21,\"171\":13,\"172\":13,\"173\":6,\"174\":8,\"176\":4,\"177\":4,\"178\":2,\"179\":2,\"180\":2,\"181\":2,\"182\":2,\"183\":14,\"184\":8,\"185\":4,\"186\":8,\"187\":15,\"188\":6,\"189\":24,\"191\":17,\"192\":1,\"193\":3,\"200\":2,\"201\":2,\"202\":6,\"204\":4,\"251\":2,\"252\":4,\"253\":13,\"254\":20,\"257\":11,\"258\":13,\"259\":7,\"261\":3,\"262\":10,\"263\":2,\"267\":11,\"268\":1,\"269\":1,\"278\":6,\"310\":14,\"312\":9,\"313\":10,\"314\":10,\"324\":1,\"330\":2,\"386\":2,\"453\":1,\"454\":1,\"519\":3,\"520\":1,\"524\":1,\"543\":1,\"544\":1,\"545\":1,\"546\":1,\"547\":2,\"548\":1,\"549\":1,\"551\":5,\"552\":1,\"564\":2,\"567\":1,\"568\":1,\"575\":2,\"576\":2,\"577\":2,\"583\":4,\"590\":2}}],[\"输入验证\",{\"1\":{\"602\":1}}],[\"输入以下命令启动开发服务器\",{\"1\":{\"88\":1}}],[\"输入以下命令\",{\"1\":{\"88\":1}}],[\"输入框的值与name数据进行双向绑定\",{\"1\":{\"442\":1}}],[\"输入框的输入内容可能会被重新排序的元素\",{\"1\":{\"70\":1}}],[\"输入框内容变化事件\",{\"1\":{\"28\":1}}],[\"输入的文本会被隐藏\",{\"1\":{\"30\":1}}],[\"输入属性props\",{\"1\":{\"11\":1}}],[\"随后\",{\"1\":{\"369\":1}}],[\"随后的重新渲染\",{\"1\":{\"70\":1}}],[\"随着硬件和加密算法的改进\",{\"1\":{\"359\":1}}],[\"随着技术的发展\",{\"1\":{\"340\":1}}],[\"随着json的流行\",{\"1\":{\"340\":1}}],[\"随着函数\",{\"1\":{\"273\":1}}],[\"随着时间的推移\",{\"1\":{\"270\":1}}],[\"随着web标准的推动\",{\"1\":{\"266\":1}}],[\"随着\",{\"1\":{\"197\":1}}],[\"随着应用规模的增长\",{\"1\":{\"9\":1}}],[\"4中被废弃\",{\"1\":{\"604\":1}}],[\"4中使用动态导入\",{\"1\":{\"467\":1}}],[\"4e3\",{\"1\":{\"532\":1}}],[\"4的配置已经默认开启了这个功能\",{\"1\":{\"467\":1}}],[\"4xx\",{\"1\":{\"354\":1}}],[\"404\",{\"1\":{\"314\":1,\"352\":1,\"354\":1}}],[\"401\",{\"1\":{\"314\":1,\"354\":1}}],[\"400\",{\"1\":{\"314\":1,\"354\":1}}],[\"42\",{\"1\":{\"180\":2,\"181\":2,\"182\":2,\"253\":1,\"256\":1,\"272\":1,\"320\":3,\"540\":4}}],[\"4px\",{\"1\":{\"161\":6}}],[\"4<\",{\"1\":{\"156\":1}}],[\"45\",{\"1\":{\"169\":1}}],[\"45deg\",{\"1\":{\"150\":5}}],[\"456\",{\"1\":{\"110\":4}}],[\"4\",{\"0\":{\"474\":1,\"488\":1,\"502\":1},\"1\":{\"70\":2,\"91\":1,\"168\":1,\"170\":14,\"171\":2,\"172\":3,\"173\":2,\"198\":1,\"251\":1,\"254\":1,\"257\":13,\"273\":1,\"278\":2,\"310\":6,\"313\":2,\"314\":6,\"315\":1,\"316\":1,\"323\":2,\"341\":1,\"345\":1,\"346\":1,\"347\":1,\"348\":1,\"401\":1,\"564\":1,\"568\":1,\"571\":3,\"573\":2,\"575\":1,\"576\":1,\"577\":2,\"578\":6}}],[\"没有结果\",{\"1\":{\"600\":1}}],[\"没有实现代码\",{\"1\":{\"591\":1}}],[\"没有具体实现\",{\"1\":{\"591\":1}}],[\"没有返回值\",{\"1\":{\"515\":1}}],[\"没有进行进一步组合或封装的类型\",{\"1\":{\"310\":1}}],[\"没有显式地将其删除或赋值为\",{\"1\":{\"275\":1}}],[\"没有为每个元素提供key会导致在更新列表时出现意外的行为\",{\"1\":{\"70\":1}}],[\"没有额外的实例化和继承开销\",{\"1\":{\"18\":1}}],[\"解析url\",{\"1\":{\"360\":1}}],[\"解析器解析\",{\"1\":{\"68\":1}}],[\"解释内嵌的变量和转义符号\",{\"1\":{\"528\":1}}],[\"解释示例代码的执行过程\",{\"1\":{\"271\":1}}],[\"解释执行过程如下\",{\"1\":{\"270\":1}}],[\"解决冲突\",{\"1\":{\"337\":1}}],[\"解决后\",{\"1\":{\"195\":1}}],[\"解决状态保存问题\",{\"1\":{\"70\":1}}],[\"解构赋值还可以与函数参数\",{\"1\":{\"166\":1}}],[\"解构赋值是一种通过模式匹配来提取数组或对象中的值\",{\"1\":{\"166\":1}}],[\"解构赋值\",{\"0\":{\"166\":1}}],[\"解构会失去响应式\",{\"1\":{\"102\":1}}],[\"修饰符\",{\"1\":{\"518\":1}}],[\"修饰符可以串联\",{\"1\":{\"70\":1}}],[\"修复bug等\",{\"1\":{\"335\":1}}],[\"修改对象的属性\",{\"1\":{\"579\":1}}],[\"修改state中的状态属性\",{\"1\":{\"429\":1}}],[\"修改传入的参数等\",{\"1\":{\"401\":1}}],[\"修改href属性为\",{\"1\":{\"288\":1}}],[\"修改它们互不影响\",{\"1\":{\"281\":1}}],[\"修改元素\",{\"1\":{\"310\":1}}],[\"修改元素或获取数组的长度\",{\"1\":{\"310\":1}}],[\"修改元素内容\",{\"1\":{\"288\":1}}],[\"修改元素内容和属性\",{\"1\":{\"265\":1}}],[\"修改元素样式\",{\"1\":{\"265\":1}}],[\"修改数组元素\",{\"0\":{\"576\":1},\"1\":{\"257\":1}}],[\"修改数据库名称\",{\"1\":{\"133\":1}}],[\"修改数据属性的值\",{\"1\":{\"94\":1}}],[\"修改或定制类\",{\"1\":{\"204\":1}}],[\"修改或删除\",{\"1\":{\"70\":1}}],[\"修改列的数据类型\",{\"1\":{\"134\":1}}],[\"修改表结构\",{\"1\":{\"134\":1}}],[\"修改等操作\",{\"1\":{\"129\":1}}],[\"修改响应式对象的值\",{\"1\":{\"102\":1}}],[\"修改状态的方法和提交mutation\",{\"0\":{\"431\":1}}],[\"修改状态数据的方法\",{\"1\":{\"427\":1}}],[\"修改状态\",{\"1\":{\"93\":1,\"433\":1}}],[\"唯一标识\",{\"1\":{\"70\":1}}],[\"唯一的key值\",{\"1\":{\"46\":1}}],[\"学习\",{\"1\":{\"70\":2,\"515\":2}}],[\"学习曲线较为平缓\",{\"1\":{\"10\":1}}],[\"学习曲线\",{\"1\":{\"10\":2,\"128\":1}}],[\"学习曲线陡峭\",{\"1\":{\"9\":1}}],[\"较好\",{\"1\":{\"70\":2}}],[\"直至任务队列为空\",{\"1\":{\"270\":1}}],[\"直到下一次迭代被触发\",{\"1\":{\"582\":1}}],[\"直到遇到异步操作\",{\"1\":{\"270\":1}}],[\"直到找到这个属性或到达原型链的末尾\",{\"1\":{\"267\":1}}],[\"直到找到全局作用域\",{\"1\":{\"261\":1}}],[\"直到找到匹配的标识符或达到全局作用域\",{\"1\":{\"261\":2}}],[\"直到传递给它的\",{\"1\":{\"195\":1}}],[\"直到这个\",{\"1\":{\"195\":1}}],[\"直到条件第一次变为真时\",{\"1\":{\"70\":1}}],[\"直接调用mutation来修改状态\",{\"1\":{\"433\":1}}],[\"直接返回该值\",{\"1\":{\"281\":1}}],[\"直接返回缓存结果\",{\"1\":{\"52\":3}}],[\"直接的问题\",{\"1\":{\"278\":1}}],[\"直接编写css样式\",{\"1\":{\"142\":1}}],[\"直接操作真实dom可能更为简单和高效\",{\"1\":{\"128\":1}}],[\"直接操作真实dom可能更为高效\",{\"1\":{\"128\":1}}],[\"直接对真实dom进行操作更为直接和易于理解\",{\"1\":{\"128\":1}}],[\"直接对真实dom进行操作需要立即执行\",{\"1\":{\"128\":1}}],[\"直接对真实dom进行操作可能会导致频繁的重绘和回流\",{\"1\":{\"128\":1}}],[\"`title\",{\"1\":{\"422\":1}}],[\"`this`\",{\"1\":{\"74\":1}}],[\"`request\",{\"1\":{\"366\":1}}],[\"`received\",{\"1\":{\"272\":3}}],[\"`user\",{\"1\":{\"365\":3}}],[\"`express\",{\"1\":{\"364\":1}}],[\"`event\",{\"1\":{\"70\":1}}],[\"`you\",{\"1\":{\"329\":2}}],[\"`student\",{\"1\":{\"312\":1}}],[\"`setting\",{\"1\":{\"188\":1}}],[\"`my\",{\"1\":{\"312\":1}}],[\"`message`\",{\"1\":{\"77\":1}}],[\"`data\",{\"1\":{\"271\":1}}],[\"`defining\",{\"1\":{\"189\":1}}],[\"`deleting\",{\"1\":{\"189\":1}}],[\"`parameter\",{\"1\":{\"204\":1}}],[\"`object\",{\"1\":{\"189\":1}}],[\"`onscroll`\",{\"1\":{\"70\":1}}],[\"`calling\",{\"1\":{\"189\":1}}],[\"`checking\",{\"1\":{\"189\":1}}],[\"`getting\",{\"1\":{\"188\":1,\"189\":2}}],[\"`$\",{\"1\":{\"183\":2,\"312\":2,\"313\":1}}],[\"`in`\",{\"1\":{\"189\":1}}],[\"`i\",{\"1\":{\"183\":1}}],[\"`这是一段\",{\"1\":{\"167\":1}}],[\"`hello\",{\"1\":{\"167\":1,\"171\":1,\"172\":2,\"183\":2,\"187\":2,\"188\":1,\"189\":2,\"191\":2,\"204\":2,\"256\":2,\"267\":6,\"310\":1,\"312\":1,\"315\":1,\"329\":2}}],[\"`handler`\",{\"1\":{\"77\":1}}],[\"```\",{\"1\":{\"91\":1}}],[\"`<button\",{\"1\":{\"91\":1}}],[\"`\",{\"1\":{\"70\":1,\"97\":2,\"167\":2,\"171\":1,\"172\":2,\"183\":5,\"187\":2,\"188\":3,\"189\":9,\"191\":2,\"204\":3,\"256\":3,\"267\":6,\"271\":1,\"272\":3,\"310\":1,\"312\":5,\"313\":1,\"315\":1,\"329\":4,\"364\":1,\"365\":3,\"366\":1,\"422\":1}}],[\"能够提高开发效率和代码质量\",{\"1\":{\"466\":1}}],[\"能够提升移动端的性能\",{\"1\":{\"70\":1}}],[\"能够与\",{\"1\":{\"325\":1}}],[\"能够与后端技术无缝集成\",{\"1\":{\"241\":1}}],[\"能够理解和检查这些库的类型\",{\"1\":{\"325\":1}}],[\"能够减少副作用和提高代码的健壮性\",{\"1\":{\"278\":1}}],[\"能够更灵活地控制元素的背景效果\",{\"1\":{\"158\":1}}],[\"能够在保持较高视觉质量的同时减小文件大小\",{\"1\":{\"54\":1}}],[\"完成待办事项和过滤待办事项的功能\",{\"1\":{\"407\":1}}],[\"完成连接的建立\",{\"1\":{\"361\":1}}],[\"完成\",{\"1\":{\"70\":1,\"193\":3,\"195\":2,\"196\":1,\"439\":1}}],[\"完整的示例代码如下\",{\"1\":{\"16\":1}}],[\"指的是在函数内部创建并返回另一个函数\",{\"1\":{\"268\":1}}],[\"指数运算符\",{\"1\":{\"169\":1}}],[\"指向它的原型对象\",{\"1\":{\"267\":1}}],[\"指向的元素\",{\"1\":{\"159\":1}}],[\"指向\",{\"1\":{\"74\":1}}],[\"指令更新元素的\",{\"1\":{\"70\":1}}],[\"指令只渲染元素和组件一次\",{\"1\":{\"70\":1}}],[\"指令保持在元素上直到关联实例结束编译\",{\"1\":{\"70\":1}}],[\"指令跳过元素和它的子元素的编译过程\",{\"1\":{\"70\":1}}],[\"指令基于一个数组\",{\"1\":{\"70\":1}}],[\"指令根据表达式的真假值\",{\"1\":{\"70\":1}}],[\"指令在表单控件元素上创建双向数据绑定\",{\"1\":{\"70\":1}}],[\"指令用于输出\",{\"1\":{\"70\":1}}],[\"指令用于条件性地渲染一块内容\",{\"1\":{\"70\":1}}],[\"指令用于监听\",{\"1\":{\"70\":1}}],[\"指令用于响应式地更新\",{\"1\":{\"70\":1}}],[\"指令\",{\"0\":{\"70\":1},\"1\":{\"70\":1}}],[\"指定一个上传目录\",{\"1\":{\"581\":1}}],[\"指定文件上传目录\",{\"1\":{\"581\":1}}],[\"指定文档的作者\",{\"1\":{\"208\":1}}],[\"指定文档使用\",{\"1\":{\"208\":1}}],[\"指定提取的css文件名\",{\"1\":{\"476\":1}}],[\"指定提供静态文件的目录\",{\"1\":{\"461\":1}}],[\"指定html模板文件路径\",{\"1\":{\"476\":1}}],[\"指定服务器监听的端口号\",{\"1\":{\"461\":1}}],[\"指定了模块的解析规则\",{\"1\":{\"460\":1}}],[\"指定了该回调函数所依赖的状态\",{\"1\":{\"41\":1}}],[\"指定构建结果的输出目录和文件名\",{\"1\":{\"454\":1}}],[\"指定入口文件\",{\"1\":{\"454\":1}}],[\"指定目标页面的哈希值\",{\"1\":{\"416\":1}}],[\"指定目标页面的查询参数\",{\"1\":{\"416\":1}}],[\"指定目标页面的路由参数\",{\"1\":{\"416\":1}}],[\"指定目标页面的路径\",{\"1\":{\"416\":1}}],[\"指定在进入或离开路由时触发的回调函数\",{\"1\":{\"387\":1}}],[\"指定静态文件和资源的目录\",{\"1\":{\"368\":1}}],[\"指定缓存的过期时间\",{\"1\":{\"356\":1}}],[\"指定缓存的最大有效期\",{\"1\":{\"356\":1}}],[\"指定请求与响应的格式等\",{\"1\":{\"355\":1}}],[\"指定请求或响应中的数据长度\",{\"1\":{\"352\":1,\"355\":1}}],[\"指定请求或响应中的数据类型\",{\"1\":{\"352\":1,\"355\":1}}],[\"指定当前请求的来源url\",{\"1\":{\"355\":1}}],[\"指定客户端可接受的内容编码方式\",{\"1\":{\"355\":1}}],[\"指定客户端可接受的响应类型\",{\"1\":{\"355\":1}}],[\"指定模块的名称\",{\"1\":{\"331\":1}}],[\"指定依赖的路径\",{\"1\":{\"331\":1}}],[\"指定部分枚举成员的值\",{\"1\":{\"314\":1}}],[\"指定元素的焦点可以通过键盘导航到达\",{\"1\":{\"246\":1}}],[\"指定字符编码\",{\"1\":{\"235\":1}}],[\"指定字段为必填项\",{\"1\":{\"217\":1}}],[\"指定视频的文件路径\",{\"1\":{\"223\":1}}],[\"指定音频的文件路径\",{\"1\":{\"222\":1}}],[\"指定输入字段的类型\",{\"1\":{\"216\":1}}],[\"指定链接的目标\",{\"1\":{\"211\":1,\"224\":1}}],[\"指定图像的文件路径\",{\"1\":{\"221\":1}}],[\"指定图像无法显示时的替代文本\",{\"1\":{\"211\":1}}],[\"指定图像\",{\"1\":{\"211\":1}}],[\"指定网页的描述信息\",{\"1\":{\"208\":1}}],[\"指定flex容器中子项的换行方式\",{\"1\":{\"155\":1}}],[\"指定渐变的形状\",{\"1\":{\"153\":1}}],[\"指定渐变的方向\",{\"1\":{\"153\":1}}],[\"指定过渡效果开始前的延迟时间\",{\"1\":{\"151\":1}}],[\"指定过渡的速度曲线\",{\"1\":{\"151\":1}}],[\"指定过渡的持续时间\",{\"1\":{\"151\":1}}],[\"指定需要过渡的属性\",{\"1\":{\"151\":1}}],[\"指定背景图片为渐变\",{\"1\":{\"144\":1}}],[\"指定动画在非激活状态时\",{\"1\":{\"144\":1}}],[\"指定动画的时间函数\",{\"1\":{\"144\":1}}],[\"指定动画的重复次数\",{\"1\":{\"144\":1}}],[\"指定动画的持续时间\",{\"1\":{\"144\":1}}],[\"指定动画开始之前的延迟时间\",{\"1\":{\"144\":1}}],[\"指定表的名称\",{\"1\":{\"134\":1}}],[\"指定要接受的字符集等\",{\"1\":{\"603\":1}}],[\"指定要持久化的模块\",{\"1\":{\"439\":1}}],[\"指定要应用的关键帧名称\",{\"1\":{\"144\":1}}],[\"指定要检索的列\",{\"1\":{\"134\":1}}],[\"指定要删除的行的条件\",{\"1\":{\"134\":1}}],[\"指定要更新的列和新的值\",{\"1\":{\"134\":1}}],[\"指定要插入的列和相应的值\",{\"1\":{\"134\":1}}],[\"指定要使用的数据库的名称\",{\"1\":{\"133\":1}}],[\"指定要创建的数据库的名称\",{\"1\":{\"133\":1}}],[\"指定组件的名称\",{\"1\":{\"126\":1}}],[\"指定唯一性\",{\"1\":{\"46\":1}}],[\"插件是用于扩展webpack功能的工具\",{\"1\":{\"488\":1}}],[\"插件的执行顺序\",{\"0\":{\"478\":1}}],[\"插件的生命周期\",{\"0\":{\"477\":1}}],[\"插件的可选加载性还使应用程序能够根据需要进行功能扩展\",{\"1\":{\"464\":1}}],[\"插件用于执行更广泛的任务\",{\"1\":{\"476\":1}}],[\"插件扩展点\",{\"1\":{\"464\":1}}],[\"插件清单提供了一种标准化的方式\",{\"1\":{\"464\":1}}],[\"插件清单\",{\"1\":{\"464\":1}}],[\"插件管理器通常提供了一组api或方法\",{\"1\":{\"464\":1}}],[\"插件管理器\",{\"1\":{\"464\":1}}],[\"插件接口为插件提供了一个标准化的开发和集成方式\",{\"1\":{\"464\":1}}],[\"插件接口\",{\"1\":{\"464\":1}}],[\"插件系统的优势在于其可扩展性和灵活性\",{\"1\":{\"464\":1}}],[\"插件系统通常由以下几个核心组件组成\",{\"1\":{\"464\":1}}],[\"插件系统常用于使应用程序具有可插拔的特性\",{\"1\":{\"464\":1}}],[\"插件系统\",{\"0\":{\"464\":1},\"1\":{\"464\":1}}],[\"插件还可以接受一些选项配置\",{\"1\":{\"456\":1}}],[\"插件通过在webpack构建过程中的特定时间点触发钩子函数来执行任务\",{\"1\":{\"456\":1}}],[\"插件通常由第三方开发者创建\",{\"1\":{\"293\":1}}],[\"插件配置\",{\"1\":{\"454\":1}}],[\"插件在webpack的构建过程中执行更广泛的任务\",{\"1\":{\"453\":1}}],[\"插件会自动将状态持久化到本地存储中\",{\"1\":{\"439\":1}}],[\"插件会使用window\",{\"1\":{\"439\":1}}],[\"插件提供了对vuex生命周期的扩展能力\",{\"1\":{\"437\":1}}],[\"插件可以通过webpack配置文件中的plugins字段进行配置\",{\"1\":{\"476\":1}}],[\"插件可以根据扩展点提供的接口和方法\",{\"1\":{\"464\":1}}],[\"插件可以访问webpack提供的编译对象和配置信息\",{\"1\":{\"456\":1}}],[\"插件可以处理各种任务\",{\"1\":{\"456\":1}}],[\"插件可以注册多个\",{\"1\":{\"437\":1}}],[\"插件可以在vuex的生命周期中注入自定义逻辑\",{\"1\":{\"437\":1}}],[\"插件中的订阅函数都会被执行\",{\"1\":{\"437\":1}}],[\"插件对象通过store\",{\"1\":{\"437\":1}}],[\"插件\",{\"0\":{\"293\":1,\"456\":1,\"488\":1},\"1\":{\"453\":1,\"454\":1,\"456\":1,\"476\":1}}],[\"插槽\",{\"0\":{\"96\":1},\"1\":{\"96\":1}}],[\"插入语句\",{\"1\":{\"600\":1}}],[\"插入和移除元素\",{\"0\":{\"296\":1}}],[\"插入新的元素\",{\"1\":{\"288\":1}}],[\"插入数据\",{\"1\":{\"134\":1,\"369\":1}}],[\"插入默认内容\",{\"1\":{\"96\":1}}],[\"插入到\",{\"1\":{\"70\":1}}],[\"插入javascript表达式\",{\"1\":{\"14\":1}}],[\"插值处的内容都会更新\",{\"1\":{\"69\":1}}],[\"插值\",{\"0\":{\"69\":1},\"1\":{\"70\":1}}],[\"所有依赖它的对象都会得到通知和自动更新\",{\"1\":{\"592\":1}}],[\"所有源代码都会被压缩和优化\",{\"1\":{\"479\":1}}],[\"所有未匹配的路径都会显示notfound组件\",{\"1\":{\"378\":1}}],[\"所有订阅了该事件的回调函数都会被调用\",{\"1\":{\"272\":1}}],[\"所有继承自该原型的对象都会受到影响\",{\"1\":{\"267\":1}}],[\"所有功能的实现都是围绕其生命周期进行的\",{\"1\":{\"87\":1}}],[\"所有的配置选项都需要手动设置\",{\"1\":{\"479\":1}}],[\"所有的状态都被存储在一个单一的对象树中\",{\"1\":{\"428\":1}}],[\"所有的子实例也会被解挂载\",{\"1\":{\"87\":1}}],[\"所有的事件监听器都会被移除\",{\"1\":{\"87\":1}}],[\"所有的\",{\"1\":{\"68\":1}}],[\"所以决定废弃该函数\",{\"1\":{\"604\":1}}],[\"所以选择适当的模式对于构建结果的质量和性能是很重要的\",{\"1\":{\"479\":1}}],[\"所以首先需要安装node\",{\"1\":{\"475\":1}}],[\"所以在reducer中不能直接修改原状态对象\",{\"1\":{\"401\":1}}],[\"所以不应存储敏感的信息\",{\"1\":{\"357\":1}}],[\"所以视图会自动更新显示新的值\",{\"1\":{\"102\":1}}],[\"所以它们与\",{\"1\":{\"89\":1}}],[\"所以\",{\"1\":{\"70\":1,\"310\":1}}],[\"所以需要谨慎使用\",{\"1\":{\"38\":1}}],[\"🎉\",{\"1\":{\"67\":1}}],[\"60\",{\"1\":{\"555\":1}}],[\"600px\",{\"1\":{\"157\":1}}],[\"6\",{\"0\":{\"490\":1},\"1\":{\"65\":1,\"70\":1,\"87\":1,\"163\":2,\"170\":6,\"172\":1,\"173\":2,\"191\":1,\"254\":2,\"257\":5,\"258\":1,\"278\":1,\"284\":1,\"397\":1,\"545\":1,\"568\":1,\"573\":2,\"575\":1,\"576\":1,\"577\":2,\"578\":1}}],[\"服务端通过匹配该session\",{\"1\":{\"357\":1}}],[\"服务端渲染\",{\"1\":{\"61\":1}}],[\"服务不可用\",{\"1\":{\"354\":1}}],[\"服务器上的完整路径\",{\"1\":{\"599\":1}}],[\"服务器\",{\"1\":{\"461\":1}}],[\"服务器中的特定目录下\",{\"1\":{\"368\":1}}],[\"服务器端的处理逻辑\",{\"1\":{\"367\":1}}],[\"服务器端的连接池用于处理客户端的http请求\",{\"1\":{\"358\":1}}],[\"服务器继续向客户端发送一个fin包\",{\"1\":{\"361\":1}}],[\"服务器根据请求的处理结果\",{\"1\":{\"360\":1}}],[\"服务器根据session\",{\"1\":{\"357\":1}}],[\"服务器发送http响应\",{\"1\":{\"360\":1}}],[\"服务器的证书通常需要与中间证书和根证书一起提供给客户端\",{\"1\":{\"359\":1}}],[\"服务器收到客户端的fin包后\",{\"1\":{\"361\":1}}],[\"服务器收到客户端的syn包后\",{\"1\":{\"361\":1}}],[\"服务器收到客户端发送的密钥后\",{\"1\":{\"359\":1}}],[\"服务器收到请求后\",{\"1\":{\"359\":1,\"360\":1}}],[\"服务器和客户端都可以使用连接池来管理连接\",{\"1\":{\"358\":1}}],[\"服务器也会设置最大请求数限制\",{\"1\":{\"358\":1}}],[\"服务器可能会关闭连接\",{\"1\":{\"358\":1}}],[\"服务器可能会主动关闭连接\",{\"1\":{\"358\":1}}],[\"服务器可以使用set\",{\"1\":{\"357\":1}}],[\"服务器可以返回html页面\",{\"1\":{\"351\":1}}],[\"服务器在响应头中也会包含connection字段\",{\"1\":{\"358\":1}}],[\"服务器在响应中会提供资源的唯一标识符\",{\"1\":{\"356\":1}}],[\"服务器在响应中会包含资源的最后修改时间\",{\"1\":{\"356\":1}}],[\"服务器在首次建立会话时\",{\"1\":{\"357\":1}}],[\"服务器使用session\",{\"1\":{\"357\":1}}],[\"服务器会通过cookie中的一个session\",{\"1\":{\"357\":1}}],[\"服务器会为该用户生成一个唯一的session\",{\"1\":{\"357\":1}}],[\"服务器还需要通过一种机制\",{\"1\":{\"357\":1}}],[\"服务器错误\",{\"1\":{\"354\":1}}],[\"服务器错误状态码\",{\"1\":{\"354\":1}}],[\"服务器错误或者返回数据格式错误等\",{\"1\":{\"349\":1}}],[\"服务器内部错误\",{\"1\":{\"352\":1}}],[\"服务器接收请求并返回响应\",{\"1\":{\"352\":1}}],[\"服务器接收到请求后\",{\"1\":{\"341\":1}}],[\"服务器不会保留之前请求的状态信息\",{\"1\":{\"352\":1}}],[\"服务器返回的内容会追加到\",{\"1\":{\"348\":1}}],[\"服务器连接已建立\",{\"1\":{\"341\":1}}],[\"服务器处理请求\",{\"1\":{\"341\":1,\"360\":1}}],[\"服务器架构\",{\"1\":{\"131\":1}}],[\"服务器都会传输新的html页面\",{\"1\":{\"63\":1}}],[\"控制缓存机制的行为\",{\"1\":{\"355\":1}}],[\"控制代码版本\",{\"1\":{\"333\":1}}],[\"控制逻辑流程等\",{\"1\":{\"313\":1}}],[\"控制流程用于控制程序执行的顺序和条件\",{\"1\":{\"255\":1}}],[\"控制流程\",{\"0\":{\"255\":1}}],[\"控制背景图像的滚动方式\",{\"1\":{\"158\":1}}],[\"控制背景图像的重复方式\",{\"1\":{\"158\":1}}],[\"控制背景图像的显示范围\",{\"1\":{\"158\":1}}],[\"控制背景图像的起始位置\",{\"1\":{\"158\":1}}],[\"控制多行子项在交叉轴方向上的对齐方式\",{\"1\":{\"155\":1}}],[\"控制flex容器中子项在交叉轴上的对齐方式\",{\"1\":{\"155\":1}}],[\"控制flex容器中子项在主轴上的对齐方式\",{\"1\":{\"155\":1}}],[\"控制元素包含的内容对宽度和高度的影响\",{\"1\":{\"144\":1}}],[\"控制元素的盒模型计算方式\",{\"1\":{\"144\":1}}],[\"控制元素的显示和隐藏\",{\"1\":{\"98\":1}}],[\"控制器会从数据库或其他数据源中获取数据\",{\"1\":{\"367\":1}}],[\"控制器\",{\"1\":{\"62\":1}}],[\"控制组件是否重新渲染\",{\"1\":{\"22\":1}}],[\"模拟从数据库中获取数据\",{\"1\":{\"367\":1}}],[\"模拟错误\",{\"1\":{\"365\":1}}],[\"模拟一个ajax请求\",{\"1\":{\"271\":1}}],[\"模拟异步操作\",{\"1\":{\"258\":1}}],[\"模拟异步操作返回结果\",{\"1\":{\"196\":1}}],[\"模拟异步操作延迟\",{\"1\":{\"196\":1}}],[\"模运算符\",{\"1\":{\"254\":2}}],[\"模板引擎会将动态数据插入到视图模板中\",{\"1\":{\"367\":1}}],[\"模板引擎的视图生成过程\",{\"1\":{\"367\":1}}],[\"模板引擎是一种用于生成动态\",{\"1\":{\"367\":1}}],[\"模板引擎和视图\",{\"0\":{\"367\":1}}],[\"模板可以通过\",{\"1\":{\"245\":1}}],[\"模板字符串\",{\"1\":{\"167\":1,\"256\":2}}],[\"模板\",{\"0\":{\"245\":1},\"1\":{\"89\":1}}],[\"模板都是语法层面合法的\",{\"1\":{\"68\":1}}],[\"模板语法\",{\"0\":{\"68\":1}}],[\"模式是webpack提供的预定义配置集\",{\"1\":{\"489\":1}}],[\"模式是一种在\",{\"1\":{\"330\":1}}],[\"模式允许根据开发环境选择webpack的模式\",{\"1\":{\"453\":1}}],[\"模式中\",{\"1\":{\"330\":1}}],[\"模式中的\",{\"1\":{\"168\":1}}],[\"模式时\",{\"1\":{\"330\":1}}],[\"模式\",{\"0\":{\"457\":1,\"489\":1},\"1\":{\"193\":1,\"330\":1,\"453\":1,\"457\":1}}],[\"模式的不同之处在于它实现了视图\",{\"1\":{\"62\":1}}],[\"模式一样\",{\"1\":{\"62\":1}}],[\"模式和\",{\"1\":{\"62\":2}}],[\"模型层负责页面的逻辑操作\",{\"1\":{\"62\":1}}],[\"模块依赖等\",{\"1\":{\"499\":1}}],[\"模块作为标准模块类型进行处理和导入\",{\"1\":{\"497\":1}}],[\"模块联邦\",{\"1\":{\"497\":1}}],[\"模块加载器\",{\"1\":{\"476\":1}}],[\"模块加载器和插件是两个关键概念\",{\"1\":{\"476\":1}}],[\"模块加载器和插件\",{\"0\":{\"476\":1}}],[\"模块加载失败\",{\"1\":{\"467\":1}}],[\"模块路径解析\",{\"1\":{\"460\":1}}],[\"模块可以订阅和发布事件\",{\"1\":{\"444\":1}}],[\"模块可以通过导入和导出的方式建立起依赖关系\",{\"1\":{\"327\":1}}],[\"模块内部的state\",{\"0\":{\"436\":1}}],[\"模块中\",{\"1\":{\"331\":2}}],[\"模块中的变量和函数默认是在模块内部作用域中\",{\"1\":{\"201\":1}}],[\"模块中的代码会立即执行并导出结果\",{\"1\":{\"200\":1,\"203\":1}}],[\"模块系统\",{\"1\":{\"328\":1}}],[\"模块时\",{\"1\":{\"328\":1}}],[\"模块解析策略\",{\"1\":{\"328\":1}}],[\"模块解析基于\",{\"1\":{\"328\":1}}],[\"模块解析是\",{\"1\":{\"328\":1}}],[\"模块解析\",{\"0\":{\"328\":1,\"460\":1},\"1\":{\"328\":3,\"460\":1}}],[\"模块之外\",{\"1\":{\"327\":1}}],[\"模块之间通过require关键字导入依赖关系\",{\"1\":{\"200\":1}}],[\"模块\",{\"1\":{\"327\":1,\"425\":1,\"497\":2}}],[\"模块间的依赖管理\",{\"1\":{\"327\":1}}],[\"模块引入\",{\"1\":{\"327\":1}}],[\"模块定义\",{\"1\":{\"327\":1}}],[\"模块的\",{\"1\":{\"331\":1}}],[\"模块的导入和导出在编译阶段就可以确定\",{\"1\":{\"203\":1}}],[\"模块的独立性使得修改和维护更加容易\",{\"1\":{\"56\":1}}],[\"模块化可以提高vuex性能\",{\"1\":{\"434\":1}}],[\"模块化可以将代码封装起来\",{\"1\":{\"327\":1}}],[\"模块化使得状态管理代码更具可复用性和可扩展性\",{\"1\":{\"434\":1}}],[\"模块化允许在vuex中创建命名空间\",{\"1\":{\"434\":1}}],[\"模块化管理\",{\"1\":{\"426\":1}}],[\"模块化开发是一种将代码拆分为互相独立的模块来进行开发的方法\",{\"1\":{\"278\":1}}],[\"模块化开发\",{\"1\":{\"278\":1}}],[\"模块化是一种将大型的状态管理代码库拆分为较小\",{\"1\":{\"434\":1}}],[\"模块化是一种将代码拆分为独立的功能单元并进行组织的编程概念\",{\"1\":{\"199\":1}}],[\"模块化是一种有助于组织\",{\"1\":{\"327\":1}}],[\"模块化是一种思想和实践\",{\"1\":{\"56\":1}}],[\"模块化还有一种更高级的概念\",{\"1\":{\"56\":1}}],[\"模块化的划分和组织应该根据具体应用的需求和复杂度进行调整\",{\"1\":{\"435\":1}}],[\"模块化的代码可以被不同的项目或团队重复使用\",{\"1\":{\"327\":1}}],[\"模块化的代码更容易进行单元测试\",{\"1\":{\"56\":1,\"327\":1}}],[\"模块化的主要思想是将代码划分为独立的模块\",{\"1\":{\"327\":1}}],[\"模块化的目标是提高代码的可读性\",{\"1\":{\"327\":1}}],[\"模块化的实现可以借助模块加载器\",{\"1\":{\"56\":1}}],[\"模块化的好处包括\",{\"1\":{\"56\":1}}],[\"模块化\",{\"0\":{\"199\":1,\"327\":1},\"1\":{\"56\":1,\"327\":1}}],[\"模块化拆分\",{\"1\":{\"56\":1}}],[\"嵌入视频文件\",{\"1\":{\"219\":1}}],[\"嵌入其他网页或文档\",{\"1\":{\"219\":1}}],[\"嵌入式视频等\",{\"1\":{\"219\":1}}],[\"嵌入\",{\"1\":{\"61\":1,\"219\":1}}],[\"嵌套路由是指在vue\",{\"1\":{\"415\":1}}],[\"嵌套路由\",{\"0\":{\"379\":1,\"415\":1},\"1\":{\"414\":1}}],[\"嵌套对象也是深拷贝\",{\"1\":{\"281\":1}}],[\"嵌套调用层级过深\",{\"1\":{\"277\":1}}],[\"嵌套导入和导出\",{\"1\":{\"202\":1}}],[\"嵌套选择器\",{\"1\":{\"161\":3}}],[\"嵌套\",{\"1\":{\"15\":1}}],[\"考虑到这一点\",{\"1\":{\"61\":1}}],[\"世界是十分多样化的\",{\"1\":{\"61\":1}}],[\"框架之一\",{\"1\":{\"604\":1}}],[\"框架和\",{\"1\":{\"367\":1}}],[\"框架和嵌入内容\",{\"0\":{\"219\":1}}],[\"框架的特点包括\",{\"1\":{\"363\":1}}],[\"框架以其简单易用而受到广泛喜爱\",{\"1\":{\"363\":1}}],[\"框架允许将网页分割为独立的区域\",{\"1\":{\"218\":1}}],[\"框架\",{\"0\":{\"218\":1},\"1\":{\"60\":1,\"364\":1,\"604\":5}}],[\"介绍\",{\"0\":{\"60\":1,\"73\":1,\"76\":1,\"81\":1,\"84\":1,\"104\":1,\"140\":1,\"206\":1,\"248\":1,\"309\":1,\"409\":1,\"425\":1,\"446\":1}}],[\"选取父元素下的子元素\",{\"1\":{\"286\":1}}],[\"选取所有type为\",{\"1\":{\"286\":1}}],[\"选取所有具有类名\",{\"1\":{\"286\":1}}],[\"选取所有的段落元素\",{\"1\":{\"286\":1}}],[\"选取id为\",{\"1\":{\"286\":1}}],[\"选项来指定使用哪种模块解析策略\",{\"1\":{\"328\":1}}],[\"选项注册\",{\"1\":{\"116\":1}}],[\"选项\",{\"1\":{\"116\":1,\"328\":1,\"393\":1}}],[\"选项中指定的顺序尝试不同的扩展名\",{\"1\":{\"328\":1}}],[\"选项中\",{\"1\":{\"95\":1}}],[\"选项卡中\",{\"1\":{\"438\":1}}],[\"选项卡\",{\"1\":{\"58\":1}}],[\"选项卡下进行性能分析\",{\"1\":{\"58\":1}}],[\"选择相应的版本\",{\"1\":{\"507\":1}}],[\"选择api协议和格式\",{\"1\":{\"371\":1}}],[\"选择数据库\",{\"1\":{\"369\":1}}],[\"选择合适的设计模式可以提高代码的结构性\",{\"1\":{\"592\":1}}],[\"选择合适的缓存策略和配置方式\",{\"1\":{\"483\":1}}],[\"选择合适的模式可以显著地改善构建性能和输出结果\",{\"1\":{\"457\":1}}],[\"选择合适的api协议和数据格式\",{\"1\":{\"371\":1}}],[\"选择合适的方式取决于具体的需求和情况\",{\"1\":{\"322\":1}}],[\"选择合适的状态管理解决方案可能并不容易\",{\"1\":{\"9\":1}}],[\"选择第一个子元素\",{\"1\":{\"299\":1}}],[\"选择隐藏的元素\",{\"1\":{\"299\":1}}],[\"选择可见的元素\",{\"1\":{\"299\":1}}],[\"选择元素\",{\"1\":{\"265\":1}}],[\"选择语句\",{\"1\":{\"255\":1}}],[\"选择哪个预处理器取决于个人偏好\",{\"1\":{\"161\":1}}],[\"选择哪个框架取决于项目的需求\",{\"1\":{\"10\":1}}],[\"选择恰当的单位非常重要\",{\"1\":{\"145\":1}}],[\"选择器选择同类型的元素中的倒数第n个元素\",{\"1\":{\"159\":1}}],[\"选择器选择同类型的元素中的第n个元素\",{\"1\":{\"159\":1}}],[\"选择器选择要样式化的元素\",{\"1\":{\"141\":1}}],[\"选择器用于排除具有特定选择器的元素\",{\"1\":{\"159\":1}}],[\"选择器\",{\"0\":{\"143\":1,\"159\":1,\"286\":1},\"1\":{\"143\":2,\"159\":1}}],[\"选择正确的数据类型对于有效使用数据库和优化性能非常重要\",{\"1\":{\"136\":1}}],[\"选择需要下载的依赖\",{\"1\":{\"100\":1}}],[\"选择\",{\"1\":{\"58\":1}}],[\"选择适合项目需求的中间件来处理异步流程\",{\"1\":{\"407\":1}}],[\"选择适合的通信方式非常重要\",{\"1\":{\"35\":1}}],[\"选择适当的工具和技术\",{\"1\":{\"371\":1}}],[\"选择适当的图片格式\",{\"1\":{\"54\":1}}],[\"选择适当的图片格式可以在保证视觉质量的同时减小文件大小\",{\"1\":{\"54\":1}}],[\"选择适当的图片格式也是图片优化的重要一环\",{\"1\":{\"54\":1}}],[\"选择react还是vue取决于个人偏好\",{\"1\":{\"10\":1}}],[\"选择react还是angular取决于项目规模\",{\"1\":{\"10\":1}}],[\"选择依据\",{\"1\":{\"10\":2}}],[\"选择默认选项\",{\"1\":{\"1\":1}}],[\"资源\",{\"1\":{\"538\":1}}],[\"资源类型无法被编码为json\",{\"1\":{\"604\":1}}],[\"资源类型\",{\"0\":{\"538\":1}}],[\"资源压缩\",{\"1\":{\"496\":1}}],[\"资源管理等\",{\"1\":{\"488\":1}}],[\"资源管理\",{\"1\":{\"456\":1,\"476\":1}}],[\"资源统计等信息\",{\"1\":{\"58\":1}}],[\"资源大小等\",{\"1\":{\"58\":1}}],[\"资源加载\",{\"1\":{\"58\":1}}],[\"现代的ajax应用程序一般使用json作为数据交换的格式\",{\"1\":{\"340\":1}}],[\"现代的浏览器都提供了内置的开发者工具\",{\"1\":{\"58\":1}}],[\"现代前端开发更倾向于使用操作dom的api\",{\"1\":{\"266\":1}}],[\"现代浏览器原生支持es模块化\",{\"1\":{\"203\":1}}],[\"现在建议使用闭包\",{\"1\":{\"604\":1}}],[\"现在我们可以创建汽车对象\",{\"1\":{\"583\":1}}],[\"现在为\",{\"1\":{\"578\":19}}],[\"现在你可以更好地控制哪些模块被缓存\",{\"1\":{\"497\":1}}],[\"现在你应该可以在浏览器中看到一个简单的todomvc应用程序了\",{\"1\":{\"5\":1}}],[\"现在可以在组件中通过this\",{\"1\":{\"427\":1}}],[\"现在可以在任何组件中使用usecounter自定义hooks\",{\"1\":{\"42\":1}}],[\"现在\",{\"1\":{\"93\":1,\"403\":1,\"406\":2,\"412\":1,\"439\":1,\"440\":1,\"507\":1}}],[\"向其他开发者寻求帮助和建议\",{\"1\":{\"503\":1}}],[\"向应用程序注入自定义逻辑或功能\",{\"1\":{\"464\":1}}],[\"向开发人员提供适当的客户端库\",{\"1\":{\"371\":1}}],[\"向服务器发起一个tcp连接请求\",{\"1\":{\"360\":1}}],[\"向服务器提交数据\",{\"1\":{\"352\":1}}],[\"向上级目录查找等\",{\"1\":{\"328\":1}}],[\"向\",{\"1\":{\"177\":1}}],[\"向集合中添加一个元素\",{\"1\":{\"176\":1}}],[\"向外辐射状进行颜色过渡\",{\"1\":{\"153\":1}}],[\"向下移动50px\",{\"1\":{\"150\":1}}],[\"向web\",{\"1\":{\"57\":2}}],[\"向父组件\",{\"1\":{\"41\":1}}],[\"维护性和可扩展性\",{\"1\":{\"56\":1}}],[\"维护和测试\",{\"1\":{\"9\":1}}],[\"方式将多个加载器串联起来\",{\"1\":{\"455\":1}}],[\"方式定义\",{\"1\":{\"90\":1}}],[\"方言还有\",{\"1\":{\"164\":1}}],[\"方便更改和重用\",{\"1\":{\"435\":1}}],[\"方便实现组件之间的数据共享和通信\",{\"1\":{\"428\":1}}],[\"方便调试\",{\"1\":{\"405\":1}}],[\"方便团队成员在各自负责的业务领域内进行开发和维护\",{\"1\":{\"435\":1}}],[\"方便团队合作\",{\"1\":{\"333\":1}}],[\"方便团队协作\",{\"1\":{\"56\":1}}],[\"方便进行逻辑判断和条件分支\",{\"1\":{\"314\":1}}],[\"方便管理服务器端的模块依赖和代码复用\",{\"1\":{\"200\":1}}],[\"方便后续操作\",{\"1\":{\"168\":1}}],[\"方便重复使用或提高可读性\",{\"1\":{\"319\":1}}],[\"方便重复使用\",{\"1\":{\"89\":1}}],[\"方便代码阅读和维护\",{\"1\":{\"56\":1}}],[\"方法注册错误的回调\",{\"1\":{\"511\":1}}],[\"方法注册成功的回调\",{\"1\":{\"511\":1}}],[\"方法注册一个回调函数\",{\"1\":{\"402\":1}}],[\"方法和计算属性\",{\"1\":{\"440\":1}}],[\"方法和相应的回调函数处理结果\",{\"1\":{\"198\":1}}],[\"方法和相应的回调函数\",{\"1\":{\"196\":1}}],[\"方法在redux的store中注册一个回调函数\",{\"1\":{\"401\":1}}],[\"方法接受一个数字作为参数\",{\"1\":{\"393\":1}}],[\"方法即可\",{\"1\":{\"393\":1}}],[\"方法进行跳转\",{\"1\":{\"384\":1}}],[\"方法进行遍历\",{\"1\":{\"186\":1}}],[\"方法插入新的用户文档\",{\"1\":{\"369\":1}}],[\"方法获取到\",{\"1\":{\"369\":1}}],[\"方法将action派发到redux的store中\",{\"1\":{\"402\":1}}],[\"方法将\",{\"1\":{\"367\":1}}],[\"方法将控制权传递给下一个中间件或路由处理函数\",{\"1\":{\"366\":1}}],[\"方法将多个\",{\"1\":{\"196\":1}}],[\"方法阻止表单的默认提交行为\",{\"1\":{\"346\":1}}],[\"方法发送请求\",{\"1\":{\"341\":1}}],[\"方法设置请求的类型\",{\"1\":{\"341\":1}}],[\"方法的抽象声明\",{\"1\":{\"591\":1}}],[\"方法的返回值\",{\"1\":{\"401\":1}}],[\"方法的具体实现以及\",{\"1\":{\"591\":1}}],[\"方法的具体实现\",{\"1\":{\"312\":1}}],[\"方法的第三个参数\",{\"1\":{\"282\":1}}],[\"方法确保代码在文档加载完成后执行\",{\"1\":{\"285\":1}}],[\"方法添加表单数据\",{\"1\":{\"282\":1}}],[\"方法过滤掉原型链上的属性\",{\"1\":{\"281\":1}}],[\"方法并传递结果\",{\"1\":{\"272\":1}}],[\"方法被定义在\",{\"1\":{\"267\":1}}],[\"方法访问一个对象的原型\",{\"1\":{\"267\":1}}],[\"方法名或\",{\"1\":{\"204\":1}}],[\"方法名和方法描述符\",{\"1\":{\"204\":1}}],[\"方法装饰器用于增强或修改类的方法\",{\"1\":{\"204\":1}}],[\"方法装饰器\",{\"1\":{\"204\":1}}],[\"方法后\",{\"1\":{\"197\":1}}],[\"方法前进到下一个\",{\"1\":{\"197\":1}}],[\"方法捕获错误\",{\"1\":{\"196\":1,\"198\":1}}],[\"方法组合多个\",{\"1\":{\"193\":2}}],[\"方法提供了一个参数\",{\"1\":{\"186\":1}}],[\"方法提前终止生成器\",{\"1\":{\"186\":1}}],[\"方法外\",{\"1\":{\"186\":1}}],[\"方法逐步执行生成器函数\",{\"1\":{\"186\":2}}],[\"方法逐个访问数组中的元素\",{\"1\":{\"184\":1}}],[\"方法时\",{\"1\":{\"184\":1}}],[\"方法暴露给外部访问\",{\"1\":{\"183\":1}}],[\"方法返回一个包含路由元数据的对象\",{\"1\":{\"422\":1}}],[\"方法返回一个包含\",{\"1\":{\"323\":1}}],[\"方法返回一个斜杠转义的字符串\",{\"1\":{\"167\":1}}],[\"方法返回对象的所有键\",{\"1\":{\"174\":1}}],[\"方法可以通过ajax从服务器加载html内容\",{\"1\":{\"301\":1}}],[\"方法可以获取和设置元素的属性值\",{\"1\":{\"304\":1}}],[\"方法可以获取和设置元素的样式属性\",{\"1\":{\"295\":1}}],[\"方法可以获取元素的子元素\",{\"1\":{\"303\":1}}],[\"方法可以获取元素的父元素\",{\"1\":{\"303\":1}}],[\"方法可以获取一个全局symbol的描述符字符串\",{\"1\":{\"174\":1}}],[\"方法可以更灵活地发送http请求\",{\"1\":{\"292\":1}}],[\"方法可以遍历集合中的每个元素\",{\"1\":{\"291\":1}}],[\"方法可以创建一个promise对象\",{\"1\":{\"306\":1}}],[\"方法可以创建一个deferred对象\",{\"1\":{\"306\":1}}],[\"方法可以创建一个全局注册的symbol\",{\"1\":{\"174\":1}}],[\"方法可以创建自定义动画效果\",{\"1\":{\"290\":1}}],[\"方法可以在元素上存储和获取数据\",{\"1\":{\"305\":1}}],[\"方法可以在后代元素中查找特定的元素\",{\"1\":{\"303\":1}}],[\"方法可以在浏览器窗口大小改变时执行相应的操作\",{\"1\":{\"297\":1}}],[\"方法可以在调用函数时添加额外的操作\",{\"1\":{\"188\":1}}],[\"方法可以在读取属性时返回特定的值\",{\"1\":{\"188\":1}}],[\"方法扁平化\",{\"1\":{\"170\":1}}],[\"方法首先使用映射函数对原数组的每个元素进行映射\",{\"1\":{\"170\":1}}],[\"方法用于处理异步操作失败的情况\",{\"1\":{\"192\":1}}],[\"方法用于处理异步操作成功的情况\",{\"1\":{\"192\":1}}],[\"方法用于阻止一个对象的扩展\",{\"1\":{\"171\":1}}],[\"方法用于封闭一个对象\",{\"1\":{\"171\":1}}],[\"方法用于冻结一个对象\",{\"1\":{\"171\":1}}],[\"方法用于返回一个包含所有自身可枚举属性的键值对数组\",{\"1\":{\"171\":1}}],[\"方法用于返回一个包含所有自身可枚举属性的值的数组\",{\"1\":{\"171\":1}}],[\"方法用于返回一个包含所有自身可枚举属性的数组\",{\"1\":{\"171\":1}}],[\"方法用于返回一个包含数组所有值的迭代器\",{\"1\":{\"170\":1}}],[\"方法用于返回一个包含数组所有键的迭代器\",{\"1\":{\"170\":1}}],[\"方法用于返回一个包含数组所有键值对的迭代器\",{\"1\":{\"170\":1}}],[\"方法用于将一个或多个源对象的所有可枚举属性复制到目标对象中\",{\"1\":{\"171\":1}}],[\"方法用于将嵌套的数组扁平化为一维数组\",{\"1\":{\"170\":1}}],[\"方法用于将数组的所有元素替换为一个静态值\",{\"1\":{\"170\":1}}],[\"方法用于判断数组是否包含某个特定元素\",{\"1\":{\"170\":1}}],[\"方法用于查找数组中满足条件的第一个元素的索引\",{\"1\":{\"170\":1}}],[\"方法用于查找数组中满足条件的第一个元素\",{\"1\":{\"170\":1}}],[\"方法用于创建一个包含任意数量参数的新数组实例\",{\"1\":{\"170\":1}}],[\"方法用于从类似数组或可迭代对象创建一个新的数组实例\",{\"1\":{\"170\":1}}],[\"方法或类\",{\"1\":{\"372\":1}}],[\"方法或装饰现有的属性和方法\",{\"1\":{\"324\":1}}],[\"方法或函数的参数和返回值类型\",{\"1\":{\"320\":1}}],[\"方法或构造函数中使用该类型参数\",{\"1\":{\"320\":1}}],[\"方法或索引签名等\",{\"1\":{\"312\":1}}],[\"方法或\",{\"1\":{\"281\":1}}],[\"方法或状态\",{\"1\":{\"97\":1}}],[\"方法或通过单文件组件\",{\"1\":{\"90\":1}}],[\"方法等\",{\"1\":{\"97\":1,\"312\":1}}],[\"方法三者之间的区别\",{\"0\":{\"78\":1}}],[\"方法\",{\"0\":{\"578\":1},\"1\":{\"33\":1,\"78\":1,\"167\":1,\"170\":1,\"183\":4,\"184\":2,\"188\":2,\"191\":1,\"198\":1,\"204\":2,\"238\":1,\"259\":1,\"263\":1,\"267\":3,\"272\":2,\"281\":3,\"312\":8,\"330\":3,\"401\":1,\"583\":2,\"591\":2}}],[\"方法来进行订阅\",{\"1\":{\"401\":1}}],[\"方法来派发一个action\",{\"1\":{\"401\":1}}],[\"方法来获取当前的状态\",{\"1\":{\"401\":1}}],[\"方法来实现返回上一个页面的功能\",{\"1\":{\"393\":1}}],[\"方法来使用它们\",{\"1\":{\"366\":1}}],[\"方法来解决可能的冲突\",{\"1\":{\"307\":1}}],[\"方法来绑定事件处理程序\",{\"1\":{\"287\":1}}],[\"方法来创建一个新对象\",{\"1\":{\"267\":1}}],[\"方法来创建了一个新的对象\",{\"1\":{\"267\":1}}],[\"方法来阻止事件冒泡\",{\"1\":{\"263\":1}}],[\"方法来阻止事件的默认行为\",{\"1\":{\"26\":1}}],[\"方法来等待异步操作的解决\",{\"1\":{\"197\":1}}],[\"方法来注册全局指令和局部指令\",{\"1\":{\"70\":1}}],[\"方法来停止事件冒泡传播到父元素\",{\"1\":{\"26\":1}}],[\"方法来传递参数\",{\"1\":{\"25\":1}}],[\"方法来返回组件的结构和渲染的内容\",{\"1\":{\"19\":1}}],[\"方法更新状态\",{\"1\":{\"20\":1}}],[\"方法中可以通过this\",{\"1\":{\"19\":1}}],[\"代替\",{\"1\":{\"604\":1}}],[\"代表默认的首页\",{\"1\":{\"392\":1}}],[\"代表被装饰的类的构造函数\",{\"1\":{\"324\":1}}],[\"代表目标类本身\",{\"1\":{\"204\":1}}],[\"代表传入的属性\",{\"1\":{\"19\":1}}],[\"代理服务器等的首选工具之一\",{\"1\":{\"506\":1}}],[\"代理等功能\",{\"1\":{\"454\":1}}],[\"代理还可以拦截其他操作\",{\"1\":{\"189\":1}}],[\"代理还可以拦截一系列操作\",{\"1\":{\"188\":1}}],[\"代理是一个强大的特性\",{\"1\":{\"188\":1}}],[\"代理\",{\"0\":{\"188\":1},\"1\":{\"188\":1}}],[\"代码块\",{\"1\":{\"480\":1}}],[\"代码块分割\",{\"1\":{\"480\":1}}],[\"代码优化\",{\"1\":{\"480\":1}}],[\"代码优化和代码分割是在webpack中常用的优化策略\",{\"1\":{\"480\":1}}],[\"代码优化和分割\",{\"0\":{\"480\":1}}],[\"代码压缩\",{\"1\":{\"469\":1}}],[\"代码可读性和维护性\",{\"1\":{\"467\":1}}],[\"代码分割会增加额外的网络请求\",{\"1\":{\"480\":1}}],[\"代码分割是优化webpack构建结果的一种重要方式\",{\"1\":{\"458\":1}}],[\"代码分割\",{\"0\":{\"458\":1},\"1\":{\"453\":2,\"458\":1,\"480\":1}}],[\"代码如下\",{\"1\":{\"440\":1}}],[\"代码组织和可维护性\",{\"1\":{\"434\":1}}],[\"代码审查有助于提高代码质量和减少潜在问题\",{\"1\":{\"337\":1}}],[\"代码审查是由其他团队成员或专门的代码审查人员来执行的\",{\"1\":{\"337\":1}}],[\"代码审查\",{\"1\":{\"337\":1}}],[\"代码库无缝集成的重要工具\",{\"1\":{\"325\":1}}],[\"代码库的类型信息的文件\",{\"1\":{\"325\":1}}],[\"代码时\",{\"1\":{\"310\":1}}],[\"代码时用来存储变量和函数声明的容器\",{\"1\":{\"280\":1}}],[\"代码进行交互\",{\"1\":{\"310\":1}}],[\"代码会立即进入\",{\"1\":{\"198\":1}}],[\"代码\",{\"1\":{\"68\":1,\"70\":1}}],[\"代码执行期间创建的所有对象和变量的总体内存\",{\"1\":{\"274\":1}}],[\"代码执行\",{\"1\":{\"58\":1}}],[\"代码复用\",{\"1\":{\"56\":1}}],[\"代码拆分和懒加载\",{\"1\":{\"504\":1}}],[\"代码拆分和模块化是一种组织和管理代码的方法\",{\"1\":{\"56\":2}}],[\"代码拆分和模块化\",{\"0\":{\"56\":1}}],[\"代码拆分是一种将应用程序代码拆分成多个小块的技术\",{\"1\":{\"493\":1}}],[\"代码拆分是将大型代码库或应用程序拆分为更小\",{\"1\":{\"56\":1}}],[\"代码拆分\",{\"0\":{\"493\":1},\"1\":{\"56\":1}}],[\"仅能访问自身作用域中的变量\",{\"1\":{\"571\":1}}],[\"仅能在函数内部访问\",{\"1\":{\"525\":1}}],[\"仅限于客户端浏览器运行的局限\",{\"1\":{\"506\":1}}],[\"仅有mutations才能够修改state的值\",{\"1\":{\"426\":1}}],[\"仅有的例外是像\",{\"1\":{\"89\":1}}],[\"仅在\",{\"1\":{\"366\":1}}],[\"仅在垂直方向上重复\",{\"1\":{\"158\":1}}],[\"仅在水平方向上重复\",{\"1\":{\"158\":1}}],[\"仅在需要时请求和加载数据\",{\"1\":{\"55\":1}}],[\"仅适用于键盘事件\",{\"1\":{\"27\":1}}],[\"内定义的变量的作用域范围\",{\"1\":{\"311\":1}}],[\"内存缓存是将数据存储在内存中\",{\"1\":{\"601\":1}}],[\"内存缓存\",{\"1\":{\"601\":2}}],[\"内存泄漏可能会导致内存占用不断增加\",{\"1\":{\"275\":1}}],[\"内存泄漏是指在程序中无意中保留对不再需要使用的内存的引用\",{\"1\":{\"274\":1}}],[\"内存泄漏\",{\"0\":{\"275\":1},\"1\":{\"274\":1,\"275\":1}}],[\"内存管理\",{\"0\":{\"274\":1}}],[\"内存消耗\",{\"1\":{\"128\":1}}],[\"内联元素\",{\"1\":{\"210\":1}}],[\"内联样式适用于需要对个别元素应用直接的样式调整\",{\"1\":{\"142\":1}}],[\"内联样式\",{\"1\":{\"142\":1}}],[\"内部作用域可以访问外部作用域中定义的变量\",{\"1\":{\"311\":1}}],[\"内部作用域可以访问外部作用域的变量\",{\"1\":{\"261\":1}}],[\"内部函数可以访问和修改外部函数中的变量\",{\"1\":{\"268\":1}}],[\"内部函数可以访问外部函数的变量和参数\",{\"1\":{\"268\":1}}],[\"内部函数可以访问它所在的外部函数的作用域和变量\",{\"1\":{\"268\":1}}],[\"内部函数作用域的变量\",{\"1\":{\"261\":1}}],[\"内部锚点等\",{\"1\":{\"224\":1}}],[\"内部的\",{\"1\":{\"156\":1}}],[\"内部样式表\",{\"1\":{\"142\":1}}],[\"内容\",{\"1\":{\"241\":1,\"245\":1}}],[\"内容区域\",{\"1\":{\"146\":1}}],[\"内容分发网络\",{\"1\":{\"55\":1,\"465\":1}}],[\"内边距框或边框框之内\",{\"1\":{\"158\":1}}],[\"内边距框或边框框之间的位置\",{\"1\":{\"158\":1}}],[\"内边距和边框\",{\"1\":{\"146\":1}}],[\"内边距是内容区域与边框之间的区域\",{\"1\":{\"146\":1}}],[\"内边距\",{\"1\":{\"146\":3}}],[\"内置了大量的函数\",{\"1\":{\"570\":1}}],[\"内置了很多功能和工具\",{\"1\":{\"10\":1}}],[\"内置函数示例\",{\"1\":{\"570\":1}}],[\"内置函数\",{\"0\":{\"570\":1},\"1\":{\"570\":1}}],[\"内置模块\",{\"1\":{\"509\":1}}],[\"内置中间件\",{\"1\":{\"366\":1}}],[\"内置声明文件\",{\"1\":{\"325\":1}}],[\"内置可迭代对象\",{\"1\":{\"185\":1}}],[\"内置symbol常量用于正则匹配\",{\"1\":{\"174\":1}}],[\"内置symbol常量用于迭代\",{\"1\":{\"174\":1}}],[\"内置组件\",{\"0\":{\"118\":1}}],[\"内置的验证方法\",{\"1\":{\"32\":1}}],[\"压缩代码\",{\"1\":{\"480\":1}}],[\"压缩javascript代码\",{\"1\":{\"456\":1}}],[\"压缩\",{\"1\":{\"455\":1,\"469\":1}}],[\"压缩等\",{\"1\":{\"454\":1}}],[\"压缩css和javascript代码\",{\"1\":{\"55\":1}}],[\"压缩图片是最常见也是最有效的图片优化方法之一\",{\"1\":{\"54\":1}}],[\"压缩图片\",{\"1\":{\"54\":1,\"469\":1}}],[\"保存了到外部资源的一个引用\",{\"1\":{\"538\":1}}],[\"保存变量的名称\",{\"1\":{\"524\":1}}],[\"保存在本地的一种机制\",{\"1\":{\"55\":1}}],[\"保留其他的应用程序状态\",{\"1\":{\"459\":1}}],[\"保证状态的可追踪性和可维护性\",{\"1\":{\"428\":1}}],[\"保证视图与状态的同步\",{\"1\":{\"428\":1}}],[\"保证了数据的可追踪性和可维护性\",{\"1\":{\"8\":1}}],[\"保持与开发社区的联系\",{\"1\":{\"602\":1}}],[\"保持索引关联\",{\"1\":{\"578\":2}}],[\"保持可预测性和可测试性\",{\"1\":{\"407\":1}}],[\"保持纯粹性和可预测性\",{\"1\":{\"401\":1}}],[\"保持状态\",{\"1\":{\"268\":1}}],[\"保持了引用的一致性\",{\"1\":{\"203\":1}}],[\"保持整体的排版整齐和平衡\",{\"1\":{\"154\":1}}],[\"保护数据的安全和可靠性\",{\"1\":{\"131\":1}}],[\"浏览器只需要加载发生改变的文件\",{\"1\":{\"483\":1}}],[\"浏览器可以直接从缓存中获取\",{\"1\":{\"465\":1}}],[\"浏览器可以缓存静态资源\",{\"1\":{\"465\":1}}],[\"浏览器中\",{\"1\":{\"390\":1}}],[\"浏览器接收到服务器的响应后\",{\"1\":{\"360\":1}}],[\"浏览器使用解析得到的ip地址和端口号\",{\"1\":{\"360\":1}}],[\"浏览器会关闭与服务器的tcp连接\",{\"1\":{\"360\":1}}],[\"浏览器会解析url并发起tcp连接\",{\"1\":{\"360\":1}}],[\"浏览器会解析html\",{\"1\":{\"360\":1}}],[\"浏览器会解析输入的url字符串\",{\"1\":{\"360\":1}}],[\"浏览器会构建一个符合http协议规范的请求报文\",{\"1\":{\"360\":1}}],[\"浏览器会检查主机名\",{\"1\":{\"360\":1}}],[\"浏览器会自动生成一个事件对象\",{\"1\":{\"263\":1}}],[\"浏览器通常会对mixed\",{\"1\":{\"359\":1}}],[\"浏览器通常会执行默认的表单提交行为\",{\"1\":{\"33\":1}}],[\"浏览器事件等场景\",{\"1\":{\"272\":1}}],[\"浏览器信息操作\",{\"1\":{\"266\":1}}],[\"浏览器信息等\",{\"1\":{\"266\":1}}],[\"浏览器窗口操作\",{\"1\":{\"266\":1}}],[\"浏览器对象模型\",{\"1\":{\"266\":1}}],[\"浏览器存储\",{\"0\":{\"240\":1}}],[\"浏览器将请求用户的位置信息\",{\"1\":{\"229\":1}}],[\"浏览器兼容性\",{\"1\":{\"203\":1}}],[\"浏览器开发者工具\",{\"1\":{\"58\":1}}],[\"浏览器缓存是浏览器将网页资源\",{\"1\":{\"55\":1}}],[\"浏览器缓存\",{\"1\":{\"55\":1,\"465\":1}}],[\"调试和故障排除\",{\"0\":{\"498\":1}}],[\"调试配置在开发过程中非常重要\",{\"1\":{\"468\":1}}],[\"调试配置是非常重要的\",{\"1\":{\"468\":1}}],[\"调试配置\",{\"0\":{\"468\":1}}],[\"调试工具和技术\",{\"1\":{\"372\":1}}],[\"调整现有功能\",{\"1\":{\"434\":1}}],[\"调整窗口大小\",{\"1\":{\"266\":1}}],[\"调整并发连接数\",{\"1\":{\"138\":1}}],[\"调整数据库的缓冲池大小和内存配置\",{\"1\":{\"138\":1}}],[\"调整图片尺寸\",{\"1\":{\"54\":1}}],[\"调用汽车方法\",{\"1\":{\"583\":1}}],[\"调用对象的方法\",{\"1\":{\"579\":1}}],[\"调用可变函数\",{\"1\":{\"569\":1}}],[\"调用上面定义的函数来计算两个数的和\",{\"1\":{\"567\":1}}],[\"调用回调方法\",{\"1\":{\"539\":1}}],[\"调用回调函数\",{\"1\":{\"539\":2}}],[\"调用updatemessage方法更新message数据\",{\"1\":{\"442\":1}}],[\"调用submitform方法进行表单提交逻辑的处理\",{\"1\":{\"442\":1}}],[\"调用sayhello方法\",{\"1\":{\"259\":1}}],[\"调用reducers\",{\"1\":{\"402\":1}}],[\"调用preventdefault\",{\"1\":{\"346\":1}}],[\"调用displaydata\",{\"1\":{\"345\":1}}],[\"调用其他函数\",{\"1\":{\"313\":1}}],[\"调用堆栈\",{\"1\":{\"277\":1}}],[\"调用fetchdata函数发起一个模拟的异步任务\",{\"1\":{\"271\":1}}],[\"调用focusinput函数将焦点设置到input元素上\",{\"1\":{\"41\":1}}],[\"调用递归函数\",{\"1\":{\"269\":1}}],[\"调用目标对象中的函数\",{\"1\":{\"191\":1}}],[\"调用\",{\"1\":{\"186\":1,\"192\":2,\"272\":2}}],[\"调用后\",{\"1\":{\"87\":1}}],[\"调用increment函数会将count的值增加1\",{\"1\":{\"41\":1}}],[\"调用incrementcount方法更新状态\",{\"1\":{\"20\":1}}],[\"调用函数并输出返回的结果\",{\"1\":{\"568\":1}}],[\"调用函数\",{\"0\":{\"567\":1},\"1\":{\"36\":1,\"251\":1}}],[\"gzip\",{\"1\":{\"469\":1}}],[\"g|gif|svg\",{\"1\":{\"455\":1}}],[\"gmt\",{\"1\":{\"356\":1}}],[\"guards\",{\"1\":{\"317\":1}}],[\"guest\",{\"1\":{\"258\":3}}],[\"gotouser\",{\"1\":{\"416\":1,\"420\":2}}],[\"gotohome\",{\"1\":{\"416\":1}}],[\"goback\",{\"1\":{\"393\":3}}],[\"go\",{\"1\":{\"314\":1,\"416\":1}}],[\"golden\",{\"1\":{\"312\":1}}],[\"garbage\",{\"1\":{\"274\":1,\"276\":1}}],[\"gap之外\",{\"1\":{\"154\":1}}],[\"gap属性\",{\"1\":{\"156\":1}}],[\"gap属性设置列之间的间距为20像素\",{\"1\":{\"154\":1}}],[\"gap属性来设置列之间的间距\",{\"1\":{\"154\":1}}],[\"gap\",{\"1\":{\"144\":1,\"147\":1,\"154\":1,\"156\":1}}],[\"gt\",{\"1\":{\"213\":1}}],[\"globals\",{\"1\":{\"521\":1}}],[\"globalfunc\",{\"1\":{\"262\":2}}],[\"globalvariable\",{\"1\":{\"249\":3,\"261\":2,\"311\":2}}],[\"global\",{\"1\":{\"174\":1,\"249\":1,\"261\":4,\"311\":2,\"329\":1,\"522\":1,\"524\":2,\"525\":1}}],[\"globalproperties\",{\"1\":{\"70\":2}}],[\"grape\",{\"1\":{\"578\":7}}],[\"graphql和soap\",{\"1\":{\"371\":1}}],[\"graphics\",{\"1\":{\"237\":1}}],[\"grade\",{\"1\":{\"183\":6}}],[\"gradients\",{\"0\":{\"153\":1}}],[\"gradient\",{\"1\":{\"144\":3,\"153\":11,\"161\":14}}],[\"greeting\",{\"1\":{\"187\":2,\"188\":5,\"256\":1,\"310\":1,\"319\":1,\"519\":6,\"520\":2}}],[\"greet\",{\"1\":{\"172\":5,\"189\":3,\"191\":4,\"204\":5,\"258\":5,\"262\":4,\"267\":14,\"278\":7,\"310\":2,\"312\":4,\"313\":3,\"315\":1,\"329\":6,\"569\":3}}],[\"green\",{\"1\":{\"153\":1,\"314\":2,\"321\":2,\"535\":1,\"579\":3}}],[\"grid布局还支持更复杂的功能\",{\"1\":{\"156\":1}}],[\"grid布局的简单示例\",{\"1\":{\"156\":1}}],[\"grid布局\",{\"1\":{\"156\":2}}],[\"grid布局是一种强大的网格布局系统\",{\"1\":{\"156\":1}}],[\"grid\",{\"0\":{\"156\":1},\"1\":{\"144\":5,\"147\":5,\"148\":2,\"156\":4}}],[\"groups\",{\"1\":{\"168\":3,\"497\":1}}],[\"group\",{\"1\":{\"135\":2,\"395\":1}}],[\"group>\",{\"1\":{\"122\":1}}],[\"g\",{\"1\":{\"88\":1,\"256\":1}}],[\"generic\",{\"1\":{\"320\":4}}],[\"generics\",{\"1\":{\"310\":1,\"320\":1}}],[\"generation\",{\"1\":{\"276\":3}}],[\"generational\",{\"1\":{\"276\":1}}],[\"generators\",{\"1\":{\"405\":1}}],[\"generator函数的异步应用\",{\"0\":{\"197\":1}}],[\"generatorfunction2\",{\"1\":{\"187\":2}}],[\"generatorfunction1\",{\"1\":{\"187\":2}}],[\"generatorfunction\",{\"1\":{\"186\":6,\"187\":8}}],[\"generator\",{\"0\":{\"186\":1},\"1\":{\"186\":13,\"187\":21,\"195\":1,\"197\":5,\"198\":14,\"323\":1,\"582\":1}}],[\"generate\",{\"1\":{\"58\":1}}],[\"general\",{\"1\":{\"159\":1}}],[\"gender\",{\"1\":{\"259\":1}}],[\"geolocation\",{\"1\":{\"229\":2}}],[\"get用于处理通过get方法提交的表单数据\",{\"1\":{\"580\":1}}],[\"get全局变量来接收表单提交的数据\",{\"1\":{\"580\":1}}],[\"getusername\",{\"1\":{\"430\":4}}],[\"getstate\",{\"1\":{\"401\":3,\"402\":1}}],[\"get请求是幂等的\",{\"1\":{\"353\":1}}],[\"getdata\",{\"1\":{\"345\":2}}],[\"getderivedstatefromerror\",{\"1\":{\"22\":1}}],[\"getderivedstatefromprops和componentdidcatch\",{\"1\":{\"22\":1}}],[\"getderivedstatefromprops\",{\"1\":{\"22\":4}}],[\"getjson\",{\"1\":{\"343\":1}}],[\"getfirst\",{\"1\":{\"320\":1}}],[\"getfirst<t\",{\"1\":{\"320\":1}}],[\"getvalue\",{\"1\":{\"320\":2}}],[\"getarea\",{\"1\":{\"312\":4,\"330\":3}}],[\"getall\",{\"1\":{\"282\":1}}],[\"getattribute\",{\"1\":{\"265\":1}}],[\"getelementsbytagname等\",{\"1\":{\"265\":1}}],[\"getelementsbyclassname\",{\"1\":{\"265\":1}}],[\"getelementbyid\",{\"1\":{\"5\":1,\"16\":2,\"21\":1,\"228\":1,\"263\":6,\"265\":15,\"278\":1,\"345\":1,\"347\":2,\"348\":1,\"394\":1,\"403\":1,\"406\":1,\"493\":1,\"494\":1}}],[\"getcurrentposition\",{\"1\":{\"229\":1}}],[\"getcount来获取getcount计算属性的值\",{\"1\":{\"440\":1}}],[\"getcount\",{\"1\":{\"430\":4,\"440\":2,\"444\":1}}],[\"getcontext\",{\"1\":{\"228\":1}}],[\"getcoords\",{\"1\":{\"166\":2}}],[\"getlocation\",{\"1\":{\"229\":2}}],[\"getownpropertydescriptor\",{\"1\":{\"189\":4,\"191\":3,\"330\":1}}],[\"getownpropertynames\",{\"1\":{\"189\":7,\"191\":1,\"330\":1}}],[\"getownpropertysymbols\",{\"1\":{\"174\":2,\"189\":1,\"191\":1}}],[\"getprototypeof\",{\"1\":{\"189\":8,\"191\":3,\"267\":1}}],[\"gettodocount\",{\"1\":{\"430\":4}}],[\"getting\",{\"1\":{\"188\":2,\"189\":10}}],[\"getter是vuex中用于从状态中获取派生数据的方法\",{\"1\":{\"444\":1}}],[\"getter用于派生新的状态\",{\"1\":{\"436\":1}}],[\"getter用于从state中派生出新的状态\",{\"1\":{\"436\":1}}],[\"getter的返回值可以在组件中通过$store\",{\"1\":{\"436\":1}}],[\"getter等\",{\"1\":{\"435\":1}}],[\"getter可以接受参数\",{\"1\":{\"436\":1}}],[\"getter可以帮助我们在组件中获得经过处理的状态\",{\"1\":{\"430\":1}}],[\"getter可以看作是store的计算属性\",{\"1\":{\"430\":1}}],[\"getter\",{\"0\":{\"436\":1},\"1\":{\"73\":1,\"74\":1,\"183\":2,\"436\":1,\"441\":1}}],[\"getters来获取vuex的计算属性\",{\"1\":{\"441\":1}}],[\"getters来获取对应的计算结果\",{\"1\":{\"426\":1}}],[\"getters和state等属性的上下文对象\",{\"1\":{\"436\":1}}],[\"getters访问\",{\"1\":{\"436\":1}}],[\"getters方式直接访问getter\",{\"1\":{\"430\":1}}],[\"getters可以接受其他getters作为第二个参数\",{\"1\":{\"426\":1}}],[\"getters的计算\",{\"1\":{\"426\":1}}],[\"getters\",{\"1\":{\"3\":3,\"425\":2,\"426\":2,\"427\":1,\"430\":6,\"440\":5,\"441\":1,\"444\":4}}],[\"getint16\",{\"1\":{\"182\":1}}],[\"getint8\",{\"1\":{\"182\":1}}],[\"getbootstrap\",{\"1\":{\"160\":1}}],[\"getboundingclientrect\",{\"1\":{\"41\":1}}],[\"get\",{\"1\":{\"3\":1,\"177\":2,\"179\":1,\"183\":2,\"188\":6,\"189\":6,\"191\":2,\"282\":1,\"289\":1,\"292\":1,\"341\":1,\"345\":1,\"347\":1,\"348\":1,\"352\":1,\"353\":1,\"360\":1,\"364\":1,\"365\":7,\"367\":1,\"386\":1,\"405\":1,\"432\":1,\"433\":1,\"444\":2,\"509\":1,\"512\":1,\"521\":1,\"538\":4,\"570\":1,\"603\":1}}],[\"gif后缀的文件\",{\"1\":{\"463\":1}}],[\"gif适用于展示简单动画和带有透明背景的图像\",{\"1\":{\"54\":1}}],[\"git子模块是指在一个git项目中使用其他git项目作为子目录的方式\",{\"1\":{\"338\":1}}],[\"git提供了许多高级操作\",{\"1\":{\"338\":1}}],[\"git提供了强大的协作功能\",{\"1\":{\"337\":1}}],[\"git提供了丰富的命令行工具和图形化界面工具\",{\"1\":{\"333\":1}}],[\"gitlab\",{\"1\":{\"336\":1,\"337\":1}}],[\"git与其他远程仓库托管服务\",{\"1\":{\"336\":1}}],[\"github\",{\"1\":{\"336\":2,\"370\":1}}],[\"git会标记冲突的文件并在文件中显示冲突的位置\",{\"1\":{\"335\":1}}],[\"gitignore规则的影响\",{\"1\":{\"334\":1}}],[\"gitignore文件可以很好地管理你的git仓库\",{\"1\":{\"334\":1}}],[\"gitignore文件可以放在项目的根目录中\",{\"1\":{\"334\":1}}],[\"gitignore文件只对尚未被添加到git仓库的文件起作用\",{\"1\":{\"334\":1}}],[\"gitignore文件示例\",{\"1\":{\"334\":1}}],[\"gitignore文件中使用\",{\"1\":{\"334\":1}}],[\"gitignore文件中可以包含以下内容\",{\"1\":{\"334\":1}}],[\"gitignore的文件来指定需要被git忽略的文件和文件夹\",{\"1\":{\"334\":1}}],[\"git在开源社区和商业项目中都得到了广泛的应用\",{\"1\":{\"333\":1}}],[\"git可以同时进行多个开发任务\",{\"1\":{\"333\":1}}],[\"git可以追踪和记录项目文件的修改历史\",{\"1\":{\"333\":1}}],[\"git的核心概念是仓库\",{\"1\":{\"333\":1}}],[\"git是一个分布式版本控制系统\",{\"1\":{\"333\":1}}],[\"git\",{\"0\":{\"332\":1},\"1\":{\"335\":4,\"336\":10,\"338\":10}}],[\"gimp等\",{\"1\":{\"54\":1}}],[\"综上所述\",{\"1\":{\"53\":1,\"55\":1,\"58\":1,\"195\":1,\"276\":1,\"342\":1,\"466\":1,\"480\":1,\"483\":1}}],[\"滚动操作\",{\"0\":{\"301\":1}}],[\"滚动容器\",{\"1\":{\"53\":1}}],[\"滚动事件的默认行为\",{\"1\":{\"70\":1}}],[\"滚动事件\",{\"1\":{\"28\":2}}],[\"虚拟滚动可以极大地优化大量数据的滚动展示性能\",{\"1\":{\"53\":1}}],[\"虚拟滚动通过只渲染可见部分的数据\",{\"1\":{\"53\":1}}],[\"虚拟滚动是一种技术\",{\"1\":{\"53\":1}}],[\"虚拟滚动\",{\"1\":{\"53\":1}}],[\"虚拟dom在性能优化和开发便利性方面提供了一些优势\",{\"1\":{\"128\":1}}],[\"虚拟dom可能会占用更多的内存\",{\"1\":{\"128\":1}}],[\"虚拟dom可以简化开发过程\",{\"1\":{\"128\":1}}],[\"虚拟dom可以对多个dom更新操作进行批量处理\",{\"1\":{\"128\":1}}],[\"虚拟dom可以提高应用的性能\",{\"1\":{\"128\":1}}],[\"虚拟dom可以通过比较前后两次虚拟dom之间的差异\",{\"1\":{\"128\":1}}],[\"虚拟dom的主要目标是通过减少浏览器的dom操作来提高复杂应用的性能\",{\"1\":{\"128\":1}}],[\"虚拟dom通过批量操作\",{\"1\":{\"128\":1}}],[\"虚拟dom是通过javascript对象表示的\",{\"1\":{\"128\":1}}],[\"虚拟dom是一个轻量级的javascript对象\",{\"1\":{\"45\":1}}],[\"虚拟dom是react的核心机制之一\",{\"1\":{\"11\":1}}],[\"虚拟dom中包含了组件的状态和结构信息\",{\"1\":{\"11\":1}}],[\"虚拟dom\",{\"0\":{\"11\":1,\"128\":1},\"1\":{\"9\":2,\"11\":2,\"45\":1,\"128\":1}}],[\"记住\",{\"1\":{\"468\":1}}],[\"记录下来\",{\"1\":{\"333\":1}}],[\"记得在使用转换时\",{\"1\":{\"150\":1}}],[\"记得在设计自定义hooks时\",{\"1\":{\"42\":1}}],[\"记\",{\"1\":{\"52\":1}}],[\"记忆化技术通过缓存中间结果\",{\"1\":{\"52\":1}}],[\"记忆化技术是一种通用的优化技术\",{\"1\":{\"52\":1}}],[\"记忆化技术\",{\"1\":{\"52\":1}}],[\"新对象就可以继承原型对象的属性和方法\",{\"1\":{\"267\":1}}],[\"新特性示例\",{\"1\":{\"225\":1}}],[\"新特性包括语义化元素\",{\"1\":{\"225\":1}}],[\"新特性\",{\"0\":{\"225\":1}}],[\"新的摇树算法可以识别出更多的无用代码\",{\"1\":{\"497\":1}}],[\"新的state\",{\"1\":{\"437\":1}}],[\"新的文本内容\",{\"1\":{\"288\":1}}],[\"新的虚拟dom树会与之前的虚拟dom树进行比较和分析\",{\"1\":{\"128\":1}}],[\"新的虚拟dom算法\",{\"1\":{\"99\":1}}],[\"新的库和技术不断涌现\",{\"1\":{\"9\":1}}],[\"新函数使用闭包保存一个缓存对象cache\",{\"1\":{\"52\":1}}],[\"5改进了轮询的性能\",{\"1\":{\"497\":1}}],[\"5改进了错误处理和消息输出\",{\"1\":{\"497\":1}}],[\"5支持将\",{\"1\":{\"497\":1}}],[\"5还引入了其他一些新特性\",{\"1\":{\"497\":1}}],[\"5提供了自动的\",{\"1\":{\"497\":1}}],[\"5提供了更灵活和细粒度的缓存组配置\",{\"1\":{\"497\":1}}],[\"5提供了新的打包分析工具和优化建议\",{\"1\":{\"497\":1}}],[\"5提供了缓存和持久化缓存的支持\",{\"1\":{\"483\":1}}],[\"5引入了多种构建模式\",{\"1\":{\"497\":1}}],[\"5引入了模块联邦\",{\"1\":{\"497\":1}}],[\"5引入了持久化缓存\",{\"1\":{\"497\":1}}],[\"5引入了持久化缓存的支持\",{\"1\":{\"482\":1}}],[\"5通过多项优化来改进性能和打包体积\",{\"1\":{\"497\":1}}],[\"5通过引入持久化缓存和改进多线程构建策略来提高构建速度\",{\"1\":{\"497\":1}}],[\"5通过引入\",{\"1\":{\"497\":1}}],[\"5通过使用长效缓存\",{\"1\":{\"483\":1}}],[\"5的新特性和改进\",{\"0\":{\"497\":1}}],[\"5的核心概念\",{\"0\":{\"484\":1},\"1\":{\"492\":1}}],[\"5中\",{\"1\":{\"481\":1,\"483\":1}}],[\"5985\",{\"1\":{\"531\":1}}],[\"59\",{\"1\":{\"356\":2}}],[\"5xx\",{\"1\":{\"354\":1}}],[\"53981633974483\",{\"1\":{\"183\":1,\"330\":1}}],[\"5秒后开始过渡效果\",{\"1\":{\"151\":1}}],[\"5倍\",{\"1\":{\"150\":3}}],[\"5cm\",{\"1\":{\"145\":1}}],[\"5em\",{\"1\":{\"145\":1}}],[\"5px\",{\"1\":{\"144\":2}}],[\"503\",{\"1\":{\"354\":1}}],[\"500\",{\"1\":{\"352\":1,\"354\":1,\"365\":1,\"366\":1}}],[\"500px\",{\"1\":{\"150\":1}}],[\"50px\",{\"1\":{\"147\":1,\"150\":1}}],[\"50vh\",{\"1\":{\"145\":1}}],[\"50\",{\"1\":{\"134\":1,\"144\":2,\"145\":2,\"153\":1,\"183\":2,\"254\":1,\"278\":2,\"551\":1}}],[\"5s\",{\"1\":{\"98\":1,\"151\":1}}],[\"5\",{\"0\":{\"475\":1,\"489\":1,\"503\":1},\"1\":{\"52\":1,\"91\":1,\"114\":1,\"150\":3,\"169\":3,\"170\":10,\"172\":4,\"173\":2,\"183\":5,\"198\":1,\"200\":2,\"201\":2,\"202\":5,\"251\":1,\"254\":5,\"256\":1,\"257\":8,\"258\":5,\"260\":1,\"269\":1,\"273\":1,\"278\":3,\"290\":1,\"310\":4,\"311\":2,\"312\":1,\"313\":8,\"320\":1,\"323\":2,\"330\":1,\"384\":1,\"401\":1,\"462\":1,\"517\":1,\"526\":1,\"532\":1,\"545\":1,\"551\":5,\"552\":2,\"553\":4,\"560\":1,\"561\":1,\"562\":1,\"564\":2,\"567\":1,\"571\":2,\"590\":1}}],[\"yii\",{\"1\":{\"604\":2}}],[\"yield\",{\"1\":{\"186\":11,\"187\":15,\"197\":7,\"198\":12,\"323\":5,\"582\":2}}],[\"yaml等\",{\"1\":{\"454\":1}}],[\"yarn\",{\"1\":{\"375\":1,\"384\":1,\"427\":1}}],[\"york<\",{\"1\":{\"214\":1}}],[\"york\",{\"1\":{\"173\":2}}],[\"young\",{\"1\":{\"276\":1}}],[\"you\",{\"1\":{\"172\":2}}],[\"years\",{\"1\":{\"171\":2,\"172\":2,\"183\":6,\"312\":4,\"329\":2}}],[\"year\",{\"1\":{\"168\":1}}],[\"yellow\",{\"1\":{\"153\":2}}],[\"y修饰符\",{\"1\":{\"168\":1}}],[\"y\",{\"1\":{\"52\":2,\"158\":1,\"166\":13,\"168\":1,\"254\":18,\"266\":1,\"315\":2,\"316\":3,\"318\":7,\"329\":6,\"348\":1,\"475\":1,\"524\":2,\"525\":2,\"598\":1}}],[\"yup\",{\"1\":{\"32\":1}}],[\"xcode\",{\"1\":{\"372\":1}}],[\"xss攻击\",{\"1\":{\"602\":1}}],[\"xss\",{\"1\":{\"340\":1,\"349\":1,\"359\":1,\"580\":1,\"602\":1}}],[\"xhr\",{\"1\":{\"292\":2,\"345\":7,\"346\":7,\"347\":7,\"348\":7}}],[\"xx\",{\"1\":{\"167\":1}}],[\"xxhello\",{\"1\":{\"167\":1}}],[\"xxxxxxxxxx\",{\"1\":{\"278\":1}}],[\"xxx\",{\"1\":{\"86\":2,\"417\":1}}],[\"x\",{\"1\":{\"52\":2,\"114\":2,\"158\":1,\"165\":5,\"166\":13,\"167\":2,\"170\":4,\"251\":2,\"254\":36,\"266\":1,\"311\":3,\"315\":2,\"316\":3,\"318\":7,\"329\":6,\"462\":7,\"524\":1,\"525\":2}}],[\"xmldoc\",{\"1\":{\"538\":1}}],[\"xml数据\",{\"1\":{\"355\":1}}],[\"xmlhttprequest是原始的ajax实现方式\",{\"1\":{\"343\":1}}],[\"xmlhttprequest对象会触发onreadystatechange事件\",{\"1\":{\"341\":1}}],[\"xmlhttprequest\",{\"1\":{\"282\":5,\"341\":1,\"343\":1,\"345\":1,\"346\":1,\"347\":1,\"348\":1}}],[\"xml\",{\"1\":{\"13\":1,\"136\":1,\"140\":1,\"237\":1,\"340\":2,\"355\":1,\"367\":1}}],[\"降低资源消耗\",{\"1\":{\"138\":1}}],[\"降低初始加载时间\",{\"1\":{\"51\":1}}],[\"降低组件的可复用性\",{\"1\":{\"37\":1}}],[\"减小文件大小\",{\"1\":{\"504\":1}}],[\"减小文件体积\",{\"1\":{\"496\":1,\"504\":1}}],[\"减小文件体积并提高加载速度\",{\"1\":{\"480\":1}}],[\"减小最终打包文件的体积\",{\"1\":{\"462\":1}}],[\"减小初始加载的体积\",{\"1\":{\"51\":1}}],[\"减法运算符\",{\"1\":{\"254\":2,\"551\":1}}],[\"减法\",{\"1\":{\"254\":1}}],[\"减轻服务器负载\",{\"1\":{\"55\":1}}],[\"减少额外的加载时间\",{\"1\":{\"504\":1}}],[\"减少额外的工具和库\",{\"1\":{\"504\":1}}],[\"减少服务器请求和网络传输\",{\"1\":{\"504\":1}}],[\"减少服务器的请求和数据传输\",{\"1\":{\"55\":1}}],[\"减少网络请求和带宽消耗\",{\"1\":{\"465\":1}}],[\"减少网络请求和资源的使用\",{\"1\":{\"51\":1}}],[\"减少初始加载时间\",{\"1\":{\"467\":1}}],[\"减少初始加载时的文件体积\",{\"1\":{\"453\":1,\"458\":1}}],[\"减少初始加载时的资源消耗\",{\"1\":{\"397\":1}}],[\"减少初始加载的文件体积\",{\"1\":{\"458\":1}}],[\"减少第三方库的重复加载\",{\"1\":{\"458\":1}}],[\"减少不必要的代码下载和解析\",{\"1\":{\"462\":1}}],[\"减少不必要的状态管理\",{\"1\":{\"407\":1}}],[\"减少不必要的数据传输和加载时间\",{\"1\":{\"55\":1}}],[\"减少连接建立和关闭的开销\",{\"1\":{\"358\":1}}],[\"减少带宽占用\",{\"1\":{\"342\":1}}],[\"减少代码的冗余并增加代码的可读性\",{\"1\":{\"320\":1}}],[\"减少代码间的依赖性\",{\"1\":{\"56\":1}}],[\"减少局部变量的使用\",{\"1\":{\"277\":1}}],[\"减少嵌套函数调用的层级\",{\"1\":{\"277\":1}}],[\"减少对数据库的频繁访问\",{\"1\":{\"138\":1}}],[\"减少重复编写类似算法的工作\",{\"1\":{\"466\":1}}],[\"减少重复开发的工作量\",{\"1\":{\"56\":1}}],[\"减少重复的数据请求和服务器的负载\",{\"1\":{\"55\":1}}],[\"减少请求的延迟\",{\"1\":{\"55\":1}}],[\"减少请求次数\",{\"1\":{\"55\":2}}],[\"减少图片的质量损失\",{\"1\":{\"54\":1}}],[\"减少dom操作和渲染开销\",{\"1\":{\"53\":1}}],[\"减少组件的渲染次数是优化性能的关键之一\",{\"1\":{\"49\":1}}],[\"减少渲染次数\",{\"0\":{\"49\":1}}],[\"减少页面的闪烁和卡顿\",{\"1\":{\"45\":1}}],[\"减少了在开发模式下的轮询次数\",{\"1\":{\"497\":1}}],[\"减少了模板代码的复杂性\",{\"1\":{\"426\":1}}],[\"减少了连接建立和关闭的开销\",{\"1\":{\"358\":1}}],[\"减少了对服务器的请求次数和数据传输量\",{\"1\":{\"342\":1}}],[\"减少了对服务器端验证的依赖\",{\"1\":{\"217\":1}}],[\"减少了对实际dom的操作次数\",{\"1\":{\"8\":1,\"9\":1}}],[\"减少了页面重绘的次数\",{\"1\":{\"9\":1}}],[\"减少了出错的可能性\",{\"1\":{\"9\":1}}],[\"懒加载是一种延迟加载模块的技术\",{\"1\":{\"494\":1}}],[\"懒加载是一种延迟加载技术\",{\"1\":{\"51\":1}}],[\"懒加载或大量数据的场景中非常有用\",{\"1\":{\"186\":1}}],[\"懒加载和使用css精灵图或矢量图等方法\",{\"1\":{\"54\":1}}],[\"懒加载和按需加载都是优化前端性能的重要手段\",{\"1\":{\"51\":1}}],[\"懒加载和按需加载\",{\"0\":{\"51\":1}}],[\"懒加载组件\",{\"1\":{\"51\":1}}],[\"懒加载通常用于加速初始页面加载\",{\"1\":{\"51\":1}}],[\"懒加载\",{\"0\":{\"494\":1},\"1\":{\"51\":2}}],[\"都是用来定义规范和共享代码的机制\",{\"1\":{\"591\":1}}],[\"都声明了一个由数字组成的数组\",{\"1\":{\"310\":1}}],[\"都有对应的值\",{\"1\":{\"259\":1}}],[\"都会被推入堆栈中\",{\"1\":{\"277\":1}}],[\"都会增加count的值\",{\"1\":{\"258\":1}}],[\"都会执行该回调函数\",{\"1\":{\"193\":1}}],[\"都能够访问和使用网页\",{\"1\":{\"246\":1}}],[\"都完成时\",{\"1\":{\"193\":1}}],[\"都可以根据自己的需求和编程风格来选择最适合的方式\",{\"1\":{\"511\":1}}],[\"都可以从\",{\"1\":{\"363\":1}}],[\"都可以从mysql的强大功能和丰富生态系统中受益\",{\"1\":{\"131\":1}}],[\"都可以胜任\",{\"1\":{\"60\":1}}],[\"都可以在异步请求成功后更新组件的状态\",{\"1\":{\"50\":1}}],[\"都必须实现一个render方法来返回组件的结构和内容\",{\"1\":{\"21\":1}}],[\"删除语句\",{\"1\":{\"600\":1}}],[\"删除文件\",{\"1\":{\"597\":1}}],[\"删除不必要的代码\",{\"1\":{\"504\":1}}],[\"删除指定的资源\",{\"1\":{\"352\":1}}],[\"删除远程分支\",{\"1\":{\"336\":1}}],[\"删除远程仓库等\",{\"1\":{\"334\":1}}],[\"删除分支\",{\"1\":{\"335\":1}}],[\"删除数组的第一个元素\",{\"1\":{\"257\":1}}],[\"删除数组的最后一个元素\",{\"1\":{\"257\":1}}],[\"删除数据\",{\"1\":{\"134\":1}}],[\"删除数据库\",{\"1\":{\"133\":1}}],[\"删除字符串结尾的空格\",{\"1\":{\"167\":1}}],[\"删除字符串开头的空格\",{\"1\":{\"167\":1}}],[\"删除线等\",{\"1\":{\"144\":1}}],[\"删除表\",{\"1\":{\"134\":1}}],[\"删除\",{\"1\":{\"120\":1,\"129\":1,\"177\":1,\"257\":1}}],[\"删除或添加新属性\",{\"1\":{\"171\":1}}],[\"删除或替换模块\",{\"1\":{\"56\":1}}],[\"删除或排序等操作时\",{\"1\":{\"46\":1}}],[\"删除和查找等操作上提供更好的性能\",{\"1\":{\"49\":1}}],[\"优雅的语法和丰富的功能\",{\"1\":{\"604\":1}}],[\"优秀\",{\"1\":{\"556\":1}}],[\"优化图片\",{\"1\":{\"504\":1}}],[\"优化\",{\"0\":{\"496\":1}}],[\"优化和缓存等操作\",{\"1\":{\"489\":1}}],[\"优化配置是提高项目性能和打包效率的关键\",{\"1\":{\"469\":1}}],[\"优化配置\",{\"0\":{\"469\":1},\"1\":{\"454\":1}}],[\"优化等设置\",{\"1\":{\"454\":1}}],[\"优化用户界面和减少带宽占用等\",{\"1\":{\"342\":1}}],[\"优化用户界面\",{\"1\":{\"342\":1}}],[\"优化查询语句\",{\"1\":{\"138\":1}}],[\"优化数据库配置\",{\"1\":{\"138\":1}}],[\"优化数据库设计\",{\"1\":{\"138\":1}}],[\"优化数据请求等方法\",{\"1\":{\"55\":1}}],[\"优化重绘和回流等方式\",{\"1\":{\"128\":1}}],[\"优化渲染次数并非一成不变的规则\",{\"1\":{\"49\":1}}],[\"优化组件的渲染可以通过选择合适的数据结构来避免不必要的渲染\",{\"1\":{\"49\":1}}],[\"优点\",{\"0\":{\"342\":1},\"1\":{\"9\":1}}],[\"手写深拷贝\",{\"1\":{\"281\":1}}],[\"手动使用webpack提供的import\",{\"1\":{\"480\":1}}],[\"手动断开它们的引用\",{\"1\":{\"276\":1}}],[\"手动优化的好处是可以精确地控制组件的重新渲染\",{\"1\":{\"48\":1}}],[\"手指离开屏幕事件\",{\"1\":{\"28\":1}}],[\"手指在屏幕上滑动事件\",{\"1\":{\"28\":1}}],[\"手指触摸屏幕事件\",{\"1\":{\"28\":1}}],[\"则$value被赋值为$default\",{\"1\":{\"604\":1}}],[\"则$value被赋值为$x的值\",{\"1\":{\"604\":1}}],[\"则会导致解析错误\",{\"1\":{\"569\":1}}],[\"则npm也已成功安装\",{\"1\":{\"507\":1}}],[\"则表示该路由需要重定向到指定路径\",{\"1\":{\"418\":1}}],[\"则表示路径是一个模块名称\",{\"1\":{\"328\":2}}],[\"则可以将接收到的json数据解析成php可用的形式\",{\"1\":{\"604\":1}}],[\"则可以将多个reducers组合为一个根reducer\",{\"1\":{\"402\":1}}],[\"则可以直接从本地缓存中获取资源\",{\"1\":{\"356\":1}}],[\"则reducer会返回当前的状态对象\",{\"1\":{\"401\":1}}],[\"则是基于用户的身份认证信息\",{\"1\":{\"370\":1}}],[\"则是处理请求的回调函数\",{\"1\":{\"365\":1}}],[\"则生成一个用于加密通信的随机对称密钥\",{\"1\":{\"359\":1}}],[\"则它们会被合并成一个函数\",{\"1\":{\"329\":1}}],[\"则它们会合并成一个联合类\",{\"1\":{\"329\":1}}],[\"则它们的内容会合并到一个命名空间中\",{\"1\":{\"329\":1}}],[\"则这些接口会自动合并成一个新的接口\",{\"1\":{\"329\":1}}],[\"则提供了更强大的功能\",{\"1\":{\"326\":1}}],[\"则在内部作用域中该变量会覆盖外部作用域中的同名变量\",{\"1\":{\"311\":1}}],[\"则通常表示变量尚未初始化\",{\"1\":{\"310\":1}}],[\"则创建一个新字段\",{\"1\":{\"282\":1}}],[\"则创建一个新的空对象\",{\"1\":{\"281\":1}}],[\"则创建一个新的空数组\",{\"1\":{\"281\":1}}],[\"则直接返回\",{\"1\":{\"281\":1}}],[\"则直接返回原始值\",{\"1\":{\"102\":1}}],[\"则负责订阅感兴趣的事件\",{\"1\":{\"272\":1}}],[\"则将查找转移到上一级作用域\",{\"1\":{\"261\":1}}],[\"则返回已存在的symbol\",{\"1\":{\"174\":1}}],[\"则计算属性将使用缓存的值\",{\"1\":{\"107\":1}}],[\"则后面的样式对象会覆盖前面的样式对象中的属性值\",{\"1\":{\"85\":1}}],[\"则添加\",{\"1\":{\"82\":2}}],[\"则不会添加任何类名\",{\"1\":{\"82\":2}}],[\"则不会添加任何类\",{\"1\":{\"82\":1}}],[\"则使用\",{\"1\":{\"70\":2}}],[\"则什么也不做\",{\"1\":{\"70\":1}}],[\"则组件会继续执行后续的生命周期方法\",{\"1\":{\"48\":1}}],[\"则组件不会重新渲染\",{\"1\":{\"48\":1}}],[\"则阻止组件重新渲染\",{\"1\":{\"47\":1}}],[\"默认是全局变量\",{\"1\":{\"520\":1}}],[\"默认是大小写敏感的\",{\"1\":{\"519\":1}}],[\"默认是升序排序\",{\"1\":{\"135\":1}}],[\"默认为8080\",{\"1\":{\"461\":1}}],[\"默认为window\",{\"1\":{\"439\":1}}],[\"默认视图\",{\"1\":{\"417\":3}}],[\"默认使用的模块解析策略\",{\"1\":{\"328\":1}}],[\"默认导入\",{\"1\":{\"327\":1}}],[\"默认导出\",{\"1\":{\"327\":1}}],[\"默认导出和导入\",{\"1\":{\"202\":1}}],[\"默认的访问修饰符\",{\"1\":{\"312\":1}}],[\"默认的浅层比较可能会导致误判\",{\"1\":{\"48\":1}}],[\"默认按照字符串排序\",{\"1\":{\"257\":1}}],[\"默认实现了迭代器协议\",{\"1\":{\"185\":1}}],[\"默认参数\",{\"1\":{\"172\":1,\"258\":1}}],[\"默认值生效\",{\"1\":{\"166\":1}}],[\"默认值\",{\"1\":{\"151\":1,\"158\":2}}],[\"默认情况下会自动解析\",{\"1\":{\"460\":1}}],[\"默认情况下从\",{\"1\":{\"310\":1}}],[\"默认情况下\",{\"1\":{\"48\":1,\"146\":1,\"200\":1,\"267\":1,\"310\":1,\"314\":1,\"328\":1,\"439\":1,\"482\":1}}],[\"默认返回true\",{\"1\":{\"22\":1}}],[\"比较\",{\"0\":{\"541\":1},\"1\":{\"540\":2}}],[\"比较常用的中间件有redux\",{\"1\":{\"407\":1}}],[\"比较运算符\",{\"0\":{\"553\":1},\"1\":{\"254\":1}}],[\"比较当前和下一个props以及state的值\",{\"1\":{\"48\":1}}],[\"比较当前和下一个props的某些属性\",{\"1\":{\"48\":1}}],[\"比如输入验证\",{\"1\":{\"602\":1}}],[\"比如检查文件类型\",{\"1\":{\"581\":1}}],[\"比如事件处理\",{\"1\":{\"539\":1}}],[\"比如常用大写的\",{\"1\":{\"528\":1}}],[\"比如模块不存在\",{\"1\":{\"467\":1}}],[\"比如vue的eventbus\",{\"1\":{\"444\":1}}],[\"比如请求数据\",{\"1\":{\"407\":1}}],[\"比如更新用户界面\",{\"1\":{\"401\":1}}],[\"比如处理网络请求等\",{\"1\":{\"401\":1}}],[\"比如字符串\",{\"1\":{\"401\":1}}],[\"比如可以是\",{\"1\":{\"401\":1}}],[\"比如用户信息\",{\"1\":{\"401\":1}}],[\"比如子路由的第一个路径是\",{\"1\":{\"392\":1}}],[\"比如跨站脚本攻击\",{\"1\":{\"349\":1}}],[\"比如获取和显示数据\",{\"1\":{\"340\":1}}],[\"比如添加或删除数据\",{\"1\":{\"401\":2}}],[\"比如添加远程仓库\",{\"1\":{\"334\":1}}],[\"比如添加条件渲染\",{\"1\":{\"23\":1}}],[\"比如以下情况\",{\"1\":{\"310\":1}}],[\"比如网络请求\",{\"1\":{\"264\":1}}],[\"比如点击\",{\"1\":{\"263\":1}}],[\"比如数组\",{\"1\":{\"193\":2}}],[\"比如发送网络请求\",{\"1\":{\"192\":1}}],[\"比如父级元素\",{\"1\":{\"147\":2}}],[\"比如计算机科学中的树数据结构\",{\"1\":{\"129\":1}}],[\"比如id属性\",{\"1\":{\"46\":1}}],[\"比如执行订阅\",{\"1\":{\"41\":1}}],[\"比如\",{\"1\":{\"23\":1,\"70\":1,\"148\":1,\"331\":1,\"356\":1}}],[\"比如取消订阅或清除计时器\",{\"1\":{\"22\":1}}],[\"比如unsafe\",{\"1\":{\"22\":1}}],[\"其返回值类型可能是不确定的\",{\"1\":{\"310\":1}}],[\"其值为\",{\"1\":{\"251\":1}}],[\"其值在声明后就不可修改\",{\"1\":{\"165\":1}}],[\"其对数据库的更改将永久保存\",{\"1\":{\"137\":1}}],[\"其他类可以继承抽象类\",{\"1\":{\"591\":1}}],[\"其他类和子类都不可以访问\",{\"1\":{\"312\":1}}],[\"其他日子\",{\"1\":{\"557\":1}}],[\"其他常用命令\",{\"1\":{\"510\":1}}],[\"其他常见属性\",{\"1\":{\"144\":1}}],[\"其他选项\",{\"1\":{\"439\":1}}],[\"其他配置选项\",{\"1\":{\"482\":1,\"483\":1}}],[\"其他配置\",{\"1\":{\"439\":2,\"456\":1,\"476\":2,\"479\":3}}],[\"其他配置项\",{\"1\":{\"429\":1,\"430\":1,\"431\":1,\"432\":1,\"433\":1}}],[\"其他模块无法直接访问\",{\"1\":{\"434\":1}}],[\"其他路由配置\",{\"1\":{\"417\":2}}],[\"其他处理逻辑\",{\"1\":{\"365\":1,\"368\":1}}],[\"其他处理操作\",{\"1\":{\"313\":1}}],[\"其他人可以通过安装库和声明文件来在\",{\"1\":{\"325\":1}}],[\"其他值转换为true\",{\"1\":{\"252\":1}}],[\"其他组件则会被正常销毁和重新创建\",{\"1\":{\"126\":1}}],[\"其他生命周期方法\",{\"1\":{\"48\":1}}],[\"其它组件的\",{\"1\":{\"90\":1}}],[\"其中包括对构建速度和内存利用的优化\",{\"1\":{\"497\":1}}],[\"其中包含项目的相关信息和依赖管理\",{\"1\":{\"510\":1}}],[\"其中包含了四个枚举成员\",{\"1\":{\"314\":1}}],[\"其中包含了四个常量\",{\"1\":{\"310\":1}}],[\"其中包含了一些性能分析功能\",{\"1\":{\"58\":1}}],[\"其中包含三个元素\",{\"1\":{\"310\":1}}],[\"其中包含与正则表达式匹配的所有子字符串\",{\"1\":{\"256\":1}}],[\"其中包含用户的姓名和年龄\",{\"1\":{\"92\":1}}],[\"其中包含有关触发事件的详细信息\",{\"1\":{\"25\":1}}],[\"其中包含一个<h1>标签\",{\"1\":{\"16\":1}}],[\"其中counter属性的值减1\",{\"1\":{\"401\":1}}],[\"其中counter属性的值加1\",{\"1\":{\"401\":1}}],[\"其中一个重要的改变是路由过渡的处理方式\",{\"1\":{\"395\":1}}],[\"其中一些包括\",{\"1\":{\"272\":1}}],[\"其中的\",{\"1\":{\"391\":1}}],[\"其中的值类型不受\",{\"1\":{\"310\":1}}],[\"其中栈没有足够的空间来处理函数调用\",{\"1\":{\"274\":1}}],[\"其中每个键\",{\"1\":{\"259\":1}}],[\"其中每个键和值都可以是任意类型\",{\"1\":{\"177\":1}}],[\"其中value属性表示当前迭代的值\",{\"1\":{\"184\":1}}],[\"其中数据库服务器\",{\"1\":{\"131\":1}}],[\"其中\",{\"1\":{\"70\":2,\"82\":1,\"168\":1,\"188\":1,\"272\":1,\"311\":1,\"398\":1,\"414\":1,\"415\":1,\"583\":1,\"603\":1}}],[\"其功能覆盖了大部分前端开发常见的需求\",{\"1\":{\"61\":1}}],[\"确定要离开此页面吗\",{\"1\":{\"387\":1}}],[\"确定api的目的和功能\",{\"1\":{\"371\":1}}],[\"确定其是否适合特定的组件以及是否能够带来明显的性能提升\",{\"1\":{\"47\":1}}],[\"确认项目构建成功\",{\"1\":{\"475\":1}}],[\"确认\",{\"1\":{\"361\":1}}],[\"确认收到\",{\"1\":{\"361\":3}}],[\"确保请求来源是合法的\",{\"1\":{\"602\":1}}],[\"确保一个类只有一个实例\",{\"1\":{\"592\":1}}],[\"确保对用户输入进行适当的验证\",{\"1\":{\"580\":1}}],[\"确保文件变化时名称也会变化\",{\"1\":{\"504\":1}}],[\"确保正确地配置和使用它们\",{\"1\":{\"502\":1}}],[\"确保每次文件内容发生更改时\",{\"1\":{\"495\":1}}],[\"确保配置中的mode为production\",{\"1\":{\"469\":1}}],[\"确保你的项目中使用了支持es6模块规范和动态导入的javascript环境\",{\"1\":{\"467\":1}}],[\"确保你已经安装了vue和vuex\",{\"1\":{\"440\":1}}],[\"确保你已经安装了\",{\"1\":{\"384\":1}}],[\"确保你已经安装了node\",{\"1\":{\"5\":1}}],[\"确保提取的代码确实会被多个地方使用\",{\"1\":{\"466\":1}}],[\"确保已经安装了vuex和typescript的相关依赖\",{\"1\":{\"444\":1}}],[\"确保以下代码被添加到vuex\",{\"1\":{\"438\":1}}],[\"确保以下代码被添加到vue实例的配置中\",{\"1\":{\"438\":1}}],[\"确保不同模块之间的状态和操作不会相互干扰\",{\"1\":{\"434\":1}}],[\"确保它们的正确性和可靠性\",{\"1\":{\"407\":1}}],[\"确保reducer的实现是纯函数\",{\"1\":{\"407\":1}}],[\"确保状态能够被统一管理\",{\"1\":{\"407\":1}}],[\"确保api的正确功能和性能\",{\"1\":{\"371\":1}}],[\"确保其具有执行所请求操作的权限\",{\"1\":{\"371\":1}}],[\"确保您的计算机上已安装\",{\"1\":{\"364\":1}}],[\"确保连接到的是可信任的服务器\",{\"1\":{\"359\":1}}],[\"确保客户端连接到的是真实的服务器\",{\"1\":{\"359\":1}}],[\"确保数据在网络中的传输过程中不易被窃取和篡改\",{\"1\":{\"359\":1}}],[\"确保数据的安全性和一致性\",{\"1\":{\"312\":1}}],[\"确保数据的完整性和一致性\",{\"1\":{\"131\":1}}],[\"确保了解其影响并备份重要数据\",{\"1\":{\"338\":1}}],[\"确保特性的运行顺序符合你的预期\",{\"1\":{\"330\":1}}],[\"确保\",{\"1\":{\"312\":1}}],[\"确保使用完毕后及时释放相关资源\",{\"1\":{\"276\":1}}],[\"确保及时释放不再需要的资源\",{\"1\":{\"275\":1}}],[\"确保在不再需要定时器时及时取消或停止定时器的执行\",{\"1\":{\"260\":1}}],[\"确保在重新渲染时能够正确地复用和更新元素\",{\"1\":{\"70\":1}}],[\"确保真正需要进行优化并能够带来明显的性能提升\",{\"1\":{\"48\":1}}],[\"确保逻辑判断是准确的和高效的\",{\"1\":{\"48\":1}}],[\"确保key属性的值在同一个列表内是唯一的\",{\"1\":{\"46\":1}}],[\"确保为每个元素提供一个稳定的\",{\"1\":{\"46\":1}}],[\"省略其他方法\",{\"1\":{\"47\":1}}],[\"适配器模式\",{\"1\":{\"592\":1}}],[\"适合初学者入门\",{\"1\":{\"513\":1}}],[\"适合构建各种规模的\",{\"1\":{\"363\":1}}],[\"适合编写复杂的有状态组件\",{\"1\":{\"18\":1}}],[\"适合编写简单的无状态组件\",{\"1\":{\"18\":1}}],[\"适用于开发大型企业级应用程序\",{\"1\":{\"604\":1}}],[\"适用于那些对速度和简单性有要求的项目\",{\"1\":{\"604\":1}}],[\"适用于web开发\",{\"1\":{\"513\":1}}],[\"适用于大型应用程序\",{\"1\":{\"404\":1}}],[\"适用于大多数简单的展示性组件\",{\"1\":{\"47\":1}}],[\"适用于各种操作系统和开发环境\",{\"1\":{\"333\":1}}],[\"适用于\",{\"1\":{\"328\":1}}],[\"适用于只有一个表达式的函数体\",{\"1\":{\"313\":1}}],[\"适用于离线应用\",{\"1\":{\"236\":1}}],[\"适用于在node\",{\"1\":{\"200\":1}}],[\"适用于服务器端\",{\"1\":{\"200\":1}}],[\"适用于一些需要控制异步操作生命周期的场景\",{\"1\":{\"198\":1}}],[\"适用于构建各种类型的网站和应用程序\",{\"1\":{\"160\":1}}],[\"适用于打印预览和打印\",{\"1\":{\"157\":1}}],[\"适用于计算机屏幕\",{\"1\":{\"157\":1}}],[\"适用于所有媒体设备\",{\"1\":{\"157\":1}}],[\"适用于响应式设计和不同设备上的布局需求\",{\"1\":{\"156\":1}}],[\"适用于展示简单的图像和含有透明背景的图像\",{\"1\":{\"54\":1}}],[\"适用于展示照片和复杂的图像\",{\"1\":{\"54\":1}}],[\"适用于类组件\",{\"1\":{\"50\":1}}],[\"适用于函数式组件\",{\"1\":{\"47\":1,\"50\":1}}],[\"导航到about路由\",{\"1\":{\"417\":1}}],[\"导航到home路由\",{\"1\":{\"417\":1}}],[\"导航到新页面\",{\"1\":{\"393\":1}}],[\"导航到要创建项目的目录\",{\"1\":{\"88\":1}}],[\"导出的对象包含了各种webpack配置选项\",{\"1\":{\"454\":1}}],[\"导出方式二\",{\"1\":{\"327\":1}}],[\"导出方式一\",{\"1\":{\"327\":1}}],[\"导出模块中需要对外暴露的成员\",{\"1\":{\"327\":1}}],[\"导出模块内容\",{\"1\":{\"200\":1,\"201\":1}}],[\"导出命名空间\",{\"1\":{\"326\":1}}],[\"导入辅助函数\",{\"1\":{\"430\":1,\"431\":1}}],[\"导入子组件\",{\"1\":{\"415\":1}}],[\"导入方式\",{\"1\":{\"467\":1}}],[\"导入方式二\",{\"1\":{\"327\":1}}],[\"导入方式一\",{\"1\":{\"327\":1}}],[\"导入和导出等\",{\"1\":{\"326\":1}}],[\"导入和导出模块的内容\",{\"1\":{\"200\":1,\"201\":1}}],[\"导入的模块指向原始的引用\",{\"1\":{\"203\":1}}],[\"导入时会立即执行initialize\",{\"1\":{\"202\":1}}],[\"导入并执行模块\",{\"1\":{\"202\":1}}],[\"导入整个模块\",{\"1\":{\"202\":1}}],[\"导入模块内容\",{\"1\":{\"200\":1,\"201\":1}}],[\"导入react库\",{\"1\":{\"16\":1}}],[\"导致其他请求无法处理\",{\"1\":{\"358\":1}}],[\"导致潜在的类型错误无法被发现\",{\"1\":{\"310\":1}}],[\"导致无限递归调用\",{\"1\":{\"277\":1}}],[\"导致堆栈内存溢出的情况\",{\"1\":{\"277\":1}}],[\"导致堆栈溢出错误\",{\"1\":{\"269\":1}}],[\"导致栈溢出的错误\",{\"1\":{\"274\":1}}],[\"导致该内存无法被垃圾回收机制回收释放的情况\",{\"1\":{\"274\":1,\"275\":1}}],[\"导致错误地映射到不同的元素上\",{\"1\":{\"70\":1}}],[\"导致react重新创建和渲染这个元素\",{\"1\":{\"46\":1}}],[\"简单来说\",{\"1\":{\"590\":1}}],[\"简单易学\",{\"1\":{\"513\":1}}],[\"简单易用\",{\"1\":{\"200\":1,\"363\":1}}],[\"简洁和易于理解\",{\"1\":{\"190\":1}}],[\"简写属性\",{\"1\":{\"144\":2}}],[\"简介\",{\"0\":{\"131\":1,\"163\":1,\"333\":1,\"340\":1,\"351\":1,\"363\":1,\"506\":1}}],[\"简称js\",{\"1\":{\"248\":1}}],[\"简称\",{\"1\":{\"117\":1,\"583\":1}}],[\"简称hoc\",{\"1\":{\"23\":1}}],[\"简化了路由\",{\"1\":{\"512\":1}}],[\"简化了\",{\"1\":{\"506\":1}}],[\"简化了处理默认参数的逻辑\",{\"1\":{\"172\":1}}],[\"简化调试步骤\",{\"1\":{\"89\":1}}],[\"简化开发\",{\"1\":{\"45\":1,\"128\":1}}],[\"为前缀\",{\"1\":{\"531\":1}}],[\"为什么需要模块化\",{\"0\":{\"434\":1}}],[\"为什么要加\",{\"1\":{\"70\":1}}],[\"为redux的action创建常量\",{\"1\":{\"407\":1}}],[\"为后缀名\",{\"1\":{\"325\":1}}],[\"为\",{\"1\":{\"316\":10,\"525\":4}}],[\"为字段定义名称\",{\"1\":{\"216\":1}}],[\"为字段定义唯一标识符\",{\"1\":{\"216\":1}}],[\"为元素指定样式信息\",{\"1\":{\"211\":1}}],[\"为元素指定一个或多个样式类\",{\"1\":{\"211\":1}}],[\"为元素指定唯一的标识符\",{\"1\":{\"211\":1}}],[\"为了提高网站的性能\",{\"1\":{\"601\":1}}],[\"为了安全性和防止sql注入攻击\",{\"1\":{\"600\":1}}],[\"为了利用浏览器缓存\",{\"1\":{\"469\":1}}],[\"为了能够在组件中使用vuex\",{\"1\":{\"441\":1}}],[\"为了保护用户的隐私\",{\"1\":{\"357\":1}}],[\"为了保证传输的安全性\",{\"1\":{\"352\":1}}],[\"为了避免内存泄漏\",{\"1\":{\"275\":1}}],[\"为了避免这种情况\",{\"1\":{\"43\":1,\"330\":1}}],[\"为了解决这个问题\",{\"1\":{\"264\":1,\"351\":1,\"358\":1}}],[\"为了获取位置信息\",{\"1\":{\"229\":1}}],[\"为了在文本中显示这些字符\",{\"1\":{\"213\":1}}],[\"为了改变盒模型的类型\",{\"1\":{\"146\":1}}],[\"为了实现事务的特性\",{\"1\":{\"137\":1}}],[\"为真\",{\"1\":{\"82\":2}}],[\"为真时\",{\"1\":{\"82\":6}}],[\"为v\",{\"1\":{\"70\":1}}],[\"为开发人员提供了更多的选择和便利\",{\"1\":{\"9\":1}}],[\"也提供了更大的灵活性和扩展性\",{\"1\":{\"583\":1}}],[\"也比较类型\",{\"1\":{\"540\":1}}],[\"也为开发者提供了一个开放的生态系统\",{\"1\":{\"464\":1}}],[\"也会按照一定规则去查找和加载声明文件\",{\"1\":{\"328\":1}}],[\"也会造成堆栈溢出\",{\"1\":{\"277\":1}}],[\"也会被改变\",{\"1\":{\"90\":1}}],[\"也不以点\",{\"1\":{\"328\":2}}],[\"也不会忽略字符串开头的空格\",{\"1\":{\"169\":1}}],[\"也不能在循环语句中使用\",{\"1\":{\"43\":1}}],[\"也称为模块或库\",{\"1\":{\"510\":1}}],[\"也称为静态作用域\",{\"1\":{\"280\":1}}],[\"也称为自动类型转换或强制类型转换\",{\"1\":{\"252\":1}}],[\"也称为强制类型转换\",{\"1\":{\"252\":1}}],[\"也称为扩展操作符\",{\"1\":{\"172\":1}}],[\"也称为dotall修饰符\",{\"1\":{\"168\":1}}],[\"也称为怪异盒模型\",{\"1\":{\"146\":1}}],[\"也就是所谓的dom操作的指令\",{\"1\":{\"128\":1}}],[\"也就是\",{\"1\":{\"125\":2}}],[\"也就是说多次相同的get请求应该返回相同的结果\",{\"1\":{\"353\":1}}],[\"也就是说\",{\"1\":{\"108\":1,\"401\":1}}],[\"也已经被更新\",{\"1\":{\"114\":1}}],[\"也是解决问题的好途径\",{\"1\":{\"503\":1}}],[\"也是一种类型\",{\"1\":{\"310\":1}}],[\"也是一个生态\",{\"1\":{\"61\":1}}],[\"也是惰性的\",{\"1\":{\"70\":1}}],[\"也是模型\",{\"1\":{\"62\":1}}],[\"也可以用\",{\"1\":{\"528\":1}}],[\"也可以用作类型注解表示任意对象类型\",{\"1\":{\"310\":1}}],[\"也可以直接用来更新全局变量\",{\"1\":{\"524\":1}}],[\"也可以不使用括号\",{\"1\":{\"515\":1}}],[\"也可以加上括号\",{\"1\":{\"515\":1}}],[\"也可以通过其他选项配置加载器的行为\",{\"1\":{\"455\":1}}],[\"也可以通过值获取对应的名称\",{\"1\":{\"314\":2}}],[\"也可以根据实际情况动态调整和优化模块划分\",{\"1\":{\"435\":1}}],[\"也可以对修改进行一些限制或逻辑处理\",{\"1\":{\"431\":1}}],[\"也可以放在特定的子目录中\",{\"1\":{\"334\":1}}],[\"也可以包含抽象方法\",{\"1\":{\"591\":1}}],[\"也可以包含一些常用的属性和方法\",{\"1\":{\"267\":1}}],[\"也可以包含普通的javascript函数\",{\"1\":{\"42\":1}}],[\"也可以从其他变量中获取值赋给新变量\",{\"1\":{\"249\":1}}],[\"也可以设置默认值\",{\"1\":{\"166\":1}}],[\"也可以使用简化的语法来创建关联数组\",{\"1\":{\"574\":1}}],[\"也可以使用简化的语法来创建索引数组\",{\"1\":{\"573\":1}}],[\"也可以使用贝塞尔曲线函数来自定义速度曲线\",{\"1\":{\"151\":1}}],[\"也可以使用其他属性来进一步扩展效果\",{\"1\":{\"150\":1}}],[\"也可以参考css的3d转换方法来实现立体效果的转换动画\",{\"1\":{\"150\":1}}],[\"也可以选择是否将mysql服务器配置为系统服务\",{\"1\":{\"132\":1}}],[\"也可以在后续的代码中给变量赋值\",{\"1\":{\"311\":1}}],[\"也可以在组件内部进行局部注册\",{\"1\":{\"97\":1}}],[\"也可以在命令行上使用\",{\"1\":{\"58\":1}}],[\"也可以是一个描述目标位置的对象\",{\"1\":{\"416\":1}}],[\"也可以是一个非\",{\"1\":{\"196\":1}}],[\"也可以是一个函数等\",{\"1\":{\"42\":1}}],[\"也可以是多种颜色之间的过渡\",{\"1\":{\"153\":1}}],[\"也可以是数组\",{\"1\":{\"81\":1,\"84\":1}}],[\"也可以减小文件大小\",{\"1\":{\"54\":1}}],[\"也可以自行编写代码进行分页逻辑实现\",{\"1\":{\"53\":1}}],[\"按需导入和分割模块\",{\"1\":{\"443\":1}}],[\"按需加载是一种将代码分割成不同块并在需要时动态加载的技术\",{\"1\":{\"51\":1}}],[\"按需加载\",{\"1\":{\"51\":1}}],[\"按独立可复用性划分\",{\"1\":{\"435\":1}}],[\"按页面或组件划分\",{\"1\":{\"435\":1}}],[\"按业务领域划分\",{\"1\":{\"435\":1}}],[\"按功能划分\",{\"1\":{\"435\":1}}],[\"按键按下等\",{\"1\":{\"263\":1}}],[\"按钮时\",{\"1\":{\"420\":1}}],[\"按钮会发送一个ajax请求到https\",{\"1\":{\"348\":1}}],[\"按钮会调用getdata\",{\"1\":{\"345\":1}}],[\"按钮等\",{\"1\":{\"216\":1}}],[\"按钮即可生成性能评估报告\",{\"1\":{\"58\":1}}],[\"按照功能将相关的状态\",{\"1\":{\"435\":1}}],[\"按照url的语法规则进行解析\",{\"1\":{\"360\":1}}],[\"按照安装向导的指示进行操作\",{\"1\":{\"132\":1}}],[\"按照react官方的规范\",{\"1\":{\"43\":1}}],[\"按下的键的值\",{\"1\":{\"27\":1}}],[\"按下的按键\",{\"1\":{\"27\":1}}],[\"按下的按键等\",{\"1\":{\"25\":1}}],[\"开源社区\",{\"1\":{\"513\":1}}],[\"开启了html5\",{\"1\":{\"461\":1}}],[\"开启html5\",{\"1\":{\"461\":1}}],[\"开启props模式\",{\"1\":{\"420\":1}}],[\"开始标记和结束标记相同\",{\"1\":{\"528\":1}}],[\"开始标记开始\",{\"1\":{\"528\":1}}],[\"开始标识可以不带引号或带单双引号\",{\"1\":{\"528\":1}}],[\"开始\",{\"1\":{\"514\":1,\"519\":2}}],[\"开始递增\",{\"1\":{\"310\":1}}],[\"开始删除\",{\"1\":{\"257\":1}}],[\"开始事务\",{\"1\":{\"137\":1}}],[\"开头的请求代理到\",{\"1\":{\"461\":1}}],[\"开头的命名规范\",{\"1\":{\"43\":1}}],[\"开头时\",{\"1\":{\"460\":3}}],[\"开头\",{\"1\":{\"42\":1,\"143\":4,\"256\":1,\"328\":8,\"331\":1,\"415\":1,\"522\":1}}],[\"开发服务器\",{\"0\":{\"490\":1}}],[\"开发服务器配置\",{\"1\":{\"454\":1}}],[\"开发是指创建用于与其他软件应用程序进行交互和通信的接口\",{\"1\":{\"371\":1}}],[\"开发\",{\"0\":{\"371\":1}}],[\"开发模式下还会启用一些调试工具\",{\"1\":{\"479\":1}}],[\"开发模式时\",{\"1\":{\"278\":1}}],[\"开发模式\",{\"0\":{\"278\":1},\"1\":{\"453\":1,\"479\":1}}],[\"开发人员根据具体的需求和业务需求选择适当的方法\",{\"1\":{\"353\":1}}],[\"开发人员不需要显式地管理内存\",{\"1\":{\"276\":1}}],[\"开发人员可以使用\",{\"1\":{\"506\":1}}],[\"开发人员可以使用react框架来构建原生移动应用\",{\"1\":{\"9\":1}}],[\"开发人员可以实时地查看和测试他们的修改\",{\"1\":{\"459\":1}}],[\"开发人员可以在代码中适应hmr的接口\",{\"1\":{\"459\":1}}],[\"开发人员可以根据具体需求选择适当的缓存策略\",{\"1\":{\"356\":1}}],[\"开发人员可以根据需要设置和解析http头部信息\",{\"1\":{\"355\":1}}],[\"开发人员可以以声明式的方式描述ui的外观和行为\",{\"1\":{\"8\":1}}],[\"开发语法\",{\"1\":{\"203\":1}}],[\"开发者按照执行的顺序编写代码\",{\"1\":{\"278\":1}}],[\"开发者应该注意栈的容量限制\",{\"1\":{\"274\":1}}],[\"开发者应该注意内存泄漏\",{\"1\":{\"274\":1}}],[\"开发者只需关注数据的正确使用和内存的合理分配\",{\"1\":{\"273\":1}}],[\"开发者可以通过store的getstate\",{\"1\":{\"401\":1}}],[\"开发者可以更好地管理和维护应用程序的状态\",{\"1\":{\"400\":1}}],[\"开发者可以选择需要的功能和插件\",{\"1\":{\"363\":1}}],[\"开发者可以轻松跟踪工作进度\",{\"1\":{\"337\":1}}],[\"开发者可以轻松地管理自己的代码和项目\",{\"1\":{\"333\":1}}],[\"开发者可以创建问题\",{\"1\":{\"337\":1}}],[\"开发者可以使用远程仓库服务提供的功能进行协作\",{\"1\":{\"337\":1}}],[\"开发者可以相互检查代码的质量\",{\"1\":{\"337\":1}}],[\"开发者可以将其用于处理路由和请求\",{\"1\":{\"363\":1}}],[\"开发者可以将这些脚本与git命令关联\",{\"1\":{\"338\":1}}],[\"开发者可以将各自的工作整合到主分支中\",{\"1\":{\"337\":1}}],[\"开发者可以将代码库共享给团队成员\",{\"1\":{\"337\":1}}],[\"开发者可以将关注点从低级的dom操作转移到更高级的应用状态管理和ui组件开发上\",{\"1\":{\"128\":1}}],[\"开发者可以方便地备份代码\",{\"1\":{\"336\":1}}],[\"开发者可以快速构建美观且响应式的网页布局\",{\"1\":{\"160\":1}}],[\"开发者可以利用这些类名来定义过渡的动画效果\",{\"1\":{\"98\":1}}],[\"开发者需要评估和选择redux\",{\"1\":{\"9\":1}}],[\"开发桌面端\",{\"1\":{\"61\":1}}],[\"开发中扮演着重要的角色\",{\"1\":{\"506\":1}}],[\"开发中\",{\"1\":{\"56\":1}}],[\"开发需求和个人喜好等因素\",{\"1\":{\"10\":1}}],[\"暴露的api\",{\"1\":{\"41\":1}}],[\"才需要重新生成和更新缓存\",{\"1\":{\"601\":1}}],[\"才能触发vue的响应式系统更新视图\",{\"1\":{\"442\":1}}],[\"才能使用mycontext\",{\"1\":{\"37\":1}}],[\"才会开始渲染条件块\",{\"1\":{\"70\":1}}],[\"才会重新计算\",{\"1\":{\"73\":1,\"109\":1,\"111\":1}}],[\"才会重新计算结果\",{\"1\":{\"41\":1}}],[\"才会重新计算值\",{\"1\":{\"41\":1}}],[\"才会重新创建回调函数\",{\"1\":{\"41\":1}}],[\"接口适合描述行为\",{\"1\":{\"591\":1}}],[\"接口只能定义方法的签名\",{\"1\":{\"591\":1}}],[\"接口可以被多个类同时实现\",{\"1\":{\"591\":1}}],[\"接口定义了\",{\"1\":{\"591\":1}}],[\"接口定义中也可以使用类型参数\",{\"1\":{\"320\":1}}],[\"接口通过\",{\"1\":{\"591\":1}}],[\"接口是一种规范的定义\",{\"1\":{\"591\":1}}],[\"接口是一种抽象的数据类型\",{\"1\":{\"312\":1}}],[\"接口会被合并为\",{\"1\":{\"329\":1}}],[\"接口等组织在一个模块中\",{\"1\":{\"327\":1}}],[\"接口等放置在同一个命名空间下\",{\"1\":{\"326\":1}}],[\"接口用于定义对象的结构\",{\"1\":{\"312\":1}}],[\"接口的声明使用\",{\"1\":{\"312\":1}}],[\"接口\",{\"1\":{\"312\":5,\"582\":1,\"591\":2}}],[\"接口和抽象类都是用来帮助开发者设计和组织代码的工具\",{\"1\":{\"591\":1}}],[\"接口和抽象类\",{\"0\":{\"591\":1}}],[\"接口和方法重写来实现\",{\"1\":{\"583\":1}}],[\"接口和类在\",{\"1\":{\"312\":1}}],[\"接口和\",{\"0\":{\"312\":1}}],[\"接着上面的内容\",{\"1\":{\"167\":1}}],[\"接受一个响应式对象作为参数\",{\"1\":{\"102\":1}}],[\"接收表单数据\",{\"1\":{\"580\":1}}],[\"接收当前状态和一个action作为输入\",{\"1\":{\"400\":1}}],[\"接收和渲染响应\",{\"1\":{\"360\":1}}],[\"接收响应\",{\"1\":{\"341\":1}}],[\"接收一个可迭代对象\",{\"1\":{\"193\":2}}],[\"接收一个回调函数作为参数\",{\"1\":{\"192\":2}}],[\"接收一个reducer函数和初始状态作为参数\",{\"1\":{\"41\":1}}],[\"接收数据\",{\"1\":{\"93\":1}}],[\"接收子组件传递的数据\",{\"1\":{\"93\":1}}],[\"接收相同的选项\",{\"1\":{\"89\":1}}],[\"接下来\",{\"1\":{\"161\":3,\"261\":1,\"394\":1,\"396\":1,\"403\":1,\"405\":1,\"406\":1,\"581\":1}}],[\"接下来该进入到vue3的学习之路了\",{\"1\":{\"98\":1}}],[\"接下来该正式踏入vue之旅了\",{\"1\":{\"67\":1}}],[\"接下来我将介绍一些常用的hooks函数及其用法\",{\"1\":{\"41\":1}}],[\"的特性\",{\"1\":{\"583\":1}}],[\"的特性使其在某些特定场景中非常有用\",{\"1\":{\"179\":1}}],[\"的类\",{\"1\":{\"579\":1}}],[\"的类型为\",{\"1\":{\"319\":1,\"320\":4}}],[\"的类型注解是可选的\",{\"1\":{\"315\":1}}],[\"的类型推断功能可以根据初始值自动推断变量的类型\",{\"1\":{\"311\":1}}],[\"的类型系统来提供静态类型检查的好处\",{\"1\":{\"310\":1}}],[\"的类型检查机制\",{\"1\":{\"310\":1}}],[\"的蓝图或模板\",{\"1\":{\"579\":1}}],[\"的函数\",{\"1\":{\"569\":1}}],[\"的函数的示例\",{\"1\":{\"310\":1}}],[\"的格式进行定义\",{\"1\":{\"539\":1}}],[\"的数组中\",{\"1\":{\"524\":1}}],[\"的数据结构\",{\"1\":{\"270\":1,\"271\":1}}],[\"的数据属性\",{\"1\":{\"92\":1}}],[\"的数据绑定\",{\"1\":{\"62\":1}}],[\"的模型\",{\"1\":{\"506\":1}}],[\"的模板语法\",{\"1\":{\"68\":1}}],[\"的设计理念是基于事件驱动和非阻塞\",{\"1\":{\"506\":1}}],[\"的设计非常注重灵活性和\",{\"1\":{\"61\":1}}],[\"的出现打破了以往将\",{\"1\":{\"506\":1}}],[\"的能力\",{\"1\":{\"497\":1}}],[\"的入口文件\",{\"1\":{\"475\":1}}],[\"的动作\",{\"1\":{\"444\":1}}],[\"的状态\",{\"1\":{\"444\":1}}],[\"的状态变为\",{\"1\":{\"192\":1}}],[\"的应用程序非常有用\",{\"1\":{\"439\":1}}],[\"的应用过程\",{\"1\":{\"330\":1}}],[\"的存储\",{\"1\":{\"426\":1}}],[\"的路由\",{\"1\":{\"412\":1,\"417\":2}}],[\"的路径和文件扩展名来解析模块\",{\"1\":{\"328\":2}}],[\"的导航方式\",{\"1\":{\"410\":1}}],[\"的核心深度集成\",{\"1\":{\"409\":1}}],[\"的库\",{\"1\":{\"405\":1}}],[\"的action对象派发到redux的store中\",{\"1\":{\"401\":1}}],[\"的容器中\",{\"1\":{\"400\":1}}],[\"的页面\",{\"1\":{\"393\":1}}],[\"的简单对象\",{\"1\":{\"393\":1}}],[\"的简写\",{\"1\":{\"62\":1}}],[\"的静态文件中间件\",{\"1\":{\"368\":2}}],[\"的视图文件\",{\"1\":{\"367\":1}}],[\"的中间件\",{\"1\":{\"366\":1}}],[\"的项目目录\",{\"1\":{\"364\":1}}],[\"的用户名和密码\",{\"1\":{\"355\":1}}],[\"的远程分支\",{\"1\":{\"335\":1}}],[\"的分支\",{\"1\":{\"335\":2}}],[\"的新分支\",{\"1\":{\"335\":1}}],[\"的新组件\",{\"1\":{\"91\":1}}],[\"的辅助函数来将\",{\"1\":{\"330\":1}}],[\"的方式来导航到对应的路由\",{\"1\":{\"417\":1}}],[\"的方式\",{\"1\":{\"330\":1,\"468\":1,\"579\":1}}],[\"的方式异步加载mycomponent组件\",{\"1\":{\"51\":1}}],[\"的声明在多个地方逐步扩展和补充\",{\"1\":{\"329\":1}}],[\"的合并\",{\"1\":{\"329\":4}}],[\"的形式来访问命名空间中的成员\",{\"1\":{\"326\":1}}],[\"的语法来描述类型信息\",{\"1\":{\"325\":1}}],[\"的语法糖\",{\"1\":{\"195\":1,\"197\":1}}],[\"的联合类型和交叉类型结合使用\",{\"1\":{\"317\":1}}],[\"的一个流行的开源框架是\",{\"1\":{\"506\":1}}],[\"的一项功能\",{\"1\":{\"316\":1}}],[\"的一部分\",{\"1\":{\"282\":1}}],[\"的常量\",{\"1\":{\"311\":1}}],[\"的变量\",{\"1\":{\"311\":4}}],[\"的变化\",{\"1\":{\"48\":1}}],[\"的枚举类型\",{\"1\":{\"314\":1,\"537\":1}}],[\"的枚举\",{\"1\":{\"310\":1}}],[\"的输入框元素\",{\"1\":{\"286\":1}}],[\"的示例\",{\"1\":{\"282\":1}}],[\"的展开运算符\",{\"1\":{\"281\":1}}],[\"的空间超过了系统分配给它的大小\",{\"1\":{\"277\":1}}],[\"的堆区域\",{\"1\":{\"274\":1}}],[\"的内存管理由垃圾回收器自动处理\",{\"1\":{\"273\":1}}],[\"的内容\",{\"1\":{\"234\":1}}],[\"的内容和表示层\",{\"1\":{\"140\":1}}],[\"的调用\",{\"1\":{\"273\":1}}],[\"的原则\",{\"1\":{\"273\":1,\"402\":1}}],[\"的原因作为参数\",{\"1\":{\"193\":1}}],[\"的前面\",{\"1\":{\"272\":1}}],[\"的回调函数\",{\"1\":{\"270\":1}}],[\"的异步操作\",{\"1\":{\"270\":1}}],[\"的异步操作完成或拒绝的情况\",{\"1\":{\"193\":1}}],[\"的异步任务\",{\"1\":{\"270\":1}}],[\"的阶乘\",{\"1\":{\"269\":1}}],[\"的顺序取出任务\",{\"1\":{\"270\":1}}],[\"的顺序\",{\"1\":{\"264\":1}}],[\"的按钮元素\",{\"1\":{\"263\":1}}],[\"的元素\",{\"1\":{\"257\":1,\"286\":2}}],[\"的位置\",{\"1\":{\"257\":1}}],[\"的历史遗留问题\",{\"1\":{\"253\":1}}],[\"的开发\",{\"1\":{\"243\":1}}],[\"的最新版本\",{\"1\":{\"225\":1}}],[\"的帮助下\",{\"1\":{\"203\":1}}],[\"的引入\",{\"1\":{\"197\":1}}],[\"的解决\",{\"1\":{\"195\":1}}],[\"的普通函数\",{\"1\":{\"195\":1}}],[\"的实现原理的简要解释\",{\"1\":{\"195\":1}}],[\"的实现原理可以通过理解异步生成器\",{\"1\":{\"195\":1}}],[\"的工作原理来了解\",{\"1\":{\"195\":1}}],[\"的错误\",{\"1\":{\"193\":1}}],[\"的拒绝\",{\"1\":{\"193\":1}}],[\"的结果\",{\"1\":{\"193\":1}}],[\"的结果数组\",{\"1\":{\"193\":1}}],[\"的基本语法\",{\"1\":{\"192\":1}}],[\"的基本概念和示例\",{\"1\":{\"188\":1}}],[\"的问题\",{\"1\":{\"192\":1}}],[\"的组合\",{\"1\":{\"191\":1}}],[\"的组件中\",{\"1\":{\"102\":1}}],[\"的组件\",{\"1\":{\"95\":1}}],[\"的目的是将一些常见的对象操作功能从原始对象上分离出来\",{\"1\":{\"190\":1}}],[\"的操作\",{\"1\":{\"189\":3,\"444\":1}}],[\"的对象\",{\"1\":{\"188\":1,\"310\":1}}],[\"的属性和方法\",{\"1\":{\"183\":1}}],[\"的低级接口\",{\"1\":{\"182\":1}}],[\"的主要用途是存储对象的附加数据\",{\"1\":{\"179\":1}}],[\"的主要用途是存储对象的私有数据\",{\"1\":{\"178\":1}}],[\"的行为\",{\"1\":{\"168\":1}}],[\"的第一版\",{\"1\":{\"164\":1}}],[\"的创造者\",{\"1\":{\"164\":1}}],[\"的关系是\",{\"1\":{\"164\":1}}],[\"的关系\",{\"0\":{\"164\":1}}],[\"的表单元素\",{\"1\":{\"159\":1}}],[\"的表现方式\",{\"1\":{\"144\":1}}],[\"的样式\",{\"1\":{\"157\":1}}],[\"的<div>元素\",{\"1\":{\"150\":1,\"152\":1}}],[\"的祖先元素进行定位\",{\"1\":{\"147\":2}}],[\"的百分比\",{\"1\":{\"145\":1}}],[\"的字体大小\",{\"1\":{\"145\":1}}],[\"的链接元素\",{\"1\":{\"143\":1}}],[\"的初始值为\",{\"1\":{\"126\":1}}],[\"的选项\",{\"1\":{\"110\":1}}],[\"的和作为侦听目标\",{\"1\":{\"110\":1}}],[\"的总和从\",{\"1\":{\"110\":1}}],[\"的单文件组件\",{\"1\":{\"92\":1}}],[\"的文件夹\",{\"1\":{\"475\":1}}],[\"的文件\",{\"1\":{\"364\":1,\"475\":1}}],[\"的文件名应与组件名保持一致\",{\"1\":{\"91\":1}}],[\"的文本插值\",{\"1\":{\"69\":1}}],[\"的过滤器\",{\"1\":{\"86\":1}}],[\"的全局指令\",{\"1\":{\"70\":1}}],[\"的\",{\"1\":{\"70\":1,\"189\":1,\"196\":1,\"243\":1,\"256\":1,\"281\":1,\"310\":1,\"390\":1,\"397\":1}}],[\"的条件渲染\",{\"1\":{\"70\":1}}],[\"的区别\",{\"1\":{\"70\":1,\"128\":1}}],[\"的支持不如传统多页面应用\",{\"1\":{\"63\":1}}],[\"的情况\",{\"1\":{\"47\":1,\"70\":1}}],[\"的值为\",{\"1\":{\"310\":1,\"457\":2}}],[\"的值是\",{\"1\":{\"310\":1,\"328\":1}}],[\"的值存储在堆中\",{\"1\":{\"273\":1}}],[\"的值作为参数\",{\"1\":{\"193\":1}}],[\"的值会自动更新\",{\"1\":{\"102\":1}}],[\"的值\",{\"1\":{\"41\":1,\"82\":4,\"85\":1,\"90\":1,\"102\":1,\"265\":1,\"268\":1,\"273\":1,\"324\":1,\"457\":1,\"536\":1}}],[\"的概念也出现了\",{\"1\":{\"197\":1}}],[\"的概念\",{\"1\":{\"8\":1,\"92\":1,\"333\":1,\"395\":1}}],[\"每种设计模式都有其特定的应用场景和优劣势\",{\"1\":{\"592\":1}}],[\"每种数据库都有其特点和优势\",{\"1\":{\"369\":1}}],[\"每种类型用于存储不同类型的数据\",{\"1\":{\"250\":1}}],[\"每隔一定时间重复执行函数\",{\"1\":{\"266\":1}}],[\"每当状态发生变化时\",{\"1\":{\"401\":2,\"402\":1}}],[\"每当一个函数被调用时\",{\"1\":{\"277\":1}}],[\"每当创建一个新的函数\",{\"1\":{\"261\":1}}],[\"每当点击按钮时\",{\"1\":{\"102\":1}}],[\"每1秒输出一次\",{\"1\":{\"260\":1}}],[\"每次请求可能会导致不同的结果\",{\"1\":{\"353\":1}}],[\"每次文件的修改都可以通过提交\",{\"1\":{\"333\":1}}],[\"每次进入一个新的作用域\",{\"1\":{\"280\":1}}],[\"每次导入会生成一个新的拷贝\",{\"1\":{\"203\":1}}],[\"每次导航到不同的页面时\",{\"1\":{\"63\":1}}],[\"每次返回一个异步操作的结果\",{\"1\":{\"198\":1}}],[\"每次调用该函数时\",{\"1\":{\"524\":1}}],[\"每次调用内部函数\",{\"1\":{\"258\":1}}],[\"每次调用\",{\"1\":{\"197\":1}}],[\"每次调用next\",{\"1\":{\"184\":1}}],[\"每次执行到\",{\"1\":{\"186\":1}}],[\"每次更新message的值\",{\"1\":{\"69\":1}}],[\"每次点击按钮时\",{\"1\":{\"41\":1}}],[\"每个loader都可以设置不同的选项\",{\"1\":{\"463\":1}}],[\"每个loader只负责完成特定类型的转换工作\",{\"1\":{\"463\":1}}],[\"每个loader是独立的\",{\"1\":{\"463\":1}}],[\"每个开发人员可以专注于自己负责的模块\",{\"1\":{\"434\":1}}],[\"每个开发者可以在自己的分支上进行独立的工作\",{\"1\":{\"337\":1}}],[\"每个路由对象可以指定一个name属性\",{\"1\":{\"417\":1}}],[\"每个action都必须包含一个type属性来表示操作类型\",{\"1\":{\"402\":1}}],[\"每个<route>定义了一个url模式和对应的组件\",{\"1\":{\"392\":1}}],[\"每个\",{\"1\":{\"389\":1}}],[\"每个角色拥有一组预定义的权限\",{\"1\":{\"370\":1}}],[\"每个http请求和响应都需要建立一个新的tcp连接\",{\"1\":{\"358\":1}}],[\"每个cookie通常是由一个名字\",{\"1\":{\"357\":1}}],[\"每个键值对之间由冒号分隔\",{\"1\":{\"355\":1}}],[\"每个状态码都有特定的意义\",{\"1\":{\"354\":1}}],[\"每个请求都需要提供足够的信息来让服务器理解和处理\",{\"1\":{\"352\":1}}],[\"每个请求都需要重新建立连接\",{\"1\":{\"351\":1}}],[\"每个请求都是独立的\",{\"1\":{\"352\":1}}],[\"每个变量都必须有一个明确的类型\",{\"1\":{\"311\":1}}],[\"每个变量都需要在堆栈中分配内存空间\",{\"1\":{\"277\":1}}],[\"每个常量都由一个名称和可选的初始值组成\",{\"1\":{\"310\":1}}],[\"每个任务都是一个回调函数\",{\"1\":{\"270\":1}}],[\"每个对象都有自己的属性值\",{\"1\":{\"579\":1}}],[\"每个对象都有一个原型\",{\"1\":{\"267\":1}}],[\"每个对象都有一个内部的\",{\"1\":{\"267\":1}}],[\"每个对象都具有相同的属性和方法\",{\"1\":{\"579\":1}}],[\"每个对象都描述了一个路由和相应的组件\",{\"1\":{\"398\":1}}],[\"每个对象的原型都是上一级对象的实例\",{\"1\":{\"267\":1}}],[\"每个区域可以显示不同的内容\",{\"1\":{\"218\":1}}],[\"每个模块都可以通过this\",{\"1\":{\"444\":1}}],[\"每个模块都可以定义自己的state\",{\"1\":{\"436\":1}}],[\"每个模块都有自己的state\",{\"1\":{\"426\":1}}],[\"每个模块都有自己的作用域\",{\"1\":{\"201\":1}}],[\"每个模块都有独立的作用域\",{\"1\":{\"200\":1}}],[\"每个模块可以独立管理自己的状态\",{\"1\":{\"435\":1}}],[\"每个模块可以有自己的独立状态\",{\"1\":{\"434\":1}}],[\"每个模块负责对应领域内的状态管理和操作\",{\"1\":{\"435\":1}}],[\"每个模块负责特定的功能和状态管理\",{\"1\":{\"434\":1}}],[\"每个模块负责特定的功能\",{\"1\":{\"56\":1}}],[\"每个模块拥有自己的state\",{\"1\":{\"425\":1}}],[\"每个模块具有明确定义的功能和责任\",{\"1\":{\"327\":1}}],[\"每个模块有自己的功能和责任\",{\"1\":{\"278\":1}}],[\"每个值表示一个背景图像的url\",{\"1\":{\"158\":1}}],[\"每个关键帧定义了属性的特定值\",{\"1\":{\"152\":1}}],[\"每个声明包含属性和对应的值\",{\"1\":{\"141\":1}}],[\"每个列都必须具有一个数据类型\",{\"1\":{\"136\":1}}],[\"每个节点都包含了它们的类型和内容\",{\"1\":{\"129\":1}}],[\"每个节点代表html中的一个元素\",{\"1\":{\"129\":1}}],[\"每个vue应用都是通过createapp去创建实例\",{\"1\":{\"101\":1}}],[\"每个部分都是一个可重用的组件\",{\"1\":{\"90\":1}}],[\"每个组件被表示为一个虚拟dom节点\",{\"1\":{\"128\":1}}],[\"每个组件都会保持它们的状态\",{\"1\":{\"126\":1}}],[\"每个组件依赖的\",{\"1\":{\"89\":1}}],[\"每个组件负责管理自己的状态和渲染逻辑\",{\"1\":{\"8\":1,\"11\":1}}],[\"每个key应该是唯一且稳定的\",{\"1\":{\"70\":1}}],[\"每个页面只包含一部分数据\",{\"1\":{\"53\":1}}],[\"每个方法都有特定的用途和执行时机\",{\"1\":{\"22\":1}}],[\"每个框架都有自己的优势和适用场景\",{\"1\":{\"10\":1}}],[\"条件\",{\"1\":{\"558\":1}}],[\"条件类型\",{\"1\":{\"319\":1}}],[\"条件2满足时执行的代码\",{\"1\":{\"255\":1}}],[\"条件1满足时执行的代码\",{\"1\":{\"255\":1}}],[\"条件不满足时执行的代码\",{\"1\":{\"255\":1}}],[\"条件满足时执行的代码\",{\"1\":{\"255\":1}}],[\"条件语句\",{\"0\":{\"554\":1},\"1\":{\"255\":1}}],[\"条件操作符用于过滤和筛选特定条件的数据\",{\"1\":{\"135\":1}}],[\"条件查询和where子句\",{\"1\":{\"135\":1}}],[\"条件或嵌套的函数中调用\",{\"1\":{\"40\":1}}],[\"条件判断等\",{\"1\":{\"15\":1}}],[\"发起异步任务\",{\"1\":{\"271\":1}}],[\"发起异步请求获取数据\",{\"1\":{\"50\":1}}],[\"发送到服务器时\",{\"1\":{\"390\":1}}],[\"发送http请求到服务器并等待响应\",{\"1\":{\"360\":1}}],[\"发送http请求\",{\"1\":{\"360\":1}}],[\"发送给客户端\",{\"1\":{\"359\":1}}],[\"发送请求\",{\"1\":{\"341\":1,\"345\":1}}],[\"发送post请求提交表单数据\",{\"1\":{\"289\":1}}],[\"发送get请求获取json数据\",{\"1\":{\"289\":1}}],[\"发送\",{\"1\":{\"282\":1}}],[\"发送数据等\",{\"1\":{\"343\":1}}],[\"发送数据\",{\"1\":{\"93\":1}}],[\"发送网络请求等\",{\"1\":{\"33\":1}}],[\"发生自定义异常\",{\"1\":{\"589\":1}}],[\"发生了以下事件\",{\"1\":{\"360\":1}}],[\"发生在虚拟\",{\"1\":{\"87\":1}}],[\"发生变化时\",{\"1\":{\"85\":1}}],[\"发音为\",{\"1\":{\"60\":1}}],[\"发布和使用声明文件\",{\"1\":{\"325\":1}}],[\"发布事件\",{\"1\":{\"38\":1}}],[\"发布者只需要关心事件的发布\",{\"1\":{\"38\":1}}],[\"发布者和订阅者之间解耦\",{\"1\":{\"38\":1}}],[\"发布者可以使用eventbus\",{\"1\":{\"38\":1}}],[\"发布者负责发布事件或消息\",{\"1\":{\"38\":1}}],[\"发布者\",{\"1\":{\"38\":2,\"272\":1}}],[\"发布\",{\"1\":{\"38\":1,\"164\":1,\"272\":2}}],[\"发布订阅模式和事件总线\",{\"0\":{\"38\":1}}],[\"上传文件\",{\"1\":{\"581\":1}}],[\"上手较快\",{\"1\":{\"513\":1}}],[\"上面的配置将启动一个devserver\",{\"1\":{\"490\":1}}],[\"上面的配置将启用生产模式的优化\",{\"1\":{\"489\":1}}],[\"上面的配置将输出构建后的文件到dist目录\",{\"1\":{\"486\":1}}],[\"上面的配置将使用htmlwebpackplugin生成一个自动插入打包后文件的index\",{\"1\":{\"488\":1}}],[\"上面的配置将使用babel\",{\"1\":{\"487\":1}}],[\"上面的配置将使用\",{\"1\":{\"485\":1}}],[\"上面的例子中\",{\"1\":{\"110\":2}}],[\"上的这些方法\",{\"1\":{\"267\":1}}],[\"上一级作用域是外部函数作用域\",{\"1\":{\"261\":1}}],[\"上\",{\"1\":{\"68\":1,\"267\":1,\"272\":1,\"337\":1}}],[\"上构建的东西可能在形式和规模上会有很大的不同\",{\"1\":{\"61\":1}}],[\"上下文\",{\"0\":{\"37\":1},\"1\":{\"37\":1,\"41\":1}}],[\"上述函数允许你在php中进行编码和解码json数据\",{\"1\":{\"604\":1}}],[\"上述函数组件的渲染非常简单\",{\"1\":{\"21\":1}}],[\"上述仅是一小部分\",{\"1\":{\"570\":1}}],[\"上述配置将使用terser\",{\"1\":{\"496\":1}}],[\"上述配置将使用文件内容的哈希值作为文件名的一部分\",{\"1\":{\"495\":1}}],[\"上述配置将使用file\",{\"1\":{\"491\":1}}],[\"上述配置将在打包过程中生成一个报告\",{\"1\":{\"492\":1}}],[\"上述配置使用两个加载器\",{\"1\":{\"455\":1}}],[\"上述方法中的location参数可以是一个url字符串\",{\"1\":{\"416\":1}}],[\"上述指令告诉编译器引入指定路径下的声明文件\",{\"1\":{\"331\":1}}],[\"上述代码在需要时才会加载\",{\"1\":{\"494\":1}}],[\"上述代码通过动态导入将\",{\"1\":{\"493\":1}}],[\"上述代码演示了在方法中使用编程式导航的两种常见方式\",{\"1\":{\"416\":1}}],[\"上述代码与前面的例子效果相同\",{\"1\":{\"310\":1}}],[\"上述代码中\",{\"1\":{\"102\":1,\"310\":7,\"324\":1,\"385\":1,\"401\":2,\"581\":1}}],[\"上述例子中\",{\"1\":{\"267\":1}}],[\"上述示例演示了一个简单的联系表单\",{\"1\":{\"580\":1}}],[\"上述示例使用es6的动态导入语法\",{\"1\":{\"467\":1}}],[\"上述示例配置了两个插件\",{\"1\":{\"456\":1}}],[\"上述示例是以\",{\"1\":{\"197\":1}}],[\"上述示例表示创建一个以圆形为形状的径向渐变\",{\"1\":{\"153\":1}}],[\"上述示例表示创建一个从红色到橙色再到黄色的水平线性渐变\",{\"1\":{\"153\":1}}],[\"上述示例中\",{\"1\":{\"19\":1,\"21\":1}}],[\"即必须从行首开始\",{\"1\":{\"528\":1}}],[\"即便常量定义在函数外也可以正常使用常量\",{\"1\":{\"520\":1}}],[\"即标志符\",{\"1\":{\"519\":1}}],[\"即标准盒模型\",{\"1\":{\"146\":1}}],[\"即不开启任何优化策略\",{\"1\":{\"457\":1}}],[\"即不能直接修改\",{\"1\":{\"36\":1}}],[\"即任何对state的修改都能够自动更新相关的组件界面\",{\"1\":{\"436\":1}}],[\"即reducer函数\",{\"1\":{\"404\":1}}],[\"即count为0\",{\"1\":{\"403\":1}}],[\"即click\",{\"1\":{\"263\":1}}],[\"即根据action的类型更新应用程序的状态树\",{\"1\":{\"401\":1}}],[\"即将action发送到store\",{\"1\":{\"401\":1}}],[\"即api的不同路由和功能\",{\"1\":{\"371\":1}}],[\"即可以将函数名存储在一个变量中\",{\"1\":{\"569\":1}}],[\"即可在多个应用程序或系统中访问受保护的资源\",{\"1\":{\"370\":1}}],[\"即可查看运行中的\",{\"1\":{\"5\":1}}],[\"即要装饰的类的构造函数\",{\"1\":{\"324\":1}}],[\"即先进入队列的任务先被执行\",{\"1\":{\"264\":1}}],[\"即事件队列\",{\"1\":{\"264\":1}}],[\"即事件不是从内部元素触发的\",{\"1\":{\"70\":1}}],[\"即元素的个数\",{\"1\":{\"257\":1}}],[\"即所有操作完成\",{\"1\":{\"196\":1}}],[\"即具有一个next\",{\"1\":{\"184\":1}}],[\"即使响应是可缓存的\",{\"1\":{\"356\":1}}],[\"即使用\",{\"1\":{\"328\":1}}],[\"即使外部函数执行完毕\",{\"1\":{\"268\":1}}],[\"即使外部函数已经执行完毕\",{\"1\":{\"268\":1}}],[\"即使外部函数已经执行完毕并离开了作用域\",{\"1\":{\"268\":1}}],[\"即使创建多个具有相同描述的symbol\",{\"1\":{\"174\":1}}],[\"即使在并发操作和故障情况下也能保持数据的完整性和可靠性\",{\"1\":{\"137\":1}}],[\"即使在系统故障或重启后也不会丢失\",{\"1\":{\"137\":1}}],[\"即从一个状态过渡到另一个状态所需的时间\",{\"1\":{\"151\":1}}],[\"即\",{\"1\":{\"110\":1,\"168\":2,\"267\":1,\"269\":1}}],[\"即滚动行为\",{\"1\":{\"70\":1}}],[\"即内部元素触发的事件先在此处理\",{\"1\":{\"70\":1}}],[\"即组件化\",{\"1\":{\"56\":1}}],[\"对它们进行预处理\",{\"1\":{\"455\":1}}],[\"对应home组件\",{\"1\":{\"413\":1}}],[\"对应的组件分别是sidebarcomponent和headercomponent\",{\"1\":{\"417\":1}}],[\"对应的组件分别是homecomponent\",{\"1\":{\"417\":1}}],[\"对应的组件会被动态加载和展示\",{\"1\":{\"413\":1}}],[\"对应的组件会被渲染到页面上\",{\"1\":{\"392\":1}}],[\"对应的组件\",{\"1\":{\"412\":1}}],[\"对整个系统进行全面的测试\",{\"1\":{\"372\":1}}],[\"对其在系统中的资源和功能进行访问控制\",{\"1\":{\"370\":1}}],[\"对其进行更好的排名和权重分配\",{\"1\":{\"359\":1}}],[\"对根路径的get请求进行处理\",{\"1\":{\"364\":1}}],[\"对服务器性能也有一定影响\",{\"1\":{\"359\":1}}],[\"对http报文进行加密传输\",{\"1\":{\"359\":1}}],[\"对比缓存\",{\"1\":{\"352\":1}}],[\"对类型进行扩展和补充\",{\"1\":{\"329\":1}}],[\"对外只暴露必要的接口\",{\"1\":{\"312\":1}}],[\"对外部环境的引用\",{\"1\":{\"280\":1}}],[\"对数组中的多个变量进行过滤操作\",{\"1\":{\"603\":1}}],[\"对数组进行降序排序\",{\"1\":{\"578\":2}}],[\"对数组进行升序排序\",{\"1\":{\"578\":2}}],[\"对数组进行原地排序\",{\"1\":{\"257\":1}}],[\"对数据库进行定期维护\",{\"1\":{\"138\":1}}],[\"对一个值取反\",{\"1\":{\"254\":1}}],[\"对齐方式等\",{\"1\":{\"156\":1}}],[\"对普通\",{\"1\":{\"70\":1}}],[\"对象必须声明\",{\"1\":{\"535\":1}}],[\"对象数据类型也可以用于存储数据\",{\"1\":{\"535\":1}}],[\"对象和payload作为参数\",{\"1\":{\"426\":1}}],[\"对象来获取查询参数\",{\"1\":{\"365\":1}}],[\"对象来封装共享的数据\",{\"1\":{\"37\":1}}],[\"对象类型推断\",{\"1\":{\"316\":1}}],[\"对象类型注解\",{\"1\":{\"315\":1}}],[\"对象还提供了其他方法来处理表单数据\",{\"1\":{\"282\":1}}],[\"对象是数据和操作数据的相关函数的集合\",{\"1\":{\"278\":1}}],[\"对象是一种复合数据类型\",{\"1\":{\"259\":1}}],[\"对象是一个由信息及对信息进行处理的描述所组成的整体\",{\"1\":{\"583\":1}}],[\"对象是一个\",{\"1\":{\"197\":1}}],[\"对象成功完成时执行相应的逻辑\",{\"1\":{\"272\":1}}],[\"对象成功或失败后立即完成\",{\"1\":{\"193\":1}}],[\"对象继承链的顶端\",{\"1\":{\"267\":1}}],[\"对象上的\",{\"1\":{\"267\":1}}],[\"对象本身没有定义这些方法\",{\"1\":{\"267\":1}}],[\"对象本身没有定义\",{\"1\":{\"267\":1}}],[\"对象可以与\",{\"1\":{\"282\":1}}],[\"对象可以继承\",{\"1\":{\"267\":1}}],[\"对象可以包含不同类型的属性\",{\"1\":{\"251\":1}}],[\"对象作为中间人来进行事件的订阅和发布\",{\"1\":{\"272\":1}}],[\"对象作为它的原型\",{\"1\":{\"267\":1}}],[\"对象作为原型\",{\"1\":{\"267\":1}}],[\"对象作为参数\",{\"1\":{\"110\":1}}],[\"对象方法中的嵌套函数\",{\"1\":{\"262\":1}}],[\"对象方法的简化写法\",{\"1\":{\"171\":1}}],[\"对象由键值对的集合组成\",{\"1\":{\"259\":1}}],[\"对象等\",{\"1\":{\"257\":1,\"401\":1}}],[\"对象实现异步操作的延迟\",{\"1\":{\"197\":1}}],[\"对象解决\",{\"1\":{\"196\":1,\"197\":1}}],[\"对象解构赋值也支持嵌套的解构模式\",{\"1\":{\"166\":1}}],[\"对象解构赋值可以设置默认值\",{\"1\":{\"166\":1}}],[\"对象解构赋值使用\",{\"1\":{\"166\":1}}],[\"对象解构赋值\",{\"1\":{\"166\":1,\"171\":1}}],[\"对象封装成一个新的\",{\"1\":{\"196\":1}}],[\"对象拒绝\",{\"1\":{\"196\":1}}],[\"对象的颜色属性\",{\"1\":{\"579\":1}}],[\"对象的属性类型\",{\"1\":{\"310\":1}}],[\"对象的属性和方法\",{\"1\":{\"267\":1}}],[\"对象的原型设置为\",{\"1\":{\"267\":1}}],[\"对象的基本语法如下\",{\"1\":{\"259\":1}}],[\"对象的值\",{\"1\":{\"196\":1}}],[\"对象的解决\",{\"1\":{\"196\":2}}],[\"对象的解决值\",{\"1\":{\"196\":1}}],[\"对象将会被拒绝\",{\"1\":{\"196\":1}}],[\"对象被解决后\",{\"1\":{\"198\":1}}],[\"对象被解决\",{\"1\":{\"195\":2}}],[\"对象中是否存在指定名称的字段\",{\"1\":{\"282\":1}}],[\"对象中删除指定名称的字段和值\",{\"1\":{\"282\":1}}],[\"对象中获得数据或者处理错误\",{\"1\":{\"196\":1}}],[\"对象中\",{\"1\":{\"194\":1,\"196\":1}}],[\"对象中定义\",{\"1\":{\"188\":2}}],[\"对象并在每个\",{\"1\":{\"193\":1}}],[\"对象提供了两个静态方法来创建已经解决或已经拒绝的\",{\"1\":{\"193\":1}}],[\"对象都成功完成后才会成功\",{\"1\":{\"193\":1}}],[\"对象时\",{\"1\":{\"192\":1}}],[\"对象表示一个异步操作的最终完成或失败\",{\"1\":{\"192\":1}}],[\"对象用于定义代理对象的行为\",{\"1\":{\"188\":1}}],[\"对象用于创建代理\",{\"1\":{\"188\":1}}],[\"对象字面量扩展\",{\"1\":{\"171\":1}}],[\"对象转换为响应式对象\",{\"1\":{\"102\":1}}],[\"对象或基本类型转换为一个响应式数据对象\",{\"1\":{\"102\":1}}],[\"对象写法\",{\"1\":{\"85\":1}}],[\"对象语法\",{\"1\":{\"82\":1}}],[\"对象\",{\"0\":{\"171\":1,\"259\":1,\"535\":1,\"579\":1},\"1\":{\"36\":1,\"47\":1,\"48\":1,\"70\":2,\"90\":2,\"102\":1,\"193\":7,\"195\":2,\"196\":5,\"197\":4,\"198\":3,\"251\":1,\"267\":1,\"272\":1,\"274\":1,\"281\":1,\"282\":1,\"310\":1,\"579\":2,\"583\":2}}],[\"对于需要进行敏感操作或修改数据的请求\",{\"1\":{\"602\":1}}],[\"对于复杂的逻辑和需要访问父作用域变量的情况\",{\"1\":{\"571\":1}}],[\"对于第三方模块\",{\"1\":{\"509\":1}}],[\"对于内置模块\",{\"1\":{\"509\":1}}],[\"对于图片资源\",{\"1\":{\"469\":1}}],[\"对于提取的公共代码\",{\"1\":{\"466\":1}}],[\"对于重复的算法逻辑\",{\"1\":{\"466\":1}}],[\"对于稳定且重要的数据\",{\"1\":{\"465\":1}}],[\"对于频繁变化的数据\",{\"1\":{\"465\":1}}],[\"对于频繁使用的数据\",{\"1\":{\"443\":1}}],[\"对于\",{\"1\":{\"463\":2}}],[\"对于动态导入\",{\"1\":{\"462\":1}}],[\"对于一些临时或局部的数据\",{\"1\":{\"443\":1}}],[\"对于非响应式数据\",{\"1\":{\"442\":1}}],[\"对于非常大的数据结构\",{\"1\":{\"281\":1}}],[\"对于表单数据\",{\"1\":{\"442\":1}}],[\"对于嵌套路由\",{\"1\":{\"415\":1}}],[\"对于异步操作\",{\"1\":{\"407\":1}}],[\"对于请求\",{\"1\":{\"365\":1}}],[\"对于函数\",{\"1\":{\"329\":1}}],[\"对于类\",{\"1\":{\"329\":1}}],[\"对于命名空间\",{\"1\":{\"329\":1}}],[\"对于接口\",{\"1\":{\"329\":1}}],[\"对于更复杂的项目\",{\"1\":{\"328\":1}}],[\"对于以下代码\",{\"1\":{\"328\":1}}],[\"对于没有启用命名空间的模块\",{\"1\":{\"444\":1}}],[\"对于没有提供声明文件的第三方库或模块\",{\"1\":{\"325\":1}}],[\"对于没有子元素的标签\",{\"1\":{\"15\":1}}],[\"对于拷贝大型对象或嵌套层级很深的对象\",{\"1\":{\"281\":1}}],[\"对于包含其他特殊类型\",{\"1\":{\"281\":1}}],[\"对于我们开发者来说\",{\"1\":{\"280\":1}}],[\"对于特别复杂的问题或需要大量递归调用的场景\",{\"1\":{\"277\":1}}],[\"对于每个url\",{\"1\":{\"264\":1}}],[\"对于现代前端开发非常有用\",{\"1\":{\"203\":1}}],[\"对于开发node\",{\"1\":{\"200\":1}}],[\"对于某些情况下需要迅速失败的并发任务执行非常有用\",{\"1\":{\"198\":1}}],[\"对于初学者来说\",{\"1\":{\"128\":1}}],[\"对于简单的应用或页面来说\",{\"1\":{\"128\":1}}],[\"对于methods选项\",{\"1\":{\"97\":1}}],[\"对于data选项\",{\"1\":{\"97\":1}}],[\"对于大数据量的列表或图片资源\",{\"1\":{\"55\":1}}],[\"对于大型列表或表格等长列表\",{\"1\":{\"49\":1}}],[\"对于列表或集合等数据\",{\"1\":{\"49\":1}}],[\"对于标签闭合和属性命名更宽松\",{\"1\":{\"14\":1}}],[\"父子关系和遍历\",{\"0\":{\"303\":1}}],[\"父子组件之间的通信可以通过props和回调函数来实现\",{\"1\":{\"35\":1}}],[\"父子组件通信\",{\"0\":{\"35\":1}}],[\"父类\",{\"1\":{\"183\":1}}],[\"父组件的<p>标签中的内容将会被插入到子组件的插槽中\",{\"1\":{\"96\":1}}],[\"父组件parentcomponent中使用了子组件\",{\"1\":{\"96\":1}}],[\"父组件和子组件之间实现了数据的传递和事件的触发\",{\"1\":{\"35\":1}}],[\"父组件可以通过插槽将内容分发到子组件的特定位置\",{\"1\":{\"96\":1}}],[\"父组件可以通过props将数据传递给子组件\",{\"1\":{\"93\":1}}],[\"父组件可以通过ref来调用这些暴露出来的方法\",{\"1\":{\"41\":1}}],[\"父组件可以向子组件传递任意类型的数据\",{\"1\":{\"36\":1}}],[\"父组件可以定义一个回调函数\",{\"1\":{\"35\":1}}],[\"父组件可以在实例化或者渲染子组件时\",{\"1\":{\"20\":1}}],[\"父组件通过改变状态的方式来更新数据\",{\"1\":{\"35\":1}}],[\"父组件通过props将数据或函数传递给子组件\",{\"1\":{\"35\":1}}],[\"父组件\",{\"1\":{\"20\":1,\"35\":2,\"36\":2,\"37\":1,\"93\":1,\"96\":1,\"117\":1}}],[\"执行删除\",{\"1\":{\"600\":1}}],[\"执行删除操作\",{\"1\":{\"600\":1}}],[\"执行更新\",{\"1\":{\"600\":1}}],[\"执行更新操作\",{\"1\":{\"600\":1}}],[\"执行插入\",{\"1\":{\"600\":1}}],[\"执行插入操作\",{\"1\":{\"600\":1}}],[\"执行查询\",{\"1\":{\"600\":1}}],[\"执行查询操作\",{\"1\":{\"600\":1}}],[\"执行查询和更新操作等\",{\"1\":{\"371\":1}}],[\"执行你想要的操作\",{\"1\":{\"437\":1}}],[\"执行数据库操作\",{\"1\":{\"369\":1}}],[\"执行相应的操作\",{\"1\":{\"365\":1}}],[\"执行以下命令\",{\"1\":{\"364\":1}}],[\"执行服务器端程序或者查询数据库等\",{\"1\":{\"360\":1}}],[\"执行无限循环\",{\"1\":{\"310\":2}}],[\"执行栈是一种数据结构\",{\"1\":{\"271\":1}}],[\"执行栈\",{\"1\":{\"271\":1}}],[\"执行同步代码\",{\"1\":{\"270\":1}}],[\"执行任务的回调函数\",{\"1\":{\"270\":1}}],[\"执行其他操作\",{\"1\":{\"264\":1,\"387\":3,\"580\":1}}],[\"执行全局同步代码\",{\"1\":{\"264\":1}}],[\"执行之间的时间间隔\",{\"1\":{\"260\":1}}],[\"执行特定任务的代码\",{\"1\":{\"258\":1}}],[\"执行运算并将结果赋给左侧的变量\",{\"1\":{\"254\":1}}],[\"执行异步操作\",{\"1\":{\"198\":1,\"433\":1}}],[\"执行错误处理逻辑\",{\"1\":{\"198\":1}}],[\"执行计划分析等\",{\"1\":{\"138\":1}}],[\"执行副作用操作\",{\"1\":{\"41\":1}}],[\"执行逻辑处理\",{\"1\":{\"33\":1}}],[\"执行函数\",{\"1\":{\"13\":1,\"14\":1}}],[\"刷新页面或跳转到指定的url\",{\"1\":{\"33\":1}}],[\"错误发生的文件和行号等信息作为参数\",{\"1\":{\"587\":1}}],[\"错误消息\",{\"1\":{\"587\":1}}],[\"错误消息现在包含更多上下文信息和源代码位置\",{\"1\":{\"497\":1}}],[\"错误报告级别\",{\"0\":{\"586\":1}}],[\"错误可能是由于插件或配置的错误导致的\",{\"1\":{\"502\":1}}],[\"错误修复和性能优化\",{\"1\":{\"371\":1}}],[\"错误的请求\",{\"1\":{\"354\":1}}],[\"错误\",{\"1\":{\"273\":1,\"311\":1}}],[\"错误状态管理和反馈机制\",{\"1\":{\"32\":1}}],[\"错误处理和日志记录\",{\"1\":{\"602\":1}}],[\"错误处理等信息\",{\"1\":{\"371\":1}}],[\"错误处理等\",{\"1\":{\"366\":1}}],[\"错误处理等方面的问题\",{\"1\":{\"272\":1}}],[\"错误处理中间件用于处理在请求处理过程中发生的错误\",{\"1\":{\"366\":1}}],[\"错误处理中间件\",{\"1\":{\"365\":1,\"366\":1}}],[\"错误处理中间件可以处理在路由处理函数或其他中间件中发生的错误\",{\"1\":{\"365\":1}}],[\"错误处理的反馈和用户体验\",{\"1\":{\"32\":1}}],[\"错误处理\",{\"1\":{\"32\":1,\"50\":2,\"51\":1,\"365\":1,\"467\":1}}],[\"应谨慎使用\",{\"1\":{\"569\":1}}],[\"应进行适当的版本控制和维护\",{\"1\":{\"466\":1}}],[\"应遵循单一数据源的原则\",{\"1\":{\"444\":1}}],[\"应尽量避免过度使用\",{\"1\":{\"310\":1}}],[\"应尽量提供清晰的错误提示\",{\"1\":{\"32\":1}}],[\"应该根据具体情况\",{\"1\":{\"467\":1}}],[\"应该确保只从可信任的源加载模块\",{\"1\":{\"467\":1}}],[\"应该确保代码的正确性和效率\",{\"1\":{\"277\":1}}],[\"应该考虑其对性能的潜在影响\",{\"1\":{\"467\":1}}],[\"应该越早定义\",{\"1\":{\"414\":1}}],[\"应该使用更具体的类型注解或接口\",{\"1\":{\"310\":1}}],[\"应该将所有的hook调用放在组件函数的顶层\",{\"1\":{\"43\":1}}],[\"应及时清除或更新错误状态\",{\"1\":{\"32\":1}}],[\"应用的开发流程\",{\"1\":{\"506\":1}}],[\"应用的入口\",{\"1\":{\"67\":1}}],[\"应用中进行路由导航的功能\",{\"1\":{\"394\":1}}],[\"应用能够更接近原生应用的体验\",{\"1\":{\"243\":1}}],[\"应用不同的样式和布局\",{\"1\":{\"157\":1}}],[\"应用不同的样式规则\",{\"1\":{\"148\":1}}],[\"应用特定的css样式\",{\"1\":{\"157\":1}}],[\"应用补丁\",{\"1\":{\"128\":1}}],[\"应用于整个离开动画阶段\",{\"1\":{\"125\":1}}],[\"应用于整个进入动画阶段\",{\"1\":{\"125\":1}}],[\"应用实例\",{\"0\":{\"101\":1}}],[\"应用混入\",{\"1\":{\"97\":1}}],[\"应用程序也可以通过缓存来存储计算结果\",{\"1\":{\"465\":1}}],[\"应用程序级缓存\",{\"1\":{\"465\":1}}],[\"应用程序会无缝地接受到更新后的模块\",{\"1\":{\"459\":1}}],[\"应用程序会使用\",{\"1\":{\"367\":1}}],[\"应用程序接收到热更新信号后\",{\"1\":{\"459\":1}}],[\"应用程序开发的状态管理模式\",{\"1\":{\"425\":1}}],[\"应用程序状态保存在store中\",{\"1\":{\"403\":1}}],[\"应用程序编程接口\",{\"1\":{\"371\":1}}],[\"应用程序可以获取用户的身份认证信息并进行授权\",{\"1\":{\"370\":1}}],[\"应用程序使用第三方身份提供者\",{\"1\":{\"370\":1}}],[\"应用程序中提供静态文件和资源\",{\"1\":{\"368\":1}}],[\"应用程序中不需要经过处理或修改的文件\",{\"1\":{\"368\":1}}],[\"应用程序中用于呈现用户界面的组件\",{\"1\":{\"367\":1}}],[\"应用程序中使用和复用这个单文件组件了\",{\"1\":{\"92\":1}}],[\"应用程序已成功运行了\",{\"1\":{\"364\":1}}],[\"应用程序的开发团队可以专注于核心业务逻辑\",{\"1\":{\"464\":1}}],[\"应用程序的状态\",{\"1\":{\"440\":1}}],[\"应用程序的状态只能通过派发\",{\"1\":{\"400\":1}}],[\"应用程序的状态被存储在一个称为\",{\"1\":{\"400\":1}}],[\"应用程序的基本配置示例\",{\"1\":{\"364\":1}}],[\"应用程序的基本配置\",{\"1\":{\"364\":1}}],[\"应用程序的入口文件\",{\"1\":{\"364\":1}}],[\"应用程序和\",{\"1\":{\"363\":2}}],[\"应用程序框架\",{\"1\":{\"363\":2}}],[\"应用程序\",{\"1\":{\"88\":1,\"363\":1,\"364\":1,\"367\":1}}],[\"应用\",{\"1\":{\"5\":2,\"390\":1}}],[\"自\",{\"1\":{\"519\":1}}],[\"自治的模块\",{\"1\":{\"434\":1}}],[\"自下而上\",{\"1\":{\"324\":1}}],[\"自动加载\",{\"1\":{\"584\":1}}],[\"自动加载模块\",{\"1\":{\"456\":1}}],[\"自动\",{\"1\":{\"497\":1}}],[\"自动打开默认浏览器\",{\"1\":{\"461\":1}}],[\"自动将公共模块分离出来\",{\"1\":{\"458\":1}}],[\"自动生成html文件等\",{\"1\":{\"456\":1}}],[\"自动生成html插件\",{\"1\":{\"453\":1}}],[\"自动优化构建结果\",{\"1\":{\"453\":1}}],[\"自动分析和构建出整个项目的依赖图\",{\"1\":{\"448\":1}}],[\"自动完成\",{\"0\":{\"347\":1}}],[\"自动完成建议\",{\"1\":{\"340\":1}}],[\"自动化测试等操作\",{\"1\":{\"338\":1}}],[\"自动帮助你确定引起问题的具体提交\",{\"1\":{\"338\":1}}],[\"自动递增为\",{\"1\":{\"314\":2}}],[\"自动执行的类型转换\",{\"1\":{\"252\":1}}],[\"自动布局\",{\"1\":{\"156\":1}}],[\"自适应的布局\",{\"1\":{\"148\":1}}],[\"自定义异常类\",{\"1\":{\"589\":1}}],[\"自定义错误处理函数\",{\"0\":{\"587\":1}}],[\"自定义中间件需要传入\",{\"1\":{\"366\":1}}],[\"自定义中间件\",{\"1\":{\"366\":1}}],[\"自定义声明文件\",{\"1\":{\"325\":1}}],[\"自定义类型\",{\"0\":{\"318\":1}}],[\"自定义类型谓词守卫\",{\"1\":{\"317\":1}}],[\"自定义插件\",{\"1\":{\"298\":1}}],[\"自定义动画效果\",{\"1\":{\"290\":1}}],[\"自定义可迭代对象\",{\"1\":{\"185\":1}}],[\"自定义指令必须包含一个\",{\"1\":{\"70\":2}}],[\"自定义指令\",{\"1\":{\"70\":1}}],[\"自定义hooks命名规范\",{\"1\":{\"43\":1}}],[\"自定义hooks应该返回一组可以在组件中使用的值\",{\"1\":{\"42\":1}}],[\"自定义hooks的名称应该以\",{\"1\":{\"42\":1}}],[\"自定义hooks是一种让你在函数组件之间重用状态逻辑的方式\",{\"1\":{\"42\":1}}],[\"自定义hooks\",{\"0\":{\"42\":1}}],[\"自定义验证函数等方式进行验证\",{\"1\":{\"32\":1}}],[\"自闭合\",{\"1\":{\"15\":1}}],[\"可组织和可重用\",{\"1\":{\"579\":1}}],[\"可组合性\",{\"1\":{\"278\":1}}],[\"可组合和可重用的模块\",{\"1\":{\"56\":2}}],[\"可变函数是一种在特定情况下非常有用的技术\",{\"1\":{\"569\":1}}],[\"可变函数只能用于全局函数和类方法\",{\"1\":{\"569\":1}}],[\"可变函数\",{\"0\":{\"569\":1},\"1\":{\"569\":1}}],[\"可与多种数据库交互\",{\"1\":{\"513\":1}}],[\"可根据需求进行调整\",{\"1\":{\"469\":1}}],[\"可追踪性\",{\"1\":{\"404\":1}}],[\"可追溯\",{\"1\":{\"403\":1}}],[\"可预测性\",{\"1\":{\"404\":1}}],[\"可预测的状态管理方案\",{\"1\":{\"400\":1}}],[\"可预测的数据源\",{\"1\":{\"400\":1}}],[\"可执行相关的回调函数\",{\"1\":{\"401\":1}}],[\"可伸缩性和可维护性等方面\",{\"1\":{\"371\":1}}],[\"可索引类型\",{\"1\":{\"319\":1}}],[\"可辨识联合\",{\"1\":{\"319\":1}}],[\"可读\",{\"1\":{\"314\":1}}],[\"可读性和安全性\",{\"1\":{\"312\":1}}],[\"可读性和可重用性\",{\"1\":{\"56\":1}}],[\"可读性更好的代码\",{\"1\":{\"252\":1}}],[\"可读性强的代码逻辑\",{\"1\":{\"187\":1}}],[\"可达的对象\",{\"1\":{\"276\":1}}],[\"可用于在需要时停止周期性执行\",{\"1\":{\"260\":1}}],[\"可用于在需要时取消延迟执行\",{\"1\":{\"260\":1}}],[\"可选参数\",{\"1\":{\"519\":1}}],[\"可选参数和默认参数\",{\"1\":{\"313\":1}}],[\"可选的值包括development\",{\"1\":{\"453\":1}}],[\"可选的额外数据\",{\"1\":{\"401\":1}}],[\"可选的返回值\",{\"1\":{\"258\":1}}],[\"可选\",{\"1\":{\"260\":2,\"311\":1,\"313\":1,\"475\":1}}],[\"可选链运算符\",{\"1\":{\"173\":2}}],[\"可缩放且保持清晰\",{\"1\":{\"237\":1}}],[\"可维护的结构\",{\"1\":{\"583\":1}}],[\"可维护的模块的方式\",{\"1\":{\"434\":1}}],[\"可维护的模块\",{\"1\":{\"327\":1}}],[\"可维护性更高\",{\"1\":{\"415\":1}}],[\"可维护性\",{\"1\":{\"327\":1}}],[\"可维护性和可重用性\",{\"1\":{\"183\":1,\"313\":1,\"583\":1}}],[\"可维护性和可扩展性\",{\"1\":{\"56\":1,\"579\":1,\"592\":1}}],[\"可维护\",{\"1\":{\"314\":1}}],[\"可维护和可复用\",{\"1\":{\"204\":1}}],[\"可控的方式来处理异步操作和迭代过程\",{\"1\":{\"187\":1}}],[\"可扩展的node\",{\"1\":{\"508\":1}}],[\"可扩展的网络应用和服务端程序\",{\"1\":{\"506\":1}}],[\"可扩展性和丰富的生态系统使得它成为构建实时应用\",{\"1\":{\"506\":1}}],[\"可扩展性和可维护性\",{\"1\":{\"183\":1,\"434\":1}}],[\"可扩展和易于维护的代码\",{\"1\":{\"183\":1}}],[\"可计算方法名\",{\"1\":{\"171\":1}}],[\"可重用性\",{\"1\":{\"327\":1}}],[\"可重用的组件\",{\"1\":{\"56\":1}}],[\"可重复读和串行化\",{\"1\":{\"137\":1}}],[\"可访问性和可维护性\",{\"1\":{\"226\":1}}],[\"可访问性\",{\"1\":{\"58\":1}}],[\"可测试性和可扩展性\",{\"1\":{\"327\":1}}],[\"可测试性\",{\"1\":{\"56\":1,\"327\":1}}],[\"可独立开发和测试\",{\"1\":{\"56\":1}}],[\"可能抛出异常的代码\",{\"1\":{\"588\":1}}],[\"可能还需要选择是否将node\",{\"1\":{\"507\":1}}],[\"可能无法实现最优的优化效果\",{\"1\":{\"462\":1}}],[\"可能存在一些特殊的路径映射需求\",{\"1\":{\"328\":1}}],[\"可能更简单和高效\",{\"1\":{\"269\":1}}],[\"可能指的是一些增强的语法和运算符相关的功能\",{\"1\":{\"173\":1}}],[\"可能需要考虑性能和内存消耗\",{\"1\":{\"281\":1}}],[\"可能需要进行更多的操作\",{\"1\":{\"369\":1}}],[\"可能需要进行额外的处理\",{\"1\":{\"281\":1}}],[\"可能需要进行一些修改和调整\",{\"1\":{\"99\":1}}],[\"可能需要手动做一些数据验证和处理\",{\"1\":{\"31\":1}}],[\"可能会遇到一些调试和故障排除的情况\",{\"1\":{\"498\":1}}],[\"可能会导致代码难以维护和理解\",{\"1\":{\"444\":1}}],[\"可能会导致命名冲突\",{\"1\":{\"330\":1}}],[\"可能会导致性能问题\",{\"1\":{\"269\":1}}],[\"可能会导致react在更新列表时出现错误或不一致的行为\",{\"1\":{\"46\":1}}],[\"可能会抛出异常的代码块\",{\"1\":{\"255\":1}}],[\"可能会影响性能\",{\"1\":{\"43\":1}}],[\"可复用和可扩展性\",{\"1\":{\"434\":1}}],[\"可复用和易于维护\",{\"1\":{\"161\":1}}],[\"可复用性和可维护性\",{\"1\":{\"313\":1}}],[\"可复用\",{\"1\":{\"42\":1,\"45\":1}}],[\"可以增强代码的可读性和可靠性\",{\"1\":{\"604\":1}}],[\"可以赋值给变量\",{\"1\":{\"590\":1}}],[\"可以利用自动加载器\",{\"1\":{\"584\":1}}],[\"可以利用vue实例作为事件中心来传递数据\",{\"1\":{\"93\":1}}],[\"可以利用v\",{\"1\":{\"81\":1,\"84\":1}}],[\"可以跨页面共享数据\",{\"1\":{\"521\":1}}],[\"可以输出一个或多个字符串\",{\"1\":{\"515\":1}}],[\"可以处理表单提交\",{\"1\":{\"513\":1}}],[\"可以处理超出\",{\"1\":{\"310\":1}}],[\"可以加速后续的构建过程\",{\"1\":{\"482\":1}}],[\"可以加速开发过程\",{\"1\":{\"9\":1}}],[\"可以显著提高应用程序的性能和加载速度\",{\"1\":{\"480\":1}}],[\"可以显示一个加载提示\",{\"1\":{\"349\":1}}],[\"可以显示加载指示符或其他适当的反馈给用户\",{\"1\":{\"33\":1}}],[\"可以大大提高开发效率和错误定位的速度\",{\"1\":{\"468\":1}}],[\"可以极大地提升开发团队的工作效率和软件的可维护性\",{\"1\":{\"466\":1}}],[\"可以节省开发时间\",{\"1\":{\"466\":1}}],[\"可以节省带宽资源\",{\"1\":{\"342\":1}}],[\"可以设定缓存容量上限\",{\"1\":{\"465\":1}}],[\"可以设置一个适当的间隔时间或者使用节流函数来控制请求的频率\",{\"1\":{\"349\":1}}],[\"可以设置请求类型\",{\"1\":{\"343\":1}}],[\"可以设置为scroll\",{\"1\":{\"158\":1}}],[\"可以设置为repeat\",{\"1\":{\"158\":1}}],[\"可以设置为content\",{\"1\":{\"158\":2}}],[\"可以设置服务器的端口号\",{\"1\":{\"132\":1}}],[\"可以按需配置和使用\",{\"1\":{\"463\":1}}],[\"可以按照常规的方式定义状态\",{\"1\":{\"444\":1}}],[\"可以按照以下步骤进行操作\",{\"1\":{\"427\":1}}],[\"可以参考vuex和vue的文档\",{\"1\":{\"444\":1}}],[\"可以使你的调试体验更顺畅和准确\",{\"1\":{\"468\":1}}],[\"可以使webpack正确地找到和加载模块\",{\"1\":{\"460\":1}}],[\"可以使模块之间的通信更明确和可控\",{\"1\":{\"444\":1}}],[\"可以使用一些选项来进一步自定义过滤器的行为\",{\"1\":{\"603\":1}}],[\"可以使用一些缓存库或自定义代码来实现片段缓存\",{\"1\":{\"601\":1}}],[\"可以使用file\",{\"1\":{\"598\":1}}],[\"可以使用fwrite\",{\"1\":{\"596\":1}}],[\"可以使用fread\",{\"1\":{\"595\":1}}],[\"可以使用fopen\",{\"1\":{\"594\":1}}],[\"可以使用for\",{\"1\":{\"167\":1}}],[\"可以使用各种方法与数据库进行连接和操作\",{\"1\":{\"600\":1}}],[\"可以使用各种设计模式来优化代码结构\",{\"1\":{\"592\":1}}],[\"可以使用各种属性来控制盒模型的不同部分\",{\"1\":{\"146\":1}}],[\"可以使用错误处理机制来捕获和处理运行时产生的错误\",{\"1\":{\"585\":1}}],[\"可以使用完全限定名称\",{\"1\":{\"584\":1}}],[\"可以使用重定向将用户导航到另一个页面\",{\"1\":{\"580\":1}}],[\"可以使用include和require语句来包含其他文件\",{\"1\":{\"599\":1}}],[\"可以使用isset\",{\"1\":{\"580\":1}}],[\"可以使用import\",{\"1\":{\"504\":1}}],[\"可以使用循环结构来遍历数组中的元素\",{\"1\":{\"577\":1}}],[\"可以使用索引或键来访问数组中的元素\",{\"1\":{\"575\":1}}],[\"可以使用括号\",{\"1\":{\"515\":1}}],[\"可以使用内置模块和第三方模块来扩展和增强应用程序的功能\",{\"1\":{\"509\":1}}],[\"可以使用工具如tree\",{\"1\":{\"504\":1}}],[\"可以使用相应的loader将它们与webpack集成\",{\"1\":{\"474\":1}}],[\"可以使用较长的缓存时间\",{\"1\":{\"465\":1}}],[\"可以使用较短的缓存时间\",{\"1\":{\"465\":1}}],[\"可以使用output\",{\"1\":{\"483\":1}}],[\"可以使用optimization\",{\"1\":{\"458\":1}}],[\"可以使用onsubmit事件来监听表单的提交\",{\"1\":{\"33\":1}}],[\"可以使用插件来监测状态的变化\",{\"1\":{\"443\":1}}],[\"可以使用函数返回state对象\",{\"1\":{\"436\":1}}],[\"可以使用vuex提供的modules选项来组织这些模块\",{\"1\":{\"435\":1}}],[\"可以使用命名空间来访问它们\",{\"1\":{\"434\":1}}],[\"可以使用getter从state中获取状态\",{\"1\":{\"430\":1}}],[\"可以使用getattribute和setattribute方法来获取和修改元素的属性\",{\"1\":{\"265\":1}}],[\"可以使用动态import\",{\"1\":{\"423\":1}}],[\"可以使用动画效果或逐渐显示错误信息\",{\"1\":{\"32\":1}}],[\"可以使用路由组件传参\",{\"1\":{\"420\":1}}],[\"可以使用props上的操作来调度redux中的action\",{\"1\":{\"406\":1}}],[\"可以使用p选择器\",{\"1\":{\"143\":1}}],[\"可以使用浏览器的历史记录api进行路由跳转\",{\"1\":{\"384\":1}}],[\"可以使用npm或yarn来安装react\",{\"1\":{\"375\":1}}],[\"可以使用name属性指定动画类名\",{\"1\":{\"98\":1}}],[\"可以使用缓存的版本\",{\"1\":{\"354\":1}}],[\"可以使用持久连接或者http\",{\"1\":{\"351\":1}}],[\"可以使用javascript编写回调函数来处理响应数据\",{\"1\":{\"341\":1}}],[\"可以使用链式调用的方式依次混入\",{\"1\":{\"330\":1}}],[\"可以使用特定的命名约定来区分它们\",{\"1\":{\"330\":1}}],[\"可以使用合适的配置项进行调整\",{\"1\":{\"328\":1}}],[\"可以使用匿名函数来定义函数\",{\"1\":{\"313\":1}}],[\"可以使用访问修饰符\",{\"1\":{\"312\":1}}],[\"可以使用基本数据类型\",{\"1\":{\"311\":1}}],[\"可以使用联合类型\",{\"1\":{\"310\":1}}],[\"可以使用更精确的类型\",{\"1\":{\"310\":1}}],[\"可以使用更多的\",{\"1\":{\"208\":1}}],[\"可以使用类型后缀或数组泛型声明数组类型\",{\"1\":{\"310\":1}}],[\"可以使用数组来组织和操作一组数据\",{\"1\":{\"310\":1}}],[\"可以使用$\",{\"1\":{\"307\":1}}],[\"可以使用尾递归优化或迭代算法来避免堆栈溢出\",{\"1\":{\"277\":1}}],[\"可以使用substr\",{\"1\":{\"545\":1}}],[\"可以使用strtolower\",{\"1\":{\"547\":1}}],[\"可以使用str\",{\"1\":{\"546\":1}}],[\"可以使用strlen\",{\"1\":{\"543\":1}}],[\"可以使用state来管理应用程序的状态\",{\"1\":{\"429\":1}}],[\"可以使用style属性中的display属性来检查和修改元素的可见性\",{\"1\":{\"265\":1}}],[\"可以使用show\",{\"1\":{\"133\":1}}],[\"可以使用redux中间件来处理\",{\"1\":{\"407\":1}}],[\"可以使用redux中的中间件\",{\"1\":{\"401\":1}}],[\"可以使用redux提供的中间件\",{\"1\":{\"406\":1}}],[\"可以使用replacechild方法替换一个子元素\",{\"1\":{\"265\":1}}],[\"可以使用removechild方法从dom中移除一个元素\",{\"1\":{\"265\":1}}],[\"可以使用react\",{\"1\":{\"43\":1,\"49\":1,\"51\":1}}],[\"可以使用reactdom\",{\"1\":{\"21\":1}}],[\"可以使用copy\",{\"1\":{\"597\":1}}],[\"可以使用componentdidmount生命周期方法来进行异步加载数据\",{\"1\":{\"50\":1}}],[\"可以使用clonenode方法复制一个元素\",{\"1\":{\"265\":1}}],[\"可以使用childnodes\",{\"1\":{\"265\":1}}],[\"可以使用createelement方法创建新的元素节点\",{\"1\":{\"265\":1}}],[\"可以使用以下代码演示\",{\"1\":{\"397\":1}}],[\"可以使用以下属性\",{\"1\":{\"217\":1}}],[\"可以使用以下方式创建一个web\",{\"1\":{\"57\":1}}],[\"可以使用这些功能对用户输入进行验证\",{\"1\":{\"217\":1}}],[\"可以使用这些库的动画效果\",{\"1\":{\"98\":1}}],[\"可以使用实体字符表示\",{\"1\":{\"213\":1}}],[\"可以使用常规的控制流语句\",{\"1\":{\"196\":1}}],[\"可以使用全局的symbol函数\",{\"1\":{\"174\":1}}],[\"可以使用全局注册和局部注册两种方式来注册组件\",{\"1\":{\"91\":1}}],[\"可以使用计算的表达式作为属性名称\",{\"1\":{\"171\":1}}],[\"可以使用计算属性从原始数据中过滤出特定的数据\",{\"1\":{\"108\":1}}],[\"可以使用构造函数来创建正则表达式对象\",{\"1\":{\"168\":1}}],[\"可以使用逗号分隔多个值\",{\"1\":{\"158\":1}}],[\"可以使用像素值\",{\"1\":{\"158\":1}}],[\"可以使用header\",{\"1\":{\"580\":1}}],[\"可以使用h1\",{\"1\":{\"143\":1}}],[\"可以使用https协议\",{\"1\":{\"352\":1}}],[\"可以使用http\",{\"1\":{\"55\":1}}],[\"可以使用desc关键字进行降序排序\",{\"1\":{\"135\":1}}],[\"可以使用比较运算符\",{\"1\":{\"135\":1}}],[\"可以使用addslashes\",{\"1\":{\"549\":1}}],[\"可以使用addeventlistener方法来为元素添加事件监听器\",{\"1\":{\"265\":1}}],[\"可以使用addeventlistener方法为dom元素添加事件监听器\",{\"1\":{\"263\":1}}],[\"可以使用as关键字进行重命名\",{\"1\":{\"202\":1}}],[\"可以使用a\",{\"1\":{\"143\":1}}],[\"可以使用alter\",{\"1\":{\"134\":1}}],[\"可以使用aria\",{\"1\":{\"32\":1}}],[\"可以使用move\",{\"1\":{\"580\":1}}],[\"可以使用mysqldump命令行工具\",{\"1\":{\"133\":1}}],[\"可以使用memoized函数或使用函数装饰器等方式来实现记忆化技术\",{\"1\":{\"52\":1}}],[\"可以使用webpack的cli命令行工具或相关的构建工具来指定使用哪个配置文件\",{\"1\":{\"454\":1}}],[\"可以使用webpack等打包工具的代码分割功能来实现按需加载\",{\"1\":{\"51\":1}}],[\"可以使用watch侦听器\",{\"1\":{\"108\":1}}],[\"可以使用trim\",{\"1\":{\"548\":1}}],[\"可以使用toref或torefs函数递归地转化每个属性\",{\"1\":{\"102\":1}}],[\"可以使用this\",{\"1\":{\"20\":1,\"429\":1,\"442\":1}}],[\"可以使用break语句跳出当前的循环\",{\"1\":{\"564\":1}}],[\"可以使用box\",{\"1\":{\"146\":1}}],[\"可以使用before\",{\"1\":{\"98\":1}}],[\"可以使用bind方法或者使用箭头函数进行绑定\",{\"1\":{\"26\":1}}],[\"可以使用混入来提取和复用这些代码逻辑\",{\"1\":{\"97\":1}}],[\"可以使用具名插槽在组件中定义多个插槽\",{\"1\":{\"96\":1}}],[\"可以使用\",{\"1\":{\"94\":1,\"110\":1,\"143\":7,\"187\":1,\"193\":2,\"196\":4,\"198\":1,\"224\":1,\"228\":1,\"234\":1,\"253\":1,\"267\":1,\"282\":2,\"298\":1,\"310\":1,\"314\":1,\"319\":1,\"327\":1,\"335\":1,\"364\":1,\"369\":1,\"386\":1,\"483\":1,\"544\":1}}],[\"可以使用前端框架提供的功能来处理路由\",{\"1\":{\"63\":1}}],[\"可以使用消息传递的方式\",{\"1\":{\"57\":1}}],[\"可以使用图片编辑工具\",{\"1\":{\"54\":1}}],[\"可以使用现成的虚拟滚动库或自行编写代码实现虚拟滚动\",{\"1\":{\"53\":1}}],[\"可以使用库或框架提供的分页组件实现分页功能\",{\"1\":{\"53\":1}}],[\"可以使用effect钩子\",{\"1\":{\"50\":1}}],[\"可以使用生命周期方法和effect钩子来处理异步加载数据的逻辑\",{\"1\":{\"50\":1}}],[\"可以使用虚拟化技术\",{\"1\":{\"49\":1}}],[\"可以使用条件语句和验证函数来验证和处理表单输入数据的有效性\",{\"1\":{\"580\":1}}],[\"可以使用条件表达式\",{\"1\":{\"43\":1}}],[\"可以使用条件渲染来根据错误状态字段来显示相应的错误\",{\"1\":{\"32\":1}}],[\"可以使用它来读取dom节点的布局信息\",{\"1\":{\"41\":1}}],[\"可以使用异步操作\",{\"1\":{\"33\":1}}],[\"可以使用组件状态来存储错误信息\",{\"1\":{\"32\":1}}],[\"可以使用usestate或usecallback钩子来定义事件处理函数\",{\"1\":{\"26\":1}}],[\"可以使用箭头函数或bind\",{\"1\":{\"25\":1}}],[\"可以使用该组件在其他地方进行渲染\",{\"1\":{\"19\":1}}],[\"可以使用自动加载器\",{\"1\":{\"583\":1}}],[\"可以使用自定义的react组件或原生html标签作为元素的类型\",{\"1\":{\"16\":1}}],[\"可以使用自闭合语法\",{\"1\":{\"15\":1}}],[\"可以使用空标签或片段来包裹它们\",{\"1\":{\"15\":1}}],[\"可以使用花括号\",{\"1\":{\"14\":1}}],[\"可以启用vuex的严格模式\",{\"1\":{\"443\":1}}],[\"可以定义以下四个关键概念来管理状态和操作\",{\"1\":{\"436\":1}}],[\"可以定义进入和离开过渡的效果\",{\"1\":{\"98\":1}}],[\"可以从state中获取状态\",{\"1\":{\"430\":1}}],[\"可以从git官方网站下载并安装git\",{\"1\":{\"334\":1}}],[\"可以集中管理应用程序的状态\",{\"1\":{\"429\":1}}],[\"可以调用unsubscribe\",{\"1\":{\"401\":1}}],[\"可以调用事件对象的preventdefault\",{\"1\":{\"33\":1}}],[\"可以监听和触发路由事件\",{\"1\":{\"387\":1}}],[\"可以配置保护某些路由\",{\"1\":{\"385\":1}}],[\"可以逐步分析程序的执行过程\",{\"1\":{\"372\":1}}],[\"可以逐步地从数据源中获取数据\",{\"1\":{\"198\":1}}],[\"可以管理和控制用户的访问权限\",{\"1\":{\"370\":1}}],[\"可以防止潜在的中间人攻击和重定向漏洞\",{\"1\":{\"359\":1}}],[\"可以考虑按需导入和分割模块\",{\"1\":{\"443\":1}}],[\"可以考虑使用插件来实现vuex状态的持久化\",{\"1\":{\"443\":1}}],[\"可以考虑以下几个方面\",{\"1\":{\"443\":1}}],[\"可以考虑以下解决方法\",{\"1\":{\"277\":1}}],[\"可以考虑将其加密或者进行服务器端的验证\",{\"1\":{\"357\":1}}],[\"可以考虑分页加载或者按需加载的方式\",{\"1\":{\"349\":1}}],[\"可以禁用加载按钮或者进行其他处理\",{\"1\":{\"349\":1}}],[\"可以禁用提交按钮\",{\"1\":{\"33\":1}}],[\"可以检查是否还有更多内容要加载\",{\"1\":{\"349\":1}}],[\"可以传递需要发送的数据作为参数\",{\"1\":{\"341\":1}}],[\"可以满足复杂项目的需求\",{\"1\":{\"338\":1}}],[\"可以帮助优化构建速度和资源加载速度\",{\"1\":{\"483\":1}}],[\"可以帮助你解决各种问题和故障\",{\"1\":{\"503\":1}}],[\"可以帮助你更好地了解和优化你的应用程序的打包结果\",{\"1\":{\"497\":1}}],[\"可以帮助你调试和检查redux应用程序的状态变化\",{\"1\":{\"407\":1}}],[\"可以帮助你在不破坏原有类型声明的基础上\",{\"1\":{\"329\":1}}],[\"可以帮助收集和分析应用程序中的错误和异常\",{\"1\":{\"372\":1}}],[\"可以帮助您创建出高效和易于使用的api\",{\"1\":{\"371\":1}}],[\"可以帮助开发者更方便地实现ajax请求和处理响应\",{\"1\":{\"343\":1}}],[\"可以帮助开发者更灵活\",{\"1\":{\"338\":1}}],[\"可以帮助开发者提升用户体验\",{\"1\":{\"340\":1}}],[\"可以独立测试\",{\"1\":{\"327\":1}}],[\"可以安全地使用该类型的属性和方法\",{\"1\":{\"317\":1}}],[\"可以手动为某些枚举成员指定值\",{\"1\":{\"314\":1}}],[\"可以包含之前获取的响应的etag值\",{\"1\":{\"355\":1}}],[\"可以包含构造函数\",{\"1\":{\"312\":1}}],[\"可以包含属性\",{\"1\":{\"312\":1}}],[\"可以表示一个新创建的对象实例\",{\"1\":{\"310\":1}}],[\"可以表示任何对象类型\",{\"1\":{\"310\":1}}],[\"可以表示任意精度的整数\",{\"1\":{\"173\":1}}],[\"可以用任意其它字符代替\",{\"1\":{\"528\":1}}],[\"可以用来创建一个新的对象实例\",{\"1\":{\"310\":1}}],[\"可以用来明确指示某个变量没有值\",{\"1\":{\"310\":1}}],[\"可以用于注入环境变量等\",{\"1\":{\"456\":1}}],[\"可以用于在javascript代码中实现页面的跳转和导航\",{\"1\":{\"416\":1}}],[\"可以用于控制缓存\",{\"1\":{\"355\":1}}],[\"可以用于执行代码检查\",{\"1\":{\"338\":1}}],[\"可以用于保持状态\",{\"1\":{\"268\":1}}],[\"可以用于扩展\",{\"1\":{\"204\":1}}],[\"可以用于实现异步编程\",{\"1\":{\"197\":1}}],[\"可以用于创建唯一的属性键\",{\"1\":{\"174\":1}}],[\"可以用于包裹那些在相同输入下保持相同输出的纯展示组件\",{\"1\":{\"47\":1}}],[\"可以用于性能优化\",{\"1\":{\"22\":1}}],[\"可以扩展redux的能力并使其适应更多的场景\",{\"1\":{\"405\":1}}],[\"可以扩展react的功能和适用领域\",{\"1\":{\"8\":1}}],[\"可以扩展jquery的功能和效果\",{\"1\":{\"293\":1}}],[\"可以让浏览器缓存页面\",{\"1\":{\"601\":1}}],[\"可以让多个模块之间进行解耦的通信\",{\"1\":{\"444\":1}}],[\"可以让代码更加清晰\",{\"1\":{\"314\":1}}],[\"可以让元素以不同的方式显示\",{\"1\":{\"290\":1}}],[\"可以让父组件向子组件传递信息\",{\"1\":{\"36\":1}}],[\"可以多次调用\",{\"1\":{\"282\":1}}],[\"可以注意以下几点\",{\"1\":{\"276\":1}}],[\"可以注册全局可访问的symbol\",{\"1\":{\"174\":1}}],[\"可以采用逐步重构或排除因素的方法\",{\"1\":{\"501\":1}}],[\"可以采用分页加载和懒加载的策略\",{\"1\":{\"55\":1}}],[\"可以采取以下一些措施\",{\"1\":{\"275\":1}}],[\"可以自动重新加载资源和刷新页面\",{\"1\":{\"490\":1}}],[\"可以自己起一个有意义的名称\",{\"1\":{\"258\":1,\"259\":1}}],[\"可以自定义对象实现迭代器协议\",{\"1\":{\"185\":1}}],[\"可以随时修改变量的值和类型\",{\"1\":{\"249\":1}}],[\"可以给它们赋值\",{\"1\":{\"249\":1}}],[\"可以遍历异步生成器函数返回的数据\",{\"1\":{\"198\":1}}],[\"可以获得所有\",{\"1\":{\"193\":1}}],[\"可以获取对象上的symbol键\",{\"1\":{\"174\":1}}],[\"可以获取和使用传递的数据\",{\"1\":{\"11\":1}}],[\"可以编写清晰\",{\"1\":{\"187\":1}}],[\"可以继承另一个类\",{\"1\":{\"183\":1}}],[\"可以避免无效的构建\",{\"1\":{\"497\":1}}],[\"可以避免模块重复加载\",{\"1\":{\"458\":1}}],[\"可以避免栈溢出错误\",{\"1\":{\"172\":1}}],[\"可以避免不必要的重新渲染\",{\"1\":{\"48\":1}}],[\"可以省略函数关键字和冒号\",{\"1\":{\"171\":1}}],[\"可以省略冒号和属性值\",{\"1\":{\"171\":1}}],[\"可以简化模块的导入路径\",{\"1\":{\"460\":1}}],[\"可以简化\",{\"1\":{\"330\":1}}],[\"可以简化变量的赋值过程\",{\"1\":{\"166\":1}}],[\"可以简写成\",{\"1\":{\"70\":2}}],[\"可以选择除了具有\",{\"1\":{\"159\":1}}],[\"可以选择表格中的第n列\",{\"1\":{\"159\":1}}],[\"可以选择使用source\",{\"1\":{\"468\":1}}],[\"可以选择使用全局注册或局部注册来注册组件\",{\"1\":{\"91\":1}}],[\"可以选择使用内联错误提示\",{\"1\":{\"32\":1}}],[\"可以是以下之一\",{\"1\":{\"603\":1}}],[\"可以是字符串或带有参数的路径模式\",{\"1\":{\"365\":1}}],[\"可以是字符串或标识符\",{\"1\":{\"259\":1}}],[\"可以是任何有效的javascript表达式\",{\"1\":{\"259\":1}}],[\"可以是div元素或其他具有display\",{\"1\":{\"156\":1}}],[\"可以是圆形\",{\"1\":{\"153\":1}}],[\"可以是角度\",{\"1\":{\"153\":1}}],[\"可以是一个对象\",{\"1\":{\"81\":1,\"84\":1}}],[\"可以指定函数或方法的返回值类型\",{\"1\":{\"604\":1}}],[\"可以指定颜色的位置和颜色值\",{\"1\":{\"153\":1}}],[\"可以指定动画结束后是否回到初始状态\",{\"1\":{\"152\":1}}],[\"可以指定要检索的列\",{\"1\":{\"135\":1}}],[\"可以同时指定多个属性\",{\"1\":{\"151\":1}}],[\"可以创建多个汽车对象并对其进行操作\",{\"1\":{\"583\":1}}],[\"可以创建一个用户模块\",{\"1\":{\"435\":1}}],[\"可以创建一个接收参数的装饰器来指定类的元数据\",{\"1\":{\"324\":1}}],[\"可以创建一些有状态的函数或实现私有变量的概念\",{\"1\":{\"258\":1}}],[\"可以创建没有名称的函数\",{\"1\":{\"258\":1}}],[\"可以创建可复用的结构和内容\",{\"1\":{\"245\":1}}],[\"可以创建可暂停和可恢复的异步操作\",{\"1\":{\"197\":1}}],[\"可以创建自定义的\",{\"1\":{\"244\":1}}],[\"可以创建各种各样的渐变效果\",{\"1\":{\"153\":1}}],[\"可以创建各种各样的过渡效果\",{\"1\":{\"151\":1}}],[\"可以创建更丰富和复杂的过渡动画效果\",{\"1\":{\"151\":1}}],[\"可以创建出具有良好响应性的网页设计\",{\"1\":{\"148\":1}}],[\"可以创建复杂的网格布局\",{\"1\":{\"147\":1}}],[\"可以更好地管理代码库并提高开发效率\",{\"1\":{\"584\":1}}],[\"可以更好地利用缓存来提高构建性能\",{\"1\":{\"497\":1}}],[\"可以更清晰地组织和管理vuex中的模块\",{\"1\":{\"444\":1}}],[\"可以更清晰地编写异步代码\",{\"1\":{\"322\":1}}],[\"可以更快速地实现ajax请求和处理响应\",{\"1\":{\"343\":1}}],[\"可以更高效地开展项目工作\",{\"1\":{\"335\":1}}],[\"可以更精确地控制元素的位置和大小\",{\"1\":{\"148\":1}}],[\"可以更方便地开发大规模\",{\"1\":{\"8\":1}}],[\"可以轻松实现响应式布局\",{\"1\":{\"148\":1}}],[\"可以精确控制元素的位置\",{\"1\":{\"147\":2}}],[\"可以确保只有经过身份验证的用户才能获取所需的权限\",{\"1\":{\"370\":1}}],[\"可以确保数据库中的数据始终处于一致的状态\",{\"1\":{\"137\":1}}],[\"可以确保回调函数只在组件挂载和卸载时执行一次\",{\"1\":{\"50\":1}}],[\"可以限制对数据库的访问权限和操作权限\",{\"1\":{\"131\":1}}],[\"可以对类的构造函数进行修改\",{\"1\":{\"324\":1}}],[\"可以对数组进行各种操作\",{\"1\":{\"310\":1}}],[\"可以对数据库进行灵活和高效的数据查询\",{\"1\":{\"131\":1}}],[\"可以对元素的布局和尺寸产生不同的影响\",{\"1\":{\"146\":1}}],[\"可以对网站或web应用进行综合性能评估\",{\"1\":{\"58\":1}}],[\"可以接受一个\",{\"1\":{\"126\":1}}],[\"可以接受一个组件作为参数并返回一个新的组件\",{\"1\":{\"23\":1}}],[\"可以添加新的列\",{\"1\":{\"134\":1}}],[\"可以添加\",{\"1\":{\"110\":1}}],[\"可以直接获取开源社区或第三方开发者共享的公共代码\",{\"1\":{\"466\":1}}],[\"可以直接使用相应的状态\",{\"1\":{\"444\":1}}],[\"可以直接使用\",{\"1\":{\"325\":1}}],[\"可以直接在组件中进行处理\",{\"1\":{\"443\":1}}],[\"可以直接在html标签的属性中指定事件处理函数\",{\"1\":{\"263\":1}}],[\"可以直接在node\",{\"1\":{\"203\":1}}],[\"可以直接在浏览器中使用<script\",{\"1\":{\"203\":1}}],[\"可以直接在正则表达式字面量后面添加\",{\"1\":{\"168\":1}}],[\"可以直接编写css代码\",{\"1\":{\"142\":1}}],[\"可以直接将响应式对象用于渲染和操作视图\",{\"1\":{\"102\":1}}],[\"可以直接从缓存中获取\",{\"1\":{\"55\":1}}],[\"可以直接从本地缓存中获取\",{\"1\":{\"55\":1}}],[\"可以访问请求对象\",{\"1\":{\"366\":1}}],[\"可以访问函数作用域中的变量\",{\"1\":{\"311\":1}}],[\"可以访问全局作用域中的变量\",{\"1\":{\"311\":1}}],[\"可以访问全局变量\",{\"1\":{\"249\":1}}],[\"可以访问局部变量\",{\"1\":{\"249\":1}}],[\"可以访问父组件\",{\"1\":{\"93\":1}}],[\"可以访问到redux中的状态和调度操作\",{\"1\":{\"406\":1}}],[\"可以访问到\",{\"1\":{\"87\":1}}],[\"可以像下面这样调用\",{\"1\":{\"86\":1}}],[\"可以替换为任意真实值\",{\"1\":{\"82\":1}}],[\"可以被该类内部\",{\"1\":{\"312\":1}}],[\"可以被回收\",{\"1\":{\"276\":1}}],[\"可以被用来定义离开动画的持续时间\",{\"1\":{\"125\":1}}],[\"可以被用来定义进入动画的持续时间\",{\"1\":{\"125\":1}}],[\"可以被符合规范的浏览器和\",{\"1\":{\"68\":1}}],[\"可以被逐步集成\",{\"1\":{\"61\":1}}],[\"可以测试网页在不同地点和设备上的加载速度和性能\",{\"1\":{\"58\":1}}],[\"可以查看应用程序的资源加载\",{\"1\":{\"58\":1}}],[\"可以改善代码的可读性\",{\"1\":{\"56\":1}}],[\"可以减少资源的重复加载和重新构建时间\",{\"1\":{\"495\":1}}],[\"可以减少代码冗余\",{\"1\":{\"466\":1}}],[\"可以减少直接对真实dom的操作次数\",{\"1\":{\"128\":1}}],[\"可以减少页面中的请求数量\",{\"1\":{\"55\":1}}],[\"可以减少服务器的负载和提高页面加载速度\",{\"1\":{\"55\":1}}],[\"可以控制它们的外观和行为\",{\"1\":{\"210\":1}}],[\"可以控制资源的缓存时间和缓存行为\",{\"1\":{\"55\":1}}],[\"可以控制副作用逻辑的执行时机\",{\"1\":{\"49\":1}}],[\"可以有效地管理和优化网络连接\",{\"1\":{\"358\":1}}],[\"可以有效地优化网页中的图片\",{\"1\":{\"54\":1}}],[\"可以有效地缓存函数的结果\",{\"1\":{\"52\":1}}],[\"可以保持图片在网页上的展示效果\",{\"1\":{\"54\":1}}],[\"可以取消订阅\",{\"1\":{\"41\":1}}],[\"可以实现模块的共享和动态远程加载\",{\"1\":{\"497\":1}}],[\"可以实现动态加载和替换特定功能的动态导入\",{\"1\":{\"467\":1}}],[\"可以实现更加复杂和灵活的过渡效果\",{\"1\":{\"395\":1}}],[\"可以实现不同的状态操作\",{\"1\":{\"401\":1}}],[\"可以实现不同的动画效果\",{\"1\":{\"152\":1}}],[\"可以实现不同级别\",{\"1\":{\"356\":1}}],[\"可以实现自定义的拖放交互和行为\",{\"1\":{\"242\":1}}],[\"可以实现多个异步操作的并行或顺序执行\",{\"1\":{\"196\":1}}],[\"可以实现元素属性从一种状态到另一种状态的平滑过渡效果\",{\"1\":{\"152\":1}}],[\"可以实现ui在不同页面和应用中的复用\",{\"1\":{\"56\":1}}],[\"可以实现组件间的数据传递\",{\"1\":{\"35\":1}}],[\"可以实现数据的管理和状态的共享\",{\"1\":{\"23\":1}}],[\"可以提供标准化的调用方式\",{\"1\":{\"466\":1}}],[\"可以提供访问键盘导航的功能\",{\"1\":{\"232\":1}}],[\"可以提供更快的访问速度和稳定性\",{\"1\":{\"55\":1}}],[\"可以提供更好的用户体验\",{\"1\":{\"32\":1}}],[\"可以提升用户体验和界面交互的吸引力\",{\"1\":{\"98\":1}}],[\"可以提升页面加载速度\",{\"1\":{\"55\":1}}],[\"可以提高性能和用户体验\",{\"1\":{\"467\":1}}],[\"可以提高应用程序的加载性能\",{\"1\":{\"458\":1}}],[\"可以提高应用的性能和资源利用率\",{\"1\":{\"202\":1}}],[\"可以提高代码质量和开发效率\",{\"1\":{\"327\":1}}],[\"可以提高代码的可读性\",{\"1\":{\"579\":1}}],[\"可以提高代码的可读性和可维护性\",{\"1\":{\"92\":1,\"325\":1}}],[\"可以提高代码的可维护性和可读性\",{\"1\":{\"314\":1}}],[\"可以提高代码的灵活性\",{\"1\":{\"313\":1}}],[\"可以提高整体的执行效率\",{\"1\":{\"198\":1}}],[\"可以提高开发效率\",{\"1\":{\"89\":1}}],[\"可以提高用户体验并减少性能问题\",{\"1\":{\"53\":1}}],[\"可以提高用户体验\",{\"1\":{\"33\":1}}],[\"可以向用户显示成功或失败的消息\",{\"1\":{\"33\":1}}],[\"可以为不同的loader指定不同的文件匹配规则\",{\"1\":{\"463\":1}}],[\"可以为每个主要页面或组件创建一个对应的模块\",{\"1\":{\"435\":1}}],[\"可以为每个表单字段创建一个对应的错误状态字段\",{\"1\":{\"32\":1}}],[\"可以为函数指定参数类型和返回类型\",{\"1\":{\"313\":1}}],[\"可以为函数的参数设置默认值\",{\"1\":{\"258\":1}}],[\"可以为捕获的子字符串设置名字\",{\"1\":{\"168\":1}}],[\"可以为表单输入框添加样式\",{\"1\":{\"32\":1}}],[\"可以将相关的类\",{\"1\":{\"584\":1}}],[\"可以将代码组织为更模块化\",{\"1\":{\"583\":1}}],[\"可以将代码分割为异步加载的模块\",{\"1\":{\"480\":1}}],[\"可以将问题简化为最小化的配置和代码\",{\"1\":{\"501\":1}}],[\"可以将某个模块单独打包成一个文件\",{\"1\":{\"458\":1}}],[\"可以将不同页面或功能模块的代码分离开来\",{\"1\":{\"453\":1,\"458\":1}}],[\"可以将不涉及特定业务逻辑且可在多个应用中复用的状态和操作划分为一个通用的模块\",{\"1\":{\"435\":1}}],[\"可以将应用程序代码拆分成多个小块\",{\"1\":{\"453\":1,\"458\":1}}],[\"可以将其抽象成可配置的参数\",{\"1\":{\"466\":1}}],[\"可以将其他类型的文件\",{\"1\":{\"455\":1}}],[\"可以将其定义为计算属性而不是每次都从vuex状态中访问\",{\"1\":{\"443\":1}}],[\"可以将其应用于特定的路由\",{\"1\":{\"366\":1}}],[\"可以将store拆分成模块\",{\"1\":{\"426\":1}}],[\"可以将\",{\"1\":{\"330\":1}}],[\"可以将命名空间定义分散在多个文件中\",{\"1\":{\"326\":1}}],[\"可以将它们作为一个整体进行管理和调用\",{\"1\":{\"326\":1}}],[\"可以将它与库一起发布\",{\"1\":{\"325\":1}}],[\"可以将该代码的类型标注为\",{\"1\":{\"310\":1}}],[\"可以将该函数的返回类型标注为\",{\"1\":{\"310\":1}}],[\"可以将该数据状态提升到它们共同的父组件中\",{\"1\":{\"35\":1}}],[\"可以将函数作为表达式赋值给变量\",{\"1\":{\"258\":1}}],[\"可以将值直接赋给变量\",{\"1\":{\"249\":1}}],[\"可以将类赋值给变量\",{\"1\":{\"183\":1}}],[\"可以将可迭代对象\",{\"1\":{\"173\":1}}],[\"可以将传入函数的对象或数组解构为单独的变量\",{\"1\":{\"172\":1}}],[\"可以将数组或可迭代对象展开为单独的元素\",{\"1\":{\"172\":1}}],[\"可以将容器中的元素放置在一条或多条轴上\",{\"1\":{\"147\":1}}],[\"可以将网页的内容划分为列和行\",{\"1\":{\"147\":1}}],[\"可以将box\",{\"1\":{\"146\":1}}],[\"可以将子查询的结果作为外部查询的一部分条件\",{\"1\":{\"135\":1}}],[\"可以将节点分为元素节点\",{\"1\":{\"129\":1}}],[\"可以将耗时的计算和处理任务移到后台线程中进行\",{\"1\":{\"57\":1}}],[\"可以将复杂的用户界面拆分成多个独立和可重用的组件\",{\"1\":{\"244\":1}}],[\"可以将复杂的代码库或应用程序划分为更小\",{\"1\":{\"56\":1}}],[\"可以将复杂的功能划分为独立的模块\",{\"1\":{\"56\":1}}],[\"可以将复杂的ui拆分成独立的组件\",{\"1\":{\"45\":1}}],[\"可以将这些相关数据提升到它们共同的父组件中\",{\"1\":{\"49\":1}}],[\"可以将组件包装为purecomponent\",{\"1\":{\"47\":1}}],[\"可以将事件处理函数定义为类的方法\",{\"1\":{\"26\":1}}],[\"可以将共享的props\",{\"1\":{\"23\":1}}],[\"可以动态地修改组件的行为和外观\",{\"1\":{\"23\":1}}],[\"可以进行其他处理\",{\"1\":{\"580\":1}}],[\"可以进行一些逻辑处理\",{\"1\":{\"33\":1}}],[\"可以进行一些清理工作\",{\"1\":{\"22\":1}}],[\"可以进行dom操作或在更新后的状态进行一些操作\",{\"1\":{\"22\":1}}],[\"可以在整个运行的脚本的任何地方使用\",{\"1\":{\"520\":1}}],[\"可以在package\",{\"1\":{\"510\":1}}],[\"可以在服务器端运行\",{\"1\":{\"506\":1}}],[\"可以在打包文件名中添加哈希值\",{\"1\":{\"469\":1}}],[\"可以在运行时根据需要动态地导入模块\",{\"1\":{\"458\":1}}],[\"可以在运行时根据需要异步加载模块\",{\"1\":{\"202\":1,\"203\":1}}],[\"可以在webpack构建过程中执行各种自定义的任务\",{\"1\":{\"456\":1}}],[\"可以在模块之间进行复杂的交互和通信\",{\"1\":{\"444\":1}}],[\"可以在路由对象中使用\",{\"1\":{\"422\":1}}],[\"可以在路由之间传递参数\",{\"1\":{\"386\":1}}],[\"可以在一个路由中通过配置子路由来实现对应页面的嵌套和组织\",{\"1\":{\"415\":1}}],[\"可以在一个陷阱中使用另一个代理\",{\"1\":{\"189\":1}}],[\"可以在触发action时执行异步逻辑并最终触发另一个action来更新redux状态\",{\"1\":{\"406\":1}}],[\"可以在子路由配置中使用\",{\"1\":{\"396\":1}}],[\"可以在父组件中定义子路由的渲染位置\",{\"1\":{\"396\":1}}],[\"可以在route组件中使用onenter和onexit属性\",{\"1\":{\"387\":1}}],[\"可以在react组件中进行验证和处理\",{\"1\":{\"31\":1}}],[\"可以在回调函数中执行一些需要在路由变化时执行的操作\",{\"1\":{\"387\":1}}],[\"可以在回调函数中执行相应的逻辑\",{\"1\":{\"33\":1}}],[\"可以在组件中使用redux状态来进行渲染和逻辑处理\",{\"1\":{\"406\":1}}],[\"可以在组件中使用history对象进行导航\",{\"1\":{\"383\":1}}],[\"可以在组件内部定义事件处理程序\",{\"1\":{\"25\":1}}],[\"可以在需要进行条件判断并跳转的情况下使用\",{\"1\":{\"382\":1}}],[\"可以在处理函数中使用\",{\"1\":{\"365\":1}}],[\"可以在多个请求之间复用已建立的tcp连接\",{\"1\":{\"358\":1}}],[\"可以在设置cookie时加密数据\",{\"1\":{\"357\":1}}],[\"可以在客户端和服务器之间减少数据传输\",{\"1\":{\"352\":1}}],[\"可以在浏览器和node\",{\"1\":{\"343\":1}}],[\"可以在浏览器中查看文件大小\",{\"1\":{\"492\":1}}],[\"可以在浏览器中使用commonjs模块化\",{\"1\":{\"203\":1}}],[\"可以在浏览器中运行后台线程\",{\"1\":{\"57\":1}}],[\"可以在后台发送异步请求并在返回响应后处理数据\",{\"1\":{\"342\":1}}],[\"可以在后台发送请求\",{\"1\":{\"55\":1}}],[\"可以在后台异步地向服务器发送请求并接收响应\",{\"1\":{\"340\":1}}],[\"可以在配置文件\",{\"1\":{\"328\":1}}],[\"可以在声明文件中描述全局变量\",{\"1\":{\"325\":1}}],[\"可以在声明变量时直接给变量赋初始值\",{\"1\":{\"311\":1}}],[\"可以在调用函数时省略\",{\"1\":{\"313\":1}}],[\"可以在程序的任何位置访问全局作用域中定义的变量\",{\"1\":{\"311\":1}}],[\"可以在单线程的环境下处理异步操作\",{\"1\":{\"270\":1}}],[\"可以在函数外访问全局变量\",{\"1\":{\"249\":1}}],[\"可以在用户填写完表单之后\",{\"1\":{\"234\":1}}],[\"可以在生成器函数内部使用\",{\"1\":{\"186\":1}}],[\"可以在if语句\",{\"1\":{\"172\":1}}],[\"可以在对象字面量中使用与方法名匹配的表达式\",{\"1\":{\"171\":1}}],[\"可以在正则表达式中引用已经匹配到的子字符串\",{\"1\":{\"168\":1}}],[\"可以在字符串中保留换行符\",{\"1\":{\"167\":1}}],[\"可以在背景\",{\"1\":{\"144\":1}}],[\"可以在没有提供具体内容时显示默认的内容\",{\"1\":{\"96\":1}}],[\"可以在其中定义和修改共享状态\",{\"1\":{\"93\":1}}],[\"可以在\",{\"1\":{\"58\":1,\"94\":1,\"224\":1,\"334\":1,\"390\":1}}],[\"可以在不同的构建之间共享缓存状态\",{\"1\":{\"482\":1}}],[\"可以在不同的状态之间创建平滑的动画效果\",{\"1\":{\"152\":1}}],[\"可以在不同的项目和场景中多次使用\",{\"1\":{\"56\":1}}],[\"可以在不同的平台上使用相同的代码\",{\"1\":{\"45\":1}}],[\"可以在性能敏感的场景中显著提升程序的执行效率\",{\"1\":{\"52\":1}}],[\"可以在类的方法上应用记忆化技术\",{\"1\":{\"52\":1}}],[\"可以在effect钩子的回调函数中发起异步请求并更新组件状态\",{\"1\":{\"50\":1}}],[\"可以在这里执行一些操作\",{\"1\":{\"421\":1}}],[\"可以在这里进行异步数据加载\",{\"1\":{\"22\":1}}],[\"可以在这个方法中发起异步请求并更新组件的状态\",{\"1\":{\"50\":1}}],[\"可以在元素的插入\",{\"1\":{\"49\":1}}],[\"可以在表单项下方显示错误信息\",{\"1\":{\"32\":1}}],[\"可以在提交表单时进行完整的验证\",{\"1\":{\"32\":1}}],[\"可以在返回的jsx代码中使用props对象来访问传入的属性\",{\"1\":{\"19\":1}}],[\"可以根据模块的共享情况\",{\"1\":{\"458\":1}}],[\"可以根据应用程序的运行环境选择适当的优化策略\",{\"1\":{\"457\":1}}],[\"可以根据state的值进行计算\",{\"1\":{\"436\":1}}],[\"可以根据项目的需求和特点进行选择使用\",{\"1\":{\"458\":1}}],[\"可以根据项目的实际需求进行选择是否使用\",{\"1\":{\"417\":1}}],[\"可以根据项目需求灵活处理各种类型的文件\",{\"1\":{\"455\":1}}],[\"可以根据项目需求和个人喜好选择适合的框架\",{\"1\":{\"160\":1}}],[\"可以根据路径匹配到不同的组件\",{\"1\":{\"414\":1}}],[\"可以根据特定的条件或参数来动态生成路由\",{\"1\":{\"413\":1}}],[\"可以根据实际需求选择适当的方案来存储和管理用户的状态信息\",{\"1\":{\"357\":1}}],[\"可以根据实际需求和场景选择合适的技术来延迟加载\",{\"1\":{\"51\":1}}],[\"可以根据用户的输入或者在后台请求到的数据进行页面内容的动态刷新\",{\"1\":{\"342\":1}}],[\"可以根据设备的特性自动选择最适合的图片\",{\"1\":{\"239\":1}}],[\"可以根据不同的屏幕尺寸和像素密度选择不同的图片资源\",{\"1\":{\"239\":1}}],[\"可以根据不同的屏幕尺寸和特定的设备要求\",{\"1\":{\"148\":1}}],[\"可以根据共同的列将多个表关联起来\",{\"1\":{\"134\":1}}],[\"可以根据具体需求在配置文件中添加或删除插件\",{\"1\":{\"456\":1}}],[\"可以根据具体需求进行学习和使用\",{\"1\":{\"254\":1}}],[\"可以根据具体需求选择合适的函数和api来使用\",{\"1\":{\"110\":1}}],[\"可以根据具体情况选择最合适的模块化方案\",{\"1\":{\"203\":1}}],[\"可以根据具体项目和需求\",{\"1\":{\"201\":1}}],[\"可以根据具体的需求和项目情况选择合适的模块化方案\",{\"1\":{\"327\":1}}],[\"可以根据具体的需求和场景来决定\",{\"1\":{\"31\":1}}],[\"可以根据具体的需求和组件复杂度来决定\",{\"1\":{\"18\":1}}],[\"可以根据需求来修改这个数据属性的值以切换组件\",{\"1\":{\"94\":1}}],[\"可以根据需要选择所需的组件来构建应用程序\",{\"1\":{\"604\":1}}],[\"可以根据需要选择合适的类型来创建表单\",{\"1\":{\"227\":1}}],[\"可以根据需要执行其他操作并重定向到成功页面\",{\"1\":{\"580\":1}}],[\"可以根据需要异步加载依赖的模块\",{\"1\":{\"200\":1,\"201\":1}}],[\"可以根据需要插入不同的内容\",{\"1\":{\"96\":1}}],[\"可以根据需要从事件对象中提取所需的信息\",{\"1\":{\"25\":1}}],[\"可以根据需要使用它们来创建具有动态特性和交互性的react元素\",{\"1\":{\"15\":1}}],[\"可以根据数据的变化动态地渲染不同的组件\",{\"1\":{\"94\":1}}],[\"可以通过将用户输入存储在变量中\",{\"1\":{\"580\":1}}],[\"可以通过将查询结果缓存到内存中\",{\"1\":{\"465\":1}}],[\"可以通过索引或键访问和操作其中的元素\",{\"1\":{\"572\":1}}],[\"可以通过索引访问\",{\"1\":{\"251\":1}}],[\"可以通过自定义模块和中间件来满足各种应用需求\",{\"1\":{\"506\":1}}],[\"可以通过设置变量值为\",{\"1\":{\"536\":1}}],[\"可以通过设置devtool选项启用source\",{\"1\":{\"500\":1}}],[\"可以通过设置合理的缓存过期时间\",{\"1\":{\"465\":1}}],[\"可以通过管道\",{\"1\":{\"455\":1}}],[\"可以通过指定name来加载对应的命名视图\",{\"1\":{\"417\":1}}],[\"可以通过指定的字节索引访问和修改数据\",{\"1\":{\"182\":1}}],[\"可以通过router\",{\"1\":{\"417\":1}}],[\"可以通过reducer来处理\",{\"1\":{\"401\":1}}],[\"可以通过responsetext属性获取服务器返回的文本数据\",{\"1\":{\"341\":1}}],[\"可以通过this\",{\"1\":{\"416\":1,\"444\":1}}],[\"可以通过编写javascript代码来实现页面的跳转和导航\",{\"1\":{\"416\":1}}],[\"可以通过嵌套路由实现多层级的组件嵌套渲染\",{\"1\":{\"414\":1}}],[\"可以通过直接指定路径来实现匹配\",{\"1\":{\"414\":1}}],[\"可以通过$router和$route去获取路由的信息\",{\"1\":{\"413\":1}}],[\"可以通过该方法获取任何组件需要的状态数据\",{\"1\":{\"401\":1}}],[\"可以通过路由状态管理器来控制路由过渡\",{\"1\":{\"395\":1}}],[\"可以通过代码进行导航\",{\"1\":{\"383\":1}}],[\"可以通过访问指定的url来预览应用程序\",{\"1\":{\"461\":1}}],[\"可以通过访问\",{\"1\":{\"368\":1}}],[\"可以通过响应头部的set\",{\"1\":{\"357\":1}}],[\"可以通过new关键字创建插件实例\",{\"1\":{\"456\":1}}],[\"可以通过new\",{\"1\":{\"341\":1}}],[\"可以通过name属性访问它的值\",{\"1\":{\"33\":1}}],[\"可以通过组合多个类的特性来创建更强大和灵活的类\",{\"1\":{\"330\":1}}],[\"可以通过组合和嵌套组件来构建复杂的界面\",{\"1\":{\"11\":1}}],[\"可以通过配置文件的mode选项来设置模式\",{\"1\":{\"453\":1}}],[\"可以通过配置文件中的output属性来定义输出目录\",{\"1\":{\"453\":1}}],[\"可以通过配置文件中的entry属性来指定一个或多个入口模块\",{\"1\":{\"453\":1}}],[\"可以通过配置文件\",{\"1\":{\"328\":1}}],[\"可以通过装饰器来扩展和定制类的功能\",{\"1\":{\"324\":1}}],[\"可以通过执行生成器函数来生成一个迭代器对象\",{\"1\":{\"323\":1}}],[\"可以通过枚举成员的名称获取对应的值\",{\"1\":{\"314\":2}}],[\"可以通过以下步骤来使用vuex\",{\"1\":{\"444\":1}}],[\"可以通过以下方式来划分和组织模块\",{\"1\":{\"435\":1}}],[\"可以通过以下方式进行跳转\",{\"1\":{\"393\":3}}],[\"可以通过以下方式定义和使用枚举\",{\"1\":{\"314\":1}}],[\"可以通过以下几种方式来书写css代码\",{\"1\":{\"142\":1}}],[\"可以通过以下几种方式进行优化\",{\"1\":{\"55\":1}}],[\"可以通过javascript代码为dom元素的属性赋值事件处理函数\",{\"1\":{\"263\":1}}],[\"可以通过键来访问值\",{\"1\":{\"251\":1}}],[\"可以通过返回的数据中的一个字段或者变量来标志是否还有更多内容\",{\"1\":{\"349\":1}}],[\"可以通过返回\",{\"1\":{\"193\":1}}],[\"可以通过解构赋值从对象中提取属性值\",{\"1\":{\"171\":1}}],[\"可以通过别名重命名解构得到的变量\",{\"1\":{\"166\":1}}],[\"可以通过简单的操作实现复杂的样式生成\",{\"1\":{\"161\":2}}],[\"可以通过定义起始点和结束点来控制渐变的方向和长度\",{\"1\":{\"153\":1}}],[\"可以通过调用store\",{\"1\":{\"401\":1}}],[\"可以通过调用event\",{\"1\":{\"263\":1}}],[\"可以通过调用\",{\"1\":{\"186\":1}}],[\"可以通过调用更新状态的函数来改变状态的值\",{\"1\":{\"41\":1}}],[\"可以通过调整元素的位置\",{\"1\":{\"150\":1}}],[\"可以通过命令行或图形界面启动mysql服务\",{\"1\":{\"132\":1}}],[\"可以通过在webpack\",{\"1\":{\"482\":1}}],[\"可以通过在请求头部中发送session\",{\"1\":{\"357\":1}}],[\"可以通过在\",{\"1\":{\"126\":1}}],[\"可以通过使用这些函数来过滤和验证数据\",{\"1\":{\"603\":1}}],[\"可以通过使用<input\",{\"1\":{\"581\":1}}],[\"可以通过使用url\",{\"1\":{\"469\":1}}],[\"可以通过使用冒号前缀来定义动态路径\",{\"1\":{\"414\":1}}],[\"可以通过使用redux\",{\"1\":{\"404\":1}}],[\"可以通过使用ref来获取表单元素的值\",{\"1\":{\"31\":1}}],[\"可以通过使用\",{\"1\":{\"102\":1}}],[\"可以通过引入vue的过渡组件<transition>和使用css属性来实现\",{\"1\":{\"98\":1}}],[\"可以通过这些类名设置css过渡和动画的属性\",{\"1\":{\"98\":1}}],[\"可以通过mixins选项将混入对象应用到组件中\",{\"1\":{\"97\":1}}],[\"可以通过mixins选项将混入对象添加到组件中\",{\"1\":{\"97\":1}}],[\"可以通过修改数据属性的值来实现动态渲染\",{\"1\":{\"94\":1}}],[\"可以通过components选项来局部注册组件\",{\"1\":{\"91\":1}}],[\"可以通过\",{\"1\":{\"70\":1,\"186\":1,\"366\":1,\"394\":1,\"511\":1}}],[\"可以通过浏览器开发者工具\",{\"1\":{\"58\":1}}],[\"可以通过监听web\",{\"1\":{\"57\":1}}],[\"可以通过self\",{\"1\":{\"57\":1}}],[\"可以通过消息传递的方式与web\",{\"1\":{\"57\":1}}],[\"可以通过点击页面切换或使用页码进行导航\",{\"1\":{\"53\":1}}],[\"可以通过闭包\",{\"1\":{\"52\":1}}],[\"可以通过fallback属性指定一个加载状态\",{\"1\":{\"51\":1}}],[\"可以通过回调函数\",{\"1\":{\"36\":1}}],[\"可以通过事件监听的方式来处理异步操作的完成或状态改变\",{\"1\":{\"322\":1}}],[\"可以通过事件处理函数的参数来访问事件对象\",{\"1\":{\"263\":1}}],[\"可以通过事件处理程序来捕捉和处理这些事件\",{\"1\":{\"25\":1}}],[\"可以通过事件对象的target属性来获取表单元素的值\",{\"1\":{\"33\":1}}],[\"可以通过正则表达式\",{\"1\":{\"32\":1}}],[\"可以通过处理表单的提交事件来获取用户输入的数据\",{\"1\":{\"30\":1}}],[\"可以通过花括号\",{\"1\":{\"15\":1}}],[\"非生产环境调试配置\",{\"1\":{\"468\":1}}],[\"非响应式数据的更新需要通过this关键字进行访问和修改\",{\"1\":{\"442\":1}}],[\"非严格模式\",{\"1\":{\"262\":2}}],[\"非\",{\"1\":{\"195\":1}}],[\"非数值\",{\"1\":{\"169\":1}}],[\"非禁用\",{\"1\":{\"159\":1}}],[\"非常适合构建spa\",{\"1\":{\"63\":1}}],[\"非受控组件可能更合适\",{\"1\":{\"31\":1}}],[\"非受控组件的优点是写起来更简单\",{\"1\":{\"31\":1}}],[\"非受控组件\",{\"1\":{\"31\":1}}],[\"非自闭合\",{\"1\":{\"15\":1}}],[\"用三个等号\",{\"1\":{\"540\":1}}],[\"用三个点\",{\"1\":{\"172\":1}}],[\"用\",{\"1\":{\"319\":2}}],[\"用指定的替换字符串替换匹配到的部分\",{\"1\":{\"279\":1}}],[\"用分隔符连接数组的元素\",{\"1\":{\"257\":1}}],[\"用法\",{\"0\":{\"185\":1,\"187\":1,\"189\":1,\"202\":1}}],[\"用逗号分隔\",{\"1\":{\"151\":1,\"355\":1}}],[\"用来做条件判断\",{\"1\":{\"533\":1}}],[\"用来给路由命名\",{\"1\":{\"417\":1}}],[\"用来捕获\",{\"1\":{\"193\":1}}],[\"用来指定组件的名称\",{\"1\":{\"126\":1}}],[\"用来实现更灵活的侦听器行为\",{\"1\":{\"110\":1}}],[\"用来配置侦听器行为的选项\",{\"1\":{\"110\":1}}],[\"用来进行相应的处理\",{\"1\":{\"110\":1}}],[\"用来渲染不同的组件\",{\"1\":{\"94\":1}}],[\"用户输入的数据在提交后经过基本的验证\",{\"1\":{\"580\":1}}],[\"用户界面测试\",{\"1\":{\"372\":1}}],[\"用户只需一次进行身份认证\",{\"1\":{\"370\":1}}],[\"用户只能从列表中选择一个值\",{\"1\":{\"136\":1}}],[\"用户通过输入用户名和密码等凭据\",{\"1\":{\"370\":1}}],[\"用户名\",{\"1\":{\"369\":1,\"600\":1}}],[\"用户名和密码等信息进行连接\",{\"1\":{\"132\":1}}],[\"用户在后续的请求中\",{\"1\":{\"357\":1}}],[\"用户需要在浏览器中授权\",{\"1\":{\"229\":1}}],[\"用户可以在数据交互的同时继续进行其他操作\",{\"1\":{\"342\":1}}],[\"用户可以在进行数据交互的同时继续浏览和操作页面\",{\"1\":{\"342\":1}}],[\"用户可以从集合中选择一个或多个值\",{\"1\":{\"136\":1}}],[\"用户可以方便地输入数据并提交到服务器或进行其他类型的交互操作\",{\"1\":{\"30\":1}}],[\"用户感知的页面加载时间更短\",{\"1\":{\"63\":1}}],[\"用于简化处理变量为空时的默认赋值操作\",{\"1\":{\"604\":1}}],[\"用于简化数据处理和集合操作\",{\"1\":{\"509\":1}}],[\"用于过滤和处理不同类型的数据\",{\"1\":{\"603\":1}}],[\"用于跳过当前循环中的剩余代码\",{\"1\":{\"564\":1}}],[\"用于跳转页面\",{\"1\":{\"391\":1}}],[\"用于提前结束循环\",{\"1\":{\"564\":1}}],[\"用于提供开发环境下的热更新\",{\"1\":{\"454\":1}}],[\"用于提供静态文件\",{\"1\":{\"366\":1,\"461\":1}}],[\"用于提供更详细的语义信息\",{\"1\":{\"246\":1}}],[\"用于根据条件选择执行不同的表达式\",{\"1\":{\"558\":1}}],[\"用于根据props更新组件状态\",{\"1\":{\"22\":1}}],[\"用于根据props更新state\",{\"1\":{\"22\":1}}],[\"用于根据props初始化或更新state\",{\"1\":{\"22\":1}}],[\"用于比较两个表达式的大小关系\",{\"1\":{\"604\":1}}],[\"用于比较两个操作数是否不相等\",{\"1\":{\"553\":1}}],[\"用于比较两个操作数是否相等\",{\"1\":{\"553\":1}}],[\"用于比较两个值并返回布尔值\",{\"1\":{\"254\":1}}],[\"用于两个操作数的取余\",{\"1\":{\"551\":1}}],[\"用于两个操作数的相除\",{\"1\":{\"551\":1}}],[\"用于两个操作数的相乘\",{\"1\":{\"551\":1}}],[\"用于两个操作数的相减\",{\"1\":{\"551\":1}}],[\"用于两个操作数的相加\",{\"1\":{\"551\":1}}],[\"用于函数内部访问全局变量\",{\"1\":{\"524\":1}}],[\"用于访问全局作用域中定义的所有变量\",{\"1\":{\"521\":1}}],[\"用于开发和构建工具\",{\"1\":{\"510\":1}}],[\"用于开发环境\",{\"1\":{\"457\":1}}],[\"用于连接和操作mongodb数据库的对象模型工具\",{\"1\":{\"509\":1}}],[\"用于连接并形成一个词法环境链\",{\"1\":{\"280\":1}}],[\"用于构建api和服务器端应用程序\",{\"1\":{\"509\":1}}],[\"用于保存您的应用程序文件\",{\"1\":{\"508\":1}}],[\"用于复制静态资源\",{\"1\":{\"476\":1}}],[\"用于安装\",{\"1\":{\"464\":1}}],[\"用于安全地访问嵌套的属性或调用嵌套的函数\",{\"1\":{\"173\":1}}],[\"用于支持单页应用的前端路由\",{\"1\":{\"461\":1}}],[\"用于配置模块导入的别名\",{\"1\":{\"460\":1}}],[\"用于配置webpack解析模块时的文件扩展名的优先级\",{\"1\":{\"460\":1}}],[\"用于配置webpack在哪些目录中查找第三方模块\",{\"1\":{\"460\":1}}],[\"用于配置构建的环境模式\",{\"1\":{\"457\":1}}],[\"用于配置依赖关系\",{\"1\":{\"117\":1}}],[\"用于每次构建前清理输出目录\",{\"1\":{\"456\":1}}],[\"用于生成动态网页内容\",{\"1\":{\"513\":1}}],[\"用于生成html文件\",{\"1\":{\"476\":1}}],[\"用于生成html文件并自动引入构建后的资源\",{\"1\":{\"456\":1}}],[\"用于生成迭代器\",{\"1\":{\"186\":1}}],[\"用于生产环境\",{\"1\":{\"453\":1,\"457\":1}}],[\"用于触发mutation\",{\"1\":{\"436\":1}}],[\"用于触发状态的更新\",{\"1\":{\"401\":1}}],[\"用于触发状态更新\",{\"1\":{\"41\":1}}],[\"用于追踪state的变化\",{\"1\":{\"436\":1}}],[\"用于修改状态\",{\"1\":{\"433\":1}}],[\"用于修改或扩展类的行为\",{\"1\":{\"324\":1}}],[\"用于异步地修改状态的函数\",{\"1\":{\"425\":1}}],[\"用于异步事件流的遍历和处理\",{\"1\":{\"198\":1}}],[\"用于同步地修改状态的函数\",{\"1\":{\"425\":1}}],[\"用于从外部源\",{\"1\":{\"603\":1}}],[\"用于从存储中获取数据的计算属性\",{\"1\":{\"425\":1}}],[\"用于从父组件接收依赖\",{\"1\":{\"117\":1}}],[\"用于按需加载路由组件\",{\"1\":{\"423\":1}}],[\"用于识别不同的动作\",{\"1\":{\"401\":1}}],[\"用于动态替换当前的reducer\",{\"1\":{\"401\":1}}],[\"用于监听状态的变化\",{\"1\":{\"401\":3}}],[\"用于延迟加载应用程序中的路由组件\",{\"1\":{\"397\":1}}],[\"用于渲染子路由的组件\",{\"1\":{\"414\":1}}],[\"用于渲染匹配的子组件\",{\"1\":{\"396\":1}}],[\"用于渲染出错处理\",{\"1\":{\"22\":1}}],[\"用于\",{\"1\":{\"390\":1}}],[\"用于询问用户是否继续导航\",{\"1\":{\"387\":1}}],[\"用于确保应用程序的正确性\",{\"1\":{\"372\":1}}],[\"用于确定一个值为null或undefined时使用默认值\",{\"1\":{\"173\":1}}],[\"用于与特定数据库进行通信\",{\"1\":{\"369\":1}}],[\"用于输出当前请求的时间戳\",{\"1\":{\"366\":1}}],[\"用于输入\",{\"1\":{\"227\":1}}],[\"用于输入电子邮件地址\",{\"1\":{\"227\":1}}],[\"用于输入邮箱地址的表单字段\",{\"1\":{\"225\":1}}],[\"用于快速构建\",{\"1\":{\"453\":1}}],[\"用于快速构建和开发\",{\"1\":{\"363\":1}}],[\"用于快速创建和管理\",{\"1\":{\"88\":1}}],[\"用于关闭连接\",{\"1\":{\"361\":1}}],[\"用于建立连接\",{\"1\":{\"361\":1}}],[\"用于强制客户端\",{\"1\":{\"359\":1}}],[\"用于验证服务器的身份\",{\"1\":{\"359\":1}}],[\"用于缓存验证\",{\"1\":{\"355\":1,\"356\":1}}],[\"用于缓存和保持组件的状态\",{\"1\":{\"126\":1}}],[\"用于服务器在传输响应时进行压缩\",{\"1\":{\"355\":1}}],[\"用于传递给reducer进行状态更新的操作\",{\"1\":{\"401\":1}}],[\"用于传递关于请求或响应的附加信息\",{\"1\":{\"355\":1}}],[\"用于传递元数据\",{\"1\":{\"352\":1}}],[\"用于删除服务器上的资源\",{\"1\":{\"353\":1}}],[\"用于更新服务器上的资源\",{\"1\":{\"353\":1}}],[\"用于更方便地处理异步操作\",{\"1\":{\"194\":1}}],[\"用于向服务器提交数据\",{\"1\":{\"353\":1}}],[\"用于获取通过文件上传表单字段提交的文件信息\",{\"1\":{\"521\":1}}],[\"用于获取通过http\",{\"1\":{\"521\":2}}],[\"用于获取通过url中的查询字符串传递的参数值\",{\"1\":{\"521\":1}}],[\"用于获取操作系统相关信息\",{\"1\":{\"509\":1}}],[\"用于获取当前的count值\",{\"1\":{\"440\":1}}],[\"用于获取当前路由信息等\",{\"1\":{\"391\":1}}],[\"用于获取服务器支持的请求方法\",{\"1\":{\"353\":1}}],[\"用于获取指定的资源\",{\"1\":{\"353\":1}}],[\"用于获取函数的名称\",{\"1\":{\"172\":1}}],[\"用于发送http请求和接收服务器响应\",{\"1\":{\"343\":1}}],[\"用于指示请求的处理状态和结果\",{\"1\":{\"354\":1}}],[\"用于指示编译器执行额外的操作或引入外部的声明文件\",{\"1\":{\"331\":1}}],[\"用于指定生成html文件的模板\",{\"1\":{\"456\":1}}],[\"用于指定生成器终止时要返回的值\",{\"1\":{\"186\":1}}],[\"用于指定webpack在构建过程中的各种配置选项\",{\"1\":{\"454\":1}}],[\"用于指定需要从状态中获取的数据和需要调度的操作\",{\"1\":{\"406\":1}}],[\"用于指定缓存的行为\",{\"1\":{\"356\":1}}],[\"用于指定对资源的操作\",{\"1\":{\"352\":1,\"353\":1}}],[\"用于指定不同宽度的图片源和显示尺寸\",{\"1\":{\"239\":1}}],[\"用于指定不需要被缓存的组件\",{\"1\":{\"126\":1}}],[\"用于指定哪些组件需要被缓存\",{\"1\":{\"126\":1}}],[\"用于避免全局变量的冲突和代码的重复\",{\"1\":{\"326\":1}}],[\"用于约束接口的属性\",{\"1\":{\"320\":1}}],[\"用于描述插件的元数据和属性\",{\"1\":{\"464\":1}}],[\"用于描述对象或类数组的索引类型和元素类型\",{\"1\":{\"319\":1}}],[\"用于描述对象的结构\",{\"1\":{\"312\":1}}],[\"用于描述变量和函数在代码中的可访问性和作用域规则\",{\"1\":{\"280\":1}}],[\"用于收集和提交表单数据\",{\"1\":{\"282\":1}}],[\"用于释放不再使用的内存\",{\"1\":{\"276\":1}}],[\"用于检测不再被程序使用的内存并进行回收\",{\"1\":{\"274\":1}}],[\"用于检查资源是否有更新\",{\"1\":{\"355\":1}}],[\"用于检查数组是否包含某个元素\",{\"1\":{\"170\":1}}],[\"用于检查一个值是否为一个ref对象\",{\"1\":{\"102\":1}}],[\"用于加载图像\",{\"1\":{\"476\":1}}],[\"用于加载图片\",{\"1\":{\"264\":1}}],[\"用于加载css文件\",{\"1\":{\"476\":1}}],[\"用于加粗文本\",{\"1\":{\"209\":1}}],[\"用于返回函数的结果给调用者\",{\"1\":{\"258\":1}}],[\"用于返回组件的jsx表示\",{\"1\":{\"22\":1}}],[\"用于接受传递给函数的值\",{\"1\":{\"258\":1}}],[\"用于接收用户输入的数据\",{\"1\":{\"30\":1}}],[\"用于对单个变量进行过滤操作\",{\"1\":{\"603\":1}}],[\"用于对模块进行转换和优化\",{\"1\":{\"475\":1}}],[\"用于对输出文件进行\",{\"1\":{\"469\":1}}],[\"用于对服务器上的资源进行局部更新\",{\"1\":{\"353\":1}}],[\"用于对布尔值进行逻辑操作并返回布尔值\",{\"1\":{\"254\":1}}],[\"用于对对象进行操作\",{\"1\":{\"190\":1}}],[\"用于执行一些额外的构建任务\",{\"1\":{\"454\":1}}],[\"用于执行路由跳转\",{\"1\":{\"393\":1}}],[\"用于执行特定任务或计算结果\",{\"1\":{\"258\":1}}],[\"用于执行特定的任务或计算结果\",{\"1\":{\"251\":1}}],[\"用于执行各种操作\",{\"1\":{\"257\":1,\"570\":1}}],[\"用于执行各种数学和逻辑操作\",{\"1\":{\"254\":1}}],[\"用于执行基本的算术操作\",{\"1\":{\"254\":1}}],[\"用于执行粘连匹配\",{\"1\":{\"168\":1}}],[\"用于进行动态计算\",{\"1\":{\"436\":1}}],[\"用于进行条件测试和控制程序流程\",{\"1\":{\"251\":1}}],[\"用于进行浅层的props和state比较\",{\"1\":{\"47\":1}}],[\"用于多行文本输入\",{\"1\":{\"227\":1}}],[\"用于选择范围\",{\"1\":{\"227\":1}}],[\"用于选择日期\",{\"1\":{\"227\":1}}],[\"用于绘制图形\",{\"1\":{\"225\":1}}],[\"用于插入视频\",{\"1\":{\"225\":1}}],[\"用于插入视频文件\",{\"1\":{\"223\":1}}],[\"用于插入音频文件\",{\"1\":{\"222\":1}}],[\"用于插入图像文件\",{\"1\":{\"221\":1}}],[\"用于插入图片\",{\"1\":{\"209\":1}}],[\"用于显示一组项目\",{\"1\":{\"209\":1}}],[\"用于组织\",{\"1\":{\"200\":1,\"201\":1}}],[\"用于遍历数组中的每个元素或对象中的每个属性\",{\"1\":{\"563\":1}}],[\"用于遍历数据集合中的每个元素\",{\"1\":{\"184\":1}}],[\"用于遍历异步数据集合或处理需要异步操作的迭代任务\",{\"1\":{\"198\":1}}],[\"用于遍历目标对象的字符串键属性\",{\"1\":{\"191\":1}}],[\"用于遍历可迭代对象\",{\"1\":{\"185\":1}}],[\"用于逐个返回data数组中的元素\",{\"1\":{\"184\":1}}],[\"用于标识对象的属性\",{\"1\":{\"174\":1}}],[\"用于标识事务的开始\",{\"1\":{\"137\":1}}],[\"用于递归函数中最后一个操作是递归调用的情况\",{\"1\":{\"172\":1}}],[\"用于计算一个数的指数幂\",{\"1\":{\"169\":1}}],[\"用于去除一个数值的小数部分\",{\"1\":{\"169\":1}}],[\"用于表示任意对象类型\",{\"1\":{\"310\":1}}],[\"用于表示缺少值或没有定义的情况\",{\"1\":{\"310\":1}}],[\"用于表示文本数据\",{\"1\":{\"310\":1}}],[\"用于表示独一无二的值\",{\"1\":{\"171\":1}}],[\"用于表示javascript中的安全整数范围\",{\"1\":{\"169\":1}}],[\"用于表示下一个即将更新的props和state\",{\"1\":{\"48\":1}}],[\"用于将右侧的值与左侧的变量进行相应的运算\",{\"1\":{\"552\":1}}],[\"用于将右侧的值赋给左侧的变量\",{\"1\":{\"552\":1}}],[\"用于将css代码以<style>标签的形式插入到html文件中\",{\"1\":{\"476\":1}}],[\"用于将es6+的javascript代码转换为es5\",{\"1\":{\"476\":1}}],[\"用于将重复使用的代码片段封装成可复用的模块或函数\",{\"1\":{\"466\":1}}],[\"用于将store与应用程序的其余部分连接在一起\",{\"1\":{\"404\":1}}],[\"用于将多个<route>组件包裹在一起\",{\"1\":{\"378\":1}}],[\"用于将\",{\"1\":{\"330\":1}}],[\"用于将值赋给变量\",{\"1\":{\"254\":1}}],[\"用于将字符串解析成浮点数\",{\"1\":{\"169\":1}}],[\"用于将字符串解析成整数\",{\"1\":{\"169\":1}}],[\"用于将一个ref对象转为原始值\",{\"1\":{\"102\":1}}],[\"用于判断左侧操作数是否小于右侧操作数\",{\"1\":{\"553\":1}}],[\"用于判断左侧操作数是否大于右侧操作数\",{\"1\":{\"553\":1}}],[\"用于判断一个数值的符号\",{\"1\":{\"169\":1}}],[\"用于判断一个值是否为安全整数\",{\"1\":{\"169\":1}}],[\"用于判断一个值是否为nan\",{\"1\":{\"169\":1}}],[\"用于判断一个值是否为整数\",{\"1\":{\"169\":1}}],[\"用于判断一个值是否为有限的数值\",{\"1\":{\"169\":1}}],[\"用于判断组件是否需要重新渲染\",{\"1\":{\"48\":1}}],[\"用于匹配符合\",{\"1\":{\"168\":1}}],[\"用于处理可能耗时的操作\",{\"1\":{\"511\":1}}],[\"用于处理文件路径\",{\"1\":{\"509\":1}}],[\"用于处理文件系统操作\",{\"1\":{\"509\":1}}],[\"用于处理不同类型的文件\",{\"1\":{\"454\":1}}],[\"用于处理状态的更新逻辑\",{\"1\":{\"401\":2,\"403\":1}}],[\"用于处理异步操作和事件回调函数\",{\"1\":{\"270\":1}}],[\"用于处理回调结果或执行其他操作\",{\"1\":{\"258\":1}}],[\"用于处理\",{\"1\":{\"193\":2}}],[\"用于处理码点大于0xffff的unicode字符\",{\"1\":{\"168\":1}}],[\"用于处理大量数据的展示和滚动问题\",{\"1\":{\"53\":1}}],[\"用于创建对象的模式\",{\"1\":{\"592\":1}}],[\"用于创建对象属性的键\",{\"1\":{\"310\":1}}],[\"用于创建http服务器和处理http请求和响应\",{\"1\":{\"509\":1}}],[\"用于创建带有样式的导航链接\",{\"1\":{\"393\":1}}],[\"用于创建和管理路由\",{\"1\":{\"374\":1}}],[\"用于创建可复用的代码块\",{\"1\":{\"326\":1}}],[\"用于创建图表\",{\"1\":{\"228\":1}}],[\"用于创建输入字段\",{\"1\":{\"216\":1}}],[\"用于创建链接\",{\"1\":{\"209\":1}}],[\"用于创建唯一且不可变的标识符\",{\"1\":{\"174\":1}}],[\"用于创建私有属性或唯一的标识符\",{\"1\":{\"171\":1}}],[\"用于创建响应式网页布局和常见的ui组件\",{\"1\":{\"160\":1}}],[\"用于创建一个只读的响应式对象\",{\"1\":{\"102\":1}}],[\"用于维护数据库操作的一致性\",{\"1\":{\"137\":1}}],[\"用于存储对象的状态信息\",{\"1\":{\"583\":1}}],[\"用于存储和访问会话变量的数组\",{\"1\":{\"521\":1}}],[\"用于存储和重复使用已经获取或计算过的数据\",{\"1\":{\"465\":1}}],[\"用于存储信息的容器\",{\"1\":{\"516\":1}}],[\"用于存储变量\",{\"1\":{\"280\":1}}],[\"用于存储不同类型的数据\",{\"1\":{\"273\":1}}],[\"用于存储待处理的任务\",{\"1\":{\"271\":1}}],[\"用于存储待执行的任务\",{\"1\":{\"270\":1}}],[\"用于存储要执行的函数调用\",{\"1\":{\"271\":1}}],[\"用于存储键值对形式的数据\",{\"1\":{\"251\":1}}],[\"用于存储多个值的有序集合\",{\"1\":{\"251\":1}}],[\"用于存储数值数据\",{\"1\":{\"251\":1}}],[\"用于存储二进制数据\",{\"1\":{\"136\":1}}],[\"用于存储布尔值\",{\"1\":{\"136\":1}}],[\"用于存储日期\",{\"1\":{\"136\":1}}],[\"用于存储文本数据\",{\"1\":{\"136\":1,\"251\":1}}],[\"用于存储有小数部分的数值\",{\"1\":{\"136\":1}}],[\"用于存储整数值\",{\"1\":{\"136\":1}}],[\"用于解决多个模块命名冲突的问题\",{\"1\":{\"444\":1}}],[\"用于解决模块之间的依赖关系\",{\"1\":{\"117\":1}}],[\"用于解析请求体中的\",{\"1\":{\"366\":2}}],[\"用于解析变量和函数标识符的访问权限\",{\"1\":{\"261\":1}}],[\"用于解绑事件监听器\",{\"1\":{\"70\":1}}],[\"用于侦听\",{\"1\":{\"110\":1}}],[\"用于控制属性和方法的访问权限\",{\"1\":{\"583\":1}}],[\"用于控制转换和处理的方式\",{\"1\":{\"463\":1}}],[\"用于控制动画的速度变化\",{\"1\":{\"144\":1}}],[\"用于控制网页的样式和布局\",{\"1\":{\"140\":1}}],[\"用于控制事务之间的隔离程度和并发操作\",{\"1\":{\"137\":1}}],[\"用于控制过渡的类名\",{\"1\":{\"98\":1}}],[\"用于控制是否重新渲染组件\",{\"1\":{\"22\":1}}],[\"用于绑定事件监听器\",{\"1\":{\"70\":1}}],[\"用于分析内存使用情况\",{\"1\":{\"58\":1}}],[\"用于分析网络请求和响应\",{\"1\":{\"58\":1}}],[\"用于优化大量数据的滚动展示\",{\"1\":{\"53\":1}}],[\"用于管理和安装软件包\",{\"1\":{\"510\":1}}],[\"用于管理和调度待处理的任务\",{\"1\":{\"271\":1}}],[\"用于管理和调度任务队列中的任务\",{\"1\":{\"270\":1}}],[\"用于管理异步操作\",{\"1\":{\"405\":1}}],[\"用于管理任务\",{\"1\":{\"337\":1}}],[\"用于管理事件的发布和订阅\",{\"1\":{\"38\":1}}],[\"用于管理组件的数据\",{\"1\":{\"20\":1}}],[\"用于实现组件或模块间的解耦和通信\",{\"1\":{\"38\":1}}],[\"用于在开发过程中提供实时的反馈\",{\"1\":{\"490\":1}}],[\"用于在开发过程中提供实时重新加载\",{\"1\":{\"461\":1}}],[\"用于在应用程序运行时替换\",{\"1\":{\"453\":1,\"459\":1}}],[\"用于在应用程序中创建链接\",{\"1\":{\"393\":1}}],[\"用于在代码中前进或后退n个步骤\",{\"1\":{\"416\":1}}],[\"用于在代码中替换当前页面的url\",{\"1\":{\"416\":1}}],[\"用于在代码中实现页面的正常跳转\",{\"1\":{\"416\":1}}],[\"用于在父组件中显示子组件\",{\"1\":{\"396\":1}}],[\"用于在不同的http请求之间存储和管理用户的状态信息\",{\"1\":{\"357\":1}}],[\"用于在请求中传递身份验证凭据\",{\"1\":{\"355\":1}}],[\"用于在运行时检查变量的类型\",{\"1\":{\"317\":1}}],[\"用于在客户端和服务器之间存储已经获取过的资源的副本\",{\"1\":{\"356\":1}}],[\"用于在客户端和服务器之间传输数据\",{\"1\":{\"351\":1}}],[\"用于在客户端存储小量的数据\",{\"1\":{\"240\":1}}],[\"用于在客户端存储结构化数据\",{\"1\":{\"236\":1}}],[\"用于在客户端创建和管理数据库\",{\"1\":{\"236\":1}}],[\"用于在客户端保留会话级别的数据\",{\"1\":{\"236\":1}}],[\"用于在客户端保留持久化数据\",{\"1\":{\"236\":1}}],[\"用于在构造函数内部使用new\",{\"1\":{\"191\":1}}],[\"用于在数组中从后往前查找满足条件的元素和对应的索引\",{\"1\":{\"170\":1}}],[\"用于在组件切换时\",{\"1\":{\"120\":1}}],[\"用于在组件树中共享数据\",{\"1\":{\"37\":1}}],[\"用于在函数式组件中添加和管理状态\",{\"1\":{\"41\":1}}],[\"用于在react中编写组件的ui结构\",{\"1\":{\"13\":1}}],[\"用于定义全局的环境变量\",{\"1\":{\"476\":1}}],[\"用于定义应用的路由层次结构\",{\"1\":{\"398\":1}}],[\"用于定义应用的路由和导航\",{\"1\":{\"384\":1}}],[\"用于定义路径与组件之间的关联关系\",{\"1\":{\"377\":1}}],[\"用于定义对象的行为和操作\",{\"1\":{\"583\":1}}],[\"用于定义对象的结构和行为\",{\"1\":{\"312\":1}}],[\"用于定义对象的蓝图\",{\"1\":{\"183\":1}}],[\"用于定义一组具有名称和相应值的常量集合\",{\"1\":{\"310\":1}}],[\"用于定义页面中可以复制和重用的\",{\"1\":{\"245\":1}}],[\"用于定义页面的元数据和引用外部资源\",{\"1\":{\"207\":1}}],[\"用于定义列表中的每个项目\",{\"1\":{\"209\":1}}],[\"用于定义列中允许的多个非重复值集合\",{\"1\":{\"136\":1}}],[\"用于定义列中允许的固定值列表\",{\"1\":{\"136\":1}}],[\"用于定义列中存储的数据的类型和格式\",{\"1\":{\"136\":1}}],[\"用于定义文本段落\",{\"1\":{\"209\":1}}],[\"用于定义不同级别的标题\",{\"1\":{\"209\":1}}],[\"用于定义背景图像的尺寸大小\",{\"1\":{\"158\":1}}],[\"用于定义径向渐变的颜色过渡\",{\"1\":{\"153\":1}}],[\"用于定义事件被触发时要执行的操作\",{\"1\":{\"25\":1}}],[\"用于定义组件的结构和内容\",{\"1\":{\"21\":1}}],[\"用于记录错误信息和报告\",{\"1\":{\"22\":1}}],[\"用于初始化状态和绑定事件处理程序\",{\"1\":{\"22\":1}}],[\"实时展示修改的效果\",{\"1\":{\"461\":1}}],[\"实时更新修改的模块\",{\"1\":{\"461\":1}}],[\"实验新功能\",{\"1\":{\"335\":1}}],[\"实体字符\",{\"0\":{\"213\":1}}],[\"实际情况可能更加复杂\",{\"1\":{\"600\":1}}],[\"实际上是访问的原始路径\",{\"1\":{\"419\":1}}],[\"实际上混入可以包含更复杂的逻辑和多个选项\",{\"1\":{\"97\":1}}],[\"实际数据存储在堆中\",{\"1\":{\"273\":1}}],[\"实际使用会涉及更多的属性和事件\",{\"1\":{\"30\":1}}],[\"实例并测试了混入的\",{\"1\":{\"330\":1}}],[\"实例并测试\",{\"1\":{\"330\":1}}],[\"实例从创建到销毁的过程\",{\"1\":{\"112\":1}}],[\"实例数据变化并执行相应逻辑的功能\",{\"1\":{\"110\":1}}],[\"实例中\",{\"1\":{\"94\":1}}],[\"实例指示的所有东西都会解绑定\",{\"1\":{\"87\":1}}],[\"实例销毁后调用\",{\"1\":{\"87\":1}}],[\"实例销毁之前调用\",{\"1\":{\"87\":1}}],[\"实例仍然完全可用\",{\"1\":{\"87\":1}}],[\"实例已经挂载到\",{\"1\":{\"87\":1}}],[\"实例已创建\",{\"1\":{\"87\":1}}],[\"实例对象从创建之初到销毁的过程\",{\"1\":{\"87\":1}}],[\"实例的属性已经被初始化\",{\"1\":{\"114\":1}}],[\"实例的数据发生变化时\",{\"1\":{\"85\":1}}],[\"实例的\",{\"1\":{\"82\":2}}],[\"实例\",{\"1\":{\"74\":1,\"87\":1,\"89\":1}}],[\"实例化之前进行\",{\"1\":{\"70\":1}}],[\"实例是\",{\"1\":{\"67\":1}}],[\"实现与数据库的交互\",{\"1\":{\"506\":1}}],[\"实现按需加载\",{\"1\":{\"453\":1,\"458\":1}}],[\"实现页面间的无刷新切换\",{\"1\":{\"410\":1}}],[\"实现\",{\"1\":{\"390\":1}}],[\"实现适当的身份验证和授权机制\",{\"1\":{\"371\":1}}],[\"实现api端点\",{\"1\":{\"371\":2}}],[\"实现数据的传输和操作\",{\"1\":{\"371\":1}}],[\"实现无限滚动效果\",{\"1\":{\"348\":1}}],[\"实现局部刷新而不需要重新加载整个页面\",{\"1\":{\"341\":1}}],[\"实现网页的局部更新\",{\"1\":{\"340\":1}}],[\"实现代码的复用和灵活性\",{\"1\":{\"313\":1}}],[\"实现阶乘的递归计算\",{\"1\":{\"269\":1}}],[\"实现模块化\",{\"1\":{\"268\":1}}],[\"实现对事件的响应\",{\"1\":{\"263\":1}}],[\"实现并发执行多个异步任务并等待它们全部完成\",{\"1\":{\"198\":1}}],[\"实现原理\",{\"0\":{\"195\":1}}],[\"实现更复杂的功能和灵活的代码组织\",{\"1\":{\"313\":1}}],[\"实现更丰富和动态的网页功能\",{\"1\":{\"241\":1}}],[\"实现更易读\",{\"1\":{\"187\":1}}],[\"实现更多样化和富有创意的设计\",{\"1\":{\"158\":1}}],[\"实现不同的行为\",{\"1\":{\"183\":1}}],[\"实现不同视图之间的切换\",{\"1\":{\"63\":1}}],[\"实现类似的效果\",{\"1\":{\"52\":1}}],[\"实现交互等\",{\"1\":{\"36\":1}}],[\"实现相应的操作和逻辑\",{\"1\":{\"22\":1}}],[\"实现了代码的解耦和逻辑的分离\",{\"1\":{\"592\":1}}],[\"实现了异步的数据传输和局部刷新网页的功能\",{\"1\":{\"341\":1}}],[\"实现了处理事件的逻辑和控制流的分离\",{\"1\":{\"198\":1}}],[\"实现了更细粒度的控制和异步操作的顺序性\",{\"1\":{\"197\":1}}],[\"实现了对属性读取和函数调用的拦截\",{\"1\":{\"188\":1}}],[\"实现了react的响应式特性\",{\"1\":{\"21\":1}}],[\"实现了组件之间的数据传递和交互\",{\"1\":{\"11\":1}}],[\"实现跨平台开发\",{\"1\":{\"9\":1}}],[\"获取最后发生的json操作的错误信息\",{\"1\":{\"604\":1}}],[\"获取最后发生的json操作的错误码\",{\"1\":{\"604\":1}}],[\"获取最新的模块更新\",{\"1\":{\"459\":1}}],[\"获取并过滤输入数据\",{\"1\":{\"603\":1}}],[\"获取并显示数据\",{\"0\":{\"345\":1}}],[\"获取文件信息\",{\"0\":{\"598\":1}}],[\"获取上传文件的相关信息\",{\"1\":{\"581\":1}}],[\"获取用户输入并进行基本验证\",{\"1\":{\"580\":1}}],[\"获取字符串的长度\",{\"1\":{\"543\":1,\"570\":1}}],[\"获取字符串中的第一个字符\",{\"1\":{\"256\":1}}],[\"获取计算属性\",{\"1\":{\"441\":1}}],[\"获取状态\",{\"1\":{\"441\":1}}],[\"获取状态数据的计算属性\",{\"1\":{\"427\":1}}],[\"获取器\",{\"1\":{\"425\":1,\"436\":1}}],[\"获取资源的头部信息\",{\"1\":{\"352\":1}}],[\"获取到数据后\",{\"1\":{\"345\":1}}],[\"获取数组的元素个数\",{\"1\":{\"570\":1}}],[\"获取数组长度\",{\"1\":{\"310\":1}}],[\"获取数据库和集合对象\",{\"1\":{\"369\":1}}],[\"获取数据\",{\"1\":{\"305\":1,\"345\":1}}],[\"获取数据并更新state\",{\"1\":{\"23\":1}}],[\"获取元素的属性值\",{\"1\":{\"304\":1}}],[\"获取元素的样式属性值\",{\"1\":{\"295\":1}}],[\"获取特定子元素\",{\"1\":{\"303\":1}}],[\"获取所有子元素\",{\"1\":{\"303\":1}}],[\"获取父元素\",{\"1\":{\"303\":1}}],[\"获取输入框的值\",{\"1\":{\"294\":1}}],[\"获取href属性\",{\"1\":{\"288\":1}}],[\"获取或修改元素属性\",{\"1\":{\"288\":1}}],[\"获取或设置当前页面的url\",{\"1\":{\"266\":1}}],[\"获取指定的资源\",{\"1\":{\"352\":1}}],[\"获取指定名称字段的所有值\",{\"1\":{\"282\":1}}],[\"获取指定名称字段的第一个值\",{\"1\":{\"282\":1}}],[\"获取指定键对应的值\",{\"1\":{\"177\":1}}],[\"获取当前的\",{\"1\":{\"570\":1}}],[\"获取当前的状态树\",{\"1\":{\"401\":1}}],[\"获取当前屏幕的高度\",{\"1\":{\"266\":1}}],[\"获取当前屏幕的宽度\",{\"1\":{\"266\":1}}],[\"获取当前浏览器的语言设置\",{\"1\":{\"266\":1}}],[\"获取当前浏览器的用户代理信息\",{\"1\":{\"266\":1}}],[\"获取和修改元素的属性\",{\"1\":{\"265\":1}}],[\"获取索引\",{\"1\":{\"257\":1}}],[\"获取一个对象的所有属性名组成的联合类型\",{\"1\":{\"321\":1}}],[\"获取一个值或变量的类型\",{\"1\":{\"321\":1}}],[\"获取一个类型的所有属性名组成的联合类型\",{\"1\":{\"321\":1}}],[\"获取一个\",{\"1\":{\"198\":1}}],[\"获取的生成器对象\",{\"1\":{\"197\":1}}],[\"获取目标对象的指定属性的属性描述符\",{\"1\":{\"191\":1}}],[\"获取目标对象的原型对象\",{\"1\":{\"191\":1}}],[\"获取目标对象中指定属性的值\",{\"1\":{\"191\":1}}],[\"获取web\",{\"1\":{\"57\":1}}],[\"获取主线程传递的数据\",{\"1\":{\"57\":1}}],[\"获取滚动容器的可见高度\",{\"1\":{\"53\":1}}],[\"获取表单数据\",{\"1\":{\"30\":1,\"33\":2}}],[\"阻止导航\",{\"1\":{\"421\":1}}],[\"阻止表单的默认提交行为\",{\"1\":{\"346\":1}}],[\"阻止表单提交\",{\"1\":{\"294\":1}}],[\"阻止表单默认提交行为\",{\"1\":{\"30\":1,\"33\":1}}],[\"阻止了事件继续向上冒泡到容器元素\",{\"1\":{\"263\":1}}],[\"阻止目标对象添加新属性和扩展现有属性\",{\"1\":{\"191\":1}}],[\"阻止扩展和获取属性描述符的操作\",{\"1\":{\"189\":1}}],[\"阻止单击事件继续传播\",{\"1\":{\"70\":1}}],[\"阻止事件的默认行为\",{\"1\":{\"27\":2}}],[\"处理每一行的内容\",{\"1\":{\"595\":1}}],[\"处理自定义异常\",{\"1\":{\"589\":1}}],[\"处理异常\",{\"1\":{\"588\":1}}],[\"处理异步操作\",{\"1\":{\"192\":1}}],[\"处理文件上传\",{\"1\":{\"580\":1}}],[\"处理文件系统等操作\",{\"1\":{\"506\":1}}],[\"处理加载失败的情况\",{\"1\":{\"494\":1}}],[\"处理导入失败的情况\",{\"1\":{\"493\":1}}],[\"处理模块加载失败的情况\",{\"1\":{\"467\":1}}],[\"处理各种文件类型\",{\"1\":{\"455\":1}}],[\"处理\",{\"1\":{\"455\":3,\"506\":1}}],[\"处理多个模块之间的通信可以通过以下几种方式实现\",{\"1\":{\"444\":1}}],[\"处理多个promise\",{\"1\":{\"193\":1}}],[\"处理商品的状态和操作等\",{\"1\":{\"435\":1}}],[\"处理过滤待办事项\",{\"1\":{\"407\":1}}],[\"处理切换待办事项状态\",{\"1\":{\"407\":1}}],[\"处理添加待办事项\",{\"1\":{\"407\":1}}],[\"处理会话和身份验证\",{\"1\":{\"363\":1}}],[\"处理静态文件和资源\",{\"1\":{\"363\":1}}],[\"处理的方式可以是返回静态资源\",{\"1\":{\"360\":1}}],[\"处理响应数据\",{\"1\":{\"341\":1}}],[\"处理请求并生成响应数据\",{\"1\":{\"341\":1}}],[\"处理返回的数据\",{\"1\":{\"322\":4}}],[\"处理并发\",{\"1\":{\"272\":1}}],[\"处理用户输入\",{\"1\":{\"248\":1}}],[\"处理操作取消\",{\"1\":{\"198\":1}}],[\"处理错误和增强应用程序的功能\",{\"1\":{\"366\":1}}],[\"处理错误情况\",{\"1\":{\"322\":2}}],[\"处理错误\",{\"1\":{\"198\":5,\"421\":1,\"587\":1}}],[\"处理结果\",{\"1\":{\"198\":2}}],[\"处理数据\",{\"1\":{\"198\":2}}],[\"处理数据库的存储\",{\"1\":{\"131\":1}}],[\"处理web\",{\"1\":{\"57\":3}}],[\"处理耗时任务\",{\"1\":{\"57\":1}}],[\"处理事件\",{\"1\":{\"38\":1,\"198\":1}}],[\"处理表单输入\",{\"1\":{\"580\":1}}],[\"处理表单数据\",{\"1\":{\"30\":1}}],[\"处理表单提交需要监听提交事件\",{\"1\":{\"33\":1}}],[\"处理表单提交逻辑\",{\"1\":{\"33\":1}}],[\"处理表单提交\",{\"0\":{\"33\":1},\"1\":{\"30\":1}}],[\"处理更新和清理资源等\",{\"1\":{\"22\":1}}],[\"单例模式\",{\"1\":{\"592\":1}}],[\"单独生成一个源映射文件\",{\"1\":{\"468\":1}}],[\"单一状态树\",{\"1\":{\"428\":1}}],[\"单一数据源\",{\"1\":{\"402\":1,\"403\":1,\"404\":1}}],[\"单元测试通常使用测试框架\",{\"1\":{\"372\":1}}],[\"单元测试\",{\"1\":{\"372\":1}}],[\"单点登录\",{\"1\":{\"370\":1}}],[\"单引号或双引号\",{\"1\":{\"251\":1,\"528\":1}}],[\"单位是毫秒\",{\"1\":{\"260\":2}}],[\"单位\",{\"0\":{\"145\":1}}],[\"单文件组件示例\",{\"1\":{\"92\":1}}],[\"单文件组件由一个\",{\"1\":{\"92\":1}}],[\"单文件组件\",{\"0\":{\"92\":1}}],[\"单页面应用\",{\"1\":{\"63\":1}}],[\"单页应用\",{\"1\":{\"61\":1}}],[\"单选框\",{\"1\":{\"30\":1}}],[\"单向数据流等特点使其在前端开发中具有重要的优势\",{\"1\":{\"9\":1}}],[\"单向数据流\",{\"1\":{\"8\":1,\"9\":1}}],[\"数值与字符串的加法操作\",{\"1\":{\"252\":1}}],[\"数值\",{\"0\":{\"169\":1}}],[\"数组有许多内置的方法可以用来对数组进行操作和处理\",{\"1\":{\"578\":1}}],[\"数组非常常用\",{\"1\":{\"572\":1}}],[\"数组操作函数\",{\"1\":{\"570\":1}}],[\"数组操作\",{\"1\":{\"570\":1}}],[\"数组的第一个元素是对象实例或类名\",{\"1\":{\"539\":1}}],[\"数组的基本操作和常见方法\",{\"1\":{\"257\":1}}],[\"数组可以在一个变量中存储多个值\",{\"1\":{\"534\":1}}],[\"数组可以包含任何类型的数据\",{\"1\":{\"257\":1}}],[\"数组可以包含不同类型的元素\",{\"1\":{\"251\":1}}],[\"数组类型推断\",{\"1\":{\"316\":1}}],[\"数组类型注解\",{\"1\":{\"315\":1}}],[\"数组是一种用于存储多个值的数据结构\",{\"1\":{\"572\":1}}],[\"数组是一种用于存储多个值的有序集合\",{\"1\":{\"257\":1}}],[\"数组是\",{\"1\":{\"310\":1}}],[\"数组泛型表示法\",{\"1\":{\"310\":1}}],[\"数组等\",{\"1\":{\"274\":1}}],[\"数组等作为参数\",{\"1\":{\"102\":1}}],[\"数组方法\",{\"1\":{\"257\":1}}],[\"数组长度\",{\"1\":{\"257\":1}}],[\"数组中的每个值称为元素\",{\"1\":{\"251\":1}}],[\"数组缓冲区\",{\"0\":{\"180\":1}}],[\"数组解构赋值可以忽略某些元素\",{\"1\":{\"166\":1}}],[\"数组解构赋值使用\",{\"1\":{\"166\":1}}],[\"数组解构赋值\",{\"1\":{\"166\":1}}],[\"数组写法\",{\"1\":{\"85\":1}}],[\"数组语法\",{\"1\":{\"82\":1}}],[\"数组\",{\"0\":{\"170\":1,\"257\":1,\"534\":1,\"572\":1},\"1\":{\"70\":1,\"185\":1,\"251\":1,\"281\":1,\"311\":1}}],[\"数字以及下划线\",{\"1\":{\"517\":1}}],[\"数字字面量或布尔字面量来约束变量的取值范围\",{\"1\":{\"319\":1}}],[\"数字类型范围的大整数\",{\"1\":{\"310\":1}}],[\"数字类型\",{\"1\":{\"249\":1,\"252\":1}}],[\"数字\",{\"1\":{\"91\":1,\"249\":1,\"251\":1,\"256\":1,\"401\":1}}],[\"数字或基于对象唯一标识符\",{\"1\":{\"46\":1}}],[\"数字输入框\",{\"1\":{\"30\":1}}],[\"数据删除失败\",{\"1\":{\"600\":1}}],[\"数据删除成功\",{\"1\":{\"600\":1}}],[\"数据更新失败\",{\"1\":{\"600\":1}}],[\"数据更新成功\",{\"1\":{\"600\":1}}],[\"数据更新时调用\",{\"1\":{\"87\":1}}],[\"数据插入失败\",{\"1\":{\"600\":1}}],[\"数据插入成功\",{\"1\":{\"600\":1}}],[\"数据流是指vuex中状态的改变是通过一定的流程和规则进行的\",{\"1\":{\"428\":1}}],[\"数据流处理\",{\"1\":{\"198\":1}}],[\"数据的中间件\",{\"1\":{\"366\":1}}],[\"数据加密\",{\"1\":{\"359\":1}}],[\"数据存储和处理\",{\"1\":{\"371\":1}}],[\"数据存储\",{\"0\":{\"305\":1}}],[\"数据在堆中动态分配和释放\",{\"1\":{\"273\":1}}],[\"数据视图\",{\"0\":{\"182\":1}}],[\"数据结构\",{\"0\":{\"175\":1}}],[\"数据清理和统计信息更新等\",{\"1\":{\"138\":1}}],[\"数据过滤和条件操作符\",{\"1\":{\"135\":1}}],[\"数据库抽象层\",{\"1\":{\"604\":1}}],[\"数据库名称\",{\"1\":{\"600\":1}}],[\"数据库服务器名称\",{\"1\":{\"600\":1}}],[\"数据库连接成功\",{\"1\":{\"600\":1}}],[\"数据库连接失败\",{\"1\":{\"600\":1}}],[\"数据库连接与操作\",{\"0\":{\"600\":1}}],[\"数据库连接函数\",{\"1\":{\"570\":1}}],[\"数据库连接等\",{\"1\":{\"570\":1}}],[\"数据库连接等各种任务\",{\"1\":{\"508\":1}}],[\"数据库连接\",{\"1\":{\"538\":2,\"570\":1}}],[\"数据库查询等异步操作的常见做法\",{\"1\":{\"511\":1}}],[\"数据库查询是较为耗时的操作\",{\"1\":{\"465\":1}}],[\"数据库缓存\",{\"1\":{\"465\":1}}],[\"数据库\",{\"1\":{\"369\":1,\"538\":1}}],[\"数据库集成可以更加复杂\",{\"1\":{\"369\":1}}],[\"数据库集成可以帮助应用程序管理和存储数据\",{\"1\":{\"369\":1}}],[\"数据库集成是指将数据库与应用程序连接起来\",{\"1\":{\"369\":1}}],[\"数据库集成\",{\"0\":{\"369\":1}}],[\"数据库管理系统支持多个隔离级别\",{\"1\":{\"137\":1}}],[\"数据库管理系统提供了以下关键操作和机制\",{\"1\":{\"137\":1}}],[\"数据库的状态必须保持一致\",{\"1\":{\"137\":1}}],[\"数据库操作等\",{\"1\":{\"270\":1}}],[\"数据库操作\",{\"0\":{\"133\":1}}],[\"数据库复制和集群\",{\"1\":{\"131\":1}}],[\"数据备份和恢复\",{\"1\":{\"131\":1}}],[\"数据完整性检查\",{\"1\":{\"359\":1}}],[\"数据完整性\",{\"1\":{\"131\":1}}],[\"数据类型包括以下几种\",{\"1\":{\"310\":1}}],[\"数据类型是指在编程语言中直接支持的基本数据类型\",{\"1\":{\"310\":1}}],[\"数据类型和约束等信息\",{\"1\":{\"134\":1}}],[\"数据类型\",{\"0\":{\"136\":1,\"250\":1,\"310\":1},\"1\":{\"131\":1}}],[\"数据\",{\"1\":{\"97\":1,\"282\":1}}],[\"数据观测\",{\"1\":{\"87\":2}}],[\"数据属性为\",{\"1\":{\"95\":1}}],[\"数据属性\",{\"1\":{\"82\":1}}],[\"数据绑定最常见的形式就是使用\",{\"1\":{\"69\":1}}],[\"数据预取和预加载\",{\"1\":{\"55\":1}}],[\"数据请求优化\",{\"1\":{\"55\":1}}],[\"数据缓存\",{\"1\":{\"55\":1,\"138\":1}}],[\"数据获取等\",{\"1\":{\"41\":1}}],[\"数据由父组件传递给子组件\",{\"1\":{\"9\":1}}],[\"文字方向\",{\"1\":{\"235\":1}}],[\"文档和测试\",{\"1\":{\"371\":1}}],[\"文档加载事件\",{\"0\":{\"285\":1}}],[\"文档对象模型\",{\"1\":{\"265\":1,\"266\":1}}],[\"文档\",{\"1\":{\"219\":1,\"538\":1}}],[\"文档的根元素\",{\"1\":{\"207\":1}}],[\"文章\",{\"1\":{\"154\":1}}],[\"文本会自动跨列换行\",{\"1\":{\"154\":1}}],[\"文本内容会自动在多个列中平均分布和流动\",{\"1\":{\"154\":1}}],[\"文本溢出\",{\"1\":{\"144\":1}}],[\"文本换行\",{\"1\":{\"144\":1}}],[\"文本节点\",{\"1\":{\"129\":1}}],[\"文本等\",{\"1\":{\"129\":1}}],[\"文本输入框\",{\"1\":{\"30\":1}}],[\"文件缓存是将动态生成的内容缓存到静态文件中\",{\"1\":{\"601\":1}}],[\"文件缓存\",{\"1\":{\"601\":1}}],[\"文件不存在\",{\"1\":{\"598\":1}}],[\"文件存在\",{\"1\":{\"598\":1}}],[\"文件字段存在\",{\"1\":{\"581\":1}}],[\"文件上传失败\",{\"1\":{\"581\":1}}],[\"文件上传成功\",{\"1\":{\"581\":1}}],[\"文件上传\",{\"0\":{\"581\":1}}],[\"文件操作函数\",{\"1\":{\"570\":1}}],[\"文件操作\",{\"0\":{\"593\":1},\"1\":{\"570\":1}}],[\"文件系统\",{\"1\":{\"506\":1}}],[\"文件系统或数据库中\",{\"1\":{\"357\":1}}],[\"文件的大小\",{\"1\":{\"497\":1}}],[\"文件名以及其他相关配置\",{\"1\":{\"486\":1}}],[\"文件名也会变化\",{\"1\":{\"469\":1}}],[\"文件名匹配模式\",{\"1\":{\"334\":1}}],[\"文件压缩\",{\"1\":{\"469\":1}}],[\"文件路径错误等\",{\"1\":{\"467\":1}}],[\"文件路径等方面很有用\",{\"1\":{\"167\":1}}],[\"文件处理\",{\"0\":{\"491\":1},\"1\":{\"453\":1,\"513\":1}}],[\"文件放到\",{\"1\":{\"368\":1}}],[\"文件放在同一个目录下\",{\"1\":{\"325\":1}}],[\"文件扩展名\",{\"1\":{\"328\":1}}],[\"文件2\",{\"1\":{\"326\":1}}],[\"文件1\",{\"1\":{\"326\":2}}],[\"文件读写等\",{\"1\":{\"272\":1}}],[\"文件包含以下几个部分\",{\"1\":{\"207\":1}}],[\"文件组成\",{\"1\":{\"92\":1}}],[\"文件拆分\",{\"1\":{\"56\":1}}],[\"文件或组件\",{\"1\":{\"56\":1}}],[\"文件\",{\"1\":{\"3\":1,\"95\":1,\"328\":1,\"334\":1,\"366\":1,\"368\":1,\"460\":2,\"475\":1,\"497\":1,\"538\":1}}],[\"文件中的\",{\"1\":{\"331\":1}}],[\"文件中\",{\"1\":{\"3\":3,\"364\":1}}],[\"文件夹及其内容\",{\"1\":{\"334\":1}}],[\"文件夹\",{\"1\":{\"3\":1,\"460\":1,\"581\":1}}],[\"触摸事件\",{\"1\":{\"28\":1}}],[\"触发状态的变化\",{\"1\":{\"403\":1}}],[\"触发状态的更新\",{\"1\":{\"402\":1}}],[\"触发onclick事件\",{\"1\":{\"263\":1}}],[\"触发事件\",{\"1\":{\"198\":1}}],[\"触发事件传递数据给父组件\",{\"1\":{\"93\":1}}],[\"触发事件来传递数据\",{\"1\":{\"93\":2}}],[\"触发事件的元素对象\",{\"1\":{\"27\":1}}],[\"触发loadcomponent函数\",{\"1\":{\"51\":1}}],[\"触发重新渲染\",{\"1\":{\"50\":1}}],[\"触发的事件类型\",{\"1\":{\"27\":1}}],[\"触发组件重新渲染以及执行其他操作\",{\"1\":{\"25\":1}}],[\"表格用于在网页中展示数据\",{\"1\":{\"214\":1}}],[\"表格\",{\"0\":{\"214\":1}}],[\"表优化\",{\"1\":{\"138\":1}}],[\"表\",{\"1\":{\"134\":1,\"135\":1}}],[\"表操作是在数据库中管理和操作表的结构和数据\",{\"1\":{\"134\":1}}],[\"表操作\",{\"0\":{\"134\":1}}],[\"表示左操作数小于\",{\"1\":{\"604\":1}}],[\"表示该常量未定义\",{\"1\":{\"519\":1}}],[\"表示该变量尚未被赋予任何值\",{\"1\":{\"310\":1}}],[\"表示该变量当前没有有效值\",{\"1\":{\"310\":1}}],[\"表示启动devserver时自动打开默认浏览器\",{\"1\":{\"461\":1}}],[\"表示devserver监听的端口号为3000\",{\"1\":{\"461\":1}}],[\"表示动作的类型\",{\"1\":{\"401\":1}}],[\"表示回退到上上个页面\",{\"1\":{\"393\":1}}],[\"表示回退到上一个页面\",{\"1\":{\"393\":1}}],[\"表示你要回退的步数\",{\"1\":{\"393\":1}}],[\"表示已收到关闭请求确认\",{\"1\":{\"361\":1}}],[\"表示已收到关闭请求\",{\"1\":{\"361\":1}}],[\"表示资源在一小时内有效\",{\"1\":{\"356\":1}}],[\"表示资源未被修改\",{\"1\":{\"354\":1}}],[\"表示响应只能被特定的客户端缓存\",{\"1\":{\"356\":1}}],[\"表示响应可以被缓存\",{\"1\":{\"356\":1}}],[\"表示客户端可以接受的数据类型\",{\"1\":{\"355\":1}}],[\"表示未经授权访问受限资源\",{\"1\":{\"354\":1}}],[\"表示需要进行附加操作以完成请求\",{\"1\":{\"354\":1}}],[\"表示服务器暂时无法处理请求\",{\"1\":{\"354\":1}}],[\"表示服务器内部错误\",{\"1\":{\"354\":1}}],[\"表示服务器无法完成有效请求\",{\"1\":{\"354\":1}}],[\"表示服务器要求客户端切换协议\",{\"1\":{\"354\":1}}],[\"表示服务器接收到请求并继续处理\",{\"1\":{\"354\":1}}],[\"表示请求无效或不符合服务器要求\",{\"1\":{\"354\":1}}],[\"表示请求包含错误或无法完成请求\",{\"1\":{\"354\":1}}],[\"表示请求的资源不存在\",{\"1\":{\"354\":1}}],[\"表示请求的资源暂时移动到新的位置\",{\"1\":{\"354\":1}}],[\"表示请求的资源已永久移动到新的位置\",{\"1\":{\"354\":1}}],[\"表示请求被成功接收\",{\"1\":{\"354\":1}}],[\"表示请求正在处理或需要进一步操作\",{\"1\":{\"354\":1}}],[\"表示请求成功处理\",{\"1\":{\"354\":1}}],[\"表示请求成功处理并返回结果\",{\"1\":{\"354\":1}}],[\"表示请求成功并创建了新的资源\",{\"1\":{\"354\":1}}],[\"表示请求成功\",{\"1\":{\"341\":1}}],[\"表示logs文件夹及其内容\",{\"1\":{\"334\":1}}],[\"表示路径是相对于当前源文件所在的目录解析的\",{\"1\":{\"328\":2}}],[\"表示路径是相对于当前源文件的根目录解析的\",{\"1\":{\"328\":2}}],[\"表示当前迭代的值和迭代是否已经结束\",{\"1\":{\"323\":1}}],[\"表示变量需要同时具备这些类型的特征\",{\"1\":{\"319\":1}}],[\"表示变量可以是其中任意一个类型\",{\"1\":{\"319\":1}}],[\"表示变量可以具有任意类型的值\",{\"1\":{\"310\":1}}],[\"表示一组相关的常量\",{\"1\":{\"314\":1}}],[\"表示一个动态的路由参数\",{\"1\":{\"391\":1}}],[\"表示一个未定义的值或变量\",{\"1\":{\"310\":1}}],[\"表示一个被赋予了空值的变量\",{\"1\":{\"310\":1}}],[\"表示一个需要在将来某个时刻执行的操作\",{\"1\":{\"270\":1}}],[\"表示一个空值或空对象引用\",{\"1\":{\"251\":1}}],[\"表示可选参数\",{\"1\":{\"313\":1}}],[\"表示属性或方法可以在该类内部和子类中访问\",{\"1\":{\"312\":1}}],[\"表示属性或方法只能在该类内部访问\",{\"1\":{\"312\":1}}],[\"表示属性或方法是公共的\",{\"1\":{\"312\":1}}],[\"表示属性是否成功定义或修改\",{\"1\":{\"191\":1}}],[\"表示任意精度的整数\",{\"1\":{\"310\":1}}],[\"表示唯一且不可变的值\",{\"1\":{\"310\":1}}],[\"表示数组\",{\"1\":{\"310\":1}}],[\"表示数值类型\",{\"1\":{\"310\":1}}],[\"表示布尔类型\",{\"1\":{\"310\":1}}],[\"表示字符串类型\",{\"1\":{\"310\":1}}],[\"表示等待异步操作的完成\",{\"1\":{\"272\":1}}],[\"表示逻辑上的\",{\"1\":{\"251\":1}}],[\"表示文章等等\",{\"1\":{\"226\":1}}],[\"表示是否成功将目标对象设置为不可扩展\",{\"1\":{\"191\":1}}],[\"表示生成器是否已完成\",{\"1\":{\"186\":1}}],[\"表示生成器当前暂停的值\",{\"1\":{\"186\":1}}],[\"表示对应的捕获组序号\",{\"1\":{\"168\":1}}],[\"表示\",{\"1\":{\"168\":1,\"172\":1}}],[\"表示从右到左的文字方向\",{\"1\":{\"235\":1}}],[\"表示从0\",{\"1\":{\"153\":1}}],[\"表示从起点到终点的旋转角度\",{\"1\":{\"153\":1}}],[\"表示屏幕上的一个物理像素点\",{\"1\":{\"145\":1}}],[\"表示了html文档的结构和内容\",{\"1\":{\"129\":1}}],[\"表示只在组件挂载和卸载时执行一次\",{\"1\":{\"50\":1}}],[\"表示副作用只在组件挂载时执行一次\",{\"1\":{\"41\":1}}],[\"表单保持数据\",{\"1\":{\"580\":1}}],[\"表单重定向\",{\"1\":{\"580\":1}}],[\"表单提交\",{\"0\":{\"346\":1}}],[\"表单提交事件\",{\"1\":{\"28\":1}}],[\"表单操作\",{\"0\":{\"294\":1}}],[\"表单用于收集用户输入\",{\"1\":{\"227\":1}}],[\"表单增强\",{\"1\":{\"225\":1}}],[\"表单允许用户在网页上输入和提交数据\",{\"1\":{\"216\":1}}],[\"表单验证用于确保用户输入的合法性\",{\"1\":{\"234\":1}}],[\"表单验证\",{\"0\":{\"217\":1},\"1\":{\"32\":1}}],[\"表单验证和错误处理是构建可靠和用户友好的表单交互的重要部分\",{\"1\":{\"32\":1}}],[\"表单验证和错误处理\",{\"0\":{\"32\":1}}],[\"表单内容\",{\"1\":{\"30\":3}}],[\"表单\",{\"0\":{\"29\":1,\"216\":1,\"580\":1}}],[\"表单元素的值不受react组件状态的控制\",{\"1\":{\"31\":1}}],[\"表单元素的值由react组件的状态所控制\",{\"1\":{\"31\":1}}],[\"表单元素的基本用法\",{\"0\":{\"30\":1}}],[\"表单元素会有一个action属性来指定表单数据的提交目标\",{\"1\":{\"30\":1}}],[\"表单元素包裹了表单中的其他元素\",{\"1\":{\"30\":1}}],[\"表单元素是网页中常用的交互元素\",{\"1\":{\"30\":1}}],[\"表单元素失去焦点事件\",{\"1\":{\"28\":1}}],[\"表单元素获得焦点事件\",{\"1\":{\"28\":1}}],[\"表单元素值改变事件\",{\"1\":{\"28\":1}}],[\"表单事件\",{\"1\":{\"28\":1}}],[\"表达式2\",{\"1\":{\"558\":1}}],[\"表达式1\",{\"1\":{\"558\":1}}],[\"表达式暂停函数的执行\",{\"1\":{\"198\":1}}],[\"表达式和事件监听器\",{\"1\":{\"198\":1}}],[\"表达式\",{\"1\":{\"197\":3}}],[\"表达式会从解决的\",{\"1\":{\"195\":1}}],[\"表达式会暂停函数执行\",{\"1\":{\"195\":1}}],[\"表达式的控制权会被传递回调用方\",{\"1\":{\"195\":1}}],[\"表达式的实现原理\",{\"1\":{\"195\":1}}],[\"表达式可以是变量\",{\"1\":{\"15\":1}}],[\"表达式插入\",{\"1\":{\"14\":1,\"15\":1}}],[\"不过由于其设计存在安全性问题\",{\"1\":{\"604\":1}}],[\"不过在需要时也可以提供一个\",{\"1\":{\"73\":1}}],[\"不小于\",{\"1\":{\"553\":1}}],[\"不大于\",{\"1\":{\"553\":1}}],[\"不比较类型\",{\"1\":{\"540\":1}}],[\"不带引号与带双引号效果一致\",{\"1\":{\"528\":1}}],[\"不区分大小写的常量名\",{\"1\":{\"519\":1}}],[\"不必要的提取可能导致代码可读性降低\",{\"1\":{\"466\":1}}],[\"不必特别关注这些差异\",{\"1\":{\"27\":1}}],[\"不产生副作用\",{\"1\":{\"407\":1}}],[\"不关心具体的数据来源\",{\"1\":{\"407\":1}}],[\"不应该在函数内部进行网络请求\",{\"1\":{\"401\":1}}],[\"不应该包含副作用或直接修改状态\",{\"1\":{\"21\":1}}],[\"不包含响应体\",{\"1\":{\"352\":1,\"353\":1}}],[\"不包括\",{\"1\":{\"256\":3,\"257\":1}}],[\"不忽略\",{\"1\":{\"334\":1}}],[\"不支持多重继承\",{\"1\":{\"330\":2}}],[\"不合法\",{\"1\":{\"318\":1,\"319\":2}}],[\"不存在块级作用域\",{\"1\":{\"261\":1}}],[\"不推荐使用数字作为属性名称\",{\"1\":{\"259\":1}}],[\"不在数组中\",{\"1\":{\"257\":1}}],[\"不全等运算符\",{\"1\":{\"254\":2}}],[\"不等运算符\",{\"1\":{\"254\":2}}],[\"不等于运算符\",{\"1\":{\"553\":1}}],[\"不等于\",{\"1\":{\"135\":1}}],[\"不直接适用于浏览器环境\",{\"1\":{\"203\":1}}],[\"不论成功或失败\",{\"1\":{\"193\":1}}],[\"不仅可以对数组进行迭代\",{\"1\":{\"184\":1}}],[\"不允许重复值\",{\"1\":{\"176\":1}}],[\"不考虑参数的类型或数量\",{\"1\":{\"170\":1}}],[\"不匹配\",{\"1\":{\"168\":1}}],[\"不可迭代且不具备清空全部元素的方法\",{\"1\":{\"178\":1}}],[\"不可修改\",{\"1\":{\"165\":1}}],[\"不可重复读和幻像读等\",{\"1\":{\"137\":1}}],[\"不是同一个对象\",{\"1\":{\"281\":1}}],[\"不是\",{\"1\":{\"164\":1,\"318\":1,\"319\":1}}],[\"不重复\",{\"1\":{\"158\":1}}],[\"不重新渲染\",{\"1\":{\"48\":2}}],[\"不适用于函数式组件\",{\"1\":{\"387\":1}}],[\"不适用于\",{\"1\":{\"122\":1}}],[\"不适用于使用引用类型数据\",{\"1\":{\"47\":1}}],[\"不会设置\",{\"1\":{\"457\":1}}],[\"不会进行任何额外的优化或配置\",{\"1\":{\"457\":1}}],[\"不会进行重复计算\",{\"1\":{\"106\":1}}],[\"不会改变\",{\"1\":{\"390\":1}}],[\"不会对资源产生影响\",{\"1\":{\"353\":1}}],[\"不会阻塞后续的代码执行\",{\"1\":{\"272\":1}}],[\"不会阻止键被垃圾回收\",{\"1\":{\"179\":1}}],[\"不会阻止对象被垃圾回收\",{\"1\":{\"178\":1}}],[\"不会被执行\",{\"1\":{\"263\":1}}],[\"不会污染全局作用域\",{\"1\":{\"201\":1,\"258\":1}}],[\"不会删除属性b\",{\"1\":{\"171\":1}}],[\"不会修改属性a的值\",{\"1\":{\"171\":1}}],[\"不会添加属性c\",{\"1\":{\"171\":1}}],[\"不会忽略字符串开头的空格\",{\"1\":{\"169\":1}}],[\"不会将非数值的值转换为数值\",{\"1\":{\"169\":3}}],[\"不会自动进行依赖收集\",{\"1\":{\"111\":1}}],[\"不能访问父作用域中的变量\",{\"1\":{\"571\":1}}],[\"不能包含多条语句或复杂的逻辑\",{\"1\":{\"571\":1}}],[\"不能有缩进和空格\",{\"1\":{\"528\":1}}],[\"不能赋值为其他任意值\",{\"1\":{\"310\":1}}],[\"不能进行赋值操作\",{\"1\":{\"102\":1}}],[\"不能直接修改属性的值\",{\"1\":{\"102\":1}}],[\"不能替换整个对象\",{\"1\":{\"102\":1}}],[\"不能在条件语句或循环中使用hooks\",{\"1\":{\"43\":1}}],[\"不能在类组件中使用\",{\"1\":{\"43\":1}}],[\"不能在循环\",{\"1\":{\"40\":1}}],[\"不需要加转义符\",{\"1\":{\"528\":1}}],[\"不需要加上模块名\",{\"1\":{\"444\":1}}],[\"不需要以斜杠\",{\"1\":{\"415\":1}}],[\"不需要等待整个页面的重载\",{\"1\":{\"342\":1}}],[\"不需要手动释放栈或堆中的内存\",{\"1\":{\"273\":1}}],[\"不需要通过组件之间的传递来实现通信\",{\"1\":{\"93\":1}}],[\"不需要维护组件状态\",{\"1\":{\"31\":1}}],[\"不要使用vue内置的保留字\",{\"1\":{\"91\":1}}],[\"不要过度关注key属性的值\",{\"1\":{\"46\":1}}],[\"不要过度依赖key属性\",{\"1\":{\"46\":1}}],[\"不管初始条件是什么\",{\"1\":{\"70\":1}}],[\"不影响页面的加载和渲染\",{\"1\":{\"55\":1}}],[\"不同编程语言和环境可能有不同的动态导入方式\",{\"1\":{\"467\":1}}],[\"不同组件之间可以共享同一套状态数据\",{\"1\":{\"428\":1}}],[\"不同组件可以通过订阅感兴趣的事件来接收数据\",{\"1\":{\"38\":1}}],[\"不同于\",{\"1\":{\"396\":1}}],[\"不同类型的缓存策略\",{\"1\":{\"356\":1}}],[\"不同类型的事件可能还有其他特定的属性\",{\"1\":{\"27\":1}}],[\"不同浏览器可能有不同的快捷键触发方式\",{\"1\":{\"232\":1}}],[\"不同\",{\"1\":{\"110\":1}}],[\"不同的devtool选项具有不同的特性和效果\",{\"1\":{\"500\":1}}],[\"不同的数据类型和业务场景可能需要不同的缓存策略\",{\"1\":{\"465\":1}}],[\"不同的数据库管理系统可能支持不同的数据类型\",{\"1\":{\"136\":1}}],[\"不同的模块可以在不同的应用中复用\",{\"1\":{\"434\":1}}],[\"不同的组件可以通过读取或修改state来实现状态的共享和通信\",{\"1\":{\"429\":1}}],[\"不同的应用程序可以共享数据和功能\",{\"1\":{\"371\":1}}],[\"不同的http请求和响应可能需要特定的头部信息来传递额外的元数据\",{\"1\":{\"355\":1}}],[\"不同的分支可以独立开发和合并\",{\"1\":{\"333\":1}}],[\"不同的方向等情况\",{\"1\":{\"157\":1}}],[\"不同的屏幕尺寸\",{\"1\":{\"157\":1}}],[\"不同的开发者在\",{\"1\":{\"61\":1}}],[\"不同的图片格式适合不同的场景和要求\",{\"1\":{\"54\":1}}],[\"注入环境变量等\",{\"1\":{\"476\":1}}],[\"注入环境变量\",{\"1\":{\"456\":1,\"457\":1}}],[\"注册自定义错误处理函数\",{\"1\":{\"587\":1}}],[\"注册自定义指令需要在\",{\"1\":{\"70\":1}}],[\"注册和管理插件\",{\"1\":{\"464\":1}}],[\"注册插件并配置选项\",{\"1\":{\"439\":1}}],[\"注册插件\",{\"1\":{\"437\":1,\"439\":1}}],[\"注册路由器实例\",{\"1\":{\"412\":2}}],[\"注册状态改变的事件回调函数\",{\"1\":{\"345\":1}}],[\"注册一个回调函数\",{\"1\":{\"193\":3}}],[\"注册\",{\"1\":{\"116\":1}}],[\"注册过滤器\",{\"1\":{\"86\":1}}],[\"注册全局指令和局部注册指令的方式不同\",{\"1\":{\"70\":1}}],[\"注册事件处理函数的元素对象\",{\"1\":{\"27\":1}}],[\"注意这里的路径没有斜杠\",{\"1\":{\"415\":1}}],[\"注意事项\",{\"0\":{\"349\":1}}],[\"注意运行顺序\",{\"1\":{\"330\":1}}],[\"注意内存占用较大的操作\",{\"1\":{\"276\":1}}],[\"注意\",{\"1\":{\"36\":1,\"57\":1,\"86\":1,\"102\":2,\"122\":1,\"126\":1,\"133\":1,\"271\":1,\"387\":1,\"393\":1,\"397\":1,\"441\":1,\"442\":1,\"467\":1,\"518\":1,\"519\":1,\"528\":1}}],[\"注释和未使用的资源\",{\"1\":{\"504\":1}}],[\"注释内容将被git忽略\",{\"1\":{\"334\":1}}],[\"注释不会在浏览器中显示\",{\"1\":{\"212\":1}}],[\"注释是用来给开发人员添加注解和说明的\",{\"1\":{\"212\":1}}],[\"注释节点等\",{\"1\":{\"129\":1}}],[\"注释来为异步组件分配一个唯一的名称\",{\"1\":{\"95\":1}}],[\"注释\",{\"0\":{\"212\":1},\"1\":{\"15\":1,\"334\":1,\"524\":1}}],[\"常见资源数据类型有打开文件\",{\"1\":{\"538\":1}}],[\"常见问题解答和错误排除指南可以获得有用的信息\",{\"1\":{\"503\":1}}],[\"常见问题和解决方案\",{\"0\":{\"444\":1}}],[\"常见数据类型\",{\"0\":{\"251\":1}}],[\"常见场景\",{\"0\":{\"198\":1}}],[\"常见的缓存技术包括文件缓存\",{\"1\":{\"601\":1}}],[\"常见的缓存策略包括设置cache\",{\"1\":{\"55\":1}}],[\"常见的数据库缓存解决方案包括redis\",{\"1\":{\"465\":1}}],[\"常见的插件有热模块替换插件\",{\"1\":{\"453\":1}}],[\"常见的redux中间件包括redux\",{\"1\":{\"405\":1}}],[\"常见的api协议包括rest\",{\"1\":{\"371\":1}}],[\"常见的实现方式包括使用session和cookie机制\",{\"1\":{\"370\":1}}],[\"常见的关系型数据库包括mysql\",{\"1\":{\"369\":1}}],[\"常见的目录名包括\",{\"1\":{\"368\":1}}],[\"常见的模块解析规则包括\",{\"1\":{\"460\":1}}],[\"常见的模块化规范包括commonjs\",{\"1\":{\"56\":1}}],[\"常见的模板引擎有\",{\"1\":{\"367\":1}}],[\"常见的值包括多个mime类型\",{\"1\":{\"355\":1}}],[\"常见的值包括\",{\"1\":{\"355\":1,\"356\":1}}],[\"常见的状态码包括\",{\"1\":{\"352\":1}}],[\"常见的状态有\",{\"1\":{\"341\":1}}],[\"常见的请求方法有\",{\"1\":{\"352\":1}}],[\"常见的git\",{\"1\":{\"338\":1}}],[\"常见的微任务包括promise的回调函数和使用mutationobserver监听dom变化的回调函数\",{\"1\":{\"271\":1}}],[\"常见的异步任务包括定时器\",{\"1\":{\"270\":1}}],[\"常见的后端集成方式包括\",{\"1\":{\"241\":1}}],[\"常见的内联元素包括\",{\"1\":{\"210\":1}}],[\"常见的块级元素包括\",{\"1\":{\"210\":1}}],[\"常见的做法是使用构建工具\",{\"1\":{\"203\":1}}],[\"常见的填充模式有forwards\",{\"1\":{\"152\":1}}],[\"常见的速度曲线有ease\",{\"1\":{\"152\":1}}],[\"常见的操作包括插入\",{\"1\":{\"137\":1}}],[\"常见的条件操作符包括等于\",{\"1\":{\"135\":1}}],[\"常见的代码拆分方法包括\",{\"1\":{\"56\":1}}],[\"常见的优化方法包括合并多个css或javascript文件成一个文件\",{\"1\":{\"55\":1}}],[\"常见的图片懒加载库有lazyload和intersection\",{\"1\":{\"54\":1}}],[\"常见的图片格式包括jpeg\",{\"1\":{\"54\":1}}],[\"常见的虚拟滚动库包括react\",{\"1\":{\"53\":1}}],[\"常见的type属性值有\",{\"1\":{\"30\":1}}],[\"常见的事件类型\",{\"0\":{\"28\":1}}],[\"常见的事件属性包括onclick\",{\"1\":{\"25\":1}}],[\"常量在定义后\",{\"1\":{\"520\":1}}],[\"常量在整个脚本中都可以使用\",{\"1\":{\"518\":1}}],[\"常量是全局的\",{\"0\":{\"520\":1}}],[\"常量值为\",{\"1\":{\"519\":1}}],[\"常量值被定义后\",{\"1\":{\"518\":1}}],[\"常量的值\",{\"1\":{\"519\":1}}],[\"常量名称\",{\"1\":{\"519\":1}}],[\"常量名不需要加\",{\"1\":{\"518\":1}}],[\"常量\",{\"0\":{\"518\":1,\"519\":1},\"1\":{\"165\":2}}],[\"常用于需要共享资源的场景\",{\"1\":{\"592\":1}}],[\"常用于一些局部状态的更新\",{\"1\":{\"421\":2}}],[\"常用于一些全局状态的更新\",{\"1\":{\"421\":1}}],[\"常用于身份验证\",{\"1\":{\"421\":1}}],[\"常用于非浏览器环境\",{\"1\":{\"390\":1}}],[\"常用于\",{\"1\":{\"390\":1}}],[\"常用于防止跨站请求伪造\",{\"1\":{\"355\":1}}],[\"常用于服务器判断请求来自何种客户端\",{\"1\":{\"355\":1}}],[\"常用于创建多列布局\",{\"1\":{\"147\":1}}],[\"常用方法\",{\"0\":{\"191\":1,\"193\":1}}],[\"常用的内存缓存软件包括memcached和redis\",{\"1\":{\"601\":1}}],[\"常用的插件是terserplugin\",{\"1\":{\"469\":1}}],[\"常用的参数包括\",{\"1\":{\"416\":1}}],[\"常用的异步编程方式包括回调函数\",{\"1\":{\"322\":1}}],[\"常用的方法包括\",{\"1\":{\"416\":1}}],[\"常用的方法有\",{\"1\":{\"176\":1,\"177\":1}}],[\"常用的方式是使用匿名函数\",{\"1\":{\"313\":1}}],[\"常用的深拷贝方法包括\",{\"1\":{\"281\":1}}],[\"常用的浅拷贝方法包括\",{\"1\":{\"281\":1}}],[\"常用的正则表达式模式\",{\"1\":{\"279\":1}}],[\"常用的实现异步编程的机制有以下几种\",{\"1\":{\"272\":1}}],[\"常用的速度曲线包括ease\",{\"1\":{\"151\":1}}],[\"常用的节点树就是dom树\",{\"1\":{\"129\":1}}],[\"常用的类名有\",{\"1\":{\"98\":1}}],[\"常用的有以下几种\",{\"1\":{\"58\":1}}],[\"常用的压缩方法包括无损压缩和有损压缩\",{\"1\":{\"54\":1}}],[\"常用的hooks函数包括usestate\",{\"1\":{\"41\":1}}],[\"常用的hooks函数\",{\"0\":{\"41\":1}}],[\"常用的事件对象属性如下\",{\"1\":{\"27\":1}}],[\"鼠标悬停事件\",{\"1\":{\"287\":1}}],[\"鼠标松开事件\",{\"1\":{\"28\":1}}],[\"鼠标按下事件\",{\"1\":{\"28\":1}}],[\"鼠标移入\",{\"1\":{\"144\":1}}],[\"鼠标移入事件\",{\"1\":{\"28\":1}}],[\"鼠标移动\",{\"1\":{\"263\":1}}],[\"鼠标移动事件\",{\"1\":{\"28\":1}}],[\"鼠标移动等\",{\"1\":{\"25\":1}}],[\"鼠标移出事件\",{\"1\":{\"28\":1}}],[\"鼠标双击事件\",{\"1\":{\"28\":1}}],[\"鼠标点击事件\",{\"1\":{\"28\":1}}],[\"鼠标事件\",{\"1\":{\"28\":1}}],[\"鼠标事件发生时的鼠标指针相对于整个文档的水平和垂直坐标\",{\"1\":{\"27\":1}}],[\"鼠标事件发生时的鼠标指针相对于浏览器视口的水平和垂直坐标\",{\"1\":{\"27\":1}}],[\"鼠标位置等\",{\"1\":{\"27\":1}}],[\"重命名文件\",{\"1\":{\"597\":1}}],[\"重命名和删除文件\",{\"0\":{\"597\":1}}],[\"重命名导入和导出\",{\"1\":{\"202\":1}}],[\"重定向到成功页面\",{\"1\":{\"580\":1}}],[\"重定向\",{\"0\":{\"418\":1}}],[\"重定向路由\",{\"0\":{\"382\":1}}],[\"重定向状态码\",{\"1\":{\"354\":1}}],[\"重传和丢包等情况\",{\"1\":{\"361\":1}}],[\"重置等\",{\"1\":{\"338\":1}}],[\"重新索引数组\",{\"1\":{\"578\":1}}],[\"重新打开应用程序后得到保留\",{\"1\":{\"439\":1}}],[\"重新加载当前页面\",{\"1\":{\"266\":1}}],[\"重新渲染和打补丁之前\",{\"1\":{\"87\":1}}],[\"重新渲染\",{\"1\":{\"48\":1}}],[\"重新渲染组件\",{\"1\":{\"22\":1}}],[\"重复执行事件循环\",{\"1\":{\"270\":1}}],[\"重复整个过程\",{\"1\":{\"264\":1}}],[\"重复上述步骤\",{\"1\":{\"261\":1}}],[\"重复的值不会被添加\",{\"1\":{\"176\":1}}],[\"重复字符串指定次数\",{\"1\":{\"167\":1}}],[\"重复次数等\",{\"1\":{\"152\":1}}],[\"重要的是将事件处理函数正确地绑定到元素的事件属性上\",{\"1\":{\"26\":1}}],[\"绑定style\",{\"1\":{\"84\":1}}],[\"绑定的数据对象\",{\"1\":{\"81\":1,\"84\":1}}],[\"绑定class样式\",{\"1\":{\"81\":1}}],[\"绑定事件处理函数的方法\",{\"0\":{\"26\":1}}],[\"绑定方法的this指向\",{\"1\":{\"22\":1}}],[\"绑定方法的this指向等操作可以在这里进行\",{\"1\":{\"22\":1}}],[\"要在一个函数中访问一个全局变量\",{\"1\":{\"525\":1}}],[\"要在mysql中使用特定的数据库\",{\"1\":{\"133\":1}}],[\"要了解更多关于npm的详细信息\",{\"1\":{\"510\":1}}],[\"要安装node\",{\"1\":{\"507\":1}}],[\"要安装和配置vuex\",{\"1\":{\"427\":1}}],[\"要优化vuex应用程序的性能\",{\"1\":{\"443\":1}}],[\"要排除的某些状态等\",{\"1\":{\"439\":1}}],[\"要进行异步操作\",{\"1\":{\"432\":1}}],[\"要进行适当的错误处理\",{\"1\":{\"349\":1}}],[\"要修改vuex中的状态\",{\"1\":{\"431\":1}}],[\"要修改表的结构\",{\"1\":{\"134\":1}}],[\"要添加路由元数据\",{\"1\":{\"422\":1}}],[\"要定义一个枚举\",{\"1\":{\"310\":1}}],[\"要仔细权衡使用递归和迭代的优缺点\",{\"1\":{\"269\":1}}],[\"要传递给回调函数的可选参数\",{\"1\":{\"260\":2}}],[\"要执行的函数或要执行的代码块\",{\"1\":{\"260\":2}}],[\"要创建一个基本的node\",{\"1\":{\"508\":1}}],[\"要创建一个\",{\"1\":{\"330\":1}}],[\"要创建一个symbol\",{\"1\":{\"174\":1}}],[\"要创建一个新的表\",{\"1\":{\"134\":1}}],[\"要创建一个新的数据库\",{\"1\":{\"133\":1}}],[\"要讲清楚这个问题\",{\"1\":{\"164\":1}}],[\"要使用vuex\",{\"1\":{\"439\":1}}],[\"要使用devtools进行vuex的调试\",{\"1\":{\"438\":1}}],[\"要使用路由重定向\",{\"1\":{\"418\":1}}],[\"要使用插件\",{\"1\":{\"293\":1}}],[\"要使用\",{\"1\":{\"282\":1}}],[\"要使用css\",{\"1\":{\"156\":1}}],[\"要使用这个单文件组件\",{\"1\":{\"92\":1}}],[\"要考虑页面布局或者样式的调整\",{\"1\":{\"349\":1}}],[\"要考虑兼容性\",{\"1\":{\"150\":1}}],[\"要考虑到hooks的命名规范\",{\"1\":{\"42\":1}}],[\"要选择页面上的所有元素\",{\"1\":{\"143\":1}}],[\"要选择紧跟在h1元素后面的p元素\",{\"1\":{\"143\":1}}],[\"要选择段落的第一个字母\",{\"1\":{\"143\":1}}],[\"要选择鼠标悬停在链接上的状态\",{\"1\":{\"143\":1}}],[\"要选择所有具有target=\",{\"1\":{\"143\":1}}],[\"要选择所有的段落元素\",{\"1\":{\"143\":1}}],[\"要选择container类的直接子元素中的段落元素\",{\"1\":{\"143\":1}}],[\"要选择具有container类内部的所有段落元素\",{\"1\":{\"143\":1}}],[\"要选择具有header\",{\"1\":{\"143\":1}}],[\"要选择具有red\",{\"1\":{\"143\":1}}],[\"要么全部失败回滚\",{\"1\":{\"137\":2}}],[\"要从表中检索数据行\",{\"1\":{\"134\":1}}],[\"要从表中删除数据行\",{\"1\":{\"134\":1}}],[\"要更新表中现有数据行的值\",{\"1\":{\"134\":1}}],[\"要向表中插入新的数据行\",{\"1\":{\"134\":1}}],[\"要删除一个已存在的表\",{\"1\":{\"134\":1}}],[\"要删除一个已存在的数据库\",{\"1\":{\"133\":1}}],[\"要备份mysql数据库\",{\"1\":{\"133\":1}}],[\"要显示mysql中所有可用的数据库列表\",{\"1\":{\"133\":1}}],[\"要求\",{\"1\":{\"90\":1}}],[\"要处理可能的错误情况\",{\"1\":{\"50\":1}}],[\"要特别注意对比引用类型\",{\"1\":{\"48\":1}}],[\"要遵循以\",{\"1\":{\"43\":1}}],[\"要确保递归调用能够最终达到终止条件\",{\"1\":{\"269\":1}}],[\"要确保它们的调用顺序是稳定的\",{\"1\":{\"43\":1}}],[\"要确保正确绑定和处理事件\",{\"1\":{\"25\":1}}],[\"要渲染组件\",{\"1\":{\"21\":1}}],[\"或绝对路径\",{\"1\":{\"599\":1}}],[\"或可调用\",{\"1\":{\"539\":1}}],[\"或是指数形式\",{\"1\":{\"532\":1}}],[\"或八进制\",{\"1\":{\"531\":1}}],[\"或您喜欢的其他名称\",{\"1\":{\"508\":1}}],[\"或require\",{\"1\":{\"480\":1}}],[\"或其他非es模块的情况\",{\"1\":{\"462\":1}}],[\"或immutable\",{\"1\":{\"401\":1}}],[\"或ip地址\",{\"1\":{\"352\":1}}],[\"或不能\",{\"1\":{\"390\":1}}],[\"或文档\",{\"1\":{\"371\":1}}],[\"或通过\",{\"1\":{\"368\":1}}],[\"或tls\",{\"1\":{\"359\":2}}],[\"或$\",{\"1\":{\"343\":1}}],[\"或自定义的类型来声明变量\",{\"1\":{\"311\":1}}],[\"或作为函数的返回值来表示缺少值\",{\"1\":{\"310\":1}}],[\"或泛型\",{\"1\":{\"310\":1}}],[\"或循环引用的对象\",{\"1\":{\"281\":1}}],[\"或undefined\",{\"1\":{\"262\":1}}],[\"或usememo\",{\"1\":{\"43\":1}}],[\"或返回一个新函数的函数\",{\"1\":{\"258\":1}}],[\"或使用responsexml属性获取解析后的xml数据\",{\"1\":{\"341\":1}}],[\"或使用弱引用来处理对对象的引用\",{\"1\":{\"275\":1}}],[\"或使用\",{\"1\":{\"198\":1}}],[\"或使用after\",{\"1\":{\"98\":1}}],[\"或将多个元素合并为数组\",{\"1\":{\"173\":1}}],[\"或nan\",{\"1\":{\"169\":1}}],[\"或no\",{\"1\":{\"158\":1}}],[\"或local\",{\"1\":{\"158\":1}}],[\"或椭圆形\",{\"1\":{\"153\":1}}],[\"或关键词\",{\"1\":{\"153\":1}}],[\"或秒\",{\"1\":{\"151\":2}}],[\"或条件渲染来实现\",{\"1\":{\"126\":1}}],[\"或下划线\",{\"1\":{\"91\":1}}],[\"或对象语法\",{\"1\":{\"82\":1}}],[\"或\",{\"1\":{\"58\":1,\"70\":1,\"85\":1,\"86\":2,\"91\":1,\"137\":1,\"192\":2,\"251\":1,\"275\":1,\"281\":3,\"282\":2,\"310\":2,\"311\":2,\"318\":1,\"319\":2,\"325\":1,\"326\":1,\"338\":1,\"368\":1,\"375\":1,\"384\":1,\"389\":1,\"390\":1,\"427\":1,\"460\":2,\"515\":2,\"528\":1,\"533\":1}}],[\"或构建工具来管理依赖和编译模块化的代码\",{\"1\":{\"56\":1}}],[\"或jpg\",{\"1\":{\"54\":1}}],[\"或false\",{\"1\":{\"48\":1}}],[\"或者使用\",{\"1\":{\"511\":1}}],[\"或者使用stoppropagation\",{\"1\":{\"26\":1}}],[\"或者借助webpack的转换工具\",{\"1\":{\"467\":1}}],[\"或者mode设置为production\",{\"1\":{\"462\":1}}],[\"或者在初始化阶段做一些全局设置\",{\"1\":{\"437\":1}}],[\"或者在同一应用的不同部分共享\",{\"1\":{\"434\":1}}],[\"或者在dom更新之后执行同步任务\",{\"1\":{\"41\":1}}],[\"或者通过其他方式进行判断\",{\"1\":{\"385\":1}}],[\"或者通过深层比较可以轻松确定它们的变化时\",{\"1\":{\"47\":1}}],[\"或者其他名称\",{\"1\":{\"364\":1}}],[\"或者last\",{\"1\":{\"352\":1}}],[\"或者对javascript源码进行预处理\",{\"1\":{\"463\":1}}],[\"或者对于方法\",{\"1\":{\"330\":1}}],[\"或者对象中不存在某个属性\",{\"1\":{\"310\":1}}],[\"或者将一个模块名称映射到一个具体的路径\",{\"1\":{\"328\":1}}],[\"或者将一个字符串展开为字符数组\",{\"1\":{\"170\":1}}],[\"或者可以将声明文件放在单独的\",{\"1\":{\"325\":1}}],[\"或者执行特定类型的操作\",{\"1\":{\"317\":1}}],[\"或者推断出的类型与开发者的预期不一致\",{\"1\":{\"316\":1}}],[\"或者返回一个函数\",{\"1\":{\"313\":1}}],[\"或者作为返回值返回\",{\"1\":{\"313\":1}}],[\"或者它的类型可能是多种类型之一时\",{\"1\":{\"310\":1}}],[\"或者移除现有的元素\",{\"1\":{\"296\":1}}],[\"或者保持动画结束时的状态\",{\"1\":{\"152\":1}}],[\"或者只恢复特定的表\",{\"1\":{\"133\":1}}],[\"或者根据一些条件计算出动态的样式\",{\"1\":{\"108\":1}}],[\"或者\",{\"1\":{\"49\":1,\"70\":1,\"94\":1,\"401\":1}}],[\"或在线图片压缩工具压缩图片的文件大小\",{\"1\":{\"54\":1}}],[\"或在表单项旁边显示错误提示\",{\"1\":{\"32\":1}}],[\"或在输入时实时验证\",{\"1\":{\"32\":1}}],[\"或在函数组件内部使用usestate或usecallback等钩子来定义\",{\"1\":{\"25\":1}}],[\"或函数组件\",{\"1\":{\"11\":1}}],[\"做出响应的过程\",{\"1\":{\"25\":1}}],[\"避免手动引入每个类文件的繁琐\",{\"1\":{\"583\":1}}],[\"避免滥用和过度复杂化代码\",{\"1\":{\"467\":1}}],[\"避免过度提取\",{\"1\":{\"466\":1}}],[\"避免混乱和冲突\",{\"1\":{\"444\":1}}],[\"避免将所有数据都放入vuex\",{\"1\":{\"443\":1}}],[\"避免将无关文件纳入版本控制\",{\"1\":{\"334\":1}}],[\"避免在代码中直接使用字符串\",{\"1\":{\"407\":1}}],[\"避免中间人攻击和钓鱼网站的风险\",{\"1\":{\"359\":1}}],[\"避免重复的网络请求\",{\"1\":{\"356\":1}}],[\"避免重复计算\",{\"1\":{\"52\":4,\"601\":1}}],[\"避免一次性加载过多数据导致页面卡顿或者性能问题\",{\"1\":{\"349\":1}}],[\"避免一次性处理过多数据\",{\"1\":{\"138\":1}}],[\"避免页面的刷新\",{\"1\":{\"346\":1}}],[\"避免互相干扰\",{\"1\":{\"337\":1}}],[\"避免命名冲突\",{\"1\":{\"330\":1,\"426\":1,\"444\":1}}],[\"避免错误或非法值的出现\",{\"1\":{\"314\":1}}],[\"避免冲突\",{\"1\":{\"307\":1}}],[\"避免层级过深的调用链\",{\"1\":{\"277\":1}}],[\"避免无限递归调用\",{\"1\":{\"277\":1}}],[\"避免无关的重新渲染\",{\"1\":{\"49\":1}}],[\"避免创建过多的全局变量\",{\"1\":{\"276\":1}}],[\"避免创建过多的全局变量和闭包\",{\"1\":{\"275\":1}}],[\"避免出现栈溢出的情况\",{\"1\":{\"274\":1}}],[\"避免出现未定义或空值时的错误\",{\"1\":{\"173\":1}}],[\"避免阻塞主线程\",{\"1\":{\"271\":1}}],[\"避免了命名冲突\",{\"1\":{\"434\":1}}],[\"避免了不同模块中的命名冲突\",{\"1\":{\"434\":1}}],[\"避免了硬编码和错误\",{\"1\":{\"314\":1}}],[\"避免了回调地狱\",{\"1\":{\"192\":1}}],[\"避免了代码的重复编写\",{\"1\":{\"97\":1}}],[\"避免了代码的重复编写和重复维护\",{\"1\":{\"23\":1}}],[\"避免图片溢出或变形\",{\"1\":{\"148\":1}}],[\"避免使用简单\",{\"1\":{\"602\":1}}],[\"避免使用通配符like查询\",{\"1\":{\"138\":1}}],[\"避免使用不必要的join操作和子查询\",{\"1\":{\"138\":1}}],[\"避免使用索引作为key值\",{\"1\":{\"46\":1}}],[\"避免多次触发\",{\"1\":{\"50\":1}}],[\"避免不必要的依赖\",{\"1\":{\"504\":1}}],[\"避免不必要的响应式数据\",{\"1\":{\"443\":1}}],[\"避免不必要的嵌套和冗余数据\",{\"1\":{\"407\":1}}],[\"避免不必要的栈帧创建从而提高性能\",{\"1\":{\"172\":1}}],[\"避免不必要的副作用触发\",{\"1\":{\"49\":1}}],[\"避免不必要的重新渲染\",{\"1\":{\"49\":1}}],[\"避免不必要的重渲染\",{\"1\":{\"22\":1}}],[\"避免不必要的开销\",{\"1\":{\"48\":1}}],[\"避免引入不必要的复杂性和性能问题\",{\"1\":{\"48\":1}}],[\"避免产生难以追踪的bug\",{\"1\":{\"43\":1}}],[\"避免通过props一层层传递数据\",{\"1\":{\"37\":1}}],[\"添加各种功能和服务\",{\"1\":{\"509\":1}}],[\"添加唯一的哈希值\",{\"1\":{\"483\":1}}],[\"添加加载器和插件\",{\"1\":{\"475\":1}}],[\"添加加载器规则\",{\"1\":{\"475\":1}}],[\"添加插件\",{\"1\":{\"475\":1}}],[\"添加<router\",{\"1\":{\"412\":1}}],[\"添加路由视图\",{\"1\":{\"412\":1}}],[\"添加远程仓库\",{\"1\":{\"336\":1}}],[\"添加文件\",{\"1\":{\"334\":1}}],[\"添加元素\",{\"1\":{\"310\":1}}],[\"添加新元素\",{\"1\":{\"310\":1}}],[\"添加新属性无效\",{\"1\":{\"191\":1}}],[\"添加css类\",{\"1\":{\"288\":1}}],[\"添加或移除css类\",{\"1\":{\"288\":1}}],[\"添加或删除模块\",{\"1\":{\"453\":1,\"459\":1}}],[\"添加或删除\",{\"1\":{\"46\":1}}],[\"添加一个微任务\",{\"1\":{\"271\":2}}],[\"添加一个宏任务\",{\"1\":{\"271\":1}}],[\"添加一个新属性\",{\"1\":{\"259\":1}}],[\"添加一个新的列\",{\"1\":{\"134\":1}}],[\"添加异步任务到任务队列\",{\"1\":{\"270\":2}}],[\"添加和移除css类\",{\"1\":{\"265\":1}}],[\"添加额外的操作等\",{\"1\":{\"188\":1}}],[\"添加了\",{\"1\":{\"150\":1,\"152\":1,\"267\":1}}],[\"添加约束等\",{\"1\":{\"134\":1}}],[\"添加事件监听器时使用事件捕获模式\",{\"1\":{\"70\":1}}],[\"添加loading状态等\",{\"1\":{\"23\":1}}],[\"添加以下代码\",{\"1\":{\"3\":3}}],[\"oo\",{\"1\":{\"583\":1}}],[\"oop\",{\"1\":{\"278\":2,\"579\":1,\"583\":1}}],[\"os模块\",{\"1\":{\"509\":1}}],[\"other\",{\"1\":{\"393\":4}}],[\"omit<person\",{\"1\":{\"321\":1}}],[\"omit\",{\"1\":{\"321\":1}}],[\"odd\",{\"1\":{\"291\":1}}],[\"odio\",{\"1\":{\"154\":1}}],[\"occurred\",{\"1\":{\"196\":1,\"314\":1}}],[\"octal\",{\"1\":{\"169\":2}}],[\"own\",{\"1\":{\"189\":4}}],[\"ownkeys\",{\"1\":{\"174\":2,\"189\":4,\"191\":2}}],[\"o\",{\"1\":{\"167\":2,\"170\":2,\"173\":1,\"185\":1,\"256\":4,\"270\":1,\"506\":1}}],[\"of循环遍历每一个字符\",{\"1\":{\"167\":1}}],[\"of\",{\"1\":{\"159\":10,\"167\":1,\"170\":4,\"172\":1,\"185\":8,\"191\":1,\"198\":5,\"204\":2,\"323\":1}}],[\"overflow\",{\"1\":{\"144\":2,\"273\":1,\"274\":1,\"277\":1,\"348\":1}}],[\"overridingstyles\",{\"1\":{\"85\":3}}],[\"outdated\",{\"1\":{\"510\":1}}],[\"outputpath\",{\"1\":{\"473\":1}}],[\"output\",{\"0\":{\"486\":1},\"1\":{\"450\":1,\"453\":1,\"454\":2,\"469\":1,\"475\":1,\"483\":1,\"486\":1,\"495\":1,\"497\":1}}],[\"outlet\",{\"0\":{\"396\":1},\"1\":{\"396\":8}}],[\"outline\",{\"1\":{\"144\":1}}],[\"outer\",{\"1\":{\"261\":3,\"280\":1}}],[\"outervariable\",{\"1\":{\"261\":2,\"268\":4}}],[\"outerfunction\",{\"1\":{\"261\":2,\"268\":5}}],[\"out等\",{\"1\":{\"151\":1,\"152\":1}}],[\"out\",{\"1\":{\"144\":1,\"151\":2,\"273\":1}}],[\"out>\",{\"1\":{\"123\":1}}],[\"opcache和xcache\",{\"1\":{\"601\":1}}],[\"opcode缓存可以将编译后的opcode保存在内存中\",{\"1\":{\"601\":1}}],[\"opcode缓存\",{\"1\":{\"601\":1}}],[\"optimization\",{\"0\":{\"496\":1},\"1\":{\"454\":2,\"469\":2,\"480\":1,\"496\":1}}],[\"options请求通常用于了解服务器的功能和可用性\",{\"1\":{\"353\":1}}],[\"options\",{\"1\":{\"353\":1,\"463\":1,\"469\":1,\"471\":1,\"473\":1}}],[\"option3\",{\"1\":{\"319\":2}}],[\"option2\",{\"1\":{\"319\":2}}],[\"option1\",{\"1\":{\"319\":2}}],[\"optional\",{\"1\":{\"173\":1}}],[\"option>\",{\"1\":{\"30\":3}}],[\"ops\",{\"1\":{\"369\":1}}],[\"oppositedirection\",{\"1\":{\"310\":2}}],[\"open\",{\"1\":{\"266\":1,\"282\":1,\"345\":1,\"346\":1,\"347\":1,\"348\":1,\"461\":3}}],[\"operator\",{\"1\":{\"170\":1,\"172\":1,\"173\":3,\"281\":1,\"604\":3}}],[\"opacity\",{\"1\":{\"98\":2,\"144\":1,\"290\":1}}],[\"oldelement\",{\"1\":{\"265\":3}}],[\"oldsubstring\",{\"1\":{\"256\":1}}],[\"old\",{\"1\":{\"77\":1,\"171\":2,\"172\":2,\"183\":6,\"276\":1,\"312\":4,\"329\":2,\"597\":1}}],[\"oldvalue\",{\"1\":{\"77\":2,\"110\":7}}],[\"ol>\",{\"1\":{\"70\":1,\"219\":1}}],[\"observable是一个基于rxjs的中间件\",{\"1\":{\"405\":1}}],[\"observable\",{\"1\":{\"405\":1,\"407\":1}}],[\"observable等\",{\"1\":{\"405\":1}}],[\"observer\",{\"1\":{\"54\":1,\"87\":2,\"592\":1}}],[\"obj2\",{\"1\":{\"178\":3,\"253\":2}}],[\"obj1\",{\"1\":{\"178\":6,\"253\":2}}],[\"obj\",{\"1\":{\"171\":6,\"174\":6,\"184\":2,\"185\":2,\"189\":2,\"267\":8,\"273\":3,\"281\":10,\"310\":9,\"319\":1,\"320\":2}}],[\"objectname\",{\"1\":{\"259\":2}}],[\"object\",{\"0\":{\"171\":1,\"259\":1,\"535\":1},\"1\":{\"70\":2,\"82\":4,\"129\":1,\"171\":23,\"174\":1,\"189\":17,\"204\":1,\"251\":1,\"253\":6,\"263\":1,\"266\":2,\"267\":10,\"278\":1,\"281\":3,\"310\":13,\"330\":3,\"343\":1,\"371\":2,\"579\":1,\"583\":3,\"600\":2}}],[\"ok\",{\"1\":{\"70\":2,\"314\":3}}],[\"oracle\",{\"1\":{\"513\":1}}],[\"orange\",{\"1\":{\"153\":2,\"251\":1,\"537\":2,\"578\":27}}],[\"org\",{\"1\":{\"231\":1,\"364\":1,\"507\":1}}],[\"oriented\",{\"1\":{\"278\":1,\"583\":2}}],[\"orientation\",{\"1\":{\"157\":1}}],[\"origin是远程仓库的默认名称\",{\"1\":{\"336\":1}}],[\"originalcomponent\",{\"1\":{\"419\":3}}],[\"originalarr\",{\"1\":{\"281\":3}}],[\"originalobj\",{\"1\":{\"281\":10}}],[\"original\",{\"1\":{\"265\":1,\"419\":2}}],[\"originalelement\",{\"1\":{\"265\":2}}],[\"originalmethod\",{\"1\":{\"52\":2,\"204\":2}}],[\"origin和background\",{\"1\":{\"158\":1}}],[\"origin\",{\"1\":{\"158\":2,\"335\":1,\"336\":5}}],[\"orci\",{\"1\":{\"154\":3}}],[\"ornare\",{\"1\":{\"154\":1}}],[\"or\",{\"1\":{\"135\":1}}],[\"order\",{\"1\":{\"23\":1,\"135\":2,\"258\":1,\"313\":1}}],[\"onload\",{\"1\":{\"264\":1}}],[\"onlystring\",{\"1\":{\"321\":1}}],[\"onlynumber\",{\"1\":{\"321\":1}}],[\"only\",{\"1\":{\"159\":4,\"204\":2}}],[\"onfinally\",{\"1\":{\"193\":1}}],[\"onreadystatechange\",{\"1\":{\"282\":1,\"345\":1,\"346\":1,\"347\":1,\"348\":1}}],[\"onrejected\",{\"1\":{\"193\":4}}],[\"onresolved\",{\"1\":{\"193\":2}}],[\"onmounted\",{\"1\":{\"70\":1}}],[\"onmessage监听来自主线程的消息\",{\"1\":{\"57\":1}}],[\"onmessage\",{\"1\":{\"57\":2}}],[\"onmessagechange\",{\"1\":{\"35\":2}}],[\"onmessagechange=\",{\"1\":{\"35\":1}}],[\"onexit=\",{\"1\":{\"387\":1}}],[\"onenter=\",{\"1\":{\"387\":1}}],[\"onerror\",{\"1\":{\"264\":1}}],[\"one\",{\"1\":{\"70\":1}}],[\"onscroll\",{\"1\":{\"70\":1}}],[\"onsubmit\",{\"1\":{\"70\":1}}],[\"onsubmit=\",{\"1\":{\"25\":1,\"30\":1,\"31\":2,\"346\":1}}],[\"onsubmit等\",{\"1\":{\"25\":1}}],[\"on方法来订阅感兴趣的事件\",{\"1\":{\"38\":1}}],[\"on\",{\"1\":{\"38\":1,\"51\":2,\"70\":10,\"77\":1,\"91\":1,\"134\":1,\"189\":1,\"198\":1,\"287\":3,\"300\":1,\"302\":1,\"367\":1,\"368\":1,\"370\":1,\"453\":1,\"458\":1,\"509\":1,\"512\":1}}],[\"onkeydown=\",{\"1\":{\"25\":1}}],[\"onkeydown\",{\"1\":{\"25\":1}}],[\"onclick\",{\"1\":{\"263\":1}}],[\"onclick=\",{\"1\":{\"5\":2,\"15\":1,\"20\":1,\"22\":1,\"25\":3,\"26\":3,\"35\":1,\"36\":1,\"41\":7,\"42\":2,\"51\":1,\"229\":1,\"263\":1,\"345\":1,\"348\":1,\"383\":1,\"384\":1,\"393\":3,\"403\":2,\"406\":2,\"407\":5}}],[\"once和require\",{\"1\":{\"599\":1}}],[\"once>this\",{\"1\":{\"70\":1}}],[\"once=\",{\"1\":{\"70\":1}}],[\"once\",{\"1\":{\"70\":2,\"599\":1}}],[\"onchange=\",{\"1\":{\"5\":1,\"31\":1}}],[\"高优先级的路由会优先匹配\",{\"1\":{\"414\":1}}],[\"高效地进行版本控制和协作开发\",{\"1\":{\"338\":1}}],[\"高效性和强大的功能使得开发者能够更好地管理项目\",{\"1\":{\"333\":1}}],[\"高级操作\",{\"0\":{\"338\":1}}],[\"高级类型操作符\",{\"0\":{\"321\":1}}],[\"高级类型可以帮助你更精确地描述和操作类型\",{\"1\":{\"319\":1}}],[\"高级类型\",{\"0\":{\"319\":1}}],[\"高级选择器\",{\"0\":{\"299\":1}}],[\"高度和背景颜色分别更改为200px\",{\"1\":{\"152\":1}}],[\"高度和背景颜色分别为100px\",{\"1\":{\"150\":1,\"152\":1}}],[\"高阶函数可以用于实现函数的组合\",{\"1\":{\"313\":1}}],[\"高阶函数是那些接受一个或多个函数作为参数\",{\"1\":{\"258\":1}}],[\"高阶函数\",{\"1\":{\"258\":1,\"313\":1}}],[\"高阶函数或使用第三方库\",{\"1\":{\"52\":1}}],[\"高阶组件来获取查询参数的值\",{\"1\":{\"386\":1}}],[\"高阶组件来获取参数的值\",{\"1\":{\"386\":1}}],[\"高阶组件\",{\"0\":{\"23\":1},\"1\":{\"23\":1}}],[\"高性能cpu等\",{\"1\":{\"138\":1}}],[\"高性能的用户界面时表现出色\",{\"1\":{\"9\":1}}],[\"高性能的web应用程序\",{\"1\":{\"8\":1}}],[\"高性能\",{\"1\":{\"8\":1,\"9\":1,\"363\":1}}],[\"返回类型声明\",{\"1\":{\"604\":1}}],[\"返回类型的函数中尝试使用\",{\"1\":{\"310\":1}}],[\"返回关联数组\",{\"1\":{\"604\":1}}],[\"返回布尔值\",{\"1\":{\"578\":1}}],[\"返回数组中元素的数量\",{\"1\":{\"578\":1}}],[\"返回index\",{\"1\":{\"461\":1}}],[\"返回了一个函数\",{\"1\":{\"393\":1}}],[\"返回匹配到的结果数组\",{\"1\":{\"279\":1}}],[\"返回匹配的字母子字符串数组\",{\"1\":{\"256\":1}}],[\"返回指定元素在数组中首次出现的索引\",{\"1\":{\"257\":1}}],[\"返回指定子字符串最后一次出现的索引\",{\"1\":{\"256\":1}}],[\"返回指定子字符串第一次出现的索引\",{\"1\":{\"256\":1}}],[\"返回去除开头和结尾空白字符的字符串\",{\"1\":{\"256\":1}}],[\"返回子字符串\",{\"1\":{\"256\":2}}],[\"返回从指定起始索引开始的指定长度的子字符串\",{\"1\":{\"256\":1}}],[\"返回从起始索引到结束索引\",{\"1\":{\"256\":3,\"257\":1}}],[\"返回最后一个\",{\"1\":{\"256\":1}}],[\"返回最先完成的\",{\"1\":{\"193\":1}}],[\"返回第一个\",{\"1\":{\"256\":1}}],[\"返回第一个字符\",{\"1\":{\"256\":1}}],[\"返回与正则表达式匹配的第一个子字符串的索引\",{\"1\":{\"256\":1}}],[\"返回字符\",{\"1\":{\"256\":1}}],[\"返回字符串的字符数\",{\"1\":{\"256\":1}}],[\"返回给定索引位置字符的\",{\"1\":{\"256\":1}}],[\"返回给定索引位置的字符\",{\"1\":{\"256\":1}}],[\"返回两个值相除的余数\",{\"1\":{\"254\":1}}],[\"返回nan\",{\"1\":{\"252\":1}}],[\"返回的内容\",{\"1\":{\"360\":1}}],[\"返回的是一个\",{\"1\":{\"198\":1}}],[\"返回的jsx定义了组件渲染后的结构和内容\",{\"1\":{\"21\":1}}],[\"返回结果\",{\"1\":{\"198\":1}}],[\"返回另一个\",{\"1\":{\"193\":2}}],[\"返回包含所有结果的数组\",{\"1\":{\"193\":1}}],[\"返回目标对象的所有自身属性键\",{\"1\":{\"191\":1}}],[\"返回true\",{\"1\":{\"191\":1}}],[\"返回\",{\"1\":{\"177\":1,\"256\":3,\"314\":2}}],[\"返回集合中元素的个数\",{\"1\":{\"176\":1}}],[\"返回整数部分\",{\"1\":{\"169\":1}}],[\"返回1\",{\"1\":{\"169\":1}}],[\"返回值总为\",{\"1\":{\"515\":1}}],[\"返回值或函数体中使用该类型参数\",{\"1\":{\"320\":1}}],[\"返回值1\",{\"1\":{\"254\":1}}],[\"返回值\",{\"0\":{\"568\":1},\"1\":{\"42\":1,\"260\":2,\"578\":1}}],[\"返回一个新数组\",{\"1\":{\"578\":1}}],[\"返回一个新的\",{\"1\":{\"193\":2}}],[\"返回一个去重后的新数组\",{\"1\":{\"578\":1}}],[\"返回一个包含数组所有值的新数组\",{\"1\":{\"578\":1}}],[\"返回一个包含数组所有键名的新数组\",{\"1\":{\"578\":1}}],[\"返回一个装饰器函数\",{\"1\":{\"324\":1}}],[\"返回一个数组\",{\"1\":{\"256\":1,\"282\":1}}],[\"返回一个迭代器对象\",{\"1\":{\"191\":1}}],[\"返回一个值\",{\"1\":{\"104\":1}}],[\"返回一个对象\",{\"1\":{\"102\":1}}],[\"返回一个缓存的值\",{\"1\":{\"41\":1}}],[\"返回一个被记忆化的回调函数\",{\"1\":{\"41\":1}}],[\"返回一个清理函数\",{\"1\":{\"41\":1}}],[\"返回一个布尔值来决定是否重新渲染组件\",{\"1\":{\"48\":1}}],[\"返回一个布尔值\",{\"1\":{\"22\":1,\"191\":2}}],[\"初始值为0\",{\"1\":{\"440\":1}}],[\"初始状态\",{\"1\":{\"407\":1}}],[\"初始状态下\",{\"1\":{\"150\":1,\"152\":1}}],[\"初始化一个新的node\",{\"1\":{\"510\":1}}],[\"初始化项目\",{\"1\":{\"364\":1,\"475\":1,\"510\":1}}],[\"初始化数据\",{\"1\":{\"112\":1}}],[\"初始化组件的状态\",{\"1\":{\"22\":1}}],[\"初始的html页面中会加载所需的javascript和css资源\",{\"1\":{\"63\":1}}],[\"初学者可能需要花费一些时间来熟悉react的概念和工作方式\",{\"1\":{\"9\":1}}],[\"构造函数也可以接受一个参数\",{\"1\":{\"310\":1}}],[\"构造函数创建的所有实例所共享的\",{\"1\":{\"267\":1}}],[\"构造函数的原型\",{\"1\":{\"267\":1}}],[\"构造函数可以定义对象的属性和方法\",{\"1\":{\"267\":1}}],[\"构造函数可以接收两个参数\",{\"1\":{\"168\":1}}],[\"构造函数通常以大写字母开头\",{\"1\":{\"267\":1}}],[\"构造函数是一种用于创建特定类型对象的函数\",{\"1\":{\"267\":1}}],[\"构造函数调用等\",{\"1\":{\"189\":1}}],[\"构造函数\",{\"1\":{\"188\":1,\"267\":1,\"310\":1}}],[\"构造函数方法\",{\"1\":{\"22\":1}}],[\"构建高效\",{\"1\":{\"506\":1}}],[\"构建高效和可靠的应用程序\",{\"1\":{\"131\":1}}],[\"构建后阶段\",{\"1\":{\"477\":1}}],[\"构建前阶段\",{\"1\":{\"477\":1}}],[\"构建项目\",{\"1\":{\"475\":1}}],[\"构建一个简单的vuex应用程序示例\",{\"0\":{\"440\":1}}],[\"构建一个符合http协议规范的响应报文\",{\"1\":{\"360\":1}}],[\"构建\",{\"1\":{\"60\":1,\"363\":1,\"506\":1}}],[\"构建方式\",{\"1\":{\"10\":2}}],[\"一种常见的配置是cheap\",{\"1\":{\"468\":1}}],[\"一种表示函数没有返回值的类型\",{\"1\":{\"310\":1}}],[\"一种用于存储多个相同类型的值的数据结构\",{\"1\":{\"310\":1}}],[\"一起使用\",{\"1\":{\"282\":1}}],[\"一些流行的opcode缓存工具包括apc\",{\"1\":{\"601\":1}}],[\"一些流行的响应式框架包括\",{\"1\":{\"233\":1}}],[\"一些常见的内存泄漏情况包括以下几种\",{\"1\":{\"275\":1}}],[\"一些常用的方法包括\",{\"1\":{\"257\":1}}],[\"一些属性和方法可能只在特定的浏览器中可用\",{\"1\":{\"266\":1}}],[\"一些\",{\"1\":{\"225\":1}}],[\"一些生命周期方法被标记为已弃用\",{\"1\":{\"22\":1}}],[\"一旦组件被连接到redux\",{\"1\":{\"406\":1}}],[\"一旦状态更新完成\",{\"1\":{\"400\":1}}],[\"一旦用户提供了凭据\",{\"1\":{\"370\":1}}],[\"一旦与数据库建立了连接\",{\"1\":{\"369\":1}}],[\"一旦进入了项目目录\",{\"1\":{\"364\":1}}],[\"一旦tcp连接建立成功\",{\"1\":{\"360\":1}}],[\"一旦图片加载完成\",{\"1\":{\"264\":1}}],[\"一旦\",{\"1\":{\"192\":1,\"195\":1,\"197\":1}}],[\"一旦传递给组件\",{\"1\":{\"11\":1}}],[\"一是商标\",{\"1\":{\"164\":1}}],[\"一致性\",{\"1\":{\"137\":1}}],[\"一个类可以包含属性和方法\",{\"1\":{\"579\":1}}],[\"一个字符串是一串字符的序列\",{\"1\":{\"530\":1}}],[\"一个常量由英文字母\",{\"1\":{\"518\":1}}],[\"一个常见的方法是\",{\"1\":{\"133\":1}}],[\"一个promise表示一个可能的未来值\",{\"1\":{\"511\":1}}],[\"一个流行的web开发框架\",{\"1\":{\"509\":1}}],[\"一个file\",{\"1\":{\"463\":1}}],[\"一个电子商务应用可以按照用户管理\",{\"1\":{\"435\":1}}],[\"一个是根路径\",{\"1\":{\"413\":1}}],[\"一个用于减少计数器的值\",{\"1\":{\"403\":1}}],[\"一个用于增加计数器的值\",{\"1\":{\"403\":1}}],[\"一个用于增加计数\",{\"1\":{\"97\":1}}],[\"一个监听器\",{\"1\":{\"401\":1}}],[\"一个动作\",{\"1\":{\"401\":1}}],[\"一个action来进行更新\",{\"1\":{\"400\":1}}],[\"一个仓库可以存储项目的全部历史和文件版本\",{\"1\":{\"333\":1}}],[\"一个模块可以依赖其他模块的功能\",{\"1\":{\"327\":1}}],[\"一个模块不需要显式地声明依赖关系\",{\"1\":{\"117\":1}}],[\"一个内置的基础类型或构造函数\",{\"1\":{\"310\":1}}],[\"一个数字和一个布尔值\",{\"1\":{\"310\":1}}],[\"一个对象或数组有多种方法\",{\"1\":{\"281\":1}}],[\"一个对象还是一个\",{\"1\":{\"196\":1}}],[\"一个函数可以访问其外部作用域中定义的变量\",{\"1\":{\"280\":1}}],[\"一个外部函数outerfunction\",{\"1\":{\"261\":1}}],[\"一个唯一的标识符\",{\"1\":{\"260\":2}}],[\"一个基本的\",{\"1\":{\"207\":1}}],[\"一个基于element\",{\"1\":{\"129\":1}}],[\"一个脚本和一些样式\",{\"1\":{\"92\":1}}],[\"一个简单的web\",{\"1\":{\"57\":1}}],[\"一般情况下\",{\"1\":{\"401\":1,\"467\":1}}],[\"一般而言\",{\"1\":{\"337\":1}}],[\"一般可以通过录制或刷新页面来开始分析过程\",{\"1\":{\"58\":1}}],[\"一般的虚拟滚动实现包括以下几个步骤\",{\"1\":{\"53\":1}}],[\"一般的分页实现包括以下几个步骤\",{\"1\":{\"53\":1}}],[\"必选参数\",{\"1\":{\"519\":2}}],[\"必须注意安全问题\",{\"1\":{\"602\":1}}],[\"必须后接分号\",{\"1\":{\"528\":1}}],[\"必须为每个列指定适当的数据类型\",{\"1\":{\"136\":1}}],[\"必须是一个函数\",{\"1\":{\"90\":1}}],[\"必须将其转换为有效的javascript代码\",{\"1\":{\"15\":1}}],[\"必需的方法\",{\"1\":{\"22\":2}}],[\"还需要注意安全性\",{\"1\":{\"581\":1}}],[\"还会设置\",{\"1\":{\"457\":2}}],[\"还引入了一个新的\",{\"1\":{\"393\":1}}],[\"还引入了一些新的生命周期方法和改动\",{\"1\":{\"22\":1}}],[\"还支持各种第三方中间件\",{\"1\":{\"363\":1}}],[\"还可能涉及到第三方模块的查找\",{\"1\":{\"328\":1}}],[\"还可以处理css样式表\",{\"1\":{\"459\":1}}],[\"还可以包含其他的属性\",{\"1\":{\"357\":1}}],[\"还可以包括其他异步任务\",{\"1\":{\"270\":1}}],[\"还可以用作变量的类型注解\",{\"1\":{\"310\":1}}],[\"还可以使用其他格式的配置文件\",{\"1\":{\"454\":1}}],[\"还可以使用\",{\"1\":{\"389\":1,\"584\":1}}],[\"还可以使用数组的各种内置方法\",{\"1\":{\"310\":1}}],[\"还可以使用生成器函数表达式创建生成器函数\",{\"1\":{\"187\":1}}],[\"还可以使用preventdefault\",{\"1\":{\"26\":1}}],[\"还可以对字符串\",{\"1\":{\"184\":1}}],[\"还可以结合过渡\",{\"1\":{\"150\":1}}],[\"还可以通过调用\",{\"1\":{\"579\":1}}],[\"还可以通过压缩文件来减小打包大小\",{\"1\":{\"469\":1}}],[\"还可以通过定义自定义数据类型来满足特定的需求\",{\"1\":{\"136\":1}}],[\"还可以通过$emit在子组件中触发自定义事件\",{\"1\":{\"93\":1}}],[\"还可以接受一个\",{\"1\":{\"126\":1}}],[\"还可以和其他测试结果进行比较\",{\"1\":{\"58\":1}}],[\"还可以在前端代码中手动实现数据缓存\",{\"1\":{\"55\":1}}],[\"还可以根据项目需求进行进一步的学习和使用\",{\"1\":{\"15\":1}}],[\"还是\",{\"1\":{\"318\":1}}],[\"还包括存储复杂数据类型值\",{\"1\":{\"274\":1}}],[\"还提供了强大的扩展能力\",{\"1\":{\"506\":1}}],[\"还提供了其他一些钩子和函数\",{\"1\":{\"391\":1}}],[\"还提供了其他一些用于在客户端存储数据的机制\",{\"1\":{\"240\":1}}],[\"还提供了其他方法\",{\"1\":{\"192\":1}}],[\"还提供了一些其他的侦听器相关的函数和api\",{\"1\":{\"110\":1}}],[\"还原数据库\",{\"1\":{\"133\":1}}],[\"还没有被更新\",{\"1\":{\"114\":1}}],[\"还允许你注册自定义的指令\",{\"1\":{\"70\":1}}],[\"还有几个相关的语句\",{\"1\":{\"599\":1}}],[\"还有更多webpack\",{\"1\":{\"492\":1}}],[\"还有很多其他有用的插件可供选择\",{\"1\":{\"456\":1}}],[\"还有\",{\"1\":{\"327\":1}}],[\"还有一个独立的类型\",{\"1\":{\"310\":1}}],[\"还有一些特定于\",{\"1\":{\"270\":1}}],[\"还有一些进阶的概念和用法\",{\"1\":{\"267\":1}}],[\"还有一些关键的概念和用法值得探讨\",{\"1\":{\"267\":1}}],[\"还有一些其他方面需要考虑\",{\"1\":{\"328\":1}}],[\"还有一些其他的三斜线指令可以用于特定的目的\",{\"1\":{\"331\":1}}],[\"还有一些其他的注意事项\",{\"1\":{\"330\":1}}],[\"还有一些其他的字符串拓展\",{\"1\":{\"167\":1}}],[\"还有一些其他的性能分析工具\",{\"1\":{\"58\":1}}],[\"还有一些其他单位可用于地理坐标\",{\"1\":{\"145\":1}}],[\"还有一些react\",{\"1\":{\"22\":1}}],[\"还有许多php库和框架可以简化数据库操作的过程\",{\"1\":{\"600\":1}}],[\"还有许多其他强大的函数可供使用\",{\"1\":{\"570\":1}}],[\"还有许多其他的api可以用于与浏览器进行交互\",{\"1\":{\"266\":1}}],[\"还有许多流行的第三方库和框架可以简化异步操作的处理\",{\"1\":{\"272\":1}}],[\"还有其他许多表单元素和属性\",{\"1\":{\"227\":1}}],[\"还有其他一些属性可以用于进一步控制多列布局\",{\"1\":{\"154\":1}}],[\"还有其他常用的hooks函数\",{\"1\":{\"41\":1}}],[\"挂载dom→渲染\",{\"1\":{\"112\":1}}],[\"挂载阶段\",{\"1\":{\"22\":1}}],[\"挂载\",{\"1\":{\"22\":1}}],[\"+$globals\",{\"1\":{\"524\":1}}],[\"+=100px\",{\"1\":{\"290\":1}}],[\"+=\",{\"1\":{\"172\":1,\"254\":2,\"348\":1,\"552\":2}}],[\"+\",{\"1\":{\"20\":1,\"41\":5,\"42\":1,\"52\":3,\"70\":2,\"77\":2,\"85\":1,\"86\":1,\"99\":1,\"110\":3,\"143\":3,\"146\":10,\"169\":1,\"171\":2,\"172\":5,\"173\":2,\"183\":1,\"200\":1,\"201\":1,\"202\":3,\"229\":3,\"251\":2,\"252\":1,\"254\":3,\"256\":4,\"258\":7,\"259\":2,\"262\":10,\"264\":1,\"278\":4,\"279\":1,\"313\":4,\"315\":1,\"316\":1,\"318\":1,\"321\":1,\"347\":1,\"401\":1,\"402\":1,\"403\":1,\"406\":1,\"551\":2,\"552\":1,\"566\":1,\"582\":1}}],[\"0中完全移除\",{\"1\":{\"604\":1}}],[\"0中被废弃\",{\"1\":{\"604\":2}}],[\"0x8c\",{\"1\":{\"531\":1}}],[\"0x\",{\"1\":{\"531\":1}}],[\"0000ff\",{\"1\":{\"321\":1}}],[\"00ff00\",{\"1\":{\"144\":2,\"321\":1}}],[\"0o12\",{\"1\":{\"169\":1}}],[\"0b1010\",{\"1\":{\"169\":1}}],[\"07\",{\"1\":{\"168\":2}}],[\"047\",{\"1\":{\"531\":1}}],[\"04\",{\"1\":{\"70\":1}}],[\"0\",{\"0\":{\"541\":1},\"1\":{\"20\":1,\"22\":1,\"41\":3,\"42\":1,\"43\":1,\"52\":2,\"86\":1,\"91\":1,\"97\":1,\"98\":2,\"102\":8,\"105\":1,\"116\":1,\"143\":2,\"144\":12,\"145\":1,\"150\":1,\"151\":1,\"153\":1,\"161\":12,\"163\":1,\"164\":1,\"166\":10,\"169\":6,\"170\":10,\"172\":3,\"176\":1,\"177\":1,\"180\":2,\"181\":2,\"182\":2,\"184\":1,\"185\":1,\"204\":1,\"228\":2,\"254\":6,\"255\":2,\"256\":4,\"257\":3,\"258\":1,\"260\":1,\"269\":2,\"271\":1,\"278\":1,\"279\":2,\"281\":1,\"282\":1,\"284\":1,\"290\":1,\"300\":2,\"310\":3,\"313\":2,\"314\":2,\"319\":2,\"323\":1,\"341\":1,\"345\":1,\"347\":1,\"369\":1,\"401\":1,\"402\":1,\"403\":1,\"406\":1,\"429\":1,\"440\":1,\"444\":1,\"515\":1,\"517\":1,\"519\":3,\"531\":2,\"538\":1,\"541\":24,\"560\":1,\"561\":1,\"562\":1,\"564\":4,\"575\":1,\"578\":1,\"582\":5,\"586\":1,\"600\":1}}],[\"示例中的htmlspecialchars\",{\"1\":{\"580\":1}}],[\"示例中使用file\",{\"1\":{\"491\":1}}],[\"示例配置\",{\"1\":{\"457\":3,\"460\":1,\"461\":1}}],[\"示例类的定义\",{\"1\":{\"204\":2}}],[\"示例如下\",{\"1\":{\"146\":1,\"212\":1}}],[\"示例使用\",{\"1\":{\"52\":1}}],[\"示例代码如下\",{\"1\":{\"102\":2,\"386\":2}}],[\"示例代码\",{\"1\":{\"22\":7,\"47\":2,\"91\":2,\"419\":2,\"512\":1,\"537\":1}}],[\"示例\",{\"0\":{\"74\":1,\"77\":1},\"1\":{\"20\":2,\"94\":4,\"101\":1,\"116\":2,\"117\":1,\"119\":1,\"122\":1,\"142\":3,\"165\":2,\"166\":8,\"183\":3,\"260\":2,\"423\":1,\"599\":2}}],[\"例如int\",{\"1\":{\"604\":1}}],[\"例如对上传的文件进行严格的验证和过滤\",{\"1\":{\"581\":1}}],[\"例如根据条件动态选择要执行的函数或在不同上下文中使用相同代码的多个函数\",{\"1\":{\"569\":1}}],[\"例如文件路径\",{\"1\":{\"499\":1}}],[\"例如文件扩展名和别名\",{\"1\":{\"454\":1}}],[\"例如移除未使用的代码\",{\"1\":{\"479\":1}}],[\"例如bundle\",{\"1\":{\"476\":1}}],[\"例如babel\",{\"1\":{\"172\":1}}],[\"例如代码优化\",{\"1\":{\"476\":1}}],[\"例如自动添加浏览器前缀\",{\"1\":{\"455\":1}}],[\"例如通过defineplugin定义的全局变量\",{\"1\":{\"477\":1}}],[\"例如通过编译\",{\"1\":{\"455\":1}}],[\"例如通过converted\",{\"1\":{\"102\":1}}],[\"例如javascript\",{\"1\":{\"448\":1}}],[\"例如用户登录状态\",{\"1\":{\"439\":1}}],[\"例如main\",{\"1\":{\"438\":1,\"440\":1}}],[\"例如map或set\",{\"1\":{\"49\":1}}],[\"例如记录日志\",{\"1\":{\"437\":2}}],[\"例如调用api请求数据\",{\"1\":{\"428\":1}}],[\"例如在上述示例中\",{\"1\":{\"455\":1}}],[\"例如在每次mutation被提交时执行额外的操作\",{\"1\":{\"437\":1}}],[\"例如在渲染组件之前设置一些状态\",{\"1\":{\"422\":1}}],[\"例如在对象之间建立一对一的关系并确保不会导致内存泄漏\",{\"1\":{\"179\":1}}],[\"例如定时器\",{\"1\":{\"421\":2}}],[\"例如清除一些资源\",{\"1\":{\"421\":2}}],[\"例如获取新数据\",{\"1\":{\"421\":1}}],[\"例如检查用户是否已确认离开页面\",{\"1\":{\"421\":1}}],[\"例如检查用户是否已登录\",{\"1\":{\"421\":1}}],[\"例如检查路由参数是否已更新\",{\"1\":{\"421\":1}}],[\"例如检查路由参数是否有效\",{\"1\":{\"421\":1}}],[\"例如更新当前选中的菜单等\",{\"1\":{\"421\":2}}],[\"例如更新页面标题\",{\"1\":{\"421\":1}}],[\"例如修改了路径\",{\"1\":{\"417\":1}}],[\"例如创建子路由\",{\"1\":{\"414\":1}}],[\"例如发送电子邮件\",{\"1\":{\"580\":1}}],[\"例如发送异步请求或延迟调度其他action等\",{\"1\":{\"405\":1}}],[\"例如发布自己的模块到npm公共仓库\",{\"1\":{\"510\":1}}],[\"例如发起api请求\",{\"1\":{\"436\":1}}],[\"例如发起网络请求\",{\"1\":{\"406\":1}}],[\"例如处理异步操作\",{\"1\":{\"405\":1}}],[\"例如处理请求前的预处理\",{\"1\":{\"366\":1}}],[\"例如异步操作和调度其他action\",{\"1\":{\"405\":1}}],[\"例如添加新的属性\",{\"1\":{\"324\":1}}],[\"例如打印构造函数或修改原型属性\",{\"1\":{\"324\":1}}],[\"例如表示方向\",{\"1\":{\"314\":1}}],[\"例如表单验证\",{\"1\":{\"33\":1}}],[\"例如计算阶乘\",{\"1\":{\"313\":1}}],[\"例如getelementbyid\",{\"1\":{\"265\":1}}],[\"例如将打包结果输出到文件系统\",{\"1\":{\"477\":1}}],[\"例如将es6代码转换为es5或将scss文件转换为css代码\",{\"1\":{\"476\":1}}],[\"例如将某个路径映射到另一个路径\",{\"1\":{\"328\":1}}],[\"例如将age变量的类型从数字改为字符串\",{\"1\":{\"249\":1}}],[\"例如将其作为子组件放在另一个组件中\",{\"1\":{\"19\":1}}],[\"例如拦截原始值与对象的操作\",{\"1\":{\"189\":1}}],[\"例如拦截属性的读取\",{\"1\":{\"188\":1}}],[\"例如函数调用\",{\"1\":{\"188\":1}}],[\"例如source\",{\"1\":{\"479\":1}}],[\"例如symbol\",{\"1\":{\"174\":2}}],[\"例如static\",{\"1\":{\"22\":1}}],[\"例如webpack\",{\"1\":{\"492\":1}}],[\"例如window\",{\"1\":{\"439\":1}}],[\"例如window对象\",{\"1\":{\"165\":1}}],[\"例如worker\",{\"1\":{\"57\":1}}],[\"例如浏览器\",{\"1\":{\"128\":1}}],[\"例如animate\",{\"1\":{\"98\":1}}],[\"例如transition\",{\"1\":{\"98\":1}}],[\"例如data\",{\"1\":{\"97\":1}}],[\"例如使用生成器函数和\",{\"1\":{\"187\":1}}],[\"例如使用\",{\"1\":{\"94\":1,\"325\":1}}],[\"例如name\",{\"1\":{\"93\":1}}],[\"例如useeffect\",{\"1\":{\"50\":1}}],[\"例如react\",{\"1\":{\"49\":1,\"395\":1,\"458\":1}}],[\"例如初始化组件\",{\"1\":{\"22\":1}}],[\"例如\",{\"1\":{\"20\":1,\"32\":1,\"33\":1,\"42\":1,\"43\":1,\"48\":1,\"70\":1,\"89\":1,\"91\":2,\"92\":1,\"94\":1,\"97\":1,\"98\":2,\"102\":1,\"108\":1,\"133\":4,\"134\":8,\"135\":6,\"143\":10,\"146\":1,\"147\":6,\"150\":8,\"151\":3,\"152\":1,\"153\":2,\"157\":1,\"159\":4,\"167\":7,\"168\":10,\"169\":11,\"170\":10,\"193\":5,\"217\":1,\"226\":1,\"249\":6,\"251\":8,\"258\":8,\"259\":2,\"263\":6,\"265\":12,\"267\":1,\"271\":1,\"280\":1,\"284\":1,\"285\":1,\"286\":1,\"287\":1,\"288\":1,\"289\":1,\"310\":22,\"314\":2,\"318\":1,\"324\":4,\"325\":2,\"328\":1,\"329\":5,\"331\":1,\"334\":2,\"335\":4,\"336\":8,\"338\":2,\"352\":1,\"356\":1,\"364\":2,\"365\":4,\"366\":4,\"368\":2,\"369\":1,\"376\":1,\"377\":1,\"378\":1,\"379\":1,\"380\":1,\"381\":1,\"383\":1,\"387\":3,\"390\":1,\"393\":4,\"396\":1,\"397\":1,\"401\":5,\"412\":1,\"414\":4,\"416\":3,\"420\":3,\"435\":4,\"439\":1,\"441\":4,\"442\":2,\"444\":3,\"453\":1,\"455\":1,\"456\":1,\"458\":1,\"461\":1,\"463\":4,\"465\":1,\"468\":1,\"476\":2,\"480\":1,\"485\":1,\"486\":1,\"487\":1,\"488\":1,\"489\":1,\"490\":1,\"493\":1,\"494\":1,\"495\":1,\"496\":1,\"506\":1,\"511\":1,\"539\":3,\"579\":1,\"580\":1,\"581\":3,\"584\":4,\"604\":2}}],[\"是另一个广泛采用的\",{\"1\":{\"604\":1}}],[\"是目前最流行的\",{\"1\":{\"604\":1}}],[\"是类中定义的函数\",{\"1\":{\"583\":1}}],[\"是类中定义的变量\",{\"1\":{\"583\":1}}],[\"是类的一个具体实例\",{\"1\":{\"583\":1}}],[\"是描述对象具备的属性和行为的模板或蓝图\",{\"1\":{\"583\":1}}],[\"是描述状态变化的普通javascript对象\",{\"1\":{\"401\":1}}],[\"是对现实世界的抽象\",{\"1\":{\"583\":1}}],[\"是对象的属性值\",{\"1\":{\"259\":1}}],[\"是对象的属性名称\",{\"1\":{\"259\":1}}],[\"是对象的名称\",{\"1\":{\"259\":1}}],[\"是处理和遍历数据集合的有用工具\",{\"1\":{\"582\":1}}],[\"是弱类型语言\",{\"1\":{\"540\":1}}],[\"是数据类型为\",{\"1\":{\"536\":1}}],[\"是可接受的值\",{\"1\":{\"519\":1}}],[\"是可选的返回值\",{\"1\":{\"258\":1}}],[\"是最常用的包管理器\",{\"1\":{\"510\":1}}],[\"是基于\",{\"1\":{\"506\":1}}],[\"是webpack用于确定模块位置的机制\",{\"1\":{\"460\":1}}],[\"是webpack的一个功能\",{\"1\":{\"453\":1,\"459\":1}}],[\"是webpack中的一项重要特性\",{\"1\":{\"453\":1,\"458\":1}}],[\"是应用程序的唯一数据源\",{\"1\":{\"428\":1}}],[\"是存储在store中的数据\",{\"1\":{\"428\":1}}],[\"是验证用户的身份真实性的过程\",{\"1\":{\"370\":1}}],[\"是路由的路径\",{\"1\":{\"365\":1}}],[\"是否需要校验等\",{\"1\":{\"355\":1,\"356\":1}}],[\"是否可以缓存\",{\"1\":{\"355\":1,\"356\":1}}],[\"是否为空\",{\"1\":{\"264\":1}}],[\"是包含在http请求和响应中的元数据\",{\"1\":{\"355\":1}}],[\"是受保护属性\",{\"1\":{\"312\":1}}],[\"是私有属性\",{\"1\":{\"312\":1}}],[\"是面向对象编程的一项重要原则\",{\"1\":{\"312\":1}}],[\"是变量的初始值\",{\"1\":{\"311\":1}}],[\"是变量的数据类型\",{\"1\":{\"311\":1}}],[\"是变量的名称\",{\"1\":{\"311\":1}}],[\"是特殊的值\",{\"1\":{\"310\":1}}],[\"是两个不同的变量\",{\"1\":{\"517\":1}}],[\"是两个相关的概念\",{\"1\":{\"280\":1}}],[\"是两个重要的内存管理区域\",{\"1\":{\"273\":1}}],[\"是两个重要的概念\",{\"1\":{\"20\":1,\"312\":1}}],[\"是由一系列对象的原型组成的链式结构\",{\"1\":{\"267\":1}}],[\"是javascript提供的用于操作浏览器窗口和浏览器相关功能的api集合\",{\"1\":{\"266\":1}}],[\"是javascript中处理异步操作的机制\",{\"1\":{\"264\":1}}],[\"是函数的具体实现\",{\"1\":{\"258\":1}}],[\"是函数的参数列表\",{\"1\":{\"258\":1}}],[\"是函数的名称\",{\"1\":{\"258\":1}}],[\"是通过使用内置的转换函数来显式地将一个数据类型转换为另一个数据类型\",{\"1\":{\"252\":1}}],[\"是通过调用\",{\"1\":{\"197\":1}}],[\"是在某些特定的操作或上下文中\",{\"1\":{\"252\":1}}],[\"是在\",{\"1\":{\"195\":1,\"268\":1}}],[\"是被解决还是被拒绝\",{\"1\":{\"193\":1}}],[\"是当\",{\"1\":{\"193\":2}}],[\"是当前节点的信息\",{\"1\":{\"70\":2}}],[\"是当前元素上的绑定对象\",{\"1\":{\"70\":2}}],[\"是当前元素\",{\"1\":{\"70\":2}}],[\"是当前元素自身时触发处理函数\",{\"1\":{\"70\":1}}],[\"是es6中引入的一种元编程机制\",{\"1\":{\"188\":1}}],[\"是使得\",{\"1\":{\"163\":1}}],[\"是用于执行广泛的任务和自定义webpack构建过程的工具\",{\"1\":{\"456\":1}}],[\"是用于处理非javascript文件的转换工具\",{\"1\":{\"455\":1}}],[\"是用于在\",{\"1\":{\"231\":1}}],[\"是用于在关系型数据库中检索和操作数据的标准语言\",{\"1\":{\"135\":1}}],[\"是用来定义对象\",{\"1\":{\"579\":1}}],[\"是用来描述\",{\"1\":{\"325\":1}}],[\"是用来观察\",{\"1\":{\"110\":1}}],[\"是指将一个action发送到redux的store以触发状态的更新\",{\"1\":{\"401\":1}}],[\"是指计算机程序自动管理内存的过程\",{\"1\":{\"276\":1}}],[\"是指在redux的store中注册一个回调函数\",{\"1\":{\"401\":1}}],[\"是指在代码中引入\",{\"1\":{\"328\":1}}],[\"是指在程序执行过程中\",{\"1\":{\"277\":1}}],[\"是指在程序中无意中保留对不再需要使用的内存的引用\",{\"1\":{\"275\":1}}],[\"是指在程序中定义变量的区域\",{\"1\":{\"261\":1}}],[\"是指在web应用程序中\",{\"1\":{\"63\":1}}],[\"是指由节点组成的层次结构\",{\"1\":{\"129\":1}}],[\"是响应式的\",{\"1\":{\"102\":1}}],[\"是vue\",{\"1\":{\"96\":1}}],[\"是\",{\"1\":{\"70\":1,\"88\":1,\"163\":1,\"164\":1,\"225\":1,\"260\":1,\"267\":2,\"272\":1,\"282\":1,\"310\":1,\"317\":1,\"320\":1,\"323\":1,\"324\":1,\"329\":1,\"409\":1}}],[\"是带有\",{\"1\":{\"70\":1}}],[\"是一款开源的\",{\"1\":{\"604\":1}}],[\"是一款用于构建用户界面的\",{\"1\":{\"60\":1}}],[\"是一组特殊的全局变量\",{\"1\":{\"522\":1}}],[\"是一组特殊的预定义变量\",{\"1\":{\"521\":1}}],[\"是一段可重复执行的代码块\",{\"1\":{\"313\":1}}],[\"是一个以\",{\"1\":{\"604\":1}}],[\"是一个高性能的\",{\"1\":{\"604\":1}}],[\"是一个轻量级的\",{\"1\":{\"604\":1}}],[\"是一个语言结构\",{\"1\":{\"515\":1}}],[\"是一个纯函数\",{\"1\":{\"401\":1}}],[\"是一个字符串常量\",{\"1\":{\"401\":1}}],[\"是一个包含应用程序状态的容器\",{\"1\":{\"401\":1}}],[\"是一个重要且强大的特性\",{\"1\":{\"398\":1}}],[\"是一个用于渲染子路由的特殊组件\",{\"1\":{\"396\":1}}],[\"是一个用于构建单页应用的声明式路由库\",{\"1\":{\"374\":1}}],[\"是一个变量名\",{\"1\":{\"365\":1}}],[\"是一个强大而受欢迎的\",{\"1\":{\"363\":1}}],[\"是一个简洁\",{\"1\":{\"363\":1}}],[\"是一个具体的日期和时间\",{\"1\":{\"356\":1}}],[\"是一个类装饰器函数\",{\"1\":{\"324\":1}}],[\"是一个内置的构造函数\",{\"1\":{\"310\":1}}],[\"是一个内置对象\",{\"1\":{\"190\":1}}],[\"是一个元组\",{\"1\":{\"310\":1}}],[\"是一个由数字组成的数组\",{\"1\":{\"310\":1}}],[\"是一个非标准的属性\",{\"1\":{\"267\":1}}],[\"是一个空对象\",{\"1\":{\"267\":1}}],[\"是一个\",{\"1\":{\"196\":1}}],[\"是一个生成器函数\",{\"1\":{\"186\":1,\"197\":1,\"198\":3}}],[\"是一个对象\",{\"1\":{\"184\":1}}],[\"是一个自动执行的侦听器\",{\"1\":{\"110\":2}}],[\"是一个框架\",{\"1\":{\"61\":1}}],[\"是一种编程思想和方法\",{\"1\":{\"583\":1}}],[\"是一种特殊的语法\",{\"1\":{\"569\":1}}],[\"是一种特殊变量\",{\"1\":{\"538\":1}}],[\"是一种通过分布式节点存储并缓存静态资源的服务\",{\"1\":{\"465\":1}}],[\"是一种通过加密和身份验证方式来保护传输数据安全性的网络通信协议\",{\"1\":{\"359\":1}}],[\"是一种优化技术\",{\"1\":{\"423\":1}}],[\"是一种安全机制\",{\"1\":{\"359\":1}}],[\"是一种轻量级的数据交换格式\",{\"1\":{\"343\":1}}],[\"是一种表示异步操作的对象\",{\"1\":{\"322\":1}}],[\"是一种表示永远不会发生的类型\",{\"1\":{\"310\":1}}],[\"是一种静态类型语言\",{\"1\":{\"311\":1}}],[\"是一种函数调用自身的技术\",{\"1\":{\"269\":1}}],[\"是一种非常有用的编程语言\",{\"1\":{\"248\":1}}],[\"是一种处理二进制数据的数组类型\",{\"1\":{\"181\":1}}],[\"是一种用来进行文本匹配和查找的强大工具\",{\"1\":{\"279\":1}}],[\"是一种用来读取和写入\",{\"1\":{\"182\":1}}],[\"是一种用来存储二进制数据的固定长度缓冲区\",{\"1\":{\"180\":1}}],[\"是一种用于验证和过滤用户输入数据的工具\",{\"1\":{\"603\":1}}],[\"是一种用于组织和管理代码的机制\",{\"1\":{\"584\":1}}],[\"是一种用于扩展和定制应用程序功能的架构设计模式\",{\"1\":{\"464\":1}}],[\"是一种用于传输超文本数据的应用层协议\",{\"1\":{\"351\":1}}],[\"是一种用于定义命名常量集合的数据类型\",{\"1\":{\"314\":1}}],[\"是一种用于处理异步操作的对象\",{\"1\":{\"192\":1,\"272\":1}}],[\"是一种用于创建异步web应用程序的技术\",{\"1\":{\"340\":1}}],[\"是一种用于创建网页的标记语言\",{\"1\":{\"206\":1}}],[\"是一种用于创建灵活盒子布局的技术\",{\"1\":{\"155\":1}}],[\"是一种用于创建多列文本布局的技术\",{\"1\":{\"154\":1}}],[\"是一种用于灵活布局元素的\",{\"1\":{\"148\":1}}],[\"是一种用于提高web应用性能的技术\",{\"1\":{\"128\":1}}],[\"是一种与\",{\"1\":{\"178\":1,\"179\":1}}],[\"是一种键值对的集合\",{\"1\":{\"177\":1}}],[\"是一种值的有序列表\",{\"1\":{\"176\":1}}],[\"是一种css技术\",{\"1\":{\"157\":1}}],[\"是一种在命令行shell\",{\"1\":{\"527\":1}}],[\"是一种在路由中添加额外信息的方式\",{\"1\":{\"422\":1}}],[\"是一种在面向对象编程中\",{\"1\":{\"330\":1}}],[\"是一种在元素的背景\",{\"1\":{\"153\":1}}],[\"是一种在react中用来复用组件逻辑的高级技术\",{\"1\":{\"23\":1}}],[\"是一种定义元素从一个样式状态到另一个样式状态之间的平滑动画效果的方法\",{\"1\":{\"151\":1}}],[\"是一种二维布局系统\",{\"1\":{\"148\":1}}],[\"是一种重用组件选项的机制\",{\"1\":{\"97\":1}}],[\"是一种软件开发的方法论\",{\"1\":{\"327\":1}}],[\"是一种软件架构模式\",{\"1\":{\"62\":1}}],[\"是一种软件设计模式\",{\"1\":{\"38\":1,\"117\":1}}],[\"是一种有损压缩的格式\",{\"1\":{\"54\":1}}],[\"是一种javascript的语法扩展\",{\"1\":{\"13\":1}}],[\"是将多个小图标或图片合并成一张图片\",{\"1\":{\"54\":1}}],[\"是前端优化的两个常用技术\",{\"1\":{\"51\":1}}],[\"是react框架的核心概念之一\",{\"1\":{\"45\":1}}],[\"是的\",{\"1\":{\"41\":1}}],[\"是实现发布\",{\"1\":{\"38\":1}}],[\"和orm\",{\"1\":{\"600\":1}}],[\"和object\",{\"1\":{\"191\":1}}],[\"和抽象类\",{\"1\":{\"591\":1}}],[\"和两个方法\",{\"1\":{\"579\":1}}],[\"和为\",{\"1\":{\"566\":1,\"567\":1}}],[\"和程序语言\",{\"1\":{\"527\":1}}],[\"和数字组成\",{\"1\":{\"518\":1}}],[\"和current版本\",{\"1\":{\"507\":1}}],[\"和代码压缩插件\",{\"1\":{\"453\":1}}],[\"和输出文件名\",{\"1\":{\"453\":1}}],[\"和输出项\",{\"1\":{\"11\":1}}],[\"和名为doublecount的计算属性\",{\"1\":{\"441\":1}}],[\"和getter\",{\"1\":{\"440\":1}}],[\"和一个回调函数\",{\"1\":{\"436\":1}}],[\"和一个值\",{\"1\":{\"357\":1}}],[\"和展示组件\",{\"1\":{\"407\":1}}],[\"和sql注入攻击\",{\"1\":{\"580\":1}}],[\"和store\",{\"1\":{\"400\":1}}],[\"和scale\",{\"1\":{\"150\":1}}],[\"和钩子\",{\"1\":{\"395\":1}}],[\"和相关的依赖\",{\"1\":{\"384\":1}}],[\"和相关属性\",{\"1\":{\"147\":2}}],[\"和xml\",{\"1\":{\"371\":1}}],[\"和应用程序中的下一个中间件函数\",{\"1\":{\"366\":1}}],[\"和响应体\",{\"1\":{\"360\":1}}],[\"和请求体\",{\"1\":{\"360\":1}}],[\"和跨站请求伪造\",{\"1\":{\"340\":1,\"349\":1}}],[\"和生成器\",{\"1\":{\"323\":1,\"582\":1}}],[\"和生成器功能\",{\"1\":{\"195\":1}}],[\"和事件监听等\",{\"1\":{\"322\":1}}],[\"和类\",{\"1\":{\"312\":1}}],[\"和词法作用域\",{\"1\":{\"280\":1}}],[\"和栈\",{\"1\":{\"273\":1}}],[\"和原型链\",{\"1\":{\"267\":1}}],[\"和进行网络通信的api\",{\"1\":{\"266\":1}}],[\"和下划线\",{\"1\":{\"249\":1}}],[\"和服务器端\",{\"1\":{\"241\":1}}],[\"和号\",{\"1\":{\"213\":1}}],[\"和线性渐变的color\",{\"1\":{\"153\":1}}],[\"和径向渐变\",{\"1\":{\"153\":1}}],[\"和关键帧动画\",{\"1\":{\"150\":1}}],[\"和流动单元\",{\"1\":{\"148\":1}}],[\"和视口宽度\",{\"1\":{\"145\":1}}],[\"和模糊匹配\",{\"1\":{\"135\":1}}],[\"和模型\",{\"1\":{\"62\":1}}],[\"和其他编程语言中常见的特性之一\",{\"1\":{\"314\":1}}],[\"和其他的异步编程陷阱\",{\"1\":{\"264\":1}}],[\"和其他条件操作符\",{\"1\":{\"135\":1}}],[\"和其他react的特性\",{\"1\":{\"40\":1}}],[\"和编译器优化使得vue\",{\"1\":{\"99\":1}}],[\"和上面的渲染结果一样\",{\"1\":{\"82\":1}}],[\"和上面的结果一样\",{\"1\":{\"82\":1}}],[\"和\",{\"0\":{\"164\":1,\"357\":1},\"1\":{\"60\":1,\"63\":1,\"70\":3,\"82\":4,\"85\":2,\"87\":3,\"110\":4,\"122\":1,\"125\":1,\"126\":1,\"146\":1,\"148\":1,\"153\":1,\"164\":2,\"168\":3,\"170\":4,\"171\":2,\"180\":1,\"183\":4,\"186\":1,\"188\":2,\"189\":4,\"191\":1,\"192\":3,\"193\":1,\"195\":1,\"197\":1,\"209\":1,\"213\":1,\"217\":1,\"218\":1,\"234\":1,\"237\":2,\"239\":1,\"257\":1,\"260\":1,\"267\":3,\"270\":1,\"271\":1,\"273\":3,\"296\":1,\"310\":5,\"312\":3,\"314\":1,\"319\":2,\"323\":1,\"328\":2,\"366\":2,\"368\":1,\"390\":1,\"393\":1,\"396\":1,\"397\":2,\"401\":1,\"402\":1,\"439\":1,\"517\":2,\"537\":1,\"579\":4,\"591\":1}}],[\"和按需加载\",{\"1\":{\"51\":1}}],[\"和订阅者\",{\"1\":{\"38\":1}}],[\"和卸载\",{\"1\":{\"22\":1}}],[\"和属性\",{\"0\":{\"20\":1},\"1\":{\"20\":1}}],[\"无模式\",{\"1\":{\"479\":1}}],[\"无特定模式\",{\"1\":{\"457\":1}}],[\"无内容\",{\"1\":{\"354\":1}}],[\"无状态性\",{\"1\":{\"352\":1}}],[\"无状态\",{\"1\":{\"278\":1}}],[\"无副作用\",{\"1\":{\"278\":1}}],[\"无限递归\",{\"1\":{\"277\":1}}],[\"无序列表和有序列表\",{\"1\":{\"209\":1}}],[\"无法对内建函数和方法使用可变函数\",{\"1\":{\"569\":1}}],[\"无法访问块级作用域中的变量\",{\"1\":{\"311\":1}}],[\"无法在函数外部访问\",{\"1\":{\"311\":1}}],[\"无法在函数外访问局部变量\",{\"1\":{\"249\":1}}],[\"无法被垃圾回收\",{\"1\":{\"275\":1}}],[\"无法修改\",{\"1\":{\"204\":1}}],[\"无法进行批量处理\",{\"1\":{\"128\":1}}],[\"无效的邮箱格式\",{\"1\":{\"580\":1}}],[\"无效\",{\"1\":{\"102\":1,\"171\":3}}],[\"无需额外的配置\",{\"1\":{\"497\":1}}],[\"无需额外的构建工具\",{\"1\":{\"203\":1}}],[\"无需额外的构建工具就可以直接使用\",{\"1\":{\"200\":1}}],[\"无需手动刷新页面\",{\"1\":{\"459\":1}}],[\"无需手动操作dom\",{\"1\":{\"8\":1}}],[\"无需使用import或require语句\",{\"1\":{\"456\":1}}],[\"无需经过动态处理\",{\"1\":{\"368\":1}}],[\"无需阻塞用户界面\",{\"1\":{\"342\":1}}],[\"无需刷新整个页面\",{\"1\":{\"342\":1}}],[\"无需等待整个页面的重载\",{\"1\":{\"342\":1}}],[\"无需构建步骤\",{\"1\":{\"61\":1}}],[\"无损压缩通过去除图片中的冗余数据和无用信息来减小文件大小\",{\"1\":{\"54\":1}}],[\"无论你选择使用回调函数\",{\"1\":{\"511\":1}}],[\"无论何时相同的输入被传递给reducer\",{\"1\":{\"401\":1}}],[\"无论如何都会执行\",{\"1\":{\"193\":1}}],[\"无论\",{\"1\":{\"193\":1,\"196\":1}}],[\"无论切换多少次\",{\"1\":{\"126\":1}}],[\"无论是小型还是大型应用程序\",{\"1\":{\"404\":1}}],[\"无论是初学者还是经验丰富的开发者\",{\"1\":{\"363\":1}}],[\"无论是使用\",{\"1\":{\"318\":1}}],[\"无论是使用生命周期方法还是effect钩子\",{\"1\":{\"50\":1}}],[\"无论是个人开发者还是大型组织\",{\"1\":{\"131\":1}}],[\"无论是简单还是复杂的界面\",{\"1\":{\"60\":1}}],[\"无论是函数组件还是类组件\",{\"1\":{\"19\":1,\"21\":1}}],[\"无论使用哪种方法\",{\"1\":{\"26\":1}}],[\"生产环境调试配置\",{\"1\":{\"468\":1}}],[\"生产模式\",{\"1\":{\"453\":1,\"479\":1}}],[\"生成令牌并将其包含在表单中\",{\"1\":{\"602\":1}}],[\"生成动态网页\",{\"1\":{\"513\":1}}],[\"生成package\",{\"1\":{\"510\":1}}],[\"生成的哈希值也会改变\",{\"1\":{\"483\":1}}],[\"生成的输出文件不会被压缩\",{\"1\":{\"479\":1}}],[\"生成独立的css文件\",{\"1\":{\"476\":1}}],[\"生成并返回一个新的状态\",{\"1\":{\"401\":1}}],[\"生成最终的输出\",{\"1\":{\"367\":1}}],[\"生成最终的输出内容\",{\"1\":{\"367\":1}}],[\"生成器提供了一种更简洁和高效地处理大型数据集合的方式\",{\"1\":{\"582\":1}}],[\"生成器是\",{\"1\":{\"582\":1}}],[\"生成器是一种用于定义迭代器的函数\",{\"1\":{\"323\":1}}],[\"生成器对象会立即结束迭代\",{\"1\":{\"198\":1}}],[\"生成器与错误处理\",{\"1\":{\"187\":1}}],[\"生成器函数使用\",{\"1\":{\"323\":1}}],[\"生成器函数会在每次迭代时暂停执行\",{\"1\":{\"582\":1}}],[\"生成器函数会从之前的暂停点继续执行\",{\"1\":{\"198\":1}}],[\"生成器函数会执行到第一个\",{\"1\":{\"197\":1}}],[\"生成器函数通过生成器对象创建了一个\",{\"1\":{\"198\":1}}],[\"生成器函数通过使用\",{\"1\":{\"186\":1}}],[\"生成器函数中使用一个\",{\"1\":{\"198\":1}}],[\"生成器函数中添加了一个\",{\"1\":{\"198\":1}}],[\"生成器函数\",{\"1\":{\"197\":1}}],[\"生成器函数提供了一种简洁\",{\"1\":{\"187\":1}}],[\"生成器函数可以接收参数\",{\"1\":{\"323\":1}}],[\"生成器函数可以接受参数\",{\"1\":{\"187\":1}}],[\"生成器函数可以在迭代过程中被暂停和恢复\",{\"1\":{\"323\":1}}],[\"生成器函数可以在异步操作中暂停和恢复\",{\"1\":{\"197\":1}}],[\"生成器函数可以结合使用\",{\"1\":{\"198\":1}}],[\"生成器函数可以结合使用生成器对象和状态标记来实现操作的取消功能\",{\"1\":{\"198\":1}}],[\"生成器函数可以与\",{\"1\":{\"198\":1}}],[\"生成器函数可以实现异步迭代器\",{\"1\":{\"198\":1}}],[\"生成器函数可以用于处理大型或无限数据流\",{\"1\":{\"198\":1}}],[\"生成器函数可以通过\",{\"1\":{\"187\":1}}],[\"生成器函数与异步操作的结合可以简化异步编程\",{\"1\":{\"187\":1}}],[\"生成器函数与异步操作\",{\"1\":{\"187\":1}}],[\"生成器函数参数\",{\"1\":{\"187\":1}}],[\"生成器函数表达式\",{\"1\":{\"187\":1}}],[\"生成器函数在处理需要逐步执行\",{\"1\":{\"186\":1}}],[\"生成器函数的特点是可以生成可迭代的序列\",{\"1\":{\"186\":1}}],[\"生成器函数返回一个迭代器对象\",{\"1\":{\"186\":1}}],[\"生成器\",{\"0\":{\"186\":1}}],[\"生成补丁\",{\"1\":{\"128\":1}}],[\"生命周期函数\",{\"0\":{\"114\":1}}],[\"生命周期图示\",{\"0\":{\"113\":1},\"1\":{\"113\":1}}],[\"生命周期钩子中\",{\"1\":{\"95\":1}}],[\"生命周期的详细解析\",{\"1\":{\"87\":1}}],[\"生命周期是指\",{\"1\":{\"87\":1}}],[\"生命周期\",{\"0\":{\"87\":1,\"112\":1},\"1\":{\"18\":1,\"87\":1}}],[\"生态系统\",{\"1\":{\"10\":2}}],[\"生态系统的快速变化\",{\"1\":{\"9\":1}}],[\"生态系统丰富\",{\"1\":{\"8\":1,\"9\":1}}],[\"8e\",{\"1\":{\"532\":1}}],[\"8192\",{\"1\":{\"463\":1,\"469\":1,\"473\":1}}],[\"80\",{\"1\":{\"161\":6}}],[\"800px\",{\"1\":{\"144\":1}}],[\"8080\",{\"1\":{\"5\":1,\"88\":1,\"100\":1,\"440\":1,\"461\":2}}],[\"8\",{\"0\":{\"492\":1},\"1\":{\"43\":1,\"70\":1,\"87\":1,\"129\":1,\"144\":1,\"169\":1,\"181\":1,\"208\":2,\"235\":1,\"278\":1,\"313\":3,\"519\":1,\"537\":1,\"567\":1,\"573\":2,\"575\":1,\"576\":1,\"577\":2,\"578\":1,\"604\":1}}],[\"8版本引入的新特性\",{\"1\":{\"40\":1}}],[\"8版本引入hooks后\",{\"1\":{\"18\":1}}],[\"8版本之前\",{\"1\":{\"18\":1}}],[\"函数获取文件最后修改时间等\",{\"1\":{\"598\":1}}],[\"函数获取文件大小\",{\"1\":{\"598\":1}}],[\"函数检查文件是否存在\",{\"1\":{\"598\":1}}],[\"函数检查表单字段是否存在\",{\"1\":{\"580\":1}}],[\"函数删除文件\",{\"1\":{\"597\":1}}],[\"函数修改文件名\",{\"1\":{\"597\":1}}],[\"函数向文件写入内容\",{\"1\":{\"596\":1}}],[\"函数逐行读取文件内容\",{\"1\":{\"595\":1}}],[\"函数关闭文件\",{\"1\":{\"594\":1}}],[\"函数打开文件\",{\"1\":{\"594\":1}}],[\"函数实现重定向\",{\"1\":{\"580\":1}}],[\"函数实现的\",{\"1\":{\"95\":1}}],[\"函数对输入进行过滤和验证\",{\"1\":{\"580\":1}}],[\"函数对字符串中的特殊字符进行转义\",{\"1\":{\"549\":1}}],[\"函数去除字符串首尾的空格\",{\"1\":{\"548\":1}}],[\"函数语法如下\",{\"1\":{\"519\":1}}],[\"函数封装\",{\"1\":{\"466\":1}}],[\"函数从相应的路径导入需要懒加载的路由组件\",{\"1\":{\"397\":1}}],[\"函数和常量分组在一起\",{\"1\":{\"584\":1}}],[\"函数和命名空间进行声明合并\",{\"1\":{\"329\":1}}],[\"函数和形参等标识符的具体定义和值\",{\"1\":{\"280\":1}}],[\"函数会在访问对应路由时动态地异步加载路由组件\",{\"1\":{\"423\":1}}],[\"函数会被合并为\",{\"1\":{\"329\":1}}],[\"函数会调用自身\",{\"1\":{\"269\":1}}],[\"函数类型推断\",{\"1\":{\"316\":1}}],[\"函数类型注解\",{\"1\":{\"315\":1}}],[\"函数还可以作为参数传递给其他函数\",{\"1\":{\"313\":1}}],[\"函数声明\",{\"1\":{\"313\":1}}],[\"函数进入了一个无限循环\",{\"1\":{\"310\":1}}],[\"函数进行动态导入\",{\"1\":{\"202\":1,\"203\":1}}],[\"函数抛出了一个异常\",{\"1\":{\"310\":1}}],[\"函数抛出一个异常\",{\"1\":{\"196\":1}}],[\"函数没有任何返回语句\",{\"1\":{\"310\":1}}],[\"函数式编程更加注重代码的可测试性\",{\"1\":{\"278\":1}}],[\"函数式编程是一种将计算视为函数求值的开发模式\",{\"1\":{\"278\":1}}],[\"函数式编程\",{\"1\":{\"278\":1}}],[\"函数式组件没有内置的状态管理\",{\"1\":{\"40\":1}}],[\"函数就会被调用\",{\"1\":{\"272\":1}}],[\"函数模拟了一个异步操作\",{\"1\":{\"272\":1}}],[\"函数添加了两个异步任务到任务队列中\",{\"1\":{\"270\":1}}],[\"函数计算给定数字\",{\"1\":{\"269\":1}}],[\"函数作为回调函数传递给\",{\"1\":{\"272\":1}}],[\"函数作为构造函数调用\",{\"1\":{\"262\":1}}],[\"函数作为普通函数调用\",{\"1\":{\"262\":1}}],[\"函数作为方法调用\",{\"1\":{\"262\":1}}],[\"函数作为一种特殊的函数类型\",{\"1\":{\"186\":1}}],[\"函数作用域是在函数内部定义的变量的作用域范围\",{\"1\":{\"311\":1}}],[\"函数作用域是指在函数内部声明的变量\",{\"1\":{\"261\":1}}],[\"函数作用域\",{\"1\":{\"261\":1,\"311\":2}}],[\"函数表达式可以匿名或具名\",{\"1\":{\"258\":1}}],[\"函数表达式\",{\"1\":{\"258\":1,\"313\":1}}],[\"函数种类\",{\"1\":{\"258\":1}}],[\"函数名\",{\"1\":{\"539\":1}}],[\"函数名为addnumbers\",{\"1\":{\"258\":1}}],[\"函数名称即为组件的名称\",{\"1\":{\"19\":1}}],[\"函数体\",{\"1\":{\"258\":2}}],[\"函数是封装了一系列可重复使用的代码块\",{\"1\":{\"565\":1}}],[\"函数是一个可重复使用的代码块\",{\"1\":{\"258\":1}}],[\"函数是一种特殊的函数\",{\"1\":{\"194\":1}}],[\"函数是可执行的代码块\",{\"1\":{\"251\":1}}],[\"函数再次被调用\",{\"1\":{\"197\":1}}],[\"函数用于转义用户输入中的特殊字符\",{\"1\":{\"580\":1}}],[\"函数用于按指定的时间间隔周期性执行一段代码\",{\"1\":{\"260\":1}}],[\"函数用于在指定的时间延迟后执行一次特定的代码\",{\"1\":{\"260\":1}}],[\"函数用于驱动生成器函数的执行\",{\"1\":{\"197\":1}}],[\"函数用于创建一个延迟一定时间的\",{\"1\":{\"197\":1}}],[\"函数使用call\",{\"1\":{\"262\":1}}],[\"函数使用\",{\"1\":{\"196\":1,\"198\":1,\"272\":1}}],[\"函数提供了一种更加优雅且易读的方式来编写和处理异步操作\",{\"1\":{\"196\":1}}],[\"函数中的\",{\"1\":{\"196\":1}}],[\"函数中\",{\"1\":{\"196\":1,\"346\":1}}],[\"函数也是一个\",{\"1\":{\"196\":1}}],[\"函数内部声明的变量是局部变量\",{\"1\":{\"525\":1}}],[\"函数内部声明的变量name只在函数作用域内部可访问\",{\"1\":{\"258\":1}}],[\"函数内部可以包含一系列的异步操作\",{\"1\":{\"196\":1}}],[\"函数内部\",{\"1\":{\"196\":2}}],[\"函数内部的\",{\"1\":{\"195\":1}}],[\"函数显式地使用\",{\"1\":{\"196\":1}}],[\"函数始终返回一个\",{\"1\":{\"196\":1}}],[\"函数时\",{\"1\":{\"195\":1,\"197\":1}}],[\"函数前加上\",{\"1\":{\"194\":1}}],[\"函数参数和析构赋值\",{\"1\":{\"172\":1}}],[\"函数的\",{\"1\":{\"590\":1}}],[\"函数的返回类型\",{\"1\":{\"310\":1}}],[\"函数的返回值是一个原始值\",{\"1\":{\"196\":1}}],[\"函数的返回值是一个对象\",{\"1\":{\"102\":2}}],[\"函数的返回值是组件的结构和内容\",{\"1\":{\"18\":1}}],[\"函数的基本语法如下\",{\"1\":{\"258\":1}}],[\"函数的示例\",{\"1\":{\"196\":1}}],[\"函数的实现原理\",{\"1\":{\"195\":1}}],[\"函数的name属性\",{\"1\":{\"172\":1}}],[\"函数的尾逗号\",{\"1\":{\"172\":1}}],[\"函数的rest参数和arguments对象\",{\"1\":{\"172\":1}}],[\"函数相比\",{\"1\":{\"169\":6}}],[\"函数返回了一个闭包\",{\"1\":{\"590\":1}}],[\"函数返回值等的类型信息\",{\"1\":{\"315\":1}}],[\"函数返回值等结合使用\",{\"1\":{\"166\":1}}],[\"函数返回一个\",{\"1\":{\"272\":1}}],[\"函数返回的内容就是组件的结构和渲染的内容\",{\"1\":{\"19\":1}}],[\"函数来替换字符串中的部分内容\",{\"1\":{\"546\":1}}],[\"函数来截取字符串的一部分\",{\"1\":{\"545\":1}}],[\"函数来延迟加载模块或代码块的方式实现的\",{\"1\":{\"467\":1}}],[\"函数来实现\",{\"1\":{\"397\":1}}],[\"函数来导航到新页面\",{\"1\":{\"393\":1}}],[\"函数来显示建议\",{\"1\":{\"347\":1}}],[\"函数来处理表单的提交\",{\"1\":{\"346\":1}}],[\"函数来定义鼠标悬停时的背景颜色\",{\"1\":{\"161\":2}}],[\"函数来创建侦听器\",{\"1\":{\"110\":1}}],[\"函数可以通过使用return语句返回一个值\",{\"1\":{\"568\":1}}],[\"函数可以返回资源\",{\"1\":{\"538\":1}}],[\"函数可以作为另一个函数的委托或回调函数\",{\"1\":{\"313\":1}}],[\"函数可以调用自身\",{\"1\":{\"313\":1}}],[\"函数可以执行任意的操作\",{\"1\":{\"313\":1}}],[\"函数可以封装特定的功能\",{\"1\":{\"313\":1}}],[\"函数可以形成闭包\",{\"1\":{\"261\":1}}],[\"函数可以接收一个或多个函数作为参数\",{\"1\":{\"313\":1}}],[\"函数可以接收参数\",{\"1\":{\"251\":1}}],[\"函数可以接受参数\",{\"1\":{\"258\":1}}],[\"函数可以绕z轴旋转元素\",{\"1\":{\"150\":1}}],[\"函数可以绕y轴旋转元素\",{\"1\":{\"150\":1}}],[\"函数可以绕x轴旋转元素\",{\"1\":{\"150\":1}}],[\"函数可以旋转元素\",{\"1\":{\"150\":1}}],[\"函数可以在水平和垂直方向上倾斜元素\",{\"1\":{\"150\":1}}],[\"函数可以在水平和垂直方向上缩放元素\",{\"1\":{\"150\":1}}],[\"函数可以在水平和垂直方向上移动元素\",{\"1\":{\"150\":1}}],[\"函数现在位于\",{\"1\":{\"114\":1}}],[\"函数默认是在组件挂载时立即执行的\",{\"1\":{\"110\":1}}],[\"函数侦听一个函数的返回值\",{\"1\":{\"110\":1}}],[\"函数\",{\"0\":{\"172\":1,\"194\":1,\"258\":1,\"313\":1,\"565\":1},\"1\":{\"110\":1,\"150\":1,\"196\":2,\"251\":1,\"260\":2,\"262\":1,\"272\":1,\"281\":1,\"313\":1,\"329\":1,\"345\":1,\"393\":1,\"401\":1,\"519\":1,\"543\":1,\"581\":1,\"604\":3}}],[\"函数创建了一个响应式对象\",{\"1\":{\"110\":1}}],[\"函数创建的响应式对象会自动追踪数据的变化\",{\"1\":{\"102\":1}}],[\"函数接收一个侦听的数据源\",{\"1\":{\"110\":1}}],[\"函数接受一个普通对象\",{\"1\":{\"102\":1}}],[\"函数接受一个参数\",{\"1\":{\"102\":1}}],[\"函数在\",{\"1\":{\"102\":1}}],[\"函数将文件复制到新位置\",{\"1\":{\"597\":1}}],[\"函数将上传的文件移动到指定位置\",{\"1\":{\"580\":1}}],[\"函数将字符串转换为大写\",{\"1\":{\"547\":1}}],[\"函数将字符串转换为小写\",{\"1\":{\"547\":1}}],[\"函数将它们引入到您的应用程序中\",{\"1\":{\"509\":1}}],[\"函数将数据显示在页面上\",{\"1\":{\"345\":1}}],[\"函数将从之前暂停的地方恢复执行\",{\"1\":{\"195\":1}}],[\"函数将\",{\"1\":{\"102\":1}}],[\"函数将一个普通的\",{\"1\":{\"102\":1}}],[\"函数或fgets\",{\"1\":{\"595\":1}}],[\"函数或常量时\",{\"1\":{\"584\":1}}],[\"函数或动态import语法来实现\",{\"1\":{\"504\":1}}],[\"函数或块级作用域\",{\"1\":{\"280\":1}}],[\"函数或\",{\"1\":{\"102\":1}}],[\"函数加载\",{\"1\":{\"95\":1}}],[\"函数首次被调用\",{\"1\":{\"87\":1}}],[\"函数等具有独立的作用域\",{\"1\":{\"165\":1}}],[\"函数等\",{\"1\":{\"36\":1,\"161\":1}}],[\"函数组件的渲染\",{\"1\":{\"21\":1}}],[\"函数组件适合编写那些不需要内部状态管理和生命周期方法的简单组件\",{\"1\":{\"19\":1}}],[\"函数组件是最简单的一种组件形式\",{\"1\":{\"19\":1}}],[\"函数组件是使用函数的形式定义的\",{\"1\":{\"18\":1}}],[\"函数组件\",{\"1\":{\"19\":1}}],[\"函数组件也可以使用hooks来拥有更多的功能和状态管理能力\",{\"1\":{\"18\":1}}],[\"函数组件通常比类组件具有更好的性能\",{\"1\":{\"18\":1}}],[\"函数组件没有生命周期方法\",{\"1\":{\"18\":1}}],[\"函数组件没有内置的状态管理功能\",{\"1\":{\"18\":1}}],[\"函数组件更简洁\",{\"1\":{\"18\":2}}],[\"函数组件示例\",{\"1\":{\"18\":1}}],[\"函数组件和类组件\",{\"1\":{\"19\":1}}],[\"函数组件和类组件是react中两种常见的组件类型\",{\"1\":{\"18\":1}}],[\"函数组件和类组件的区别\",{\"0\":{\"18\":1}}],[\"函数调用栈\",{\"1\":{\"273\":1}}],[\"函数调用\",{\"1\":{\"15\":1}}],[\"渲染react组件\",{\"1\":{\"407\":1}}],[\"渲染react元素\",{\"1\":{\"16\":1}}],[\"渲染子组件\",{\"1\":{\"396\":1}}],[\"渲染两大重要功能\",{\"1\":{\"87\":1}}],[\"渲染时间等信息\",{\"1\":{\"58\":1}}],[\"渲染组件\",{\"1\":{\"48\":1,\"50\":2}}],[\"渲染劫持\",{\"1\":{\"23\":1}}],[\"渲染的结果是将组件的结构转换为实际的dom元素\",{\"1\":{\"21\":1}}],[\"渲染结果\",{\"1\":{\"11\":1}}],[\"类通过\",{\"1\":{\"591\":1}}],[\"类与对象\",{\"1\":{\"583\":1}}],[\"类与对象的概念提供了一种面向对象编程\",{\"1\":{\"579\":1}}],[\"类与一个目标类混入\",{\"1\":{\"330\":1}}],[\"类方法回调\",{\"1\":{\"539\":1}}],[\"类是可以包含属性和方法的结构\",{\"1\":{\"535\":1}}],[\"类是面向对象编程的基本概念\",{\"1\":{\"312\":1}}],[\"类具有相同名称的方法或属性\",{\"1\":{\"330\":1}}],[\"类具有相同的属性或方法名称时\",{\"1\":{\"330\":1}}],[\"类具有三个重要的特性\",{\"1\":{\"183\":1}}],[\"类同时具有\",{\"1\":{\"330\":1}}],[\"类中\",{\"1\":{\"330\":1}}],[\"类混入到\",{\"1\":{\"330\":1}}],[\"类混入目标类\",{\"1\":{\"330\":1}}],[\"类作为目标类\",{\"1\":{\"330\":1}}],[\"类作为\",{\"1\":{\"330\":1}}],[\"类会被合并为\",{\"1\":{\"329\":1}}],[\"类等进行逐步扩展和补充\",{\"1\":{\"329\":1}}],[\"类定义中可以使用类型参数\",{\"1\":{\"320\":1}}],[\"类定义了对象的属性和行为\",{\"1\":{\"312\":1}}],[\"类定义了一个抽象方法\",{\"1\":{\"183\":1}}],[\"类或接口时使用类型参数\",{\"1\":{\"320\":1}}],[\"类还有一个额外的\",{\"1\":{\"312\":1}}],[\"类有一个私有的\",{\"1\":{\"312\":1}}],[\"类和模块抽象\",{\"1\":{\"466\":1}}],[\"类和模块等特性\",{\"1\":{\"309\":1}}],[\"类和它的两个子类\",{\"1\":{\"312\":1}}],[\"类和一个\",{\"1\":{\"312\":1}}],[\"类必须提供\",{\"1\":{\"312\":1}}],[\"类装饰器也可以应用于派生类\",{\"1\":{\"324\":1}}],[\"类装饰器应用于派生类\",{\"1\":{\"324\":1}}],[\"类装饰器工厂函数\",{\"1\":{\"324\":1}}],[\"类装饰器的相关概念和用法\",{\"1\":{\"324\":1}}],[\"类装饰器的函数接收一个参数\",{\"1\":{\"324\":1}}],[\"类装饰器可以修改派生类的构造函数或添加新的属性和方法\",{\"1\":{\"324\":1}}],[\"类装饰器可以是一个工厂函数\",{\"1\":{\"324\":1}}],[\"类装饰器可以用于修改类的行为\",{\"1\":{\"324\":1}}],[\"类装饰器可以应用于类声明之前\",{\"1\":{\"324\":1}}],[\"类装饰器还可以接收其他参数\",{\"1\":{\"324\":1}}],[\"类装饰器用于增强类的行为或功能\",{\"1\":{\"204\":1}}],[\"类装饰器\",{\"0\":{\"324\":1},\"1\":{\"204\":1,\"324\":1}}],[\"类都继承了\",{\"1\":{\"183\":1}}],[\"类的自动加载\",{\"1\":{\"583\":1}}],[\"类的特点进行调整\",{\"1\":{\"330\":1}}],[\"类的特性将覆盖之前的\",{\"1\":{\"330\":1}}],[\"类的特性\",{\"1\":{\"330\":1}}],[\"类的特性混入目标类\",{\"1\":{\"330\":2}}],[\"类的\",{\"1\":{\"330\":1}}],[\"类的定义\",{\"1\":{\"324\":4}}],[\"类的实例\",{\"1\":{\"312\":1}}],[\"类的声明使用\",{\"1\":{\"312\":1}}],[\"类的属性和方法混入到目标类中\",{\"1\":{\"330\":1}}],[\"类的属性和方法\",{\"1\":{\"183\":1}}],[\"类的内部\",{\"1\":{\"183\":1}}],[\"类可以同时实现多个接口\",{\"1\":{\"591\":1}}],[\"类可以以表达式的形式创建\",{\"1\":{\"183\":1}}],[\"类可以定义用于访问和修改属性的特殊方法\",{\"1\":{\"183\":1}}],[\"类表达式\",{\"1\":{\"183\":1}}],[\"类继承自\",{\"1\":{\"312\":1}}],[\"类继承了\",{\"1\":{\"183\":1,\"591\":1}}],[\"类继承\",{\"1\":{\"183\":1}}],[\"类提供了一种声明对象的方式\",{\"1\":{\"183\":1}}],[\"类\",{\"0\":{\"183\":1,\"312\":1},\"1\":{\"183\":2,\"265\":1,\"312\":8,\"326\":1,\"327\":1,\"330\":2,\"579\":1,\"583\":1}}],[\"类型和范围\",{\"1\":{\"603\":1}}],[\"类型不相等\",{\"1\":{\"540\":2}}],[\"类型相等\",{\"1\":{\"540\":1}}],[\"类型比较\",{\"0\":{\"540\":1}}],[\"类型是指可以被作为参数传递给其他函数或方法的一种数据类型\",{\"1\":{\"539\":1}}],[\"类型别名\",{\"1\":{\"319\":1}}],[\"类型的一部分\",{\"1\":{\"318\":1,\"319\":1}}],[\"类型的数据\",{\"1\":{\"110\":1}}],[\"类型守卫可以与\",{\"1\":{\"317\":1}}],[\"类型守卫\",{\"0\":{\"317\":1},\"1\":{\"317\":3}}],[\"类型推断方式\",{\"1\":{\"320\":1}}],[\"类型推断可以简化代码\",{\"1\":{\"316\":1}}],[\"类型推断与联合类型\",{\"1\":{\"316\":1}}],[\"类型推断是\",{\"1\":{\"316\":1}}],[\"类型推断\",{\"0\":{\"316\":1}}],[\"类型注解的参数和返回值\",{\"1\":{\"315\":1}}],[\"类型注解是在\",{\"1\":{\"315\":1}}],[\"类型注解\",{\"0\":{\"315\":1}}],[\"类型为\",{\"1\":{\"311\":5}}],[\"类型来声明函数的返回类型时\",{\"1\":{\"310\":1}}],[\"类型可能会破坏\",{\"1\":{\"310\":1}}],[\"类型可以在需要灵活性的场景下使用\",{\"1\":{\"310\":1}}],[\"类型系统的约束时\",{\"1\":{\"310\":1}}],[\"类型时\",{\"1\":{\"310\":4}}],[\"类型后缀表示法\",{\"1\":{\"310\":1}}],[\"类型检测\",{\"0\":{\"253\":1}}],[\"类型转换是将一个数据类型转换为另一个数据类型的过程\",{\"1\":{\"252\":1}}],[\"类型转换\",{\"0\":{\"252\":1}}],[\"类型\",{\"0\":{\"529\":1,\"539\":1},\"1\":{\"224\":1,\"310\":3,\"316\":10,\"538\":1}}],[\"类型化数组\",{\"0\":{\"181\":1}}],[\"类选择器以点号\",{\"1\":{\"143\":1}}],[\"类选择器通过元素的class属性选择元素\",{\"1\":{\"143\":1}}],[\"类选择器\",{\"1\":{\"143\":1}}],[\"类名\",{\"1\":{\"82\":4,\"120\":1}}],[\"类名也将被添加到元素上\",{\"1\":{\"82\":2}}],[\"类名将被添加到元素上\",{\"1\":{\"82\":2}}],[\"类名和样式规则与html相同\",{\"1\":{\"15\":1}}],[\"类名和样式\",{\"1\":{\"14\":1,\"15\":1}}],[\"类也将被添加到元素上\",{\"1\":{\"82\":1}}],[\"类将被添加到元素上\",{\"1\":{\"82\":1}}],[\"类似的映射\",{\"1\":{\"179\":1}}],[\"类似的集合\",{\"1\":{\"178\":1}}],[\"类似于file\",{\"1\":{\"476\":1}}],[\"类似于浏览器的前进和后退操作\",{\"1\":{\"416\":1}}],[\"类似于用户点击链接或者输入网址进行跳转\",{\"1\":{\"416\":1}}],[\"类似于a标签\",{\"1\":{\"413\":1}}],[\"类似于last\",{\"1\":{\"356\":1}}],[\"类似于get请求\",{\"1\":{\"353\":1}}],[\"类似于object\",{\"1\":{\"191\":6}}],[\"类似于\",{\"1\":{\"191\":4}}],[\"类似于后行断言\",{\"1\":{\"168\":1}}],[\"类似于报纸或杂志的排版风格\",{\"1\":{\"154\":1}}],[\"类似于使用html标签\",{\"1\":{\"16\":1}}],[\"类似\",{\"1\":{\"60\":1}}],[\"类组件中的render方法同样返回jsx\",{\"1\":{\"21\":1}}],[\"类组件的渲染\",{\"1\":{\"21\":1}}],[\"类组件是通过继承react\",{\"1\":{\"19\":1}}],[\"类组件\",{\"1\":{\"19\":1}}],[\"类组件需要继承自react\",{\"1\":{\"18\":1}}],[\"类组件示例\",{\"1\":{\"18\":1}}],[\"通配符可以匹配任意路径\",{\"1\":{\"414\":1}}],[\"通用兄弟选择器可以选择在指定元素后的所有兄弟元素\",{\"1\":{\"159\":1}}],[\"通用兄弟选择器\",{\"1\":{\"159\":1}}],[\"通常将错误报告级别设置为更低\",{\"1\":{\"586\":1}}],[\"通常将新创建的对象放入新生代\",{\"1\":{\"276\":1}}],[\"通常需要将错误消息返回给用户\",{\"1\":{\"580\":1}}],[\"通常为项目根目录\",{\"1\":{\"461\":1}}],[\"通常为get或post\",{\"1\":{\"30\":1}}],[\"通常会设置连接超时\",{\"1\":{\"358\":1}}],[\"通常是store\",{\"1\":{\"439\":1}}],[\"通常是main\",{\"1\":{\"427\":1}}],[\"通常是router\",{\"1\":{\"413\":1,\"420\":1}}],[\"通常是控制器\",{\"1\":{\"367\":1}}],[\"通常是浏览器\",{\"1\":{\"357\":1}}],[\"通常是true或false\",{\"1\":{\"136\":1}}],[\"通常用于启动应用程序\",{\"1\":{\"510\":1}}],[\"通常用于实现一些需要重定向或者替换当前url的场景\",{\"1\":{\"416\":1}}],[\"通常用于整体替换资源或创建指定标识的资源\",{\"1\":{\"353\":1}}],[\"通常用于创建新的资源或提交表单数据\",{\"1\":{\"353\":1}}],[\"通常用于从服务器获取数据\",{\"1\":{\"353\":1}}],[\"通常用于主动将变量设置为空值\",{\"1\":{\"310\":1}}],[\"通常用于无论如何都需要执行的清理操作\",{\"1\":{\"193\":1}}],[\"通常较小\",{\"1\":{\"273\":1}}],[\"通常包含行和列\",{\"1\":{\"214\":1}}],[\"通常以\",{\"1\":{\"142\":1}}],[\"通常使用的版本包括tls\",{\"1\":{\"359\":1}}],[\"通常使用es6模块化或其他前端打包工具进行模块化开发\",{\"1\":{\"200\":1}}],[\"通常使用单文件组件\",{\"1\":{\"91\":1}}],[\"通常使用数据的唯一标识符作为key值\",{\"1\":{\"70\":1}}],[\"通常使用javascript来监听表单的submit事件\",{\"1\":{\"30\":1}}],[\"通常情况下\",{\"1\":{\"15\":1,\"30\":1,\"53\":1,\"328\":2,\"357\":1}}],[\"通过json\",{\"1\":{\"604\":1}}],[\"通过javascript将其更新到页面的特定部分\",{\"1\":{\"341\":1}}],[\"通过javascript代码创建一个web\",{\"1\":{\"57\":1}}],[\"通过工厂类来封装对象的创建逻辑\",{\"1\":{\"592\":1}}],[\"通过面向对象的方式\",{\"1\":{\"583\":1}}],[\"通过面向对象编程\",{\"1\":{\"583\":1}}],[\"通过访问$\",{\"1\":{\"581\":1}}],[\"通过访问count\",{\"1\":{\"102\":1}}],[\"通过索引或键来修改数组中的元素\",{\"1\":{\"576\":1}}],[\"通过索引修改数组中特定位置的元素\",{\"1\":{\"257\":1}}],[\"通过函数名和传递给函数的参数来调用函数\",{\"1\":{\"567\":1}}],[\"通过查看控制台输出或构建日志\",{\"1\":{\"499\":1}}],[\"通过默认使用持久化的命名和文件系统缓存来存储模块\",{\"1\":{\"497\":1}}],[\"通过就近提供资源\",{\"1\":{\"465\":1}}],[\"通过配置output\",{\"1\":{\"495\":1}}],[\"通过配置loader\",{\"1\":{\"463\":1}}],[\"通过配置文件的plugins选项来使用插件\",{\"1\":{\"453\":1}}],[\"通过识别和消除未使用的代码\",{\"1\":{\"462\":1}}],[\"通过适当配置模块解析\",{\"1\":{\"460\":1}}],[\"通过hot\",{\"1\":{\"459\":1}}],[\"通过加载器可以将sass文件转换成css\",{\"1\":{\"453\":1}}],[\"通过命名空间\",{\"1\":{\"444\":1}}],[\"通过插件可以更好地理解和优化vuex应用程序的性能\",{\"1\":{\"443\":1}}],[\"通过传递配置选项给createpersistedstate函数\",{\"1\":{\"439\":1}}],[\"通过分发action来调用这些操作\",{\"1\":{\"432\":1}}],[\"通过分支\",{\"1\":{\"333\":1}}],[\"通过提取公共代码\",{\"1\":{\"466\":1}}],[\"通过提交mutation来调用这些函数\",{\"1\":{\"431\":1}}],[\"通过提供key\",{\"1\":{\"70\":1}}],[\"通过定义类\",{\"1\":{\"579\":1}}],[\"通过定义接口和抽象类\",{\"1\":{\"466\":1}}],[\"通过定义actions\",{\"1\":{\"432\":1}}],[\"通过定义mutation函数\",{\"1\":{\"431\":1}}],[\"通过定义getter函数\",{\"1\":{\"430\":1}}],[\"通过定义网格容器和网格项\",{\"1\":{\"156\":1}}],[\"通过dispatch方法调用actions\",{\"1\":{\"426\":1}}],[\"通过getter\",{\"1\":{\"444\":1}}],[\"通过getters可以从store中获取状态的计算属性\",{\"1\":{\"426\":1}}],[\"通过grid\",{\"1\":{\"156\":2}}],[\"通过名称导航也更加直观和方便\",{\"1\":{\"417\":1}}],[\"通过上述流程\",{\"1\":{\"428\":1}}],[\"通过上述步骤\",{\"1\":{\"413\":1}}],[\"通过上述代码\",{\"1\":{\"98\":1}}],[\"通过管理路由状态\",{\"1\":{\"410\":1}}],[\"通过commit方法调用mutations\",{\"1\":{\"426\":1}}],[\"通过connect函数将组件连接到redux\",{\"1\":{\"407\":1}}],[\"通过chrome浏览器的开发者工具\",{\"1\":{\"58\":1}}],[\"通过以上的工作流程\",{\"1\":{\"426\":1}}],[\"通过以上的配置\",{\"1\":{\"415\":1,\"417\":1}}],[\"通过以上的实例\",{\"1\":{\"407\":1}}],[\"通过以上的代码\",{\"1\":{\"403\":1}}],[\"通过以上集成步骤\",{\"1\":{\"406\":1}}],[\"通过以上代码\",{\"1\":{\"405\":1,\"406\":1}}],[\"通过mapstatetoprops函数\",{\"1\":{\"403\":1}}],[\"通过遵循这个工作流程\",{\"1\":{\"402\":1}}],[\"通过订阅机制\",{\"1\":{\"401\":1}}],[\"通过订阅函数\",{\"1\":{\"401\":1}}],[\"通过派发不同类型的action\",{\"1\":{\"401\":3}}],[\"通过派发action来触发状态的更新\",{\"1\":{\"401\":1}}],[\"通过派发action\",{\"1\":{\"400\":1}}],[\"通过同时运行两个或多个版本的应用程序\",{\"1\":{\"372\":1}}],[\"通过断点\",{\"1\":{\"372\":1}}],[\"通过模块联邦\",{\"1\":{\"497\":1}}],[\"通过模块化\",{\"1\":{\"434\":1}}],[\"通过模块之间的接口交互和协作\",{\"1\":{\"56\":1}}],[\"通过模拟实际负载或压力条件\",{\"1\":{\"372\":1}}],[\"通过自动化工具或手动操作\",{\"1\":{\"372\":1}}],[\"通过自定义类型\",{\"1\":{\"318\":1}}],[\"通过自定义hooks\",{\"1\":{\"42\":1}}],[\"通过action\",{\"1\":{\"444\":1}}],[\"通过actions和reducers的配合来实现应用程序状态的管理和更新\",{\"1\":{\"403\":1}}],[\"通过api\",{\"1\":{\"371\":1}}],[\"通过ajax加载更多的内容\",{\"1\":{\"348\":1}}],[\"通过ajax从服务器请求数据建议\",{\"1\":{\"347\":1}}],[\"通过ajax从服务器获取数据\",{\"1\":{\"345\":1}}],[\"通过ajax发送get请求到服务器上的data\",{\"1\":{\"345\":1}}],[\"通过ajax\",{\"1\":{\"340\":1,\"342\":1}}],[\"通过授权\",{\"1\":{\"370\":1}}],[\"通过驱动程序提供的接口\",{\"1\":{\"369\":1}}],[\"通过数字签名和散列算法\",{\"1\":{\"359\":1}}],[\"通过服务器的ssl证书验证机制\",{\"1\":{\"359\":1}}],[\"通过持久连接\",{\"1\":{\"358\":2}}],[\"通过oauth和openid\",{\"1\":{\"370\":1}}],[\"通过onreadystatechange事件回调函数来处理服务器的响应\",{\"1\":{\"346\":1}}],[\"通过open\",{\"1\":{\"341\":1}}],[\"通过xhr对象\",{\"1\":{\"343\":1}}],[\"通过代码优化和分割\",{\"1\":{\"480\":1}}],[\"通过代码分割\",{\"1\":{\"453\":1,\"458\":1}}],[\"通过代码审查\",{\"1\":{\"337\":1}}],[\"通过代码拆分\",{\"1\":{\"56\":3}}],[\"通过远程仓库\",{\"1\":{\"336\":1}}],[\"通过灵活运用分支管理\",{\"1\":{\"335\":1}}],[\"通过灵活使用css\",{\"1\":{\"156\":1}}],[\"通过组合多个类的特性来创建一个新类的方式\",{\"1\":{\"330\":1}}],[\"通过组件化开发\",{\"1\":{\"56\":1}}],[\"通过组件化和虚拟dom的机制\",{\"1\":{\"11\":1}}],[\"通过此功能\",{\"1\":{\"329\":1}}],[\"通过声明合并和辅助函数\",{\"1\":{\"330\":1}}],[\"通过声明合并\",{\"1\":{\"329\":1}}],[\"通过声明变量\",{\"1\":{\"311\":1}}],[\"通过类型声明\",{\"1\":{\"604\":1}}],[\"通过类型守卫\",{\"1\":{\"317\":1}}],[\"通过类名选取元素\",{\"1\":{\"286\":1}}],[\"通过添加类型注解\",{\"1\":{\"315\":1}}],[\"通过实现\",{\"1\":{\"312\":1,\"582\":1}}],[\"通过父子关系选取元素\",{\"1\":{\"286\":1}}],[\"通过input事件监听器获取输入的关键字\",{\"1\":{\"347\":1}}],[\"通过id选取元素\",{\"1\":{\"286\":1}}],[\"通过import\",{\"1\":{\"202\":2}}],[\"通过元素标签名选取元素\",{\"1\":{\"286\":1}}],[\"通过元素的id或类名选择元素\",{\"1\":{\"265\":1}}],[\"通过响应式操作符进行数据的转换和组合\",{\"1\":{\"278\":1}}],[\"通过创建对象来模拟现实世界的实体和关系\",{\"1\":{\"278\":1}}],[\"通过一系列的函数调用来处理和操作数据\",{\"1\":{\"278\":1}}],[\"通过一个函数来定义组件\",{\"1\":{\"19\":1}}],[\"通过手动修改解决冲突后\",{\"1\":{\"335\":1}}],[\"通过手动断开相关对象之间的引用\",{\"1\":{\"275\":1}}],[\"通过手动驱动生成器的方式来实现异步操作\",{\"1\":{\"197\":1}}],[\"通过闭包可以模拟类似于模块的功能\",{\"1\":{\"268\":1}}],[\"通过event\",{\"1\":{\"263\":1}}],[\"通过关键字var\",{\"1\":{\"249\":1}}],[\"通过关联和连接表\",{\"1\":{\"134\":1}}],[\"通过处理这些事件\",{\"1\":{\"242\":1}}],[\"通过异步请求将表单数据发送到服务器端\",{\"1\":{\"234\":1}}],[\"通过正确配置devtool选项\",{\"1\":{\"468\":1}}],[\"通过正确使用标签元素\",{\"1\":{\"226\":1}}],[\"通过正确地应用事务处理机制\",{\"1\":{\"137\":1}}],[\"通过给块级元素和内联元素设置\",{\"1\":{\"210\":1}}],[\"通过并发执行多个异步任务\",{\"1\":{\"198\":1}}],[\"通过交替使用\",{\"1\":{\"197\":1}}],[\"通过检查\",{\"1\":{\"197\":1}}],[\"通过生成器函数\",{\"1\":{\"187\":1,\"198\":1}}],[\"通过迭代器\",{\"1\":{\"184\":1}}],[\"通过多态\",{\"1\":{\"183\":1}}],[\"通过继承现有类的属性和方法来实现代码的复用\",{\"1\":{\"583\":1}}],[\"通过继承\",{\"1\":{\"183\":1,\"312\":1}}],[\"通过封装\",{\"1\":{\"183\":1}}],[\"通过控制网格容器的属性和网格项的位置\",{\"1\":{\"156\":1}}],[\"通过控制属性的变化和过渡\",{\"1\":{\"152\":1}}],[\"通过调用store\",{\"1\":{\"401\":1}}],[\"通过调用navigate函数\",{\"1\":{\"398\":1}}],[\"通过调用addnumbers\",{\"1\":{\"258\":1}}],[\"通过调用\",{\"1\":{\"186\":1,\"197\":1,\"198\":2,\"272\":1,\"579\":1}}],[\"通过调用usecontext\",{\"1\":{\"41\":1}}],[\"通过调整渐变的方向\",{\"1\":{\"153\":1}}],[\"通过调整过渡的属性\",{\"1\":{\"151\":1}}],[\"通过指定一个或多个属性的开始值\",{\"1\":{\"152\":1}}],[\"通过指定过渡的属性\",{\"1\":{\"151\":1}}],[\"通过指定依赖项\",{\"1\":{\"49\":1}}],[\"通过parallel\",{\"1\":{\"504\":1}}],[\"通过paths选项\",{\"1\":{\"439\":1}}],[\"通过promise\",{\"1\":{\"271\":1}}],[\"通过props传递的属性名可以在子组件内部任意命名\",{\"1\":{\"36\":1}}],[\"通过props向子组件\",{\"1\":{\"36\":1}}],[\"通过props将message和onmessagechange函数传递给子组件\",{\"1\":{\"35\":1}}],[\"通过perspective属性可以设置透视效果\",{\"1\":{\"150\":1}}],[\"通过routes选项来配置路由\",{\"1\":{\"417\":1}}],[\"通过rotatez\",{\"1\":{\"150\":1}}],[\"通过rotatey\",{\"1\":{\"150\":1}}],[\"通过rotatex\",{\"1\":{\"150\":1}}],[\"通过rotate\",{\"1\":{\"150\":1}}],[\"通过redux提供的方法来获取和更新状态\",{\"1\":{\"403\":1}}],[\"通过require关键字导入calculator\",{\"1\":{\"200\":1}}],[\"通过react\",{\"1\":{\"51\":1}}],[\"通过settimeout添加一个宏任务\",{\"1\":{\"271\":1}}],[\"通过setstate方法更新组件的状态\",{\"1\":{\"50\":1}}],[\"通过symbol\",{\"1\":{\"184\":1}}],[\"通过skew\",{\"1\":{\"150\":1}}],[\"通过scale\",{\"1\":{\"150\":1}}],[\"通过结合使用这些语句\",{\"1\":{\"255\":1}}],[\"通过结合使用这些技术和方法\",{\"1\":{\"148\":1}}],[\"通过结合使用上述方法\",{\"1\":{\"49\":1}}],[\"通过设置错误报告级别\",{\"1\":{\"586\":1}}],[\"通过设置output\",{\"1\":{\"504\":1}}],[\"通过设置etag和if\",{\"1\":{\"352\":1}}],[\"通过设置expires或cache\",{\"1\":{\"352\":1}}],[\"通过设置top\",{\"1\":{\"147\":2}}],[\"通过设置合适的缓存策略\",{\"1\":{\"55\":1}}],[\"通过改变盒模型的类型\",{\"1\":{\"146\":1}}],[\"通过改变showelement的值\",{\"1\":{\"98\":1}}],[\"通过操作节点树\",{\"1\":{\"129\":1}}],[\"通过比较两个虚拟dom树\",{\"1\":{\"128\":1}}],[\"通过\",{\"1\":{\"102\":1,\"110\":1,\"197\":1,\"198\":2,\"259\":1,\"267\":1,\"272\":1,\"281\":1,\"312\":1,\"324\":1,\"326\":2,\"369\":1,\"393\":1,\"506\":1}}],[\"通过修改state的值来改变应用的状态\",{\"1\":{\"436\":1}}],[\"通过修改count\",{\"1\":{\"102\":1}}],[\"通过修改组件的渲染过程\",{\"1\":{\"23\":1}}],[\"通过修改组件的props\",{\"1\":{\"23\":1}}],[\"通过to去实现跳转\",{\"1\":{\"413\":1}}],[\"通过torefs转化后的属性是只读的\",{\"1\":{\"102\":1}}],[\"通过transition属性\",{\"1\":{\"150\":1}}],[\"通过transition属性指定了过渡效果的持续时间\",{\"1\":{\"98\":1}}],[\"通过translate\",{\"1\":{\"150\":1}}],[\"通过this\",{\"1\":{\"20\":1,\"441\":2}}],[\"通过为组件的状态改变添加平滑的动画效果\",{\"1\":{\"98\":1}}],[\"通过这样的配置\",{\"1\":{\"396\":1}}],[\"通过这个例子\",{\"1\":{\"270\":1}}],[\"通过这些步骤\",{\"1\":{\"94\":1}}],[\"通过这些属性可以在组件之间进行通信\",{\"1\":{\"93\":1}}],[\"通过这种方式\",{\"1\":{\"35\":1,\"312\":1}}],[\"通过$emit\",{\"1\":{\"93\":1}}],[\"通过无需页面刷新即可实现页面切换\",{\"1\":{\"63\":1}}],[\"通过vue\",{\"1\":{\"63\":1,\"426\":1}}],[\"通过打开浏览器开发者工具\",{\"1\":{\"58\":1}}],[\"通过web\",{\"1\":{\"57\":1}}],[\"通过压缩图片\",{\"1\":{\"54\":1}}],[\"通过裁剪或调整图片尺寸\",{\"1\":{\"54\":1}}],[\"通过动态导入\",{\"1\":{\"51\":1}}],[\"通过解构赋值获取了count\",{\"1\":{\"42\":1}}],[\"通过usereducer将reducer函数和初始状态0传递进去\",{\"1\":{\"41\":1}}],[\"通过事件循环\",{\"1\":{\"264\":2}}],[\"通过事件总线\",{\"1\":{\"38\":1}}],[\"通过事件处理函数更新组件的状态\",{\"1\":{\"31\":1}}],[\"通过将相关的代码组织在一起\",{\"1\":{\"584\":1}}],[\"通过将相关的函数\",{\"1\":{\"326\":1}}],[\"通过将核心功能与插件分离\",{\"1\":{\"464\":1}}],[\"通过将插件对象放入plugins选项中注册插件\",{\"1\":{\"437\":1}}],[\"通过将用户分配给特定的角色\",{\"1\":{\"370\":1}}],[\"通过将中间件作为路由处理函数进行定义\",{\"1\":{\"366\":1}}],[\"通过将项目的git仓库托管在远程仓库服务\",{\"1\":{\"337\":1}}],[\"通过将子类的实例赋值给父类类型的引用\",{\"1\":{\"312\":1}}],[\"通过将\",{\"1\":{\"272\":1}}],[\"通过将异步操作转化为\",{\"1\":{\"195\":1}}],[\"通过将这些属性添加到transition属性中\",{\"1\":{\"152\":1}}],[\"通过将网页划分为行和列的网格\",{\"1\":{\"148\":1}}],[\"通过将容器元素设置为\",{\"1\":{\"148\":1}}],[\"通过将功能封装为模块\",{\"1\":{\"56\":1}}],[\"通过将数据或函数作为props传递给子组件\",{\"1\":{\"36\":1}}],[\"通过将页面拆分成多个可复用的组件\",{\"1\":{\"8\":1}}],[\"通过合并或重定向分支\",{\"1\":{\"337\":1}}],[\"通过合理组织和设计模块\",{\"1\":{\"467\":1}}],[\"通过合理地进行代码分割\",{\"1\":{\"458\":1}}],[\"通过合理地利用事件循环\",{\"1\":{\"264\":1}}],[\"通过合理配置缓存头部信息\",{\"1\":{\"356\":1}}],[\"通过合理使用枚举\",{\"1\":{\"314\":1}}],[\"通过合理运用这些特性\",{\"1\":{\"313\":1}}],[\"通过合理设置浏览器缓存和数据缓存\",{\"1\":{\"55\":1}}],[\"通过合理的资源合并和压缩\",{\"1\":{\"55\":1}}],[\"通过合理的处理方式和用户友好的交互\",{\"1\":{\"33\":1}}],[\"通过合适的父子组件通信方式\",{\"1\":{\"35\":1}}],[\"通过回调函数的方式\",{\"1\":{\"35\":1}}],[\"通过表单元素\",{\"1\":{\"30\":1}}],[\"通过重写这些方法\",{\"1\":{\"22\":1}}],[\"通过属性选取元素\",{\"1\":{\"286\":1}}],[\"通过属性传递\",{\"1\":{\"36\":1}}],[\"通过属性\",{\"1\":{\"20\":1}}],[\"通过在构建过程中缓存模块和依赖的中间状态\",{\"1\":{\"482\":1}}],[\"通过在webpack配置中指定mode选项\",{\"1\":{\"457\":1}}],[\"通过在store中定义state对象\",{\"1\":{\"429\":1}}],[\"通过在shouldcomponentupdate方法中进行自定义逻辑判断\",{\"1\":{\"48\":1}}],[\"通过在路由组件之间结合使用过渡库和css动画\",{\"1\":{\"395\":1}}],[\"通过在服务器响应头中设置hsts标志位\",{\"1\":{\"359\":1}}],[\"通过在表单的onsubmit事件上调用submitform\",{\"1\":{\"346\":1}}],[\"通过在后台与服务器进行数据交换\",{\"1\":{\"340\":1}}],[\"通过在声明或定义时为目标对象应用装饰器来改变其行为或功能\",{\"1\":{\"204\":1}}],[\"通过在\",{\"1\":{\"188\":1,\"232\":1}}],[\"通过在关键帧之间定义过渡效果\",{\"1\":{\"152\":1}}],[\"通过在组件中访问props上的数据\",{\"1\":{\"406\":1}}],[\"通过在组件中访问props对象\",{\"1\":{\"11\":1}}],[\"通过在组件间添加<transition>标签\",{\"1\":{\"98\":1}}],[\"通过在组件内部定义插槽\",{\"1\":{\"96\":1}}],[\"通过在依赖数组\",{\"1\":{\"50\":1}}],[\"通过在子组件上添加属性传递数据\",{\"1\":{\"20\":1}}],[\"通过花括号\",{\"1\":{\"13\":2}}],[\"通过使用适当的错误处理机制将敏感信息记录到日志文件中\",{\"1\":{\"602\":1}}],[\"通过使用适当的验证方法\",{\"1\":{\"32\":1}}],[\"通过使用etag\",{\"1\":{\"601\":1}}],[\"通过使用etag和last\",{\"1\":{\"55\":1}}],[\"通过使用async关键字和await关键字\",{\"1\":{\"511\":1}}],[\"通过使用ajax或类似的技术\",{\"1\":{\"343\":1}}],[\"通过使用promises\",{\"1\":{\"511\":1}}],[\"通过使用模块\",{\"1\":{\"509\":1}}],[\"通过使用cache\",{\"1\":{\"504\":1}}],[\"通过使用css框架\",{\"1\":{\"160\":1}}],[\"通过使用哈希值\",{\"1\":{\"483\":1}}],[\"通过使用命名空间\",{\"1\":{\"444\":1,\"584\":1}}],[\"通过使用命名视图\",{\"1\":{\"417\":1}}],[\"通过使用插件\",{\"1\":{\"437\":1,\"456\":1}}],[\"通过使用插槽\",{\"1\":{\"96\":1}}],[\"通过使用vuex\",{\"1\":{\"425\":1}}],[\"通过使用动态路由\",{\"1\":{\"413\":1}}],[\"通过使用动态导入\",{\"1\":{\"51\":1,\"467\":1}}],[\"通过使用中间件\",{\"1\":{\"405\":1}}],[\"通过使用redux的状态管理和react的组件渲染机制\",{\"1\":{\"406\":1}}],[\"通过使用redux\",{\"1\":{\"400\":1}}],[\"通过使用每个钩子提供的功能\",{\"1\":{\"398\":1}}],[\"通过使用这些功能\",{\"1\":{\"395\":1}}],[\"通过使用这些属性\",{\"1\":{\"155\":1}}],[\"通过使用转场动画\",{\"1\":{\"395\":1}}],[\"通过使用过渡组件\",{\"1\":{\"395\":1}}],[\"通过使用类似于usestate的钩子\",{\"1\":{\"395\":1}}],[\"通过使用ssl\",{\"1\":{\"359\":1}}],[\"通过使用setstate方法来更新状态\",{\"1\":{\"11\":1}}],[\"通过使用http\",{\"1\":{\"351\":1}}],[\"通过使用hooks\",{\"1\":{\"40\":1}}],[\"通过使用hoc\",{\"1\":{\"23\":1}}],[\"通过使用声明合并和辅助函数\",{\"1\":{\"330\":1}}],[\"通过使用声明文件\",{\"1\":{\"325\":1}}],[\"通过使用索引签名来获取或操作对象的属性类型\",{\"1\":{\"319\":1}}],[\"通过使用枚举\",{\"1\":{\"314\":1}}],[\"通过使用不同的访问修饰符\",{\"1\":{\"312\":1}}],[\"通过使用不同的速度曲线\",{\"1\":{\"152\":1}}],[\"通过使用代理\",{\"1\":{\"188\":2}}],[\"通过使用解构赋值\",{\"1\":{\"166\":1}}],[\"通过使用具有表义的类名\",{\"1\":{\"160\":1}}],[\"通过使用\",{\"1\":{\"148\":1,\"196\":1,\"237\":1,\"244\":1,\"311\":1,\"325\":1,\"368\":1,\"582\":1}}],[\"通过使用媒体查询\",{\"1\":{\"148\":1,\"157\":1}}],[\"通过使用display\",{\"1\":{\"147\":2}}],[\"通过使用虚拟dom\",{\"1\":{\"128\":2}}],[\"通过使用<transition>组件的name属性与动画库提供的类名进行组合\",{\"1\":{\"98\":1}}],[\"通过使用混入\",{\"1\":{\"97\":1}}],[\"通过使用jquery的$\",{\"1\":{\"343\":1}}],[\"通过使用javascript和动态更新页面的方式\",{\"1\":{\"63\":1}}],[\"通过使用jsx语法\",{\"1\":{\"8\":1}}],[\"通过使用分页和虚拟滚动\",{\"1\":{\"53\":1}}],[\"通过使用装饰器\",{\"1\":{\"52\":1}}],[\"通过使用容器组件包裹原组件\",{\"1\":{\"23\":1}}],[\"通过采用虚拟dom和高效的diff算法\",{\"1\":{\"9\":1}}],[\"片段缓存是指将动态页面的某个片段缓存起来\",{\"1\":{\"601\":1}}],[\"片段缓存\",{\"1\":{\"601\":1}}],[\"片段\",{\"1\":{\"15\":1}}],[\"虽然动态导入提供了灵活性\",{\"1\":{\"467\":1}}],[\"虽然可以提高性能\",{\"1\":{\"465\":1}}],[\"虽然持久连接允许复用连接\",{\"1\":{\"358\":1}}],[\"虽然命名空间可以用于一些简单的场景\",{\"1\":{\"326\":1}}],[\"虽然这些运算符对于大多数情况下进行类型检测会很有用\",{\"1\":{\"253\":1}}],[\"虽然\",{\"1\":{\"241\":1,\"267\":1}}],[\"虽然dom树是常用的节点树表示方式\",{\"1\":{\"129\":1}}],[\"虽然虚拟dom在vue和react等框架中得到广泛应用\",{\"1\":{\"128\":1}}],[\"虽然jsx和html看起来相似\",{\"1\":{\"14\":1}}],[\"虽然react通过虚拟dom和diff算法对页面进行优化\",{\"1\":{\"9\":1}}],[\"虽然react提供了状态管理的能力\",{\"1\":{\"9\":1}}],[\"同样可用于数据空值和null值的区别\",{\"1\":{\"536\":1}}],[\"同样是一个语言结构\",{\"1\":{\"515\":1}}],[\"同样被移出任务队列\",{\"1\":{\"270\":1}}],[\"同样地\",{\"1\":{\"14\":1}}],[\"同步确认\",{\"1\":{\"361\":1}}],[\"同步序列编号\",{\"1\":{\"361\":1}}],[\"同步代码\",{\"1\":{\"270\":1}}],[\"同步加载\",{\"1\":{\"200\":1}}],[\"同时保持图像质量\",{\"1\":{\"504\":1}}],[\"同时保持较高的视觉质量和缩放性能\",{\"1\":{\"54\":1}}],[\"同时保证准确性和可调试性\",{\"1\":{\"468\":1}}],[\"同时也支持用户自定义函数\",{\"1\":{\"565\":1}}],[\"同时也支持使用第三方模块通过\",{\"1\":{\"506\":1}}],[\"同时也可以更好地追踪异步操作的状态和处理错误\",{\"1\":{\"443\":1}}],[\"同时也能更好地对状态进行管理和控制\",{\"1\":{\"430\":1}}],[\"同时提供了对状态的封装和组织\",{\"1\":{\"436\":1}}],[\"同时提供了命名空间\",{\"1\":{\"434\":1}}],[\"同时提供了一种优雅的方式来处理应用程序的复杂状态和逻辑\",{\"1\":{\"406\":1}}],[\"同时可以通过在响应头部中设置max\",{\"1\":{\"357\":1}}],[\"同时可以在标签中嵌入javascript表达式\",{\"1\":{\"13\":1}}],[\"同时有一个公共的\",{\"1\":{\"312\":1}}],[\"同时隐藏了内部实现的细节\",{\"1\":{\"312\":1}}],[\"同时在每次迭代开始前检查\",{\"1\":{\"198\":1}}],[\"同时body元素中的文本会使用14像素的字体大小\",{\"1\":{\"157\":1}}],[\"同时使用column\",{\"1\":{\"154\":1}}],[\"同时使用户能够更方便地浏览和操作数据\",{\"1\":{\"53\":1}}],[\"同时设置背景的颜色或图片为渐变\",{\"1\":{\"144\":1}}],[\"同时设置边框的样式\",{\"1\":{\"144\":1}}],[\"同时减小文件大小\",{\"1\":{\"54\":1}}],[\"同时通过属性的传递和状态的管理\",{\"1\":{\"11\":1}}],[\"同时\",{\"1\":{\"9\":1,\"15\":1,\"23\":1,\"42\":1,\"70\":1,\"150\":1,\"151\":1,\"153\":1,\"154\":1,\"186\":1,\"270\":1,\"358\":1,\"394\":1,\"405\":1,\"406\":1,\"415\":1,\"417\":1,\"426\":1,\"428\":1,\"459\":1,\"506\":1}}],[\"从数据库中删除数据\",{\"1\":{\"600\":1}}],[\"从数组中取出一段指定长度的元素并返回作为新数组\",{\"1\":{\"578\":1}}],[\"从数组中删除指定数量的元素\",{\"1\":{\"257\":1}}],[\"从数组中删除第一个元素\",{\"1\":{\"257\":1}}],[\"从数组中删除最后一个元素\",{\"1\":{\"257\":1}}],[\"从数组末尾移除并返回最后一个元素\",{\"1\":{\"570\":1}}],[\"从结果集中获取一行作为关联数组\",{\"1\":{\"570\":1}}],[\"从右到左依次使用它们进行处理\",{\"1\":{\"463\":1}}],[\"从一个联合类型中提取指定的类型\",{\"1\":{\"321\":1}}],[\"从一个联合类型中排除指定的类型\",{\"1\":{\"321\":1}}],[\"从一个类型中选择指定的属性\",{\"1\":{\"321\":1}}],[\"从一个类型中排除指定的属性\",{\"1\":{\"321\":1}}],[\"从图像轮播器到表单验证等等\",{\"1\":{\"293\":1}}],[\"从任务队列中取出任务执行\",{\"1\":{\"270\":1}}],[\"从队列中取出最早的一个任务\",{\"1\":{\"264\":1}}],[\"从小到大\",{\"1\":{\"257\":1}}],[\"从索引\",{\"1\":{\"257\":1}}],[\"从0开始计数\",{\"1\":{\"256\":2,\"257\":1}}],[\"从第一个值中减去第二个值\",{\"1\":{\"254\":1}}],[\"从目标对象中删除指定的属性\",{\"1\":{\"191\":1}}],[\"从集合中删除指定元素\",{\"1\":{\"176\":1}}],[\"从开始创建\",{\"1\":{\"112\":1}}],[\"从\",{\"1\":{\"110\":2,\"196\":1,\"282\":1,\"519\":1}}],[\"从react\",{\"1\":{\"22\":2}}],[\"从而使应用程序能够继续进行其他任务\",{\"1\":{\"511\":1}}],[\"从而使应用能够以原生应用的方式显示\",{\"1\":{\"243\":1}}],[\"从而缓存其他文件\",{\"1\":{\"483\":1}}],[\"从而强制浏览器重新下载新文件\",{\"1\":{\"469\":1}}],[\"从而增强应用程序的功能和灵活性\",{\"1\":{\"464\":1}}],[\"从而增加代码的灵活性和复用性\",{\"1\":{\"320\":1}}],[\"从而修改状态\",{\"1\":{\"433\":1}}],[\"从而对状态进行修改\",{\"1\":{\"431\":1}}],[\"从而调用编程式导航的方法\",{\"1\":{\"416\":1}}],[\"从而做出更好的决策\",{\"1\":{\"372\":1}}],[\"从而保护系统的安全性和用户的隐私\",{\"1\":{\"370\":1}}],[\"从而保证了组件的独立性和可复用性\",{\"1\":{\"90\":1}}],[\"从而构建功能丰富的web应用\",{\"1\":{\"351\":1}}],[\"从而提供更灵活的构建选项和更好的性能\",{\"1\":{\"497\":1}}],[\"从而提供更加流畅和灵活的用户交互体验\",{\"1\":{\"342\":1}}],[\"从而提升应用程序的性能和响应速度\",{\"1\":{\"465\":1}}],[\"从而提升应用程序的加载速度和性能\",{\"1\":{\"462\":1}}],[\"从而提高程序的性能和响应能力\",{\"1\":{\"272\":1}}],[\"从而提高代码的可维护性和可复用性\",{\"1\":{\"244\":1}}],[\"从而提高代码的可维护性和复用性\",{\"1\":{\"35\":1}}],[\"从而提高渲染性能\",{\"1\":{\"128\":1}}],[\"从而提高组件的性能\",{\"1\":{\"48\":1}}],[\"从而提高性能\",{\"1\":{\"45\":1,\"70\":1}}],[\"从而提高性能和效率\",{\"1\":{\"45\":1}}],[\"从而减小打包文件的体积\",{\"1\":{\"469\":1}}],[\"从而减轻了服务器的负载压力\",{\"1\":{\"342\":1}}],[\"从而减少浏览器缓存的问题\",{\"1\":{\"497\":1}}],[\"从而减少http请求\",{\"1\":{\"476\":1}}],[\"从而减少内存泄漏和程序错误\",{\"1\":{\"276\":1}}],[\"从而减少了对浏览器的重绘和回流\",{\"1\":{\"128\":1}}],[\"从而减少dom的数量和渲染开销\",{\"1\":{\"53\":1}}],[\"从而将多个项目独立管理\",{\"1\":{\"338\":1}}],[\"从而将其特性混入目标类\",{\"1\":{\"330\":1}}],[\"从而将其转换为一个flex容器\",{\"1\":{\"155\":1}}],[\"从而更容易地进行调试\",{\"1\":{\"500\":1}}],[\"从而更好地管理应用程序的状态和数据流\",{\"1\":{\"405\":1}}],[\"从而更好地协同开发项目\",{\"1\":{\"337\":1}}],[\"从而更新实际的用户界面\",{\"1\":{\"128\":1}}],[\"从而更新界面上的计数\",{\"1\":{\"41\":1}}],[\"从而形成一个有机的整体\",{\"1\":{\"327\":1}}],[\"从而改变类的行为\",{\"1\":{\"324\":1}}],[\"从而在数据交互过程中减少了不必要的带宽占用\",{\"1\":{\"342\":1}}],[\"从而在编译时进行类型检查\",{\"1\":{\"315\":1}}],[\"从而在浏览器中呈现出来\",{\"1\":{\"21\":1}}],[\"从而允许我们对它赋予任意类型的值\",{\"1\":{\"310\":1}}],[\"从而导致元素无法被垃圾回收\",{\"1\":{\"275\":1}}],[\"从而导致相关的变量和作用域无法被释放\",{\"1\":{\"275\":1}}],[\"从而处理异步操作的结果\",{\"1\":{\"272\":1}}],[\"从而触发视图的重新渲染\",{\"1\":{\"102\":1}}],[\"从而触发重新渲染\",{\"1\":{\"50\":1}}],[\"从而切换渲染的组件\",{\"1\":{\"94\":1}}],[\"从而实现更高级的代码拆分和复用\",{\"1\":{\"497\":1}}],[\"从而实现更合理和可预测的状态管理\",{\"1\":{\"429\":1}}],[\"从而实现缓存的更新\",{\"1\":{\"495\":1}}],[\"从而实现按需加载\",{\"1\":{\"480\":1}}],[\"从而实现了状态的一致管理\",{\"1\":{\"403\":1}}],[\"从而实现了父子组件之间的通信\",{\"1\":{\"35\":1}}],[\"从而实现对象之间的原型继承\",{\"1\":{\"267\":1}}],[\"从而实现动态内容的生成\",{\"1\":{\"245\":1}}],[\"从而实现异步操作的串行执行\",{\"1\":{\"193\":1}}],[\"从而实现响应式设计\",{\"1\":{\"157\":1}}],[\"从而实现所需的布局效果\",{\"1\":{\"146\":1}}],[\"从而实现代码的复用和共享\",{\"1\":{\"97\":1}}],[\"从而实现父子组件之间的方法调用\",{\"1\":{\"93\":1}}],[\"从而产生错误的状态\",{\"1\":{\"70\":1}}],[\"从而不会阻塞主线程\",{\"1\":{\"57\":1}}],[\"从而降低服务器的负载和提高页面加载速度\",{\"1\":{\"55\":1}}],[\"从而简化组件之间的通信逻辑\",{\"1\":{\"38\":1}}],[\"从而被react组件所理解和渲染\",{\"1\":{\"14\":1}}],[\"从而动态地生成内容\",{\"1\":{\"14\":1}}],[\"从父组件传递给子组件\",{\"1\":{\"8\":1}}],[\"因此必须确保使用正确的函数名\",{\"1\":{\"569\":1}}],[\"因此将其它类型的值转换为资源没有意义\",{\"1\":{\"538\":1}}],[\"因此非常适合构建高性能的网络应用\",{\"1\":{\"506\":1}}],[\"因此非常适合在服务器和客户端之间传输数据\",{\"1\":{\"343\":1}}],[\"因此会有一个短暂的延迟\",{\"1\":{\"423\":1}}],[\"因此有\",{\"1\":{\"340\":1}}],[\"因此只能将\",{\"1\":{\"330\":1}}],[\"因此循环后面的\",{\"1\":{\"310\":1}}],[\"因此它们的返回类型被指定为\",{\"1\":{\"310\":1}}],[\"因此它拥有\",{\"1\":{\"183\":1}}],[\"因此其返回类型被指定为\",{\"1\":{\"310\":1}}],[\"因此每个对象都可以通过原型链访问到它的上一级对象的属性和方法\",{\"1\":{\"267\":1}}],[\"因此在调试过程中更容易追踪和定位出错的地方\",{\"1\":{\"404\":1}}],[\"因此在实际应用中需要注意处理这些异常情况\",{\"1\":{\"361\":1}}],[\"因此在性能方面可能会有一定的影响\",{\"1\":{\"359\":1}}],[\"因此在此期间事件循环可以做其他事情\",{\"1\":{\"271\":1}}],[\"因此在运行环境中需要支持这些特性才能正常使用\",{\"1\":{\"195\":1}}],[\"因此在使用shouldcomponentupdate方法进行手动优化时需要权衡利弊\",{\"1\":{\"48\":1}}],[\"因此可以省略变量的类型声明\",{\"1\":{\"311\":1}}],[\"因此可以直接使用\",{\"1\":{\"185\":1}}],[\"因此可以在不同的平台上使用\",{\"1\":{\"128\":1}}],[\"因此不能直接访问主线程的全局变量和dom元素\",{\"1\":{\"57\":1}}],[\"因此需要依据实际场景综合考虑分割点的大小和网络开销\",{\"1\":{\"480\":1}}],[\"因此需要注意潜在的安全风险\",{\"1\":{\"467\":1}}],[\"因此需要一些基本的css知识来定义过渡和动画效果\",{\"1\":{\"98\":1}}],[\"因此需要避免滥用\",{\"1\":{\"38\":1}}],[\"因此需要谨慎使用\",{\"1\":{\"37\":1}}],[\"因此\",{\"1\":{\"14\":1,\"18\":1,\"90\":1,\"95\":1,\"99\":1,\"164\":1,\"178\":1,\"268\":1,\"269\":2,\"273\":1,\"310\":2,\"314\":1,\"330\":1,\"401\":1,\"462\":1,\"465\":1,\"468\":1}}],[\"因为我们经常需要对\",{\"1\":{\"540\":1}}],[\"因为这可能导致安全漏洞\",{\"1\":{\"359\":1}}],[\"因为这样会破坏它们的顺序\",{\"1\":{\"43\":1}}],[\"因为每个模块都具有清晰的边界和责任\",{\"1\":{\"327\":1}}],[\"因为每个模块可以独立测试\",{\"1\":{\"56\":1}}],[\"因为只能是\",{\"1\":{\"319\":1}}],[\"因为垃圾回收机制会自动处理\",{\"1\":{\"276\":1}}],[\"因为多个变量可以引用相同的对象\",{\"1\":{\"273\":1}}],[\"因为数据的分配和释放都是通过移动栈指针来完成的\",{\"1\":{\"273\":1}}],[\"因为\",{\"1\":{\"257\":2,\"312\":2,\"318\":1,\"319\":1}}],[\"因为需要将整个dom结构以javascript对象的形式存储在内存中\",{\"1\":{\"128\":1}}],[\"因为实际的dom操作被最小化\",{\"1\":{\"128\":1}}],[\"因为无需每次都从服务器加载新的html页面\",{\"1\":{\"63\":1}}],[\"因为它在稳定性和支持方面更有保障\",{\"1\":{\"507\":1}}],[\"因为它在主线程之外执行\",{\"1\":{\"57\":1}}],[\"因为它可以帮助你在开发过程中更轻松地进行代码调试和错误定位\",{\"1\":{\"468\":1}}],[\"因为它是相对于父路由的路径\",{\"1\":{\"415\":1}}],[\"因为它们只在需要时生成数据\",{\"1\":{\"582\":1}}],[\"因为它们的声明文件已经存在\",{\"1\":{\"325\":1}}],[\"因为它们都使用了类似于html的标记结构\",{\"1\":{\"14\":1}}],[\"因为它具有类型推导的能力\",{\"1\":{\"315\":1}}],[\"因为它会直接影响网页的布局和响应性\",{\"1\":{\"145\":1}}],[\"因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建\",{\"1\":{\"70\":1}}],[\"因为对于引用类型\",{\"1\":{\"48\":1}}],[\"因为浅层比较可能会造成误判\",{\"1\":{\"47\":1}}],[\"因为在列表的插入\",{\"1\":{\"46\":1}}],[\"因为函数组件本身更简单\",{\"1\":{\"18\":1}}],[\"因为vue的设计哲学更接近传统的html和javascript\",{\"1\":{\"10\":1}}],[\"包管理器是一种工具\",{\"1\":{\"510\":1}}],[\"包管理器\",{\"0\":{\"510\":1}}],[\"包\",{\"1\":{\"394\":1}}],[\"包围的代码块内部声明的变量\",{\"1\":{\"261\":1}}],[\"包含文件的路径可以是相对路径\",{\"1\":{\"599\":1}}],[\"包含文件\",{\"0\":{\"599\":1},\"1\":{\"599\":1}}],[\"包含松散和严格比较\",{\"1\":{\"540\":1}}],[\"包含有关模块位置的有用的注释和尽可能多的调试信息\",{\"1\":{\"479\":1}}],[\"包含有用的调试信息\",{\"1\":{\"453\":1}}],[\"包含一个字符串类型的事件名称\",{\"1\":{\"436\":1}}],[\"包含一个type属性来表示操作的类型\",{\"1\":{\"403\":1}}],[\"包含应用程序的状态属性\",{\"1\":{\"429\":1}}],[\"包含状态和操作等逻辑\",{\"1\":{\"407\":1}}],[\"包含需要进行保护的路由以及它们对应的组件\",{\"1\":{\"385\":1}}],[\"包含公钥\",{\"1\":{\"359\":1}}],[\"包含所有的属性和方法\",{\"1\":{\"329\":1}}],[\"包含所有成员\",{\"1\":{\"329\":1}}],[\"包含执行特定任务的代码\",{\"1\":{\"258\":1}}],[\"包含初始值的数组\",{\"1\":{\"257\":1}}],[\"包含显示在浏览器窗口中的内容\",{\"1\":{\"207\":1}}],[\"包含三个\",{\"1\":{\"186\":1}}],[\"包含了当前操作系统环境中定义的环境变量\",{\"1\":{\"521\":1}}],[\"包含了当前脚本执行的服务器和执行环境的信息\",{\"1\":{\"521\":1}}],[\"包含了通过get\",{\"1\":{\"521\":1}}],[\"包含了整个\",{\"1\":{\"207\":1}}],[\"包含了属性和方法的定义\",{\"1\":{\"183\":1}}],[\"包含了三个属性\",{\"1\":{\"102\":1}}],[\"包含其对应的标签\",{\"1\":{\"128\":1}}],[\"包括命名捕获组和unicode编码支持\",{\"1\":{\"604\":1}}],[\"包括int\",{\"1\":{\"604\":1}}],[\"包括字符串处理\",{\"1\":{\"570\":1}}],[\"包括用户自定义的全局变量和php预定义的其他全局变量\",{\"1\":{\"521\":1}}],[\"包括增量构建\",{\"1\":{\"497\":1}}],[\"包括入口\",{\"1\":{\"454\":1}}],[\"包括代码压缩\",{\"1\":{\"453\":1}}],[\"包括跳转和导航\",{\"1\":{\"384\":1}}],[\"包括api端点\",{\"1\":{\"371\":1}}],[\"包括网络请求错误\",{\"1\":{\"349\":1}}],[\"包括分支切换\",{\"1\":{\"338\":1}}],[\"包括每次提交的作者\",{\"1\":{\"334\":1}}],[\"包括查找\",{\"1\":{\"328\":1}}],[\"包括属性和它们的类型\",{\"1\":{\"318\":1}}],[\"包括处理数据\",{\"1\":{\"313\":1}}],[\"包括显式的返回语句\",{\"1\":{\"310\":1}}],[\"包括整数和浮点数\",{\"1\":{\"310\":1}}],[\"包括获取和设置输入值\",{\"1\":{\"294\":1}}],[\"包括变量\",{\"1\":{\"275\":1}}],[\"包括数字\",{\"1\":{\"257\":1}}],[\"包括值和类型\",{\"1\":{\"254\":1}}],[\"包括视力\",{\"1\":{\"246\":1}}],[\"包括姓名\",{\"1\":{\"231\":1,\"580\":1}}],[\"包括不可枚举属性\",{\"1\":{\"191\":1}}],[\"包括普通键和symbol键\",{\"1\":{\"174\":1}}],[\"包括尾调用优化\",{\"1\":{\"172\":1}}],[\"包括换行符\",{\"1\":{\"168\":2}}],[\"包括索引重建\",{\"1\":{\"138\":1}}],[\"包括社区版和商业版\",{\"1\":{\"132\":1}}],[\"包括\",{\"1\":{\"131\":1,\"132\":1,\"155\":1,\"167\":1,\"460\":1}}],[\"包括windows\",{\"1\":{\"131\":1,\"513\":1}}],[\"包括web开发\",{\"1\":{\"131\":1}}],[\"包括请求时间\",{\"1\":{\"58\":1}}],[\"包括递归函数\",{\"1\":{\"52\":1}}],[\"包括基本数据类型\",{\"1\":{\"36\":1}}],[\"包括react\",{\"1\":{\"8\":1}}],[\"包裹模式字符串\",{\"1\":{\"279\":1}}],[\"包裹起来\",{\"1\":{\"167\":1}}],[\"包裹表达式\",{\"1\":{\"14\":1}}],[\"包裹的表达式\",{\"1\":{\"13\":1}}],[\"w\",{\"1\":{\"538\":1,\"596\":1}}],[\"woof\",{\"1\":{\"317\":1}}],[\"worker运行在另一个线程中\",{\"1\":{\"57\":1}}],[\"worker传递的数据\",{\"1\":{\"57\":1}}],[\"worker响应的示例\",{\"1\":{\"57\":1}}],[\"worker中\",{\"1\":{\"57\":1}}],[\"worker的message事件来处理来自web\",{\"1\":{\"57\":1}}],[\"worker的响应\",{\"1\":{\"57\":5}}],[\"worker的脚本文件\",{\"1\":{\"57\":1}}],[\"worker发送消息的示例\",{\"1\":{\"57\":1}}],[\"worker发送消息\",{\"1\":{\"57\":2}}],[\"worker进行通信\",{\"1\":{\"57\":1}}],[\"worker通信\",{\"1\":{\"57\":1}}],[\"worker脚本示例\",{\"1\":{\"57\":1}}],[\"worker脚本中不能直接访问dom元素\",{\"1\":{\"57\":1}}],[\"worker脚本文件\",{\"1\":{\"57\":1}}],[\"worker脚本\",{\"1\":{\"57\":1}}],[\"worker\",{\"1\":{\"57\":11,\"497\":1}}],[\"workers是html5提供的一项技术\",{\"1\":{\"57\":1}}],[\"workers\",{\"0\":{\"57\":1},\"1\":{\"57\":1,\"243\":1,\"497\":6}}],[\"world\",{\"1\":{\"15\":1,\"16\":3,\"21\":2,\"67\":1,\"129\":1,\"142\":1,\"167\":7,\"172\":2,\"186\":4,\"187\":6,\"251\":1,\"256\":22,\"258\":2,\"265\":1,\"319\":1,\"324\":2,\"514\":1,\"515\":1,\"517\":1,\"530\":2,\"539\":3,\"543\":1,\"544\":2,\"545\":2,\"546\":2,\"547\":3,\"548\":2,\"596\":1,\"599\":2}}],[\"writable\",{\"1\":{\"191\":2,\"204\":1}}],[\"wrong\",{\"1\":{\"187\":2,\"193\":1}}],[\"wrap\",{\"1\":{\"155\":3}}],[\"wrappedcomponent\",{\"1\":{\"23\":3}}],[\"west\",{\"1\":{\"314\":9}}],[\"went\",{\"1\":{\"187\":2,\"193\":1}}],[\"weakmap\",{\"0\":{\"179\":1},\"1\":{\"179\":10}}],[\"weakset\",{\"0\":{\"178\":1},\"1\":{\"178\":10}}],[\"weight\",{\"1\":{\"144\":2,\"259\":2}}],[\"web应用框架\",{\"1\":{\"512\":1}}],[\"webassembly\",{\"1\":{\"497\":4}}],[\"websocket支持服务器主动向客户端推送数据\",{\"1\":{\"343\":1}}],[\"websocket是一种在单个tcp连接上进行全双工通信的通信协议\",{\"1\":{\"343\":1}}],[\"websocket\",{\"1\":{\"343\":1}}],[\"website\",{\"1\":{\"13\":1,\"14\":2}}],[\"webgl\",{\"1\":{\"61\":1}}],[\"webpagetest等工具来进行性能分析\",{\"1\":{\"58\":1}}],[\"webpagetest将提供详细的性能指标\",{\"1\":{\"58\":1}}],[\"webpagetest是一个基于云的性能分析工具\",{\"1\":{\"58\":1}}],[\"webpagetest\",{\"1\":{\"58\":1}}],[\"webpack及其插件更新频繁\",{\"1\":{\"504\":1}}],[\"webpackbar等\",{\"1\":{\"504\":1}}],[\"webpack拥有广泛的文档和社区资源\",{\"1\":{\"503\":1}}],[\"webpack通常会提供明确的错误信息和堆栈跟踪\",{\"1\":{\"499\":1}}],[\"webpack通过tree\",{\"1\":{\"469\":1}}],[\"webpack能够更快地进行重新构建和热模块替换\",{\"1\":{\"497\":1}}],[\"webpack支持多种代码拆分策略\",{\"1\":{\"493\":1}}],[\"webpack支持多种模块解析方式\",{\"1\":{\"460\":1}}],[\"webpack支持处理不同类型的文件\",{\"1\":{\"491\":1}}],[\"webpack默认根据入口配置进行代码分割\",{\"1\":{\"480\":1}}],[\"webpack不会应用任何默认优化\",{\"1\":{\"479\":1}}],[\"webpack还会执行各种优化策略\",{\"1\":{\"479\":1}}],[\"webpack插件或thread\",{\"1\":{\"504\":1}}],[\"webpack插件的执行顺序取决于它们在配置文件中的位置\",{\"1\":{\"478\":1}}],[\"webpack插件的生命周期分为两个阶段\",{\"1\":{\"477\":1}}],[\"webpack插件可以监听webpack构建过程中的不同事件\",{\"1\":{\"477\":1}}],[\"webpack使用加载器来处理项目中不同类型的文件\",{\"1\":{\"476\":1}}],[\"webpack是基于node\",{\"1\":{\"475\":1}}],[\"webpack是一个功能强大且高度可配置的静态模块打包工具\",{\"1\":{\"448\":1}}],[\"webpack是一个现代的静态模块打包工具\",{\"1\":{\"448\":1}}],[\"webpack也可以处理图片\",{\"1\":{\"473\":1}}],[\"webpack作为一个强大的模块打包工具\",{\"1\":{\"470\":1}}],[\"webpack和现代前端工具的整合\",{\"0\":{\"470\":1}}],[\"webpack提供了多个优化插件\",{\"1\":{\"504\":1}}],[\"webpack提供了许多优化选项\",{\"1\":{\"496\":1}}],[\"webpack提供了缓存机制\",{\"1\":{\"495\":1}}],[\"webpack提供了一些打包分析工具的插件\",{\"1\":{\"492\":1}}],[\"webpack提供了两种缓存类型\",{\"1\":{\"482\":1}}],[\"webpack提供了强大的优化特性和插件\",{\"1\":{\"480\":1}}],[\"webpack提供了output\",{\"1\":{\"480\":1}}],[\"webpack提供了三种内置的模式\",{\"1\":{\"479\":1}}],[\"webpack提供了compressionwebpackplugin插件\",{\"1\":{\"469\":1}}],[\"webpack提供了几种代码分割的方式\",{\"1\":{\"458\":1}}],[\"webpack可以配合懒加载使用\",{\"1\":{\"494\":1}}],[\"webpack可以通过babel\",{\"1\":{\"471\":1}}],[\"webpack可以通过使用插件来压缩输出的代码\",{\"1\":{\"469\":1}}],[\"webpack可以根据规则自动找到相应的文件并进行转换和处理\",{\"1\":{\"463\":1}}],[\"webpack配置\",{\"1\":{\"467\":1}}],[\"webpack生态系统中有大量的开源loader可供使用\",{\"1\":{\"463\":1}}],[\"webpack生态系统中还有大量的加载器可供使用\",{\"1\":{\"455\":1}}],[\"webpack将自动将其转换为\",{\"1\":{\"497\":1}}],[\"webpack将根据你的配置将处理后的文件输出到指定位置\",{\"1\":{\"486\":1}}],[\"webpack将通过入口点找到应用程序的所有依赖关系\",{\"1\":{\"485\":1}}],[\"webpack将会对代码进行压缩\",{\"1\":{\"489\":1}}],[\"webpack将会根据配置文件进行项目构建\",{\"1\":{\"475\":1}}],[\"webpack将会启用有用的开发工具\",{\"1\":{\"457\":1}}],[\"webpack将尝试整个重新加载应用程序\",{\"1\":{\"459\":1}}],[\"webpack将为每个入口起点生成一个对应的输出文件\",{\"1\":{\"458\":1}}],[\"webpack将执行基本的打包功能\",{\"1\":{\"457\":1}}],[\"webpack将从入口点开始构建你的应用程序\",{\"1\":{\"485\":1}}],[\"webpack将从入口文件开始分析和构建项目的依赖关系\",{\"1\":{\"454\":1}}],[\"webpack将从这些入口模块开始分析和构建项目的依赖关系\",{\"1\":{\"453\":1}}],[\"webpack自带三种模式\",{\"1\":{\"457\":1}}],[\"webpack原生只能处理javascript文件\",{\"1\":{\"455\":1}}],[\"webpack的配置文件是一个javascript模块\",{\"1\":{\"454\":1}}],[\"webpack的主要优点是模块化管理和打包\",{\"1\":{\"448\":1}}],[\"webpack会自动去除未使用的代码以减小文件体积\",{\"1\":{\"480\":1}}],[\"webpack会自动压缩和混淆你的代码\",{\"1\":{\"480\":1}}],[\"webpack会自动读取配置文件\",{\"1\":{\"454\":1}}],[\"webpack会针对输出文件的质量和性能进行优化\",{\"1\":{\"479\":1}}],[\"webpack会针对速度和快速重新构建进行优化\",{\"1\":{\"479\":1}}],[\"webpack会根据配置文件中的optimization\",{\"1\":{\"467\":1}}],[\"webpack会根据配置的loader顺序\",{\"1\":{\"463\":1}}],[\"webpack会根据模块之间的依赖关系\",{\"1\":{\"448\":1}}],[\"webpack会将缓存存储在项目根目录的\",{\"1\":{\"482\":1}}],[\"webpack会将css文件处理为合适的模块并添加到页面中\",{\"1\":{\"474\":1}}],[\"webpack会将导入的路径替换成配置的别名路径\",{\"1\":{\"460\":1}}],[\"webpack会将其视为模块路径\",{\"1\":{\"460\":1}}],[\"webpack会将其视为绝对路径\",{\"1\":{\"460\":1}}],[\"webpack会将其视为相对路径\",{\"1\":{\"460\":1}}],[\"webpack会将其单独打包成一个块\",{\"1\":{\"51\":1}}],[\"webpack会按照配置的优先级依次尝试解析模块\",{\"1\":{\"460\":1}}],[\"webpack会按照从右到左的顺序依次使用加载器进行转换\",{\"1\":{\"455\":1}}],[\"webpack会尝试将新的模块与当前运行的应用程序进行热替换\",{\"1\":{\"459\":1}}],[\"webpack会通过hmr插件将修改的模块标记为\",{\"1\":{\"459\":1}}],[\"webpack会执行各种优化\",{\"1\":{\"457\":1}}],[\"webpack简介\",{\"0\":{\"448\":1}}],[\"webpack等\",{\"1\":{\"203\":1}}],[\"webpackchunkname\",{\"1\":{\"95\":2}}],[\"webpack\",{\"0\":{\"447\":1,\"497\":1},\"1\":{\"56\":1,\"449\":2,\"450\":1,\"451\":1,\"454\":2,\"456\":2,\"467\":1,\"469\":4,\"475\":6,\"476\":1,\"482\":1,\"483\":2,\"488\":1,\"492\":1,\"496\":3,\"497\":13,\"504\":2}}],[\"web\",{\"0\":{\"236\":1,\"243\":1,\"244\":1},\"1\":{\"57\":2,\"61\":3,\"236\":3,\"240\":1,\"243\":2,\"244\":3,\"363\":5,\"367\":3,\"368\":2,\"370\":1,\"390\":2,\"394\":1,\"497\":6,\"506\":2}}],[\"web浏览器还提供了其他许多事件类型\",{\"1\":{\"28\":1}}],[\"www\",{\"1\":{\"132\":1,\"219\":1,\"224\":1,\"352\":1}}],[\"way\",{\"1\":{\"361\":2}}],[\"warning\",{\"1\":{\"102\":1}}],[\"was\",{\"1\":{\"77\":1}}],[\"watchref\",{\"1\":{\"110\":4}}],[\"watcheffectonce\",{\"1\":{\"110\":4}}],[\"watcheffect\",{\"1\":{\"110\":4}}],[\"watcher\",{\"1\":{\"87\":2,\"110\":1}}],[\"watch\",{\"0\":{\"110\":1},\"1\":{\"77\":3,\"89\":1,\"110\":9}}],[\"while循环\",{\"0\":{\"561\":1,\"562\":1},\"1\":{\"255\":1}}],[\"while\",{\"1\":{\"198\":3,\"255\":1,\"310\":3,\"561\":1,\"562\":1,\"595\":1,\"600\":1}}],[\"white\",{\"1\":{\"144\":1}}],[\"where子句用于在查询中指定条件\",{\"1\":{\"135\":1}}],[\"where\",{\"1\":{\"134\":3,\"135\":4,\"600\":2}}],[\"whenever\",{\"1\":{\"77\":1}}],[\"what\",{\"1\":{\"3\":1,\"535\":1}}],[\"window\",{\"1\":{\"262\":3,\"266\":16,\"297\":1,\"301\":1,\"329\":1,\"439\":1}}],[\"width=\",{\"1\":{\"228\":1}}],[\"width设置列宽度\",{\"1\":{\"154\":1}}],[\"width\",{\"1\":{\"144\":12,\"145\":6,\"146\":1,\"147\":2,\"148\":2,\"150\":1,\"151\":4,\"152\":3,\"157\":2,\"161\":6,\"183\":8,\"266\":2,\"278\":6,\"312\":6,\"318\":2}}],[\"will\",{\"1\":{\"70\":2,\"77\":1}}],[\"withrouter\",{\"1\":{\"386\":2}}],[\"with\",{\"1\":{\"312\":2,\"317\":1,\"497\":1}}],[\"withdata\",{\"1\":{\"23\":3}}],[\"withloading\",{\"1\":{\"23\":3}}],[\"withlogger\",{\"1\":{\"23\":3}}],[\"进而加快加载速度\",{\"1\":{\"469\":1}}],[\"进行分隔\",{\"1\":{\"584\":1}}],[\"进行服务器端编程\",{\"1\":{\"506\":1}}],[\"进行管理\",{\"1\":{\"506\":1}}],[\"进行异步操作\",{\"1\":{\"443\":1}}],[\"进行异步数据交互\",{\"1\":{\"241\":1}}],[\"进行一些计算或转换操作\",{\"1\":{\"430\":1}}],[\"进行安装\",{\"1\":{\"384\":1}}],[\"进行api测试\",{\"1\":{\"371\":1}}],[\"进行相应的处理\",{\"1\":{\"360\":1}}],[\"进行代码审查和合并修改\",{\"1\":{\"337\":1}}],[\"进行代码审查等操作\",{\"1\":{\"336\":1}}],[\"进行协作开发\",{\"1\":{\"333\":1,\"336\":1}}],[\"进行协同操作\",{\"1\":{\"187\":1}}],[\"进行模块化开发\",{\"1\":{\"327\":1}}],[\"进行响应和处理\",{\"1\":{\"263\":1}}],[\"进行数据交互和处理\",{\"1\":{\"241\":1}}],[\"进行布局和交互\",{\"1\":{\"218\":1}}],[\"进行中\",{\"1\":{\"192\":1}}],[\"进行操作\",{\"1\":{\"180\":1}}],[\"进行性能测试和压力测试\",{\"1\":{\"138\":1}}],[\"进行基本配置和管理\",{\"1\":{\"132\":1}}],[\"进行修改和更新\",{\"1\":{\"128\":1}}],[\"进行了侦听\",{\"1\":{\"110\":1}}],[\"进行切换\",{\"1\":{\"70\":1}}],[\"进行更新页面或其他操作\",{\"1\":{\"341\":1}}],[\"进行更新\",{\"1\":{\"48\":1}}],[\"进行自定义逻辑判断\",{\"1\":{\"48\":1}}],[\"进行处理\",{\"1\":{\"31\":2}}],[\"进行清理工作\",{\"1\":{\"22\":1}}],[\"进行dom操作或在更新后的状态做一些操作\",{\"1\":{\"22\":1}}],[\"进行条件判断等操作\",{\"1\":{\"13\":1,\"14\":1}}],[\"进入路由\",{\"1\":{\"387\":1}}],[\"进入等待状态\",{\"1\":{\"270\":2}}],[\"进入动画的结束状态\",{\"1\":{\"125\":1}}],[\"进入动画的生效状态\",{\"1\":{\"125\":1}}],[\"进入动画的起始状态\",{\"1\":{\"125\":1}}],[\"进入项目目录并执行以下命令来启动\",{\"1\":{\"364\":1}}],[\"进入项目目录\",{\"1\":{\"2\":1,\"88\":1}}],[\"进入该目录\",{\"1\":{\"1\":1}}],[\"来执行数据库操作\",{\"1\":{\"600\":1}}],[\"来自动加载所需的类文件\",{\"1\":{\"584\":1}}],[\"来自动加载类文件\",{\"1\":{\"583\":1}}],[\"来自动化测试过程\",{\"1\":{\"372\":1}}],[\"来改变\",{\"1\":{\"579\":1}}],[\"来启动两辆车的引擎\",{\"1\":{\"579\":1}}],[\"来标识元素\",{\"1\":{\"574\":1}}],[\"来调用可变函数\",{\"1\":{\"569\":1}}],[\"来清空变量数据\",{\"1\":{\"536\":1}}],[\"来拼接\",{\"1\":{\"528\":1}}],[\"来优化图像\",{\"1\":{\"504\":1}}],[\"来压缩javascript代码\",{\"1\":{\"504\":1}}],[\"来转换代码\",{\"1\":{\"467\":1}}],[\"来批量修改状态\",{\"1\":{\"443\":1}}],[\"来显示非响应式的message数据\",{\"1\":{\"442\":1}}],[\"来显示count的值\",{\"1\":{\"440\":1}}],[\"来分发一个动作\",{\"1\":{\"441\":1}}],[\"来分发action\",{\"1\":{\"433\":1}}],[\"来提交一个变异\",{\"1\":{\"441\":1}}],[\"来安装vuex插件\",{\"1\":{\"426\":1,\"440\":1}}],[\"来管理应用程序的路由状态\",{\"1\":{\"414\":1}}],[\"来派发一个action\",{\"1\":{\"401\":1}}],[\"来更方便地实现路由过渡\",{\"1\":{\"395\":1}}],[\"来访问当前的路由状态\",{\"1\":{\"395\":1}}],[\"来评估不同设计\",{\"1\":{\"372\":1}}],[\"来跟踪和定位代码中的错误和异常\",{\"1\":{\"372\":1}}],[\"来验证用户的身份\",{\"1\":{\"370\":1}}],[\"来获取当前的状态\",{\"1\":{\"401\":1}}],[\"来获取当前的主题值\",{\"1\":{\"41\":1}}],[\"来获取\",{\"1\":{\"368\":1,\"392\":1}}],[\"来获取其值\",{\"1\":{\"365\":1}}],[\"来存储session数据\",{\"1\":{\"357\":1}}],[\"来询问服务器资源是否有更新\",{\"1\":{\"356\":2}}],[\"来取反匹配规则\",{\"1\":{\"334\":1}}],[\"来描述该模块的类型信息\",{\"1\":{\"328\":1}}],[\"来描述网页的结构和内容\",{\"1\":{\"206\":1}}],[\"来指示文件之间的依赖关系\",{\"1\":{\"326\":1}}],[\"来指定默认参数值\",{\"1\":{\"313\":1}}],[\"来委托\",{\"1\":{\"323\":1}}],[\"来处理异步流程\",{\"1\":{\"405\":1}}],[\"来处理异常情况\",{\"1\":{\"322\":1}}],[\"来处理路由保护逻辑\",{\"1\":{\"385\":1}}],[\"来处理模块化代码\",{\"1\":{\"203\":1}}],[\"来明确表示一个变量的类型可以为这两种值\",{\"1\":{\"310\":1}}],[\"来表示剩余参数\",{\"1\":{\"313\":1}}],[\"来表示\",{\"1\":{\"310\":1,\"365\":1,\"528\":1}}],[\"来表示多行字符串\",{\"1\":{\"167\":1}}],[\"来对数组进行进一步的操作和转换\",{\"1\":{\"310\":1}}],[\"来添加文件内容的哈希值\",{\"1\":{\"504\":1}}],[\"来添加多个字段\",{\"1\":{\"282\":1}}],[\"来添加注释\",{\"1\":{\"15\":1,\"334\":1}}],[\"来捕获正确的this值\",{\"1\":{\"262\":1}}],[\"来模拟块级作用域\",{\"1\":{\"261\":1}}],[\"来操作和绘制\",{\"1\":{\"228\":1}}],[\"来将模块打包为可在浏览器中运行的代码\",{\"1\":{\"201\":1}}],[\"来控制迭代器的行为\",{\"1\":{\"186\":1}}],[\"来控制组件的显示与隐藏\",{\"1\":{\"94\":1}}],[\"来收集剩余的参数\",{\"1\":{\"172\":1}}],[\"来定义一个模块\",{\"1\":{\"325\":1}}],[\"来定义类型参数\",{\"1\":{\"320\":1}}],[\"来定义了\",{\"1\":{\"310\":1}}],[\"来定义函数\",{\"1\":{\"172\":1}}],[\"来定义网格布局\",{\"1\":{\"156\":1}}],[\"来设置背景图像的宽度和高度\",{\"1\":{\"158\":1}}],[\"来应用不同的css样式\",{\"1\":{\"157\":1}}],[\"来使图片在不同屏幕上自适应大小\",{\"1\":{\"148\":1}}],[\"来计算\",{\"1\":{\"145\":2}}],[\"来编写组件\",{\"1\":{\"91\":1}}],[\"来命名组件\",{\"1\":{\"91\":1}}],[\"来注册组件\",{\"1\":{\"91\":1}}],[\"来渲染一个列表\",{\"1\":{\"70\":1}}],[\"来引入组件或模块\",{\"1\":{\"51\":1}}],[\"来进行数据转换和操作\",{\"1\":{\"278\":1}}],[\"来进行匹配和赋值\",{\"1\":{\"166\":2}}],[\"来进行异步加载数据\",{\"1\":{\"50\":1}}],[\"来进行高效的页面更新\",{\"1\":{\"9\":1}}],[\"来确保准确的比较\",{\"1\":{\"48\":1}}],[\"来实现按需加载模块或代码块\",{\"1\":{\"467\":1}}],[\"来实现这些效果\",{\"1\":{\"395\":1}}],[\"来实现封装\",{\"1\":{\"312\":1}}],[\"来实现前端功能\",{\"1\":{\"266\":1}}],[\"来实现更高级的动画效果\",{\"1\":{\"151\":1}}],[\"来实现更复杂的转换动画\",{\"1\":{\"150\":1}}],[\"来实现全局注册\",{\"1\":{\"70\":1}}],[\"来实现memoized函数\",{\"1\":{\"52\":1}}],[\"来实现\",{\"1\":{\"46\":1,\"341\":1}}],[\"来阻止默认的提交行为发生\",{\"1\":{\"33\":1}}],[\"来简化表单验证逻辑\",{\"1\":{\"32\":1}}],[\"来包裹\",{\"1\":{\"13\":1}}],[\"jwt\",{\"1\":{\"370\":1}}],[\"jquery是一种流行的javascript库\",{\"1\":{\"343\":1}}],[\"jquery中的deferred对象和promise是处理异步操作的强大工具\",{\"1\":{\"306\":1}}],[\"jquery提供了许多高级选择器来选择特定类型的元素\",{\"1\":{\"299\":1}}],[\"jquery提供了丰富的动画效果和方法\",{\"1\":{\"290\":1}}],[\"jquery拥有大量的插件可供使用\",{\"1\":{\"293\":1}}],[\"jquery\",{\"0\":{\"283\":1},\"1\":{\"284\":2,\"325\":1,\"343\":1}}],[\"justify\",{\"1\":{\"144\":1,\"147\":1,\"155\":1}}],[\"jobtitle\",{\"1\":{\"231\":1}}],[\"join等\",{\"1\":{\"134\":1}}],[\"join和full\",{\"1\":{\"134\":1}}],[\"join\",{\"1\":{\"70\":1,\"74\":1,\"134\":3,\"257\":2,\"461\":1}}],[\"johndoe\",{\"1\":{\"282\":1}}],[\"john\",{\"1\":{\"13\":1,\"14\":2,\"15\":1,\"36\":1,\"92\":1,\"93\":1,\"102\":4,\"134\":1,\"187\":4,\"188\":5,\"189\":19,\"191\":25,\"208\":1,\"249\":3,\"251\":4,\"253\":1,\"258\":4,\"259\":4,\"262\":12,\"273\":1,\"278\":4,\"282\":1,\"369\":1,\"431\":2,\"574\":2,\"575\":2,\"576\":1,\"577\":2,\"590\":2,\"600\":2}}],[\"java\",{\"1\":{\"164\":1}}],[\"javascript部分\",{\"1\":{\"345\":1,\"346\":1,\"347\":1,\"348\":1}}],[\"javascript消息队列的机制确保异步任务能够以正确的顺序执行\",{\"1\":{\"271\":1}}],[\"javascript消息队列是一种处理异步操作的机制\",{\"1\":{\"271\":1}}],[\"javascript代码在执行时\",{\"1\":{\"271\":1}}],[\"javascript可以实现非阻塞的异步编程\",{\"1\":{\"264\":1}}],[\"javascript引入了异步回调和事件循环的概念\",{\"1\":{\"264\":1}}],[\"javascript引擎继续向上查找\",{\"1\":{\"261\":1}}],[\"javascript引擎将沿着作用域链向外查找\",{\"1\":{\"261\":1}}],[\"javascript引擎首先在内部函数作用域中查找变量innervariable\",{\"1\":{\"261\":1}}],[\"javascript引擎会从当前作用域开始\",{\"1\":{\"261\":1}}],[\"javascript是单线程的\",{\"1\":{\"264\":1,\"271\":1}}],[\"javascript是一种动态类型语言\",{\"1\":{\"249\":1}}],[\"javascript中函数可以像其他值一样被传递和操作\",{\"1\":{\"258\":1}}],[\"javascript中有许多内置的数据类型\",{\"1\":{\"250\":1}}],[\"javascript还有位运算符\",{\"1\":{\"254\":1}}],[\"javascript提供了各种运算符\",{\"1\":{\"254\":1}}],[\"javascript会将字符串转换为数字再进行比较\",{\"1\":{\"252\":1}}],[\"javascript会将布尔值转换为数字\",{\"1\":{\"252\":1}}],[\"javascript会将其他操作数隐式地转换为字符串并执行字符串拼接\",{\"1\":{\"252\":1}}],[\"javascript钩子函数\",{\"1\":{\"98\":1}}],[\"javascript和图片等\",{\"1\":{\"55\":1}}],[\"javascript\",{\"0\":{\"164\":1,\"247\":1},\"1\":{\"13\":1,\"60\":2,\"68\":1,\"70\":1,\"102\":1,\"163\":2,\"164\":7,\"218\":1,\"228\":1,\"234\":1,\"237\":1,\"245\":1,\"248\":1,\"252\":2,\"253\":2,\"256\":1,\"257\":2,\"260\":2,\"267\":7,\"268\":1,\"269\":1,\"270\":5,\"272\":2,\"273\":2,\"274\":2,\"275\":1,\"276\":4,\"278\":1,\"280\":2,\"282\":1,\"310\":4,\"311\":1,\"322\":1,\"323\":2,\"325\":3,\"330\":1,\"340\":1,\"343\":1,\"363\":2,\"366\":1,\"368\":1,\"371\":1,\"465\":1,\"506\":5}}],[\"jane\",{\"1\":{\"70\":1,\"102\":2,\"191\":3,\"600\":1}}],[\"jamstack\",{\"1\":{\"61\":1}}],[\"jpeg\",{\"1\":{\"54\":1}}],[\"jpg和\",{\"1\":{\"463\":1}}],[\"jpg\",{\"1\":{\"15\":3,\"158\":1,\"221\":1,\"264\":2,\"300\":1,\"368\":3}}],[\"js项目\",{\"1\":{\"510\":1}}],[\"js提供了许多内置模块和第三方模块\",{\"1\":{\"508\":1}}],[\"js开发和运行应用程序了\",{\"1\":{\"507\":1}}],[\"js开发的\",{\"1\":{\"475\":1}}],[\"js还附带了一个包管理器工具npm\",{\"1\":{\"507\":1}}],[\"js的版本号\",{\"1\":{\"507\":1}}],[\"js的模块化规范\",{\"1\":{\"448\":1}}],[\"js是否正确安装并显示版本号\",{\"1\":{\"507\":1}}],[\"js是web\",{\"1\":{\"57\":1}}],[\"js添加到系统的环境变量中\",{\"1\":{\"507\":1}}],[\"js支持windows\",{\"1\":{\"507\":1}}],[\"js作为入口点\",{\"1\":{\"485\":1}}],[\"js结尾的文件\",{\"1\":{\"476\":1}}],[\"js官方网站\",{\"1\":{\"507\":1}}],[\"js官方网站下载安装包进行安装\",{\"1\":{\"475\":1}}],[\"js官方的路由管理器\",{\"1\":{\"412\":1}}],[\"js$\",{\"1\":{\"454\":1,\"471\":1,\"476\":1,\"487\":1}}],[\"js文件只引入了square函数\",{\"1\":{\"462\":1}}],[\"js文件中编写更复杂的代码来构建更强大的应用程序\",{\"1\":{\"508\":1}}],[\"js文件中配置无模式\",{\"1\":{\"479\":1}}],[\"js文件中配置生产模式\",{\"1\":{\"479\":1}}],[\"js文件中配置开发模式\",{\"1\":{\"479\":1}}],[\"js文件中定义了两个函数square和cube\",{\"1\":{\"462\":1}}],[\"js文件中定义一个mutation\",{\"1\":{\"433\":1}}],[\"js文件中定义一个action\",{\"1\":{\"432\":1,\"433\":1}}],[\"js文件中定义mutation函数来修改状态\",{\"1\":{\"431\":1}}],[\"js文件中\",{\"1\":{\"429\":3,\"430\":2,\"431\":1,\"432\":1,\"433\":1}}],[\"js文件\",{\"1\":{\"427\":1}}],[\"js应用程序\",{\"1\":{\"508\":3,\"509\":1}}],[\"js应用程序和构建工具来说非常实用\",{\"1\":{\"200\":1}}],[\"js应用\",{\"0\":{\"508\":1}}],[\"js应用中\",{\"1\":{\"425\":1}}],[\"js框架提供的一种导航方式\",{\"1\":{\"416\":1}}],[\"js或者你的入口文件中\",{\"1\":{\"412\":1}}],[\"js和其他javascript环境中\",{\"1\":{\"511\":1}}],[\"js和mongodb进行数据库集成的示例\",{\"1\":{\"369\":1}}],[\"js和npm\",{\"1\":{\"5\":1,\"475\":2}}],[\"jsimport\",{\"1\":{\"278\":1}}],[\"jsexport\",{\"1\":{\"278\":2}}],[\"js环境中使用\",{\"1\":{\"203\":1}}],[\"js模块\",{\"1\":{\"202\":1}}],[\"js模块导入了initialize\",{\"1\":{\"202\":1}}],[\"js模块中的代码\",{\"1\":{\"202\":1}}],[\"js模块中的多个函数\",{\"1\":{\"202\":1}}],[\"js模块中同时导入和导出了calculator\",{\"1\":{\"202\":1}}],[\"js模块的内容\",{\"1\":{\"200\":1}}],[\"js生态系统中\",{\"1\":{\"200\":1,\"510\":1}}],[\"jscript\",{\"1\":{\"164\":1}}],[\"js等库来实现\",{\"1\":{\"401\":1}}],[\"js等\",{\"1\":{\"98\":1,\"128\":1,\"454\":1}}],[\"jsdelivr\",{\"1\":{\"65\":1,\"70\":1,\"87\":1}}],[\"json函数\",{\"1\":{\"604\":1}}],[\"json中配置\",{\"1\":{\"510\":1}}],[\"json文件\",{\"1\":{\"510\":1}}],[\"json文件来获取数据\",{\"1\":{\"345\":1}}],[\"json数据\",{\"1\":{\"355\":1}}],[\"json数据或其他类型的资源\",{\"1\":{\"351\":1}}],[\"json易于阅读和编写\",{\"1\":{\"343\":1}}],[\"json\",{\"0\":{\"604\":1},\"1\":{\"22\":1,\"23\":1,\"41\":1,\"52\":2,\"196\":1,\"281\":3,\"289\":1,\"292\":2,\"328\":3,\"331\":1,\"343\":2,\"345\":2,\"347\":1,\"348\":1,\"355\":1,\"366\":3,\"367\":1,\"454\":1,\"460\":2,\"475\":1,\"528\":1,\"604\":9}}],[\"jsx的基本语法规则\",{\"0\":{\"15\":1}}],[\"jsx示例\",{\"1\":{\"14\":1}}],[\"jsx需要遵循javascript的语法规则\",{\"1\":{\"14\":1}}],[\"jsx是javascript的语法扩展\",{\"1\":{\"14\":1}}],[\"jsx与html在外观上很相似\",{\"1\":{\"14\":1}}],[\"jsx与html的区别\",{\"0\":{\"14\":1}}],[\"jsx看起来类似html\",{\"1\":{\"13\":1}}],[\"jsx被react组件的render方法所支持\",{\"1\":{\"13\":1}}],[\"jsx\",{\"1\":{\"13\":1}}],[\"jsx语法\",{\"0\":{\"12\":1},\"1\":{\"9\":1}}],[\"js中的fs\",{\"1\":{\"511\":1}}],[\"js中配置cache选项来启用持久化缓存\",{\"1\":{\"482\":1}}],[\"js中\",{\"1\":{\"415\":2,\"509\":1}}],[\"js中使用嵌套路由了\",{\"1\":{\"415\":1}}],[\"js中使用嵌套路由\",{\"1\":{\"415\":1}}],[\"js中使用\",{\"1\":{\"200\":1,\"343\":1}}],[\"js中使用reactdom\",{\"1\":{\"5\":1}}],[\"js中一种非常有用的功能\",{\"1\":{\"96\":1}}],[\"js中注册vuex\",{\"1\":{\"93\":1}}],[\"js中创建一个vue实例\",{\"1\":{\"93\":1}}],[\"js中添加todo列表的组件\",{\"1\":{\"5\":1}}],[\"js\",{\"0\":{\"65\":1,\"507\":1},\"1\":{\"1\":1,\"3\":1,\"5\":3,\"57\":3,\"65\":1,\"68\":1,\"70\":5,\"87\":1,\"88\":7,\"89\":1,\"90\":1,\"91\":1,\"92\":1,\"93\":1,\"94\":2,\"95\":2,\"200\":2,\"201\":2,\"202\":10,\"241\":1,\"270\":2,\"272\":1,\"276\":1,\"278\":4,\"284\":1,\"328\":7,\"363\":5,\"364\":6,\"403\":4,\"405\":4,\"406\":4,\"407\":3,\"409\":2,\"413\":1,\"415\":1,\"420\":1,\"425\":1,\"427\":2,\"438\":1,\"439\":1,\"440\":2,\"450\":3,\"452\":1,\"454\":5,\"460\":2,\"462\":2,\"467\":1,\"469\":1,\"475\":5,\"476\":1,\"480\":1,\"483\":2,\"485\":1,\"486\":2,\"495\":1,\"506\":9,\"507\":2,\"508\":5,\"512\":1}}],[\"什么是路由\",{\"0\":{\"410\":1}}],[\"什么是redux\",{\"0\":{\"400\":1}}],[\"什么是react\",{\"0\":{\"8\":1}}],[\"什么是hooks\",{\"0\":{\"40\":1}}],[\"什么是jsx\",{\"0\":{\"13\":1}}],[\"属性中\",{\"1\":{\"397\":1}}],[\"属性中指定不同的\",{\"1\":{\"224\":1}}],[\"属性定义了路由匹配的路径\",{\"1\":{\"394\":1}}],[\"属性定义了链接的目标路径\",{\"1\":{\"394\":1}}],[\"属性表示只有当链接的路径和当前路径完全匹配时\",{\"1\":{\"394\":1}}],[\"属性得到正确初始化\",{\"1\":{\"312\":1}}],[\"属性和方法\",{\"1\":{\"583\":1}}],[\"属性和一个\",{\"1\":{\"312\":2}}],[\"属性和一个公共的\",{\"1\":{\"312\":1}}],[\"属性和一个受保护的\",{\"1\":{\"312\":1}}],[\"属性和\",{\"1\":{\"312\":1,\"330\":1}}],[\"属性以及\",{\"1\":{\"312\":1}}],[\"属性操作\",{\"0\":{\"304\":1}}],[\"属性将\",{\"1\":{\"267\":1}}],[\"属性来定义\",{\"1\":{\"391\":1}}],[\"属性来动态渲染组件\",{\"1\":{\"389\":1}}],[\"属性来实现\",{\"1\":{\"389\":1}}],[\"属性来访问路由器的功能\",{\"1\":{\"384\":1}}],[\"属性来获取数组的长度\",{\"1\":{\"257\":1}}],[\"属性来判断生成器是否已经完成\",{\"1\":{\"197\":1}}],[\"属性获取字符串的字符数\",{\"1\":{\"256\":1}}],[\"属性提供图像的替代文本\",{\"1\":{\"246\":1}}],[\"属性指定了匹配成功后应该渲染的组件\",{\"1\":{\"394\":1}}],[\"属性指定了在按下相应快捷键时激活链接\",{\"1\":{\"232\":1}}],[\"属性指定要渲染的组件\",{\"1\":{\"389\":1}}],[\"属性指定日期和时间的格式\",{\"1\":{\"235\":1}}],[\"属性指定文字方向\",{\"1\":{\"235\":1}}],[\"属性指定网页的语言\",{\"1\":{\"235\":1}}],[\"属性为元素提供了更多的信息和控制\",{\"1\":{\"211\":1}}],[\"属性等的行为\",{\"1\":{\"204\":1}}],[\"属性等的语法特性\",{\"1\":{\"204\":1}}],[\"属性装饰器用于增强或修改类的属性\",{\"1\":{\"204\":1}}],[\"属性装饰器\",{\"1\":{\"204\":1}}],[\"属性被封装在\",{\"1\":{\"183\":1}}],[\"属性简写\",{\"1\":{\"171\":1}}],[\"属性转义\",{\"1\":{\"168\":1}}],[\"属性的状态对象\",{\"1\":{\"401\":1}}],[\"属性的对象\",{\"1\":{\"186\":1,\"323\":1}}],[\"属性的字符\",{\"1\":{\"168\":1}}],[\"属性的字符和不符合\",{\"1\":{\"168\":1}}],[\"属性的元素\",{\"1\":{\"156\":1}}],[\"属性的值就不能被组件本身修改\",{\"1\":{\"11\":1}}],[\"属性可以将元素从正常文档流中脱离\",{\"1\":{\"147\":2}}],[\"属性用于设置外边距的大小\",{\"1\":{\"146\":1}}],[\"属性用于设置边框的样式\",{\"1\":{\"146\":1}}],[\"属性用于设置内边距的大小\",{\"1\":{\"146\":1}}],[\"属性用于设置内容区域的宽度和高度\",{\"1\":{\"146\":1}}],[\"属性选择器可以根据属性的存在\",{\"1\":{\"143\":1}}],[\"属性选择器通过元素的属性选择元素\",{\"1\":{\"143\":1}}],[\"属性选择器\",{\"1\":{\"143\":1}}],[\"属性节点\",{\"1\":{\"129\":1}}],[\"属性绑定一个数据\",{\"1\":{\"94\":1}}],[\"属性=\",{\"1\":{\"86\":1}}],[\"属性传递是一种常见的父子组件通信方式\",{\"1\":{\"36\":1}}],[\"属性传递\",{\"0\":{\"36\":1}}],[\"属性代理\",{\"1\":{\"23\":1}}],[\"属性是\",{\"1\":{\"391\":1}}],[\"属性是从父组件传递给子组件的只读数据\",{\"1\":{\"20\":1}}],[\"属性是从组件的父组件传递给子组件的数据\",{\"1\":{\"20\":1}}],[\"属性是只读的\",{\"1\":{\"20\":1}}],[\"属性是组件的只读数据\",{\"1\":{\"11\":1}}],[\"属性是组件接收的输入值\",{\"1\":{\"11\":1}}],[\"属性值可以是字符串或嵌套的表达式\",{\"1\":{\"15\":1}}],[\"属性名称遵循驼峰命名规则\",{\"1\":{\"15\":1}}],[\"属性名称使用驼峰命名\",{\"1\":{\"14\":1}}],[\"属性名称\",{\"1\":{\"14\":1}}],[\"属性名使用驼峰命名等\",{\"1\":{\"13\":1}}],[\"属性\",{\"0\":{\"211\":1},\"1\":{\"11\":1,\"15\":1,\"20\":1,\"70\":2,\"126\":2,\"128\":1,\"129\":1,\"171\":1,\"211\":1,\"216\":3,\"221\":2,\"222\":2,\"223\":2,\"224\":1,\"239\":1,\"246\":3,\"256\":1,\"259\":1,\"267\":2,\"312\":3,\"422\":1,\"583\":2}}],[\"当对象状态发生变化时\",{\"1\":{\"592\":1}}],[\"当对象的引用计数为零时\",{\"1\":{\"276\":1}}],[\"当发生异常时\",{\"1\":{\"588\":1}}],[\"当发布者发布一个事件时\",{\"1\":{\"272\":1}}],[\"当涉及表单处理时\",{\"1\":{\"580\":1}}],[\"当涉及到动态导入时\",{\"1\":{\"467\":1}}],[\"当涉及到模块解析时\",{\"1\":{\"328\":1}}],[\"当涉及到\",{\"1\":{\"278\":1}}],[\"当涉及到任务队列和事件循环时\",{\"1\":{\"270\":1}}],[\"当涉及到原型和原型链时\",{\"1\":{\"267\":2}}],[\"当涉及到es6运算符的扩展时\",{\"1\":{\"173\":1}}],[\"当满足特定条件时\",{\"1\":{\"564\":1}}],[\"当内容需要内嵌引号\",{\"1\":{\"528\":1}}],[\"当webpack构建过程中出现错误时\",{\"1\":{\"499\":1}}],[\"当文件内容改变时\",{\"1\":{\"483\":1}}],[\"当模块加载完成后\",{\"1\":{\"467\":1}}],[\"当模块路径不以\",{\"1\":{\"460\":1}}],[\"当模块路径以\",{\"1\":{\"460\":2}}],[\"当再次请求同一资源时\",{\"1\":{\"465\":1}}],[\"当导入模块时没有指定扩展名时\",{\"1\":{\"460\":1}}],[\"当导入第三方库或模块时\",{\"1\":{\"328\":1}}],[\"当需要引入模块时\",{\"1\":{\"460\":1}}],[\"当需要进行异步操作时\",{\"1\":{\"443\":1}}],[\"当需要多次修改vuex状态时\",{\"1\":{\"443\":1}}],[\"当需要对对象进行具体操作时\",{\"1\":{\"310\":1}}],[\"当处理表单和非响应式数据时\",{\"1\":{\"442\":1}}],[\"当你运行webpack时\",{\"1\":{\"454\":1}}],[\"当你使用vuex存储和修改状态时\",{\"1\":{\"439\":1}}],[\"当你为一个库编写了声明文件后\",{\"1\":{\"325\":1}}],[\"当状态被修改后\",{\"1\":{\"428\":1}}],[\"当状态发生改变时\",{\"1\":{\"428\":1}}],[\"当状态发生变化时\",{\"1\":{\"11\":1,\"401\":2}}],[\"当状态变化时\",{\"1\":{\"426\":1}}],[\"当路由路径不存在时\",{\"1\":{\"461\":1}}],[\"当路由的定义发生变化时\",{\"1\":{\"417\":1}}],[\"当路由发生变化时触发回调函数\",{\"1\":{\"387\":1}}],[\"当action类型为\",{\"1\":{\"401\":2}}],[\"当url没有匹配到前面定义的任何路径时\",{\"1\":{\"392\":1}}],[\"当url为\",{\"1\":{\"392\":4}}],[\"当url为根路径时\",{\"1\":{\"392\":1}}],[\"当url匹配到某个模式时\",{\"1\":{\"392\":1}}],[\"当由于某种原因不应\",{\"1\":{\"390\":1}}],[\"当访问\",{\"1\":{\"415\":2}}],[\"当访问路径\",{\"1\":{\"377\":1}}],[\"当访问一个变量时\",{\"1\":{\"261\":2}}],[\"当客户端请求的路径与静态文件路径匹配时\",{\"1\":{\"368\":1}}],[\"当客户端访问根路径时\",{\"1\":{\"367\":1}}],[\"当客户端发送一个http请求时\",{\"1\":{\"358\":1}}],[\"当收到客户端请求时\",{\"1\":{\"367\":1}}],[\"当在浏览器中输入url时\",{\"1\":{\"360\":1}}],[\"当在浏览器的url栏中输入url时\",{\"1\":{\"360\":1}}],[\"当响应接收完毕后\",{\"1\":{\"360\":1}}],[\"当达到最大请求数时\",{\"1\":{\"358\":1}}],[\"当服务器响应一个http请求时\",{\"1\":{\"357\":1}}],[\"当服务器返回响应时\",{\"1\":{\"341\":1}}],[\"当特定事件发生时自动执行脚本\",{\"1\":{\"338\":1}}],[\"当开发者完成某个特性或修复某个bug时\",{\"1\":{\"337\":1}}],[\"当开始执行\",{\"1\":{\"197\":1}}],[\"当合并分支过程中存在冲突时\",{\"1\":{\"335\":1}}],[\"当前的状态和派发的action\",{\"1\":{\"403\":1}}],[\"当前所在的分支会以特别标记显示\",{\"1\":{\"335\":1}}],[\"当前任务执行完毕后\",{\"1\":{\"264\":1}}],[\"当前任务\",{\"1\":{\"264\":1}}],[\"当多个\",{\"1\":{\"330\":1}}],[\"当存在多个同名的声明时\",{\"1\":{\"329\":1}}],[\"当存在循环引用时\",{\"1\":{\"275\":1}}],[\"当遇到问题时\",{\"1\":{\"501\":1}}],[\"当遇到\",{\"1\":{\"460\":1}}],[\"当遇到配置的别名时\",{\"1\":{\"460\":1}}],[\"当遇到一个模块导入语句时\",{\"1\":{\"328\":2}}],[\"当遇到异步操作时\",{\"1\":{\"264\":1,\"270\":1}}],[\"当将一个变量声明为\",{\"1\":{\"310\":1}}],[\"当使用路由懒加载时\",{\"1\":{\"423\":1}}],[\"当使用第三方模块时\",{\"1\":{\"325\":1}}],[\"当使用第三方库或模块时\",{\"1\":{\"325\":1}}],[\"当使用\",{\"1\":{\"310\":1,\"330\":1}}],[\"当使用es6模块化时\",{\"1\":{\"201\":1}}],[\"当变量过多时\",{\"1\":{\"277\":1}}],[\"当堆栈空间不足以容纳当前的函数调用链时\",{\"1\":{\"277\":1}}],[\"当不再需要两个对象相互引用时\",{\"1\":{\"276\":1}}],[\"当两个或多个对象相互引用\",{\"1\":{\"275\":1}}],[\"当两个值至少有一个为真时返回真\",{\"1\":{\"254\":1}}],[\"当两个值都为真时返回真\",{\"1\":{\"254\":1}}],[\"当向\",{\"1\":{\"275\":1}}],[\"当函数调用层级过深时\",{\"1\":{\"277\":1}}],[\"当函数调用嵌套层级太深或递归调用没有正确的终止条件时\",{\"1\":{\"277\":1}}],[\"当函数执行结束后\",{\"1\":{\"277\":1}}],[\"当函数执行完毕后\",{\"1\":{\"273\":1}}],[\"当函数的返回值发生变化时\",{\"1\":{\"110\":1}}],[\"当异步操作成功完成时\",{\"1\":{\"272\":1}}],[\"当异步操作完成或事件触发时\",{\"1\":{\"271\":1}}],[\"当异步操作完成后\",{\"1\":{\"264\":1}}],[\"当数据变化时\",{\"1\":{\"465\":1}}],[\"当数据返回时\",{\"1\":{\"272\":1}}],[\"当数据源发生变化时\",{\"1\":{\"110\":1}}],[\"当执行栈为空时\",{\"1\":{\"271\":1}}],[\"当执行innerfunction时\",{\"1\":{\"261\":1}}],[\"当任务队列中有任务时\",{\"1\":{\"270\":1}}],[\"当主线程中的同步代码执行完毕后\",{\"1\":{\"270\":1}}],[\"当原型对象发生改变时\",{\"1\":{\"267\":1}}],[\"当原始对象的属性值发生变化时\",{\"1\":{\"102\":1}}],[\"当我们点击\",{\"1\":{\"420\":1}}],[\"当我们在组件中调用fetchuser\",{\"1\":{\"405\":1}}],[\"当我们需要处理异步操作或执行复杂的逻辑时\",{\"1\":{\"405\":1}}],[\"当我们需要与\",{\"1\":{\"310\":1}}],[\"当我们的应用程序中发生操作时\",{\"1\":{\"403\":1}}],[\"当我们收到decrement\",{\"1\":{\"403\":1}}],[\"当我们收到increment\",{\"1\":{\"403\":1}}],[\"当我们使用动态类型的库或框架时\",{\"1\":{\"310\":1}}],[\"当我们不确定变量的类型\",{\"1\":{\"310\":1}}],[\"当我们将一个变量标记为\",{\"1\":{\"310\":1}}],[\"当我们访问元组中不存在的索引或使用错误的数据类型时\",{\"1\":{\"310\":1}}],[\"当我们访问对象的属性时\",{\"1\":{\"267\":1}}],[\"当我们访问对象的属性或方法时\",{\"1\":{\"267\":1}}],[\"当我们运行上述代码时\",{\"1\":{\"270\":1}}],[\"当我们调用\",{\"1\":{\"267\":1}}],[\"当我们编译这段stylus代码后\",{\"1\":{\"161\":1}}],[\"当我们编译这段sass代码后\",{\"1\":{\"161\":1}}],[\"当我们编译这段less代码后\",{\"1\":{\"161\":1}}],[\"当所有图片的加载都完成时\",{\"1\":{\"264\":1}}],[\"当所有的\",{\"1\":{\"193\":1}}],[\"当按钮被点击时\",{\"1\":{\"263\":1,\"272\":1}}],[\"当事件发生时\",{\"1\":{\"263\":2}}],[\"当事件发生时触发该函数\",{\"1\":{\"263\":1}}],[\"当事件被发布时\",{\"1\":{\"38\":1}}],[\"当调用函数时\",{\"1\":{\"258\":1}}],[\"当expression不匹配任何case时执行的代码块\",{\"1\":{\"255\":1}}],[\"当expression等于value2时执行的代码块\",{\"1\":{\"255\":1}}],[\"当expression等于value1时执行的代码块\",{\"1\":{\"255\":1}}],[\"当会话结束时会被清除\",{\"1\":{\"236\":1}}],[\"当其中任一异步任务发生错误时\",{\"1\":{\"198\":1}}],[\"当定义一个\",{\"1\":{\"195\":1}}],[\"当可迭代对象中的任何一个\",{\"1\":{\"193\":1}}],[\"当操作完成后\",{\"1\":{\"272\":1}}],[\"当操作失败时\",{\"1\":{\"192\":1,\"272\":1}}],[\"当操作成功完成时\",{\"1\":{\"192\":1}}],[\"当属性名称和变量名相同时\",{\"1\":{\"171\":1}}],[\"当正则表达式中包含s修饰符时\",{\"1\":{\"168\":1}}],[\"当正则表达式中包含y修饰符时\",{\"1\":{\"168\":1}}],[\"当正则表达式中包含u修饰符时\",{\"1\":{\"168\":1}}],[\"当屏幕宽度小于等于600像素时\",{\"1\":{\"157\":2}}],[\"当鼠标悬停在方块上时\",{\"1\":{\"151\":1}}],[\"当鼠标悬停在这个元素上时\",{\"1\":{\"150\":1,\"152\":1}}],[\"当vue或react应用启动时\",{\"1\":{\"128\":1}}],[\"当该组件在父组件中切换可见性时\",{\"1\":{\"126\":1}}],[\"当依赖的数据发生变化时\",{\"1\":{\"107\":1}}],[\"当用户输入时\",{\"1\":{\"442\":1}}],[\"当用户输入或选择表单元素时\",{\"1\":{\"31\":1}}],[\"当用户点击不同的路由链接时\",{\"1\":{\"413\":1}}],[\"当用户点击减少按钮时\",{\"1\":{\"403\":1}}],[\"当用户点击增加按钮时\",{\"1\":{\"403\":1}}],[\"当用户点击导航链接时\",{\"1\":{\"394\":1}}],[\"当用户点击按钮时\",{\"1\":{\"98\":1}}],[\"当用户访问不同的路径时\",{\"1\":{\"396\":1,\"414\":1}}],[\"当用户访问\",{\"1\":{\"389\":1,\"391\":1}}],[\"当用户通过登录或其他方式在服务端建立会话后\",{\"1\":{\"357\":1}}],[\"当用户在搜索框中输入时\",{\"1\":{\"347\":1}}],[\"当混入对象和组件具有相同的选项时\",{\"1\":{\"97\":1}}],[\"当点击容器内的任何列表项\",{\"1\":{\"263\":1}}],[\"当点击按钮触发事件时\",{\"1\":{\"94\":1}}],[\"当点击按钮时\",{\"1\":{\"41\":1,\"98\":1,\"263\":2,\"384\":1,\"420\":1}}],[\"当点击parent组件中的按钮时\",{\"1\":{\"93\":1}}],[\"当\",{\"1\":{\"82\":6,\"85\":2,\"195\":1,\"198\":1,\"269\":1}}],[\"当一个模块发生改变时\",{\"1\":{\"459\":1}}],[\"当一个action被派发时\",{\"1\":{\"401\":1}}],[\"当一个action被派发\",{\"1\":{\"401\":1}}],[\"当一个action被派发后\",{\"1\":{\"401\":1}}],[\"当一个函数完成时\",{\"1\":{\"524\":1}}],[\"当一个函数存在无法到达的终点\",{\"1\":{\"310\":1}}],[\"当一个函数永远不会返回任何值\",{\"1\":{\"310\":1}}],[\"当一个函数被标注为\",{\"1\":{\"310\":1}}],[\"当一个函数作为构造函数使用new关键字创建对象时\",{\"1\":{\"262\":1}}],[\"当一个函数作为普通函数调用时\",{\"1\":{\"262\":1}}],[\"当一个函数作为对象的方法调用时\",{\"1\":{\"262\":1}}],[\"当一个任务执行完毕后\",{\"1\":{\"270\":1}}],[\"当一个对象的方法是一个函数时\",{\"1\":{\"171\":1}}],[\"当一个组件被包裹在\",{\"1\":{\"126\":1}}],[\"当一个系统中有多个组件需要共享一些相同的逻辑或数据时\",{\"1\":{\"97\":1}}],[\"当一个\",{\"1\":{\"70\":1}}],[\"当浏览器再次请求相同的资源时\",{\"1\":{\"55\":1}}],[\"当懒加载完成前会显示该状态\",{\"1\":{\"51\":1}}],[\"当props和state的数据是不可变的\",{\"1\":{\"47\":1}}],[\"当列表项改变顺序或数量时\",{\"1\":{\"46\":1}}],[\"当应用程序规模庞大时\",{\"1\":{\"404\":1}}],[\"当应用程序的某个操作需要触发状态的改变时\",{\"1\":{\"401\":1}}],[\"当应用程序中某个操作需要触发状态的改变时\",{\"1\":{\"401\":1}}],[\"当应用程序加载时\",{\"1\":{\"16\":1}}],[\"当应用状态发生变化\",{\"1\":{\"128\":1}}],[\"当应用的状态发生变化时\",{\"1\":{\"45\":1}}],[\"当然\",{\"1\":{\"41\":1,\"150\":1,\"152\":1,\"167\":1,\"223\":1,\"234\":1,\"492\":1,\"497\":1}}],[\"当子组件中的按钮被点击时\",{\"1\":{\"35\":1}}],[\"当子组件抛出错误时调用\",{\"1\":{\"22\":1}}],[\"当元素滚动时触发\",{\"1\":{\"28\":1}}],[\"当组件和混入对象具有相同的选项时\",{\"1\":{\"97\":1}}],[\"当组件加载完成时\",{\"1\":{\"95\":1}}],[\"当组件需要加载时\",{\"1\":{\"95\":1}}],[\"当组件接收到新的props时调用\",{\"1\":{\"22\":1}}],[\"当组件的子组件抛出错误时调用\",{\"1\":{\"22\":1}}],[\"当组件的属性或状态发生变化时\",{\"1\":{\"21\":1}}],[\"当组件状态发生改变时\",{\"1\":{\"11\":1}}],[\"当组件较多或更新频繁时\",{\"1\":{\"9\":1}}],[\"等价于\",{\"1\":{\"552\":1}}],[\"等缓存淘汰算法来管理缓存\",{\"1\":{\"465\":1}}],[\"等功能\",{\"1\":{\"461\":1}}],[\"等内容的工具\",{\"1\":{\"367\":1}}],[\"等内置类型\",{\"1\":{\"325\":1}}],[\"等方法\",{\"1\":{\"343\":1}}],[\"等方法可以插入新的元素到dom中\",{\"1\":{\"296\":1}}],[\"等参数\",{\"1\":{\"341\":1}}],[\"等风险\",{\"1\":{\"340\":1}}],[\"等其他模块系统\",{\"1\":{\"327\":1}}],[\"等于或大于右操作数\",{\"1\":{\"604\":1}}],[\"等于运算符\",{\"1\":{\"553\":1}}],[\"等于\",{\"1\":{\"269\":1}}],[\"等号运算符\",{\"1\":{\"254\":1}}],[\"等待任务队列中的任务被执行\",{\"1\":{\"270\":2}}],[\"等待主线程为空\",{\"1\":{\"270\":1}}],[\"等待主线程执行完当前任务后执行\",{\"1\":{\"264\":1}}],[\"等待主线程执行完当前任务后再去处理队列中的异步操作\",{\"1\":{\"264\":1}}],[\"等待主线程执行到对应的位置时调用相应的回调函数\",{\"1\":{\"264\":1}}],[\"等待事件被触发\",{\"1\":{\"198\":1}}],[\"等待\",{\"1\":{\"196\":1}}],[\"等待安装结束\",{\"1\":{\"88\":1}}],[\"等符号\",{\"1\":{\"161\":1}}],[\"等等\",{\"1\":{\"157\":1}}],[\"等核心特性\",{\"1\":{\"63\":1}}],[\"等技术来优化组件的性能\",{\"1\":{\"43\":1}}],[\"等\",{\"1\":{\"11\":1,\"27\":1,\"110\":1,\"173\":1,\"192\":1,\"210\":2,\"216\":1,\"233\":1,\"241\":1,\"267\":1,\"272\":1,\"310\":1,\"328\":1,\"357\":1,\"359\":1,\"360\":2,\"367\":1,\"368\":1,\"401\":1,\"453\":2,\"457\":1,\"603\":1}}],[\"状态变更通知组件\",{\"1\":{\"428\":1}}],[\"状态的存储\",{\"1\":{\"428\":1}}],[\"状态具有以下特点\",{\"1\":{\"428\":1}}],[\"状态数据\",{\"1\":{\"427\":1}}],[\"状态只读\",{\"1\":{\"402\":1}}],[\"状态只能在组件内部进行修改\",{\"1\":{\"11\":1}}],[\"状态树是一个描述应用程序当前状态的纯javascript对象\",{\"1\":{\"401\":1}}],[\"状态树是一个javascript对象\",{\"1\":{\"400\":1}}],[\"状态码\",{\"1\":{\"352\":1}}],[\"状态等\",{\"1\":{\"314\":1}}],[\"状态提升等方式来实现\",{\"1\":{\"36\":1}}],[\"状态初始化通常在构造函数constructor中进行\",{\"1\":{\"20\":1}}],[\"状态是通过mutations来修改的\",{\"1\":{\"428\":1}}],[\"状态是可变的\",{\"1\":{\"20\":1}}],[\"状态是组件内部管理的数据\",{\"1\":{\"20\":1}}],[\"状态是一种动态的数据\",{\"1\":{\"11\":1}}],[\"状态\",{\"1\":{\"11\":1,\"20\":2,\"425\":1,\"426\":1,\"428\":1,\"435\":1,\"436\":1}}],[\"状态和属性\",{\"1\":{\"11\":1}}],[\"状态和属性等\",{\"0\":{\"11\":1}}],[\"状态管理会变得复杂且难以维护\",{\"1\":{\"404\":1}}],[\"状态管理是一个关键问题\",{\"1\":{\"400\":1}}],[\"状态管理和数据响应等问题\",{\"1\":{\"63\":1}}],[\"状态管理和应用的整体架构可能需要更多的努力和合理的设计\",{\"1\":{\"9\":1}}],[\"状态管理\",{\"1\":{\"9\":1,\"18\":1}}],[\"状态管理等应用程序级别的功能\",{\"1\":{\"9\":1}}],[\"最大值\",{\"1\":{\"603\":1}}],[\"最大请求数限制和连接池等机制\",{\"1\":{\"358\":1}}],[\"最新版本\",{\"1\":{\"507\":1}}],[\"最佳实践和性能优化\",{\"0\":{\"504\":1}}],[\"最近最少使用\",{\"1\":{\"465\":1}}],[\"最早的ajax技术使用xml作为数据交换格式\",{\"1\":{\"340\":1}}],[\"最常见的三斜线指令是用来引入外部的声明文件\",{\"1\":{\"331\":1}}],[\"最终生成打包后的文件\",{\"1\":{\"463\":1}}],[\"最终打包的代码只会包含被使用的square函数\",{\"1\":{\"462\":1}}],[\"最终将所有模块打包成几个静态资源文件\",{\"1\":{\"448\":1}}],[\"最终导致堆栈溢出\",{\"1\":{\"277\":1}}],[\"最终影响应用程序的性能和稳定性\",{\"1\":{\"274\":1,\"275\":1}}],[\"最终可能冒泡到文档的根元素\",{\"1\":{\"263\":1}}],[\"最终只更新需要变化的部分\",{\"1\":{\"8\":1}}],[\"最小化对真实dom的操作次数\",{\"1\":{\"128\":1}}],[\"最小化对实际dom的操作\",{\"1\":{\"11\":1}}],[\"最小化dom操作\",{\"1\":{\"128\":1}}],[\"最后修改时间\",{\"1\":{\"598\":1}}],[\"最后使用style\",{\"1\":{\"463\":1}}],[\"最后使用reactdom\",{\"1\":{\"16\":1}}],[\"最后一个<route>没有指定路径\",{\"1\":{\"392\":1}}],[\"最后接收和渲染服务器的响应内容\",{\"1\":{\"360\":1}}],[\"最后通过console\",{\"1\":{\"258\":1}}],[\"最后删除旧数据库\",{\"1\":{\"133\":1}}],[\"最后\",{\"1\":{\"94\":1,\"102\":1,\"261\":1,\"314\":1,\"330\":1,\"367\":1,\"369\":1,\"394\":1,\"403\":1,\"405\":1,\"420\":1,\"581\":1}}],[\"最好进行性能测试和分析\",{\"1\":{\"47\":1}}],[\"最重要的是根据具体情况评估和选择最适合的工具和技术\",{\"1\":{\"10\":1}}],[\"毕竟它们都使用了虚拟dom和diff算法进行高效更新\",{\"1\":{\"10\":1}}],[\"然而\",{\"1\":{\"10\":1,\"14\":1,\"37\":1,\"47\":1,\"48\":1,\"200\":1,\"204\":1,\"249\":1,\"269\":1,\"276\":1,\"310\":1,\"338\":1,\"340\":2,\"524\":1,\"569\":1,\"571\":1}}],[\"然后再检查条件是否满足\",{\"1\":{\"562\":1}}],[\"然后重新构建应用程序\",{\"1\":{\"502\":1}}],[\"然后逐步添加功能或配置\",{\"1\":{\"501\":1}}],[\"然后是表达式作为函数体\",{\"1\":{\"571\":1}}],[\"然后是\",{\"1\":{\"460\":2}}],[\"然后是后续的装饰器\",{\"1\":{\"324\":1}}],[\"然后提供给组件使用\",{\"1\":{\"444\":1}}],[\"然后创建一个vue实例\",{\"1\":{\"440\":1}}],[\"然后生成最终的\",{\"1\":{\"367\":1}}],[\"然后发送给客户端进行展示\",{\"1\":{\"367\":1}}],[\"然后发送get请求到服务器上的suggestions\",{\"1\":{\"347\":1}}],[\"然后进行提交\",{\"1\":{\"335\":1}}],[\"然后根据需要进行加载\",{\"1\":{\"328\":1}}],[\"然后根据实际的对象类型来调用相应的方法\",{\"1\":{\"312\":1}}],[\"然后执行一个宏任务\",{\"1\":{\"271\":1}}],[\"然后事件会向上冒泡至父级元素\",{\"1\":{\"263\":1}}],[\"然后就可以使用导入的模块内容\",{\"1\":{\"200\":1}}],[\"然后返回一个新的装饰器函数\",{\"1\":{\"324\":1}}],[\"然后返回\",{\"1\":{\"196\":1}}],[\"然后导入到新数据库中\",{\"1\":{\"133\":1}}],[\"然后将结果传递给style\",{\"1\":{\"455\":1}}],[\"然后将它们作为参数传递给connect函数\",{\"1\":{\"406\":1}}],[\"然后将它添加为父元素的子元素\",{\"1\":{\"265\":1}}],[\"然后将该状态提供给应用程序的组件\",{\"1\":{\"401\":1}}],[\"然后将该函数作为props传递给子组件\",{\"1\":{\"35\":1}}],[\"然后将参数的值嵌入到\",{\"1\":{\"386\":1}}],[\"然后将数据和视图模板一起传递给模板引擎\",{\"1\":{\"367\":1}}],[\"然后将加密后的密钥发送给服务器\",{\"1\":{\"359\":1}}],[\"然后将其隐藏\",{\"1\":{\"265\":1}}],[\"然后将返回的结果使用\",{\"1\":{\"170\":1}}],[\"然后将这个虚拟dom与真实dom进行比较\",{\"1\":{\"128\":1}}],[\"然后将这些混入对象应用到多个组件中\",{\"1\":{\"97\":1}}],[\"然后输入以下命令创建一个新项目\",{\"1\":{\"88\":1}}],[\"然后才交由内部元素进行处理\",{\"1\":{\"70\":1}}],[\"然后启动测试\",{\"1\":{\"58\":1}}],[\"然后检查缓存中是否存在对应的结果\",{\"1\":{\"52\":1}}],[\"然后在处理请求时验证令牌\",{\"1\":{\"602\":1}}],[\"然后在后续请求中直接读取该文件\",{\"1\":{\"601\":1}}],[\"然后在webpack配置中添加相应的规则\",{\"1\":{\"472\":1,\"473\":1,\"474\":1}}],[\"然后在打包过程中\",{\"1\":{\"462\":1}}],[\"然后在组件中使用$store来访问vuex的状态和方法\",{\"1\":{\"441\":1}}],[\"然后在条件成立的情况下\",{\"1\":{\"317\":1}}],[\"然后在运行时将其转换为虚拟\",{\"1\":{\"68\":1}}],[\"然后在需要时再加载\",{\"1\":{\"51\":1}}],[\"然后在这个函数内部渲染需要的内容\",{\"1\":{\"37\":1}}],[\"然后通过\",{\"1\":{\"188\":1}}],[\"然后通过调用迭代器的next\",{\"1\":{\"184\":1}}],[\"然后通过props将这个数据传递给child组件\",{\"1\":{\"93\":1}}],[\"然后通过props传递给子组件\",{\"1\":{\"35\":1}}],[\"然后通过javascript动态地更新页面内容\",{\"1\":{\"63\":1}}],[\"然后通过dispatch函数来触发状态更新\",{\"1\":{\"41\":1}}],[\"然后\",{\"1\":{\"37\":2,\"93\":1,\"95\":1,\"97\":1,\"98\":1,\"102\":1,\"142\":1,\"155\":1,\"156\":1,\"161\":3,\"196\":2,\"198\":1,\"264\":1,\"270\":1,\"282\":1,\"312\":2,\"314\":1,\"330\":1,\"369\":1,\"397\":2,\"403\":2,\"405\":2,\"406\":2,\"420\":1,\"431\":1,\"432\":1,\"437\":1,\"440\":1,\"474\":1,\"524\":1,\"569\":1,\"579\":1,\"581\":1}}],[\"然后使用css\",{\"1\":{\"463\":1}}],[\"然后使用formdata对象来获取表单中的数据\",{\"1\":{\"346\":1}}],[\"然后使用send\",{\"1\":{\"341\":1}}],[\"然后使用javascript将其显示在网页上\",{\"1\":{\"345\":1}}],[\"然后使用javascript将返回的数据更新到网页的特定部分\",{\"1\":{\"340\":1}}],[\"然后使用jsx语法创建了一个简单的react元素\",{\"1\":{\"16\":1}}],[\"然后使用声明合并来合并该类与目标类\",{\"1\":{\"330\":1}}],[\"然后使用appendchild方法将其添加到dom中\",{\"1\":{\"265\":1}}],[\"然后使用link标签将该文件连接到html文档中\",{\"1\":{\"142\":1}}],[\"然后使用状态值来渲染表单元素\",{\"1\":{\"31\":1}}],[\"然后只更新需要变化的部分\",{\"1\":{\"9\":1}}],[\"然后运行以下命令来安装所需的依赖项\",{\"1\":{\"2\":1}}],[\"然后等待项目创建完成\",{\"1\":{\"1\":1}}],[\"更多关于php中处理json的详细信息\",{\"1\":{\"604\":1}}],[\"更多用途\",{\"1\":{\"189\":1}}],[\"更智能的代码生成策略\",{\"1\":{\"497\":1}}],[\"更易于维护\",{\"1\":{\"433\":1}}],[\"更易于维护和管理\",{\"1\":{\"142\":1}}],[\"更易于理解和处理的部分\",{\"1\":{\"327\":1}}],[\"更好地管理应用程序的状态\",{\"1\":{\"431\":1}}],[\"更好地追踪数据流动和变更\",{\"1\":{\"425\":1}}],[\"更好地指定对象的具体类型或使用接口进行描述\",{\"1\":{\"310\":1}}],[\"更好的性能和打包体积优化\",{\"1\":{\"497\":1}}],[\"更好的\",{\"1\":{\"497\":1}}],[\"更好的typescript和ide支持\",{\"1\":{\"99\":1}}],[\"更好的错误处理\",{\"1\":{\"99\":1}}],[\"更好的组件化和模块化\",{\"1\":{\"63\":1}}],[\"更好的用户体验\",{\"1\":{\"45\":1,\"63\":1}}],[\"更简单和直观地进行异步编程\",{\"1\":{\"197\":1}}],[\"更可维护的异步代码\",{\"1\":{\"187\":1}}],[\"更可管理的部分\",{\"1\":{\"56\":1}}],[\"更可管理的部分的过程\",{\"1\":{\"56\":1}}],[\"更小的包大小\",{\"1\":{\"99\":1}}],[\"更快的渲染效率\",{\"1\":{\"99\":1}}],[\"更快速的页面导航和响应速度\",{\"1\":{\"63\":1}}],[\"更新语句\",{\"1\":{\"600\":1}}],[\"更新特定模块到最新版本\",{\"1\":{\"510\":1}}],[\"更新当前选中的菜单等\",{\"1\":{\"421\":1}}],[\"更新state\",{\"1\":{\"402\":1}}],[\"更新指定的资源\",{\"1\":{\"352\":1}}],[\"更新页面\",{\"1\":{\"341\":1}}],[\"更新页面等\",{\"1\":{\"264\":1}}],[\"更新属性的值\",{\"1\":{\"259\":1}}],[\"更新和删除数据\",{\"1\":{\"137\":1,\"369\":1}}],[\"更新数据库中的现有数据\",{\"1\":{\"600\":1}}],[\"更新数据和删除数据\",{\"1\":{\"369\":1}}],[\"更新数据\",{\"1\":{\"134\":1,\"369\":1,\"401\":2}}],[\"更新→渲染\",{\"1\":{\"112\":1}}],[\"更新后调用\",{\"1\":{\"87\":1}}],[\"更新组件状态\",{\"1\":{\"50\":1}}],[\"更新组件的状态\",{\"1\":{\"50\":1}}],[\"更新阶段和卸载阶段\",{\"1\":{\"22\":1}}],[\"更新阶段\",{\"1\":{\"22\":1}}],[\"更新\",{\"1\":{\"22\":1}}],[\"更新界面\",{\"1\":{\"11\":1}}],[\"更容易上手\",{\"1\":{\"10\":1}}],[\"更加简单\",{\"1\":{\"497\":1}}],[\"更加安全和强大\",{\"1\":{\"359\":1}}],[\"更加自动化和全面\",{\"1\":{\"10\":1}}],[\"更加灵活和可控\",{\"1\":{\"10\":1}}],[\"性能考虑\",{\"1\":{\"467\":1}}],[\"性能追踪等\",{\"1\":{\"443\":1}}],[\"性能测试可以检测系统的瓶颈\",{\"1\":{\"372\":1}}],[\"性能测试\",{\"1\":{\"372\":2}}],[\"性能优越\",{\"1\":{\"363\":1}}],[\"性能优化和调优是在数据库系统中提高执行效率和响应速度的关键活动\",{\"1\":{\"138\":1}}],[\"性能优化和调优\",{\"0\":{\"138\":1}}],[\"性能优化\",{\"0\":{\"44\":1},\"1\":{\"131\":1,\"434\":1}}],[\"性能分析工具是开发者用来评估网页或应用程序性能的工具\",{\"1\":{\"58\":1}}],[\"性能分析工具是开发者用来评估和改进应用程序性能的工具\",{\"1\":{\"58\":1}}],[\"性能监测等\",{\"1\":{\"23\":1}}],[\"性能\",{\"1\":{\"10\":2,\"18\":1,\"128\":1,\"371\":1}}],[\"性能问题\",{\"1\":{\"9\":1}}],[\"需要合理地处理错误情况\",{\"1\":{\"467\":1}}],[\"需要查阅相关的文档和官方资料\",{\"1\":{\"467\":1}}],[\"需要启用动态导入的功能\",{\"1\":{\"467\":1}}],[\"需要满足以下条件\",{\"1\":{\"467\":1}}],[\"需要仔细评估代码的复用性和通用性\",{\"1\":{\"466\":1}}],[\"需要结合合适的打包工具和配置\",{\"1\":{\"462\":1}}],[\"需要手动设置\",{\"1\":{\"457\":1}}],[\"需要手动解决冲突\",{\"1\":{\"335\":1,\"337\":1}}],[\"需要进行以下步骤\",{\"1\":{\"438\":1}}],[\"需要进行特殊处理\",{\"1\":{\"340\":1,\"349\":1}}],[\"需要提供一个reducer作为参数\",{\"1\":{\"401\":1}}],[\"需要用户进行身份验证或其他权限验证才能访问\",{\"1\":{\"385\":1}}],[\"需要将<browserrouter>或<hashrouter>作为根组件进行包裹\",{\"1\":{\"376\":1}}],[\"需要将其放置在其他组件中或者挂载到dom中\",{\"1\":{\"21\":1}}],[\"需要考虑安全性\",{\"1\":{\"371\":1}}],[\"需要集成与数据库或其他数据存储系统的交互\",{\"1\":{\"371\":1}}],[\"需要重新加载整个页面\",{\"1\":{\"340\":1}}],[\"需要重新渲染时\",{\"1\":{\"128\":1}}],[\"需要重新渲染\",{\"1\":{\"48\":1}}],[\"需要指定文件的扩展名\",{\"1\":{\"328\":1}}],[\"需要为这些模块编写对应的声明文件\",{\"1\":{\"325\":1}}],[\"需要留意内存管理方面的最佳实践\",{\"1\":{\"275\":1}}],[\"需要开发者手动处理内存的分配和释放\",{\"1\":{\"273\":1}}],[\"需要开发者进行性能优化\",{\"1\":{\"9\":1}}],[\"需要谨慎设计和控制递归的层级和终止条件\",{\"1\":{\"269\":1}}],[\"需要小心处理回调函数中的操作\",{\"1\":{\"260\":1}}],[\"需要通过require\",{\"1\":{\"509\":1}}],[\"需要通过mutations来进行\",{\"1\":{\"429\":1}}],[\"需要通过关键字var\",{\"1\":{\"249\":1}}],[\"需要通过修改原始对象来实现\",{\"1\":{\"102\":1}}],[\"需要回顾历史\",{\"1\":{\"164\":1}}],[\"需要在组件中导入辅助函数\",{\"1\":{\"429\":1}}],[\"需要在项目中安装\",{\"1\":{\"397\":1}}],[\"需要在vue组件中引入<transition>标签\",{\"1\":{\"98\":1}}],[\"需要在\",{\"1\":{\"70\":1}}],[\"需要使用符合该版本要求的\",{\"1\":{\"537\":1}}],[\"需要使用共享存储\",{\"1\":{\"357\":1}}],[\"需要使用命令git\",{\"1\":{\"334\":1}}],[\"需要使用更高级的算法或库来处理\",{\"1\":{\"281\":1}}],[\"需要使用方括号语法来访问属性\",{\"1\":{\"174\":1}}],[\"需要使用\",{\"1\":{\"70\":1,\"525\":1}}],[\"需要使用类组件来管理状态\",{\"1\":{\"40\":1}}],[\"需要自行实现深层比较或使用帮助函数\",{\"1\":{\"48\":1}}],[\"需要注意避免形成循环依赖\",{\"1\":{\"444\":1}}],[\"需要注意避免过度使用和循环引用\",{\"1\":{\"268\":1}}],[\"需要注意防范\",{\"1\":{\"349\":1}}],[\"需要注意命名冲突\",{\"1\":{\"330\":1}}],[\"需要注意保持一致的命名和成员类型\",{\"1\":{\"329\":1}}],[\"需要注意原始值和转换结果之间的关系\",{\"1\":{\"252\":1}}],[\"需要注意以下几点\",{\"1\":{\"48\":1,\"311\":1,\"466\":1,\"569\":1}}],[\"需要注意确保方法内部的this指向组件实例\",{\"1\":{\"26\":1}}],[\"需要注意的是过度的手动优化也可能带来代码复杂性和维护难度\",{\"1\":{\"48\":1}}],[\"需要注意的是\",{\"1\":{\"9\":1,\"13\":1,\"14\":1,\"15\":1,\"22\":1,\"25\":1,\"27\":1,\"36\":1,\"37\":1,\"38\":1,\"40\":1,\"47\":1,\"49\":1,\"50\":1,\"63\":1,\"95\":1,\"99\":1,\"110\":1,\"129\":1,\"165\":1,\"172\":1,\"191\":1,\"195\":1,\"197\":1,\"200\":1,\"201\":1,\"204\":1,\"260\":1,\"264\":1,\"268\":1,\"269\":1,\"273\":1,\"277\":1,\"280\":1,\"281\":2,\"310\":4,\"315\":1,\"316\":1,\"331\":1,\"334\":1,\"335\":1,\"340\":1,\"351\":1,\"356\":1,\"361\":1,\"401\":3,\"415\":1,\"416\":1,\"417\":1,\"423\":1,\"435\":1,\"437\":1,\"444\":2,\"467\":1,\"480\":1}}],[\"需要根据具体的需求选择合适的生命周期方法来使用\",{\"1\":{\"22\":1}}],[\"需要确保它被正确地转换为纯javascript代码\",{\"1\":{\"14\":1}}],[\"需要更多的时间来学习和掌握\",{\"1\":{\"10\":1}}],[\"有丰富的扩展库和框架可供使用\",{\"1\":{\"513\":1}}],[\"有助于提高代码的清晰度和可理解性\",{\"1\":{\"604\":1}}],[\"有助于更快速地定位问题\",{\"1\":{\"497\":1}}],[\"有助于进行条件判断和类型缩小\",{\"1\":{\"319\":1}}],[\"有一个css\",{\"1\":{\"463\":1}}],[\"有一些高级类型操作符可以帮助我们进行类型操作和转换\",{\"1\":{\"321\":1}}],[\"有三种路由模式可供选择\",{\"1\":{\"390\":1}}],[\"有效期等信息\",{\"1\":{\"359\":1}}],[\"有以下几种作用域规则\",{\"1\":{\"311\":1}}],[\"有以下几种常见情况\",{\"1\":{\"262\":1}}],[\"有不同的用途和含义\",{\"1\":{\"310\":1}}],[\"有不同的语法和解析方式\",{\"1\":{\"14\":1}}],[\"有些操作可能需要耗时较长或是需要等待外部资源的结果\",{\"1\":{\"264\":1}}],[\"有多种模块化的实现方式\",{\"1\":{\"199\":1}}],[\"有多种方法可以绑定事件处理函数\",{\"1\":{\"26\":1}}],[\"有的情况下\",{\"1\":{\"70\":1}}],[\"有更高的初始渲染开销\",{\"1\":{\"70\":1}}],[\"有更高的切换开销\",{\"1\":{\"70\":1}}],[\"有损压缩则是通过牺牲一定程度的视觉质量来进一步减小文件大小\",{\"1\":{\"54\":1}}],[\"有两种主要的缓存策略可以优化构建速度和性能\",{\"1\":{\"481\":1}}],[\"有两种类型转换方式\",{\"1\":{\"252\":1}}],[\"有两种常见的模块解析策略\",{\"1\":{\"328\":1}}],[\"有两种常见的盒模型\",{\"1\":{\"146\":1}}],[\"有两种常见的方式来处理表单元素的值和状态\",{\"1\":{\"31\":1}}],[\"有两个原因\",{\"1\":{\"164\":1}}],[\"有两个核心角色\",{\"1\":{\"38\":1}}],[\"有很多常见的事件类型可以用于不同的交互和操作\",{\"1\":{\"28\":1}}],[\"有时可能需要保留用户之前输入的数据\",{\"1\":{\"580\":1}}],[\"有时可能会出现版本兼容性\",{\"1\":{\"9\":1}}],[\"有时候您希望某个局部变量不要被删除\",{\"1\":{\"524\":1}}],[\"有时候\",{\"1\":{\"502\":1}}],[\"有时候需要使用相应的声明文件\",{\"1\":{\"328\":1}}],[\"有时需要将额外的参数传递给事件处理程序\",{\"1\":{\"25\":1}}],[\"有众多开源组件和库可供选择\",{\"1\":{\"9\":1}}],[\"但由于wbmp格式的使用相对较少\",{\"1\":{\"604\":1}}],[\"但由于其宽松的特性\",{\"1\":{\"310\":1}}],[\"但如果包含的文件不存在或出现错误\",{\"1\":{\"599\":1}}],[\"但只会包含文件一次\",{\"1\":{\"599\":1}}],[\"但只能继承一个抽象类\",{\"1\":{\"591\":1}}],[\"但只返回头部信息\",{\"1\":{\"353\":1}}],[\"但没有提供这些方法的具体实现\",{\"1\":{\"591\":1}}],[\"但没有返回实体内容\",{\"1\":{\"354\":1}}],[\"但其具体的属性值可以不同\",{\"1\":{\"579\":1}}],[\"但会保持索引与值的关联\",{\"1\":{\"578\":2}}],[\"但会在dom更新之后同步触发\",{\"1\":{\"41\":1}}],[\"但数字不能作为首字母出现\",{\"1\":{\"518\":1}}],[\"但对于小文件会将其转换为base64编码\",{\"1\":{\"476\":1}}],[\"但对于大型应用来说\",{\"1\":{\"9\":1}}],[\"但对调试来说不太友好\",{\"1\":{\"468\":1}}],[\"但过度使用动态导入可能会降低代码的可读性和可维护性\",{\"1\":{\"467\":1}}],[\"但过时并不推荐使用\",{\"1\":{\"191\":1}}],[\"但也有一些区别\",{\"1\":{\"591\":1}}],[\"但也需要明白变量类型及它们的意义\",{\"1\":{\"540\":1}}],[\"但也会带来一些问题\",{\"1\":{\"465\":1}}],[\"但也要遵循jsx语法规则\",{\"1\":{\"13\":1}}],[\"但我们可以通过传递storage选项来指定其他的存储方式\",{\"1\":{\"439\":1}}],[\"但实际上执行的是各自的实现逻辑\",{\"1\":{\"583\":1}}],[\"但实际上它被转换成等效的javascript代码\",{\"1\":{\"13\":1}}],[\"但实际的命名可以根据应用程序的需要自行定义\",{\"1\":{\"368\":1}}],[\"但随着安全性的日益重视和https相关技术的成熟\",{\"1\":{\"359\":1}}],[\"但为了防止连接资源无限占用\",{\"1\":{\"358\":1}}],[\"但为了优化内存使用和性能\",{\"1\":{\"276\":1}}],[\"但并不提供实现细节\",{\"1\":{\"312\":1}}],[\"但外部作用域无法访问内部作用域中定义的变量\",{\"1\":{\"311\":1}}],[\"但外部作用域无法访问内部作用域的变量\",{\"1\":{\"261\":2}}],[\"但无法进行对象具体属性的操作\",{\"1\":{\"310\":1}}],[\"但尚未被赋予具体的值\",{\"1\":{\"310\":1}}],[\"但仍然需要处理不确定类型的值\",{\"1\":{\"310\":1}}],[\"但反之不行\",{\"1\":{\"280\":1}}],[\"但可能会忽略一些源文件的细节信息\",{\"1\":{\"468\":1}}],[\"但可能会导致重复加载共享模块的问题\",{\"1\":{\"458\":1}}],[\"但可能会产生复杂的控制流程和难以维护的代码\",{\"1\":{\"278\":1}}],[\"但可以通过配置相互配合使用\",{\"1\":{\"463\":1}}],[\"但可以通过使用立即执行函数表达式\",{\"1\":{\"261\":1}}],[\"但可以将较小的文件以dataurl形式内联到生成的文件中\",{\"1\":{\"455\":1}}],[\"但可以修改现有属性\",{\"1\":{\"171\":1}}],[\"但通过使用加载器\",{\"1\":{\"455\":1}}],[\"但通过在\",{\"1\":{\"268\":1}}],[\"但通常使用\",{\"1\":{\"91\":1}}],[\"但现代浏览器中基本上都支持使用这个属性来操作原型链\",{\"1\":{\"267\":1}}],[\"但同时也需要小心处理异步操作的回调函数\",{\"1\":{\"264\":1}}],[\"但有时可能需要更高级的检测方法\",{\"1\":{\"253\":1}}],[\"但默认情况下验证是在客户端完成的\",{\"1\":{\"234\":1}}],[\"但每个对象根据自身的类型来执行不同的计算\",{\"1\":{\"183\":1}}],[\"但不会包含源文件的列信息\",{\"1\":{\"468\":1}}],[\"但不获取实际的资源内容\",{\"1\":{\"353\":1}}],[\"但不能在其他类中访问\",{\"1\":{\"312\":1}}],[\"但不能以数字开头\",{\"1\":{\"249\":1}}],[\"但不再需要使用它时\",{\"1\":{\"275\":1}}],[\"但不允许重复声明同名变量\",{\"1\":{\"165\":1}}],[\"但不推荐在整个网页中广泛使用\",{\"1\":{\"142\":1}}],[\"但使用了不同的语法和变量表示方式\",{\"1\":{\"161\":1}}],[\"但下面列举的是一些常见的数据类型\",{\"1\":{\"136\":1}}],[\"但它会先执行一次代码块\",{\"1\":{\"562\":1}}],[\"但它展示了redux和react是如何集成在一起的\",{\"1\":{\"406\":1}}],[\"但它简化了flux的复杂性和繁琐性\",{\"1\":{\"400\":1}}],[\"但它可以通过原型链找到\",{\"1\":{\"267\":1}}],[\"但它可能会带来额外的内存消耗\",{\"1\":{\"128\":1}}],[\"但它也可以与后端技术进行集成\",{\"1\":{\"241\":1}}],[\"但它只能以对象作为键\",{\"1\":{\"179\":1}}],[\"但它只能存储对象\",{\"1\":{\"178\":1}}],[\"但它并非适用于所有场景\",{\"1\":{\"128\":1}}],[\"但它们是不同的语言\",{\"1\":{\"14\":1}}],[\"但dom还没有被渲染\",{\"1\":{\"114\":1}}],[\"但要注意避免滥用混入\",{\"1\":{\"97\":1}}],[\"但还未挂载\",{\"1\":{\"87\":1}}],[\"但\",{\"1\":{\"61\":1,\"114\":1}}],[\"但需要注意的是\",{\"1\":{\"462\":1}}],[\"但需要注意不要设置过大\",{\"1\":{\"277\":1}}],[\"但需要注意避免内存泄漏\",{\"1\":{\"274\":1}}],[\"但需要注意\",{\"1\":{\"52\":1,\"57\":1}}],[\"但用于函数式组件\",{\"1\":{\"47\":1}}],[\"但是函数则不可以\",{\"1\":{\"528\":1}}],[\"但是不只限于那几个\",{\"1\":{\"528\":1}}],[\"但是有警告信息\",{\"1\":{\"519\":1}}],[\"但是在调试过程中更准确\",{\"1\":{\"468\":1}}],[\"但是在颜色深度和视觉质量方面较jpeg和png有限\",{\"1\":{\"54\":1}}],[\"但是可以包含异步操作和业务逻辑\",{\"1\":{\"436\":1}}],[\"但是可以被多个组件共享和访问\",{\"1\":{\"436\":1}}],[\"但是为了增加代码的可读性和明确性\",{\"1\":{\"315\":1}}],[\"但是需要注意的是\",{\"1\":{\"262\":1}}],[\"但是通过\",{\"1\":{\"195\":1}}],[\"但是它是在数组原型上定义的\",{\"1\":{\"170\":1}}],[\"但是之所以不叫\",{\"1\":{\"164\":1}}],[\"但是还没有开始渲染模板时被调用\",{\"1\":{\"87\":1}}],[\"但是\",{\"1\":{\"40\":1,\"126\":1,\"264\":1,\"359\":1,\"444\":2}}],[\"但缺点是没有集中控制表单数据的能力\",{\"1\":{\"31\":1}}],[\"但在处理敏感信息时需要小心使用\",{\"1\":{\"521\":1}}],[\"但在较大的项目中\",{\"1\":{\"326\":1}}],[\"但在元素被移除之前没有显式地移除这些事件监听器时\",{\"1\":{\"275\":1}}],[\"但在函数外部是无法访问的\",{\"1\":{\"261\":1}}],[\"但在使用构建工具\",{\"1\":{\"203\":1}}],[\"但在某些情况下\",{\"1\":{\"146\":1}}],[\"但在其他领域\",{\"1\":{\"129\":1}}],[\"但在\",{\"1\":{\"114\":1}}],[\"但在大多数情况下\",{\"1\":{\"27\":1}}],[\"但在小型应用中\",{\"1\":{\"10\":1}}],[\"但在极端情况下\",{\"1\":{\"9\":1}}],[\"但vue使用了更灵活的模板语法\",{\"1\":{\"10\":1}}],[\"而又不需要暴露该对象的内部表示\",{\"1\":{\"592\":1}}],[\"而抽象类适合作为具体类的基类\",{\"1\":{\"591\":1}}],[\"而接口只能有常量\",{\"1\":{\"591\":1}}],[\"而$\",{\"1\":{\"580\":1}}],[\"而插件开发者可以根据需求开发定制化的功能\",{\"1\":{\"464\":1}}],[\"而未被使用的cube函数会被自动移除\",{\"1\":{\"462\":1}}],[\"而index\",{\"1\":{\"462\":1}}],[\"而import\",{\"1\":{\"202\":1}}],[\"而moduleb没有\",{\"1\":{\"444\":1}}],[\"而mutation负责修改状态\",{\"1\":{\"433\":1}}],[\"而action用于处理异步操作和触发mutation\",{\"1\":{\"436\":1}}],[\"而angular的性能在小型应用上可能更好\",{\"1\":{\"10\":1}}],[\"而angular拥有完整的一站式解决方案\",{\"1\":{\"10\":1}}],[\"而将特定业务逻辑相关的状态和操作划分为一个特定模块\",{\"1\":{\"435\":1}}],[\"而将一张大图缩小展示会导致图片失真等问题\",{\"1\":{\"54\":1}}],[\"而这些组件可能需要共享同一个数据状态\",{\"1\":{\"425\":1}}],[\"而这可能会增加复杂性和学习成本\",{\"1\":{\"9\":1}}],[\"而<navlink>组件用于在当前路由与导航路径匹配时添加样式\",{\"1\":{\"380\":1}}],[\"而<option>元素定义了下拉菜单的选项\",{\"1\":{\"30\":1}}],[\"而hashrouter使用url的哈希值\",{\"1\":{\"376\":1}}],[\"而html中属性名称是不区分大小写的\",{\"1\":{\"14\":1}}],[\"而html是一种独立的标记语言\",{\"1\":{\"14\":1}}],[\"而常见的数据格式包括json\",{\"1\":{\"371\":1}}],[\"而常见的非关系型数据库包括mongodb和redis\",{\"1\":{\"369\":1}}],[\"而四次挥手则确保双方都完成了数据的传输\",{\"1\":{\"361\":1}}],[\"而第二次的fin包则是由被动关闭的一方发送的\",{\"1\":{\"361\":1}}],[\"而客户端的连接池用于发送请求到服务器\",{\"1\":{\"358\":1}}],[\"而客户端应用程序通过与服务器建立连接来访问和操作数据库\",{\"1\":{\"131\":1}}],[\"而现在希望将其忽略\",{\"1\":{\"334\":1}}],[\"而模块\",{\"1\":{\"326\":1}}],[\"而模块化则可以将代码划分为独立\",{\"1\":{\"56\":1}}],[\"而类只能继承一个父类\",{\"1\":{\"591\":1}}],[\"而类用于实现对象的行为\",{\"1\":{\"312\":1}}],[\"而类组件更强大\",{\"1\":{\"18\":1}}],[\"而类组件可以使用生命周期方法\",{\"1\":{\"18\":1}}],[\"而类组件可以使用this\",{\"1\":{\"18\":1}}],[\"而类组件是使用es6类的形式定义的\",{\"1\":{\"18\":1}}],[\"而使用json\",{\"1\":{\"604\":1}}],[\"而使用ajax可以避免这种情况\",{\"1\":{\"340\":1}}],[\"而使用\",{\"1\":{\"311\":1}}],[\"而使用object\",{\"1\":{\"174\":1}}],[\"而词法作用域则决定了代码中标识符的可见范围和访问规则\",{\"1\":{\"280\":1}}],[\"而经过多次回收仍然存活的对象则会被移到老年代\",{\"1\":{\"276\":1}}],[\"而栈中的变量存储了堆中数据的引用地址\",{\"1\":{\"273\":1}}],[\"而栈中的变量只是引用了堆中的数据\",{\"1\":{\"273\":1}}],[\"而订阅者\",{\"1\":{\"272\":1}}],[\"而订阅者则订阅感兴趣的事件或消息\",{\"1\":{\"38\":1}}],[\"而尽量避免直接依赖bom相关的操作\",{\"1\":{\"266\":1}}],[\"而es模块化适用于现代前端开发\",{\"1\":{\"203\":1}}],[\"而es6中可以直接使用反引号包裹多行字符串\",{\"1\":{\"167\":1}}],[\"而在发布生产环境时使用生产模式可以帮助你获得更好的性能和用户体验\",{\"1\":{\"479\":1}}],[\"而在函数外部声明的变量具有全局作用域\",{\"1\":{\"249\":1}}],[\"而在浏览器端\",{\"1\":{\"200\":1}}],[\"而在spa中\",{\"1\":{\"63\":1}}],[\"而且可以正确识别大于0xffff的码点\",{\"1\":{\"167\":1}}],[\"而背景图像的显示范围相对于内边距框\",{\"1\":{\"158\":1}}],[\"而内边距和边框会增加元素的总尺寸\",{\"1\":{\"146\":1}}],[\"而约束可以限制特定列的值满足特定条件\",{\"1\":{\"134\":1}}],[\"而真实dom只需要存储实际的dom元素\",{\"1\":{\"128\":1}}],[\"而实际上要执行过渡效果的元素是被v\",{\"1\":{\"98\":1}}],[\"而作用域插槽可以通过在<slot>标签中使用v\",{\"1\":{\"96\":1}}],[\"而局部注册的组件只能在指定的组件及其子组件中使用\",{\"1\":{\"91\":1}}],[\"而局部注册指令只能在被注册的组件内部使用\",{\"1\":{\"70\":1}}],[\"而局部组件只能在当前组件中使用\",{\"1\":{\"90\":1}}],[\"而私有过滤器只能在当前组件中使用\",{\"1\":{\"86\":1}}],[\"而\",{\"1\":{\"70\":1,\"159\":1,\"253\":1,\"263\":1,\"310\":1}}],[\"而无需事先声明\",{\"1\":{\"590\":1}}],[\"而无需在内存中同时保存整个数据集合\",{\"1\":{\"582\":1}}],[\"而无需完全刷新页面或重新加载整个应用程序\",{\"1\":{\"453\":1,\"459\":1}}],[\"而无需重复编写计算逻辑\",{\"1\":{\"430\":1}}],[\"而无需重新加载整个页面\",{\"1\":{\"342\":1}}],[\"而无需再次提供凭据\",{\"1\":{\"370\":1}}],[\"而无需通过动态处理或生成\",{\"1\":{\"368\":1}}],[\"而无需向服务器发起请求\",{\"1\":{\"356\":1}}],[\"而无需显式地指定类型注解\",{\"1\":{\"316\":1}}],[\"而无需编写复杂的javascript代码\",{\"1\":{\"152\":1}}],[\"而无需进行页面的完整重载\",{\"1\":{\"63\":1}}],[\"而无需手动操作dom\",{\"1\":{\"45\":1}}],[\"而延迟渲染不可见部分\",{\"1\":{\"53\":1}}],[\"而suspense组件则可以在懒加载完成前显示一个加载状态\",{\"1\":{\"51\":1}}],[\"而不必重新生成内容\",{\"1\":{\"601\":1}}],[\"而不必将完整的子项目嵌入到主项目中\",{\"1\":{\"338\":1}}],[\"而不必为所有成员都赋值\",{\"1\":{\"314\":1}}],[\"而不修改原来的数组\",{\"1\":{\"257\":1}}],[\"而不仅仅是使用字面量形式\",{\"1\":{\"168\":1}}],[\"而不会干扰彼此的工作\",{\"1\":{\"434\":1}}],[\"而不会产生新的历史记录\",{\"1\":{\"416\":1}}],[\"而不会报错\",{\"1\":{\"249\":1}}],[\"而不会增加元素的总尺寸\",{\"1\":{\"146\":1}}],[\"而不会计算外边距\",{\"1\":{\"146\":1}}],[\"而不会缓存组件的模板\",{\"1\":{\"126\":1}}],[\"而不会被销毁和重新创建\",{\"1\":{\"126\":1}}],[\"而不会将其内部的属性转化为ref对象\",{\"1\":{\"102\":1}}],[\"而不会进行递归转化\",{\"1\":{\"102\":1}}],[\"而不会等待\",{\"1\":{\"70\":1}}],[\"而不会阻塞主线程的执行\",{\"1\":{\"270\":1}}],[\"而不会阻塞主线程\",{\"1\":{\"57\":1,\"264\":1}}],[\"而不会损失图片的视觉质量\",{\"1\":{\"54\":1}}],[\"而不需要通过组件之间的传递来进行通信\",{\"1\":{\"425\":1}}],[\"而不需要在整个项目中修改依赖该路径的代码\",{\"1\":{\"417\":1}}],[\"而不需要直接管理状态的存储和更新逻辑\",{\"1\":{\"404\":1}}],[\"而不需要重新加载整个页面\",{\"1\":{\"342\":1}}],[\"而不需要刷新整个页面\",{\"1\":{\"340\":1,\"459\":1}}],[\"而不需要了解底层集合的具体实现\",{\"1\":{\"323\":1}}],[\"而不需要一次性加载整个数据集到内存中\",{\"1\":{\"198\":1}}],[\"而不需要一层层通过props传递\",{\"1\":{\"37\":1}}],[\"而不需要使用arguments对象\",{\"1\":{\"172\":1}}],[\"而不需要添加$或\",{\"1\":{\"161\":1}}],[\"而不需要手动为每个可能的状态编写多个样式规则\",{\"1\":{\"82\":1}}],[\"而不需要关心具体的订阅者\",{\"1\":{\"38\":1}}],[\"而不是内联到javascript文件中\",{\"1\":{\"456\":1}}],[\"而不是一次性加载所有路由组件\",{\"1\":{\"423\":2}}],[\"而不是直接将用户输入拼接到sql查询中\",{\"1\":{\"602\":1}}],[\"而不是直接在组件中多次调用变异方法\",{\"1\":{\"443\":1}}],[\"而不是直接在属性中写css样式\",{\"1\":{\"14\":1}}],[\"而不是直接修改原始状态对象\",{\"1\":{\"403\":1}}],[\"而不是在每次派发一个action时都被调用\",{\"1\":{\"401\":1}}],[\"而不是手动点击导航链接\",{\"1\":{\"383\":1}}],[\"而不是每次都新建连接\",{\"1\":{\"358\":1}}],[\"而不是每次请求都建立和关闭一个新的连接\",{\"1\":{\"358\":1}}],[\"而不是替换整个资源\",{\"1\":{\"353\":1}}],[\"而不是引用\",{\"1\":{\"281\":1}}],[\"而不是赋值\",{\"1\":{\"249\":1}}],[\"而不是局限于函数作用域\",{\"1\":{\"172\":1}}],[\"而不是固定像素值来设置元素的尺寸和间距\",{\"1\":{\"148\":1}}],[\"而不是被销毁\",{\"1\":{\"126\":1}}],[\"而不是像vue2中返回的是一个函数\",{\"1\":{\"102\":1}}],[\"而不是重新渲染整个列表\",{\"1\":{\"70\":1}}],[\"而不是重新创建或删除它们\",{\"1\":{\"70\":1}}],[\"而不是所有元素\",{\"1\":{\"49\":1}}],[\"而不是整个页面\",{\"1\":{\"45\":1,\"601\":1}}],[\"而不是提供完整的应用程序架构\",{\"1\":{\"9\":1}}],[\"而是应该返回一个全新的状态对象\",{\"1\":{\"401\":1}}],[\"而是将路由信息保存在内存中\",{\"1\":{\"390\":1}}],[\"而是直接使用枚举成员的值\",{\"1\":{\"314\":1}}],[\"而是尽量明确地指定变量的具体类型\",{\"1\":{\"310\":1}}],[\"而是保持在内存中\",{\"1\":{\"268\":1}}],[\"而是使用更现代化的技术\",{\"1\":{\"218\":1}}],[\"而是只在代码中可见\",{\"1\":{\"212\":1}}],[\"而是通过动态改变vue组件来展示新的页面内容\",{\"1\":{\"416\":1}}],[\"而是通过\",{\"1\":{\"180\":1}}],[\"而是从缓存中取出并重新激活\",{\"1\":{\"126\":1}}],[\"而是由容器在运行时注入\",{\"1\":{\"117\":1}}],[\"而是由dom本身维护\",{\"1\":{\"31\":1}}],[\"而是更关注其在列表中的唯一性和稳定性\",{\"1\":{\"46\":1}}],[\"而是需要权衡其优点和缺点\",{\"1\":{\"9\":1}}],[\"而通过状态\",{\"1\":{\"20\":1}}],[\"而状态是组件内部管理的可变数据\",{\"1\":{\"20\":1}}],[\"而vue适合快速原型开发和更小规模的项目\",{\"1\":{\"10\":1}}],[\"而vue在生态系统的范围上稍逊一筹\",{\"1\":{\"10\":1}}],[\"只记录严重错误\",{\"1\":{\"586\":1}}],[\"只比较值\",{\"1\":{\"540\":1}}],[\"只要保证开始标记和结束标记不在正文中出现即可\",{\"1\":{\"528\":1}}],[\"只允许输出一个字符串\",{\"1\":{\"515\":1}}],[\"只引入必要的工具和库\",{\"1\":{\"504\":1}}],[\"只将必要的数据放入vuex的状态管理中\",{\"1\":{\"443\":1}}],[\"只提交需要更新的字段\",{\"1\":{\"353\":1}}],[\"只传输和处理必要的数据\",{\"1\":{\"342\":1}}],[\"只传输和处理必要的数据量\",{\"1\":{\"342\":1}}],[\"只向外部暴露必要的接口\",{\"1\":{\"268\":1}}],[\"只暴露对外需要的接口\",{\"1\":{\"327\":1}}],[\"只暴露对外部可见的接口\",{\"1\":{\"268\":1}}],[\"只暴露出对外提供的接口\",{\"1\":{\"312\":1}}],[\"只暴露有限的接口来访问和操作数据\",{\"1\":{\"183\":1}}],[\"只在需要兼容es5及以下环境或特殊场景时才使用var\",{\"1\":{\"165\":1}}],[\"只在需要更新的时候更新相应的子组件\",{\"1\":{\"49\":1}}],[\"只在声明的块内有效\",{\"1\":{\"165\":1}}],[\"只会执行按钮元素的点击事件处理函数\",{\"1\":{\"263\":1}}],[\"只会输出\",{\"1\":{\"263\":1}}],[\"只会影响内容区域的尺寸\",{\"1\":{\"146\":1}}],[\"只会修改必要的部分来保持视图的同步\",{\"1\":{\"128\":1}}],[\"只会缓存组件实例\",{\"1\":{\"126\":1}}],[\"只适用于\",{\"1\":{\"122\":1}}],[\"只读响应式对象的属性是不可修改的\",{\"1\":{\"102\":1}}],[\"只能包含一个表达式作为函数体\",{\"1\":{\"571\":1}}],[\"只能删除已经合并到其他分支的分支\",{\"1\":{\"335\":1}}],[\"只能在运行时通过require动态加载模块\",{\"1\":{\"203\":1}}],[\"只能解析整数\",{\"1\":{\"169\":1}}],[\"只能用于对象类型\",{\"1\":{\"102\":1}}],[\"只能通过使用useeffect等hooks来模拟生命周期\",{\"1\":{\"18\":1}}],[\"只能通过使用react的hooks来处理状态\",{\"1\":{\"18\":1}}],[\"只是改变用户看到的输出\",{\"1\":{\"86\":1}}],[\"只对需要进行修改的元素进行重新渲染\",{\"1\":{\"70\":1}}],[\"只当在\",{\"1\":{\"70\":1}}],[\"只渲染匹配的第一个路由组件\",{\"1\":{\"378\":1}}],[\"只渲染当前可见数据范围内的数据到dom中\",{\"1\":{\"53\":1}}],[\"只渲染可见区域的元素\",{\"1\":{\"49\":1}}],[\"只有在点击按钮时才会加载和执行\",{\"1\":{\"493\":1}}],[\"只有在它的依赖发生改变时才会重新求值\",{\"1\":{\"78\":1}}],[\"只有通过mutations才能修改状态\",{\"1\":{\"428\":1}}],[\"只有两个可能的值\",{\"1\":{\"310\":1}}],[\"只有声明被提前\",{\"1\":{\"249\":1}}],[\"只有\",{\"1\":{\"164\":1,\"519\":1}}],[\"只有指定的组件会被缓存\",{\"1\":{\"126\":1}}],[\"只有修饰符\",{\"1\":{\"70\":1}}],[\"只有当该片段发生变化时\",{\"1\":{\"601\":1}}],[\"只有当文件内容改变时才会重新下载\",{\"1\":{\"483\":1}}],[\"只有当值为nan时才返回true\",{\"1\":{\"169\":1}}],[\"只有当依赖发生改变时\",{\"1\":{\"109\":1,\"111\":1}}],[\"只有当依赖项发生变化时\",{\"1\":{\"41\":2}}],[\"只有当计算属性被访问时才会计算\",{\"1\":{\"108\":1}}],[\"只有当前组件及其子组件才能使用`<button\",{\"1\":{\"91\":1}}],[\"只有当它的依赖项发生改变时\",{\"1\":{\"73\":1}}],[\"只有当a或b发生变化时\",{\"1\":{\"41\":1}}],[\"只有当count发生变化时\",{\"1\":{\"41\":1}}],[\"只有消费者组件\",{\"1\":{\"37\":1}}],[\"只需保证结束标识与开始标识一致\",{\"1\":{\"528\":1}}],[\"只需提供模块的名称即可\",{\"1\":{\"509\":1}}],[\"只需要在路由配置中修改相应路由对象的path\",{\"1\":{\"417\":1}}],[\"只需要编写一个函数\",{\"1\":{\"18\":1}}],[\"只需在函数体中直接返回jsx\",{\"1\":{\"21\":1}}],[\"只需按照以下步骤操作\",{\"1\":{\"16\":1}}],[\"只更新需要更新的部分\",{\"1\":{\"459\":1}}],[\"只更新需要改变的部分\",{\"1\":{\"11\":1}}],[\"只更新真正需要变动的部分\",{\"1\":{\"45\":1}}],[\"只更新变化的部分\",{\"1\":{\"8\":1}}],[\"只关注view层\",{\"1\":{\"9\":1}}],[\"缺点\",{\"1\":{\"9\":1}}],[\"总结一下\",{\"1\":{\"310\":1,\"330\":1,\"401\":3}}],[\"总结而言\",{\"1\":{\"63\":1,\"70\":1,\"98\":1,\"357\":1,\"360\":1}}],[\"总结起来\",{\"1\":{\"54\":1,\"56\":1,\"401\":1}}],[\"总结来说\",{\"1\":{\"32\":1,\"33\":1,\"280\":1,\"368\":1}}],[\"总结\",{\"1\":{\"20\":1,\"22\":1,\"273\":1,\"358\":1,\"414\":1}}],[\"总的来说\",{\"1\":{\"18\":1,\"45\":1,\"128\":1,\"341\":1,\"404\":1}}],[\"总而言之\",{\"1\":{\"9\":1,\"174\":1,\"340\":1,\"343\":1}}],[\"总之\",{\"1\":{\"8\":1,\"10\":1,\"203\":1,\"327\":1,\"351\":1,\"363\":1,\"401\":1,\"434\":1,\"448\":1,\"506\":1}}],[\"大小为\",{\"1\":{\"598\":1}}],[\"大小和错误代码\",{\"1\":{\"581\":1}}],[\"大小等\",{\"1\":{\"211\":1}}],[\"大大简化了状态的管理和维护\",{\"1\":{\"404\":1}}],[\"大大提高了开发效率和代码的复用性\",{\"1\":{\"9\":1}}],[\"大多数数据库都有官方的驱动程序或第三方库\",{\"1\":{\"369\":1}}],[\"大量的局部变量\",{\"1\":{\"277\":1}}],[\"大内存容量\",{\"1\":{\"138\":1}}],[\"大于8kb的图片将会使用file\",{\"1\":{\"473\":1}}],[\"大于运算符\",{\"1\":{\"254\":2,\"553\":1}}],[\"大于号\",{\"1\":{\"213\":1}}],[\"大于等于运算符\",{\"1\":{\"254\":2}}],[\"大于等于\",{\"1\":{\"135\":1}}],[\"大于\",{\"1\":{\"135\":1,\"553\":1}}],[\"大驼峰命名法\",{\"1\":{\"91\":1}}],[\"大写或小写\",{\"1\":{\"91\":1}}],[\"大型应用的复杂性\",{\"1\":{\"9\":1}}],[\"大规模的用户界面\",{\"1\":{\"8\":1}}],[\"借助react\",{\"1\":{\"9\":1}}],[\"提示\",{\"1\":{\"515\":1}}],[\"提取公共模块等\",{\"1\":{\"479\":1}}],[\"提取公共代码是一种有效的代码重用和组织的方法\",{\"1\":{\"466\":1}}],[\"提取公共代码是一种软件工程的最佳实践\",{\"1\":{\"466\":1}}],[\"提取公共代码\",{\"0\":{\"466\":1}}],[\"提取的公共代码应该具有清晰的命名和文档说明\",{\"1\":{\"466\":1}}],[\"提取css到独立文件等\",{\"1\":{\"457\":1}}],[\"提取css为独立的文件\",{\"1\":{\"456\":1}}],[\"提取出来\",{\"1\":{\"97\":1}}],[\"提升您的开发效率\",{\"1\":{\"509\":1}}],[\"提升轮询性能\",{\"1\":{\"497\":1}}],[\"提升开发效率\",{\"1\":{\"425\":1}}],[\"提升用户的体验\",{\"1\":{\"416\":1}}],[\"提升用户的交互体验和网页的响应速度\",{\"1\":{\"340\":1}}],[\"提升用户体验\",{\"1\":{\"51\":1,\"342\":1}}],[\"提升了代码的性能和用户体验\",{\"1\":{\"264\":1}}],[\"提交和获取方法\",{\"1\":{\"444\":1}}],[\"提交和获取方法需要通过模块名来访问\",{\"1\":{\"444\":1}}],[\"提交和获取方法时\",{\"1\":{\"444\":1}}],[\"提交变异\",{\"1\":{\"441\":1}}],[\"提交消息等\",{\"1\":{\"334\":1}}],[\"提交文件\",{\"1\":{\"334\":1}}],[\"提交\",{\"1\":{\"216\":1,\"338\":1,\"580\":1}}],[\"提交给标准化组织\",{\"1\":{\"164\":1}}],[\"提交事务\",{\"1\":{\"137\":1}}],[\"提交事件不再重载页面\",{\"1\":{\"70\":1}}],[\"提交表单可以使用表单元素内的提交按钮\",{\"1\":{\"30\":1}}],[\"提交表单\",{\"1\":{\"30\":1}}],[\"提前请求和加载可能需要的数据\",{\"1\":{\"55\":1}}],[\"提高可维护性并实现面向对象的开发\",{\"1\":{\"592\":1}}],[\"提高程序的可靠性和稳定性\",{\"1\":{\"589\":1}}],[\"提高程序的性能和用户体验\",{\"1\":{\"322\":1}}],[\"提高初始加载速度\",{\"1\":{\"504\":1}}],[\"提高系统的响应速度和效率\",{\"1\":{\"465\":1}}],[\"提高前端开发的效率和项目的可维护性\",{\"1\":{\"463\":1}}],[\"提高应用程序的响应能力\",{\"1\":{\"511\":1}}],[\"提高应用程序的加载速度和性能\",{\"1\":{\"453\":1,\"458\":1}}],[\"提高应用程序的性能\",{\"1\":{\"47\":1,\"458\":1}}],[\"提高效率\",{\"1\":{\"342\":2}}],[\"提高代码质量\",{\"1\":{\"466\":1}}],[\"提高代码质量和开发效率\",{\"1\":{\"333\":1}}],[\"提高代码管理和开发效率\",{\"1\":{\"336\":1}}],[\"提高代码管理的效率\",{\"1\":{\"334\":1}}],[\"提高代码的复用性\",{\"1\":{\"458\":1}}],[\"提高代码的复用性和灵活性\",{\"1\":{\"267\":1}}],[\"提高代码的安全性和可维护性\",{\"1\":{\"327\":1}}],[\"提高代码的可靠性和可读性\",{\"1\":{\"319\":1}}],[\"提高代码的可靠性和可维护性\",{\"1\":{\"312\":1}}],[\"提高代码的可读性\",{\"1\":{\"313\":1,\"466\":1,\"604\":1}}],[\"提高代码的可读性和可维护性\",{\"1\":{\"310\":1,\"312\":1,\"435\":1}}],[\"提高代码的可读性和维护性\",{\"1\":{\"165\":1}}],[\"提高代码的可维护性和可测试性\",{\"1\":{\"400\":1}}],[\"提高代码的可维护性和可重用性\",{\"1\":{\"56\":1}}],[\"提高代码的可维护性和复用性\",{\"1\":{\"268\":1}}],[\"提高吞吐量和增强系统的可伸缩性\",{\"1\":{\"138\":1}}],[\"提高数据库的性能和响应能力\",{\"1\":{\"131\":1}}],[\"提高列表渲染的效率\",{\"1\":{\"70\":1}}],[\"提高渲染效率\",{\"1\":{\"70\":1}}],[\"提高开发效率\",{\"1\":{\"63\":1,\"88\":1,\"97\":2,\"316\":1,\"460\":1}}],[\"提高开发效率和可维护性\",{\"1\":{\"404\":1}}],[\"提高开发效率和代码的可维护性\",{\"1\":{\"327\":1}}],[\"提高开发效率和ui一致性\",{\"1\":{\"56\":1}}],[\"提高开发效率和提供更好的用户体验等优势\",{\"1\":{\"45\":1}}],[\"提高用户体验\",{\"1\":{\"55\":2,\"349\":1}}],[\"提高页面的响应性能\",{\"1\":{\"57\":1}}],[\"提高页面的响应性\",{\"1\":{\"57\":1}}],[\"提高页面的响应速度\",{\"1\":{\"54\":1}}],[\"提高页面加载速度\",{\"1\":{\"55\":1}}],[\"提高加载速度\",{\"1\":{\"54\":1}}],[\"提高网页加载速度和用户体验\",{\"1\":{\"54\":1}}],[\"提高网页加载速度和用户体验的一种常用技术\",{\"1\":{\"54\":1}}],[\"提高网页加载速度\",{\"1\":{\"54\":1}}],[\"提高滚动的性能和响应速度\",{\"1\":{\"53\":1}}],[\"提高执行效率\",{\"1\":{\"52\":1}}],[\"提高react应用程序的性能和响应性\",{\"1\":{\"49\":1}}],[\"提高性能和响应速度\",{\"1\":{\"358\":1}}],[\"提高性能和效率\",{\"1\":{\"358\":1}}],[\"提高性能和减少延迟\",{\"1\":{\"356\":1}}],[\"提高性能和加载速度\",{\"1\":{\"201\":1}}],[\"提高性能和用户体验\",{\"1\":{\"46\":1}}],[\"提高性能并提供更好的用户体验\",{\"1\":{\"126\":1}}],[\"提高性能\",{\"1\":{\"45\":1,\"47\":1,\"49\":1,\"52\":1,\"443\":1}}],[\"提高了资源利用率和加载速度\",{\"1\":{\"483\":1}}],[\"提高了网页的加载速度和响应速度\",{\"1\":{\"342\":1}}],[\"提高了用户的交互体验\",{\"1\":{\"342\":1}}],[\"提高了用户体验和网页性能\",{\"1\":{\"341\":1}}],[\"提高了代码的可维护性和可测试性\",{\"1\":{\"428\":1}}],[\"提高了代码的可维护性和可读性\",{\"1\":{\"417\":1}}],[\"提高了代码的可维护性和扩展性\",{\"1\":{\"426\":1}}],[\"提高了代码的可维护性\",{\"1\":{\"312\":1}}],[\"提高了代码的可读性和维护性\",{\"1\":{\"99\":1}}],[\"提高了开发效率\",{\"1\":{\"45\":2,\"417\":1}}],[\"提高了应用的性能和响应速度\",{\"1\":{\"128\":1}}],[\"提高了应用的性能\",{\"1\":{\"9\":1}}],[\"提高了性能并减少了不必要的更新\",{\"1\":{\"434\":1}}],[\"提高了性能和响应速度\",{\"1\":{\"358\":1}}],[\"提高了性能\",{\"1\":{\"8\":1,\"9\":1}}],[\"提供一种方法顺序访问一个聚合对象中各个元素\",{\"1\":{\"592\":1}}],[\"提供一个全局的\",{\"1\":{\"400\":1}}],[\"提供通用的实现逻辑\",{\"1\":{\"591\":1}}],[\"提供的一种更方便的迭代器实现方式\",{\"1\":{\"582\":1}}],[\"提供的一种高级功能\",{\"1\":{\"94\":1}}],[\"提供的导航组件\",{\"1\":{\"393\":1}}],[\"提供更好的调试和错误追踪能力\",{\"1\":{\"459\":1}}],[\"提供更好的代码组织\",{\"1\":{\"434\":1}}],[\"提供更好的工具支持和开发体验\",{\"1\":{\"201\":1}}],[\"提供更高级的抽象和功能\",{\"1\":{\"272\":1}}],[\"提供关联文本以增加可用性\",{\"1\":{\"246\":1}}],[\"提供适当的样式和布局\",{\"1\":{\"157\":1}}],[\"提供备份和恢复数据库的工具和机制\",{\"1\":{\"131\":1}}],[\"提供不同的存储机制和特性\",{\"1\":{\"131\":1}}],[\"提供索引\",{\"1\":{\"131\":1}}],[\"提供数据库复制和主从复制的功能\",{\"1\":{\"131\":1}}],[\"提供较高的视觉质量和细节清晰度\",{\"1\":{\"54\":1}}],[\"提供稳定的标识符\",{\"1\":{\"46\":1}}],[\"提供用户反馈\",{\"1\":{\"33\":1}}],[\"提供了组件化的结构\",{\"1\":{\"604\":1}}],[\"提供了几种表示回调或可调用类型的方式\",{\"1\":{\"539\":1}}],[\"提供了几种响应式的图形化和绘图功能\",{\"1\":{\"237\":1}}],[\"提供了丰富的内置模块\",{\"1\":{\"506\":1}}],[\"提供了丰富的功能和插件体系\",{\"1\":{\"363\":1}}],[\"提供了强大的操作符和组合方式\",{\"1\":{\"405\":1}}],[\"提供了在\",{\"1\":{\"394\":1}}],[\"提供了大量的文档和资源\",{\"1\":{\"363\":1}}],[\"提供了大量的css类和组件\",{\"1\":{\"160\":1}}],[\"提供了简化和封装了许多常见的javascript操作\",{\"1\":{\"343\":1}}],[\"提供了\",{\"1\":{\"328\":1}}],[\"提供了许多有用的特性和工具\",{\"1\":{\"448\":1}}],[\"提供了许多高级类型\",{\"1\":{\"319\":1}}],[\"提供了许多第三方组件和库\",{\"1\":{\"10\":1}}],[\"提供了封装\",{\"1\":{\"278\":1}}],[\"提供了多种元素来嵌入多媒体内容\",{\"1\":{\"220\":1}}],[\"提供了多种标签和方式来嵌入外部内容\",{\"1\":{\"219\":1}}],[\"提供了一组功能丰富的库和工具\",{\"1\":{\"604\":1}}],[\"提供了一组实用的javascript函数\",{\"1\":{\"509\":1}}],[\"提供了一组静态方法\",{\"1\":{\"190\":1}}],[\"提供了一种基于\",{\"1\":{\"410\":1}}],[\"提供了一种简洁地遍历迭代器的方法\",{\"1\":{\"185\":1}}],[\"提供了一系列的数组方法\",{\"1\":{\"257\":1}}],[\"提供了一些组件和\",{\"1\":{\"374\":1}}],[\"提供了一些常用的内置中间件\",{\"1\":{\"366\":1}}],[\"提供了一些功能来提高网页的可访问性\",{\"1\":{\"246\":1}}],[\"提供了一些功能来支持\",{\"1\":{\"243\":1}}],[\"提供了一些功能来支持全球化\",{\"1\":{\"235\":1}}],[\"提供了一些方法来实现响应式图片\",{\"1\":{\"239\":1}}],[\"提供了一些方法来实现这一目的\",{\"1\":{\"238\":1}}],[\"提供了对二进制数据的高效读写操作\",{\"1\":{\"181\":1}}],[\"提供了易于阅读和维护的代码\",{\"1\":{\"160\":1}}],[\"提供了更清晰和有用的错误信息\",{\"1\":{\"497\":1}}],[\"提供了更好的用户体验和维护性\",{\"1\":{\"464\":1}}],[\"提供了更好的错误捕获和报告方式\",{\"1\":{\"99\":1}}],[\"提供了更强大的类型检查和工具支持\",{\"1\":{\"309\":1}}],[\"提供了更多强大和丰富的功能\",{\"1\":{\"225\":1}}],[\"提供了更多的特性和灵活性\",{\"1\":{\"203\":1}}],[\"提供了更准确的类型推断和代码编辑功能\",{\"1\":{\"99\":1}}],[\"提供了更细粒度的响应追踪\",{\"1\":{\"99\":1}}],[\"提供了更详细的性能指标和测试报告\",{\"1\":{\"58\":1}}],[\"提供了类型推导和完整的类型定义\",{\"1\":{\"99\":1}}],[\"提供了单文件组件\",{\"1\":{\"92\":1}}],[\"提供了性能分析和时间线记录功能\",{\"1\":{\"58\":1}}],[\"提供了完整的解决方案\",{\"1\":{\"9\":1}}],[\"如设置最小值\",{\"1\":{\"603\":1}}],[\"如$\",{\"1\":{\"603\":1}}],[\"如pdo\",{\"1\":{\"600\":1}}],[\"如purecomponent\",{\"1\":{\"9\":1}}],[\"如exception\",{\"1\":{\"589\":1}}],[\"如es模块中的import\",{\"1\":{\"327\":1}}],[\"如es模块中的export\",{\"1\":{\"327\":1}}],[\"如记录到日志或显示错误信息给用户\",{\"1\":{\"588\":1}}],[\"如记录到日志或发送邮件通知管理员\",{\"1\":{\"587\":1}}],[\"如发送电子邮件或保存到数据库\",{\"1\":{\"580\":1}}],[\"如确认页面或成功页面\",{\"1\":{\"580\":1}}],[\"如跨站点脚本攻击\",{\"1\":{\"580\":1}}],[\"如保存在用户浏览器中的登录凭证\",{\"1\":{\"521\":1}}],[\"如请求的url\",{\"1\":{\"521\":1}}],[\"如mysql\",{\"1\":{\"513\":1}}],[\"如latest\",{\"1\":{\"510\":1}}],[\"如localstorage或sessionstorage\",{\"1\":{\"55\":1}}],[\"如lodash\",{\"1\":{\"52\":1}}],[\"如lodash中的isequal\",{\"1\":{\"48\":1}}],[\"如创建\",{\"1\":{\"509\":1}}],[\"如terser\",{\"1\":{\"504\":1}}],[\"如teleport\",{\"1\":{\"99\":1}}],[\"如基于入口点\",{\"1\":{\"493\":1}}],[\"如基本身份验证\",{\"1\":{\"355\":1}}],[\"如需了解更多详细信息\",{\"1\":{\"480\":1,\"483\":1}}],[\"如开发环境或测试环境\",{\"1\":{\"468\":1}}],[\"如名称\",{\"1\":{\"464\":1}}],[\"如限制文件大小\",{\"1\":{\"463\":1}}],[\"如优化输出\",{\"1\":{\"456\":1}}],[\"如代码压缩\",{\"1\":{\"457\":1}}],[\"如代码分割\",{\"1\":{\"454\":1}}],[\"如代码优化\",{\"1\":{\"453\":1,\"488\":1}}],[\"如何进行缓存分组以及缓存的策略\",{\"1\":{\"497\":1}}],[\"如何在使用typescript时使用vuex\",{\"1\":{\"444\":1}}],[\"如何在vue组件中使用vuex\",{\"0\":{\"441\":1}}],[\"如何处理多个模块之间的通信\",{\"1\":{\"444\":1}}],[\"如何处理表单和非响应式数据\",{\"0\":{\"442\":1}}],[\"如何优化vuex应用程序性能\",{\"0\":{\"443\":1}}],[\"如何划分和组织模块\",{\"0\":{\"435\":1}}],[\"如何安装和配置vuex\",{\"0\":{\"427\":1}}],[\"如登录api调用\",{\"1\":{\"432\":1}}],[\"如有任何疑问\",{\"1\":{\"415\":1}}],[\"如更新ui\",{\"1\":{\"401\":1}}],[\"如用户登录时输入的用户名和密码\",{\"1\":{\"521\":1}}],[\"如用户名和密码\",{\"1\":{\"370\":1}}],[\"如用户交互事件\",{\"1\":{\"270\":1}}],[\"如查询数据\",{\"1\":{\"369\":1}}],[\"如插入数据\",{\"1\":{\"369\":1}}],[\"如user\",{\"1\":{\"360\":1}}],[\"如usestate\",{\"1\":{\"43\":1}}],[\"如防止跨站脚本攻击\",{\"1\":{\"359\":1}}],[\"如过期时间\",{\"1\":{\"357\":1}}],[\"如缓存的有效期\",{\"1\":{\"355\":1,\"356\":1}}],[\"如缓存服务器\",{\"1\":{\"138\":1}}],[\"如浏览器\",{\"1\":{\"355\":1,\"359\":1}}],[\"如浏览器或\",{\"1\":{\"276\":1}}],[\"如头部信息\",{\"1\":{\"353\":1}}],[\"如gdb\",{\"1\":{\"372\":1}}],[\"如google\",{\"1\":{\"370\":1}}],[\"如gzip\",{\"1\":{\"355\":1}}],[\"如get\",{\"1\":{\"352\":1}}],[\"如github\",{\"1\":{\"336\":1,\"337\":1}}],[\"如gtmetrix\",{\"1\":{\"58\":1}}],[\"如封装\",{\"1\":{\"326\":1}}],[\"如联合类型\",{\"1\":{\"310\":1}}],[\"如访问元素\",{\"1\":{\"310\":1}}],[\"如js\",{\"1\":{\"483\":1}}],[\"如json\",{\"1\":{\"136\":1,\"370\":1,\"454\":1}}],[\"如javascript文件\",{\"1\":{\"456\":1}}],[\"如junit\",{\"1\":{\"372\":1}}],[\"如jquery\",{\"1\":{\"340\":1}}],[\"如jquery和其他库\",{\"1\":{\"307\":1}}],[\"如函数式编程或回调函数\",{\"1\":{\"590\":1}}],[\"如函数\",{\"1\":{\"281\":1,\"372\":1}}],[\"如事件驱动的用户界面或实时数据流应用\",{\"1\":{\"278\":1}}],[\"如事件类型\",{\"1\":{\"263\":1}}],[\"如返回地址\",{\"1\":{\"277\":1}}],[\"如大型数据集\",{\"1\":{\"276\":1}}],[\"如清除定时器\",{\"1\":{\"276\":1}}],[\"如全局对象或活动执行上下文\",{\"1\":{\"276\":1}}],[\"如对象和数组等\",{\"1\":{\"273\":2}}],[\"如对搜索引擎优化\",{\"1\":{\"63\":1}}],[\"如数据一致性和缓存更新等\",{\"1\":{\"465\":1}}],[\"如数据库连接\",{\"1\":{\"592\":1}}],[\"如数据库\",{\"1\":{\"357\":1}}],[\"如数字\",{\"1\":{\"273\":2}}],[\"如数组或字符串\",{\"1\":{\"173\":1}}],[\"如数组\",{\"1\":{\"47\":1,\"48\":1}}],[\"如网络请求\",{\"1\":{\"272\":1}}],[\"如树的遍历\",{\"1\":{\"269\":1}}],[\"如devtool\",{\"1\":{\"457\":1}}],[\"如document\",{\"1\":{\"266\":1}}],[\"如date\",{\"1\":{\"136\":1}}],[\"如data\",{\"1\":{\"91\":1}}],[\"如显示图片\",{\"1\":{\"264\":1}}],[\"如添加\",{\"1\":{\"257\":1}}],[\"如加法\",{\"1\":{\"254\":1}}],[\"如使用\",{\"1\":{\"253\":1}}],[\"如使用花括号\",{\"1\":{\"14\":1}}],[\"如0\",{\"1\":{\"252\":1}}],[\"如图片\",{\"1\":{\"455\":1,\"476\":1,\"491\":1}}],[\"如图标\",{\"1\":{\"243\":1}}],[\"如图像\",{\"1\":{\"220\":1,\"366\":1}}],[\"如阿拉伯语\",{\"1\":{\"235\":1}}],[\"如绝对路径\",{\"1\":{\"224\":1}}],[\"如框架\",{\"1\":{\"219\":1}}],[\"如颜色\",{\"1\":{\"211\":1}}],[\"如文件名\",{\"1\":{\"521\":1,\"581\":1}}],[\"如文件读取\",{\"1\":{\"511\":1}}],[\"如文件\",{\"1\":{\"270\":1}}],[\"如文档的字符编码\",{\"1\":{\"208\":1}}],[\"如文本框\",{\"1\":{\"216\":1}}],[\"如文本\",{\"1\":{\"146\":1}}],[\"如bcrypt或argon2\",{\"1\":{\"602\":1}}],[\"如babel\",{\"1\":{\"467\":1}}],[\"如browserify\",{\"1\":{\"203\":1}}],[\"如blob\",{\"1\":{\"136\":1}}],[\"如wordpress的插件系统\",{\"1\":{\"464\":1}}],[\"如webpack\",{\"1\":{\"201\":1,\"203\":1,\"454\":1,\"462\":1,\"504\":1}}],[\"如width和height\",{\"1\":{\"146\":2}}],[\"如字符串\",{\"1\":{\"185\":1}}],[\"如迭代器模式\",{\"1\":{\"184\":1}}],[\"如sh\",{\"1\":{\"527\":1}}],[\"如sentry\",{\"1\":{\"372\":1}}],[\"如self或that\",{\"1\":{\"262\":1}}],[\"如symbol\",{\"1\":{\"174\":2}}],[\"如svg\",{\"1\":{\"54\":1}}],[\"如+\",{\"1\":{\"173\":1}}],[\"如image\",{\"1\":{\"504\":1}}],[\"如if语句\",{\"1\":{\"165\":1}}],[\"如int\",{\"1\":{\"136\":1}}],[\"如innodb\",{\"1\":{\"131\":1}}],[\"如变量\",{\"1\":{\"161\":1}}],[\"如手机\",{\"1\":{\"157\":1}}],[\"如屏幕尺寸\",{\"1\":{\"157\":1}}],[\"如媒体查询\",{\"1\":{\"156\":1}}],[\"如匀速\",{\"1\":{\"152\":1}}],[\"如百分比\",{\"1\":{\"148\":1}}],[\"如下划线\",{\"1\":{\"144\":1}}],[\"如慢查询日志\",{\"1\":{\"138\":1}}],[\"如响应时间\",{\"1\":{\"138\":1}}],[\"如快速的磁盘驱动器\",{\"1\":{\"138\":1}}],[\"如读未提交\",{\"1\":{\"137\":1}}],[\"如读取已修改但未提交的数据\",{\"1\":{\"137\":1}}],[\"如varchar\",{\"1\":{\"136\":1}}],[\"如filter\",{\"1\":{\"603\":1}}],[\"如fetch\",{\"1\":{\"266\":1}}],[\"如float\",{\"1\":{\"136\":1}}],[\"如formik\",{\"1\":{\"32\":1}}],[\"如=\",{\"1\":{\"135\":1}}],[\"如只备份结构而不包含数据\",{\"1\":{\"133\":1}}],[\"如命令行客户端或图形界面工具\",{\"1\":{\"132\":1}}],[\"如组件的生命周期钩子\",{\"1\":{\"97\":1}}],[\"如redis\",{\"1\":{\"601\":1}}],[\"如redux\",{\"1\":{\"385\":1,\"401\":1,\"406\":1}}],[\"如requirejs\",{\"1\":{\"56\":1}}],[\"如react\",{\"1\":{\"9\":1,\"400\":1,\"480\":1}}],[\"如api调用\",{\"1\":{\"432\":2,\"433\":1}}],[\"如and\",{\"1\":{\"135\":1}}],[\"如ajax\",{\"1\":{\"55\":1}}],[\"如adobe\",{\"1\":{\"54\":1}}],[\"如html\",{\"1\":{\"55\":1,\"465\":1}}],[\"如列表或表格\",{\"1\":{\"53\":1}}],[\"如cpu架构\",{\"1\":{\"509\":1}}],[\"如css\",{\"1\":{\"455\":1,\"463\":1}}],[\"如commonjs\",{\"1\":{\"448\":1}}],[\"如componentdidmount\",{\"1\":{\"18\":1}}],[\"如content\",{\"1\":{\"360\":1}}],[\"如cookie或url重写\",{\"1\":{\"357\":1}}],[\"如cover和contain\",{\"1\":{\"158\":1}}],[\"如column\",{\"1\":{\"154\":1}}],[\"如count\",{\"1\":{\"135\":1}}],[\"如childcomponent\",{\"1\":{\"37\":1}}],[\"如红色边框或背景色变化等\",{\"1\":{\"32\":1}}],[\"如\",{\"1\":{\"27\":1,\"110\":1,\"140\":1,\"192\":1,\"196\":1,\"213\":1,\"216\":1,\"218\":1,\"235\":1,\"237\":1,\"241\":1,\"281\":1,\"310\":1,\"311\":1,\"328\":1,\"368\":2,\"391\":1,\"415\":1,\"521\":1}}],[\"如触发元素\",{\"1\":{\"25\":1,\"27\":1}}],[\"如点击事件\",{\"1\":{\"275\":1}}],[\"如点击\",{\"1\":{\"25\":1}}],[\"如日志记录\",{\"1\":{\"23\":1}}],[\"如取消订阅或清除计时器\",{\"1\":{\"22\":1}}],[\"如条件渲染\",{\"1\":{\"15\":1}}],[\"如果$x不存在或为null\",{\"1\":{\"604\":1}}],[\"如果$x存在\",{\"1\":{\"604\":1}}],[\"如果已经包含过该文件\",{\"1\":{\"599\":1}}],[\"如果包含的文件不存在或出现错误\",{\"1\":{\"599\":1}}],[\"如果包含则返回\",{\"1\":{\"170\":1}}],[\"如果表单提交后出现错误\",{\"1\":{\"580\":1}}],[\"如果表单较简单或需要快速开发\",{\"1\":{\"31\":1}}],[\"如果尝试调用的函数不存在\",{\"1\":{\"569\":1}}],[\"如果设置为\",{\"1\":{\"519\":1}}],[\"如果设置成功\",{\"1\":{\"191\":1}}],[\"如果输出显示了npm的版本号\",{\"1\":{\"507\":1}}],[\"如果输出显示了node\",{\"1\":{\"507\":1}}],[\"如果您的表单包含文件上传字段\",{\"1\":{\"580\":1}}],[\"如果您使用windows系统\",{\"1\":{\"507\":1}}],[\"如果您想要手动选择不同的版本\",{\"1\":{\"507\":1}}],[\"如果您不需要最新功能\",{\"1\":{\"507\":1}}],[\"如果模块加载失败\",{\"1\":{\"467\":1}}],[\"如果热替换失败\",{\"1\":{\"459\":1}}],[\"如果热替换成功\",{\"1\":{\"459\":1}}],[\"如果vuex的模块很多或很复杂\",{\"1\":{\"443\":1}}],[\"如果应用需要在刷新页面后保持状态\",{\"1\":{\"443\":1}}],[\"如果应用程序比较复杂\",{\"1\":{\"426\":1}}],[\"如果应用程序的状态由多个部分组成\",{\"1\":{\"402\":1}}],[\"如果路由参数已更新\",{\"1\":{\"421\":1}}],[\"如果路径既不以斜杠\",{\"1\":{\"328\":2}}],[\"如果路径以点\",{\"1\":{\"328\":2}}],[\"如果路径以斜杠\",{\"1\":{\"328\":2}}],[\"如果某个路由对象的redirect属性的值不为空\",{\"1\":{\"418\":1}}],[\"如果某个异步任务失败\",{\"1\":{\"198\":1}}],[\"如果action类型不匹配任何已知的类型\",{\"1\":{\"401\":1}}],[\"如果api需要访问和操作数据\",{\"1\":{\"371\":1}}],[\"如果响应是html页面\",{\"1\":{\"360\":1}}],[\"如果验证通过\",{\"1\":{\"359\":1}}],[\"如果一切顺利\",{\"1\":{\"508\":1}}],[\"如果一段时间内没有新的请求\",{\"1\":{\"358\":1}}],[\"如果一个组件只依赖于部分props或state\",{\"1\":{\"49\":1}}],[\"如果发现自己的缓存仍然有效\",{\"1\":{\"356\":1}}],[\"如果发生了错误\",{\"1\":{\"196\":1}}],[\"如果有大量数据要加载\",{\"1\":{\"349\":1}}],[\"如果服务器返回的是xml格式\",{\"1\":{\"341\":1}}],[\"如果分支上的修改尚未合并\",{\"1\":{\"335\":1}}],[\"如果之前已经将某个文件纳入版本控制\",{\"1\":{\"334\":1}}],[\"如果之前已经有相同描述的注册symbol存在\",{\"1\":{\"174\":1}}],[\"如果我们不希望禁用类型检查\",{\"1\":{\"310\":1}}],[\"如果字段不存在\",{\"1\":{\"282\":1}}],[\"如果是post请求\",{\"1\":{\"360\":1}}],[\"如果是对象\",{\"1\":{\"281\":1}}],[\"如果是数组\",{\"1\":{\"281\":1}}],[\"如果是基本类型或\",{\"1\":{\"281\":2}}],[\"如果是非\",{\"1\":{\"196\":1}}],[\"如果函数中声明了大量的局部变量\",{\"1\":{\"277\":1}}],[\"如果递归过深\",{\"1\":{\"269\":1}}],[\"如果对象本身没有定义这个属性\",{\"1\":{\"267\":1}}],[\"如果对象本身没有定义这些属性或方法\",{\"1\":{\"267\":1}}],[\"如果加载过程中出现错误\",{\"1\":{\"264\":1}}],[\"如果队列不为空\",{\"1\":{\"264\":1}}],[\"如果队列为空\",{\"1\":{\"264\":1}}],[\"如果被该方法调用\",{\"1\":{\"262\":1}}],[\"如果被传递的是一个原始值\",{\"1\":{\"195\":1}}],[\"如果找到了匹配的标识符\",{\"1\":{\"261\":1}}],[\"如果找不到则返回\",{\"1\":{\"257\":1}}],[\"如果没有错误\",{\"1\":{\"580\":2}}],[\"如果没有更多内容\",{\"1\":{\"349\":1}}],[\"如果没有提供文件扩展名\",{\"1\":{\"328\":1}}],[\"如果没有显式添加类型注解\",{\"1\":{\"315\":1}}],[\"如果没有匹配则返回null\",{\"1\":{\"279\":1}}],[\"如果没有及时清除或停止\",{\"1\":{\"275\":1}}],[\"如果没有找到匹配的标识符\",{\"1\":{\"261\":1}}],[\"如果没有传递参数给greet函数\",{\"1\":{\"258\":1}}],[\"如果没有传递相应参数的值\",{\"1\":{\"258\":1}}],[\"如果没有依赖的数据发生变化\",{\"1\":{\"107\":1}}],[\"如果条件为真\",{\"1\":{\"254\":1}}],[\"如果其中一个操作数是字符串\",{\"1\":{\"252\":1}}],[\"如果不能转换\",{\"1\":{\"252\":1}}],[\"如果装饰器应用于构造函数的参数\",{\"1\":{\"204\":1}}],[\"如果导入的模块内容在当前模块中有命名冲突\",{\"1\":{\"202\":1}}],[\"如果任何一个\",{\"1\":{\"193\":1}}],[\"如果想切换到ie盒模型\",{\"1\":{\"146\":1}}],[\"如果事务中的任何操作失败\",{\"1\":{\"137\":1}}],[\"如果参数是一个ref对象\",{\"1\":{\"102\":1}}],[\"如果state对象中的某个属性是另一个嵌套的响应式对象\",{\"1\":{\"102\":1}}],[\"如果每个组件都使用同一个\",{\"1\":{\"90\":1}}],[\"如果两个样式对象中有相同的属性\",{\"1\":{\"85\":1}}],[\"如果两个条件都不满足\",{\"1\":{\"82\":3}}],[\"如果\",{\"1\":{\"82\":2,\"196\":2,\"599\":1}}],[\"如果要取消订阅\",{\"1\":{\"401\":1}}],[\"如果要具体描述对象的属性和类型\",{\"1\":{\"310\":1}}],[\"如果要添加文件\",{\"1\":{\"282\":1}}],[\"如果要修改属性的值\",{\"1\":{\"102\":1}}],[\"如果要将现有的vue\",{\"1\":{\"99\":1}}],[\"如果要更新部分的\",{\"1\":{\"70\":1}}],[\"如果要返回多个相邻的元素\",{\"1\":{\"15\":1}}],[\"如果列表中的元素具有可变状态或用户的输入绑定\",{\"1\":{\"70\":1}}],[\"如果在异步操作过程中发生错误\",{\"1\":{\"405\":1}}],[\"如果在异步函数中的任何地方抛出了一个异常\",{\"1\":{\"196\":1}}],[\"如果在一个类上应用了多个装饰器\",{\"1\":{\"324\":1}}],[\"如果在内部作用域中定义了一个与外部作用域中相同名称的变量\",{\"1\":{\"311\":1}}],[\"如果在具有\",{\"1\":{\"310\":1}}],[\"如果在同一个页面中同时使用多个javascript库\",{\"1\":{\"307\":1}}],[\"如果在作用域中声明了一个全局变量\",{\"1\":{\"275\":1}}],[\"如果在主线程中同步执行这些操作\",{\"1\":{\"264\":1}}],[\"如果在运行时条件很少改变\",{\"1\":{\"70\":1}}],[\"如果在初始渲染时条件为假\",{\"1\":{\"70\":1}}],[\"如果需要处理异步操作\",{\"1\":{\"406\":1}}],[\"如果需要进行异步操作\",{\"1\":{\"401\":1}}],[\"如果需要在多个服务器之间共享会话数据\",{\"1\":{\"357\":1}}],[\"如果需要在每个组件实例之间保持不同的模板状态\",{\"1\":{\"126\":1}}],[\"如果需要存储敏感信息\",{\"1\":{\"357\":1}}],[\"如果需要同时混入多个\",{\"1\":{\"330\":1}}],[\"如果需要与服务器进行交互或执行更复杂的验证逻辑\",{\"1\":{\"234\":1}}],[\"如果需要与主线程进行通信\",{\"1\":{\"57\":1}}],[\"如果需要延迟执行侦听器\",{\"1\":{\"110\":1}}],[\"如果需要修改依赖的数据\",{\"1\":{\"108\":1}}],[\"如果需要将嵌套的响应式对象转化为ref对象\",{\"1\":{\"102\":1}}],[\"如果需要非常频繁地切换\",{\"1\":{\"70\":1}}],[\"如果需要精确控制和处理表单数据\",{\"1\":{\"31\":1}}],[\"如果存在则直接返回缓存结果\",{\"1\":{\"52\":1}}],[\"如果返回一个字符串\",{\"1\":{\"387\":1}}],[\"如果返回true\",{\"1\":{\"48\":1}}],[\"如果返回false\",{\"1\":{\"48\":1}}],[\"如果props没有变化\",{\"1\":{\"47\":1}}],[\"如果当前和前一个渲染的props和state相等\",{\"1\":{\"47\":1}}],[\"如果多个人同时修改了同一文件的相同部分\",{\"1\":{\"337\":1}}],[\"如果多个\",{\"1\":{\"330\":1}}],[\"如果多个同名函数具有相同的参数列表\",{\"1\":{\"329\":1}}],[\"如果多个类具有相同的名称\",{\"1\":{\"329\":1}}],[\"如果多个命名空间具有相同的名称\",{\"1\":{\"329\":1}}],[\"如果多个接口具有相同的名称\",{\"1\":{\"329\":1}}],[\"如果多个混入对象具有相同的选项\",{\"1\":{\"97\":1}}],[\"如果多个元素共享相同的key值\",{\"1\":{\"46\":1}}],[\"如果多个子组件需要共享相同的数据\",{\"1\":{\"35\":1}}],[\"如果你使用像bootstrap\",{\"1\":{\"474\":1}}],[\"如果你使用css预处理器如sass\",{\"1\":{\"472\":1}}],[\"如果你使用函数式组件\",{\"1\":{\"49\":1}}],[\"如果你正在使用webpack的开发服务器\",{\"1\":{\"468\":1}}],[\"如果你需要在开发过程中使用开发服务器\",{\"1\":{\"475\":1}}],[\"如果你需要在不支持动态导入的浏览器环境中运行\",{\"1\":{\"467\":1}}],[\"如果你需要更复杂的设置或使用其他插件\",{\"1\":{\"444\":1}}],[\"如果你有其他问题\",{\"1\":{\"319\":1}}],[\"如果你有一个名为userprofile的组件\",{\"1\":{\"91\":1}}],[\"如果你希望自定义功能或扩展已有的jquery方法\",{\"1\":{\"298\":1}}],[\"如果你在自定义hooks中使用了其他的hooks\",{\"1\":{\"43\":1}}],[\"如果你创建了自定义hooks\",{\"1\":{\"43\":1}}],[\"如果子组件需要修改父组件传递的数据\",{\"1\":{\"36\":1}}],[\"如果尚未安装\",{\"1\":{\"1\":1}}],[\"如标签闭合\",{\"1\":{\"13\":1}}],[\"将json字符串转换回php数组或对象\",{\"1\":{\"604\":1}}],[\"将jquery的$符号赋给变量$j\",{\"1\":{\"307\":1}}],[\"将php数组或对象转换为json字符串\",{\"1\":{\"604\":1}}],[\"将新的数据插入到数据库中\",{\"1\":{\"600\":1}}],[\"将新版本的语法转换为向后兼容的版本\",{\"1\":{\"471\":1}}],[\"将应用程序分为模型\",{\"1\":{\"592\":1}}],[\"将应用程序拆分为多个小块\",{\"1\":{\"504\":1}}],[\"将应用程序拆分为多个组件\",{\"1\":{\"63\":1}}],[\"将错误记录到日志文件\",{\"1\":{\"586\":1}}],[\"将错误信息显示给用户\",{\"1\":{\"32\":1}}],[\"将日期时间字符串转换为\",{\"1\":{\"570\":1}}],[\"将结果传递回函数调用的地方\",{\"1\":{\"568\":1}}],[\"将产生一个警告\",{\"1\":{\"519\":1}}],[\"将模块添加到项目的devdependencies中\",{\"1\":{\"510\":1}}],[\"将模块添加到项目的dependencies中\",{\"1\":{\"510\":1}}],[\"将帮助您构建更强大\",{\"1\":{\"508\":1}}],[\"将编译结果缓存起来\",{\"1\":{\"504\":1}}],[\"将共享的库文件\",{\"1\":{\"480\":1}}],[\"将css代码从js文件中提取出来\",{\"1\":{\"476\":1}}],[\"将css文件转换为javascript模块\",{\"1\":{\"455\":1}}],[\"将常见的一段代码逻辑封装成一个函数或方法\",{\"1\":{\"466\":1}}],[\"将资源文件作为输入\",{\"1\":{\"463\":1}}],[\"将http请求代理到其他服务器\",{\"1\":{\"461\":1}}],[\"将html代码和javascript代码融合在一起\",{\"1\":{\"9\":1}}],[\"将通过hmr\",{\"1\":{\"459\":1}}],[\"将less代码转换为css\",{\"1\":{\"455\":1}}],[\"将经过css\",{\"1\":{\"455\":1}}],[\"将es6代码转换成es5等\",{\"1\":{\"453\":1}}],[\"将它们复制到输出目录并返回路径\",{\"1\":{\"455\":1}}],[\"将它们转换为模块可识别的文件\",{\"1\":{\"453\":1}}],[\"将它们相加并返回结果\",{\"1\":{\"258\":1}}],[\"将所有全局变量存储在一个名为\",{\"1\":{\"524\":1}}],[\"将所有的模块导入并进行注册\",{\"1\":{\"444\":1}}],[\"将所有http请求重定向到https\",{\"1\":{\"359\":1}}],[\"将异步逻辑放在vuex的动作中\",{\"1\":{\"443\":1}}],[\"将异步任务添加到任务队列\",{\"1\":{\"270\":1}}],[\"将每个页面或组件的状态和操作划分为独立的模块\",{\"1\":{\"435\":1}}],[\"将每个异步操作的结果存储在变量中并返回\",{\"1\":{\"196\":1}}],[\"将相关的逻辑放到同一个模块中\",{\"1\":{\"435\":1}}],[\"将相关的函数\",{\"1\":{\"327\":1}}],[\"将actions和mutations对象导出\",{\"1\":{\"433\":1}}],[\"将actions对象导出\",{\"1\":{\"432\":1}}],[\"将api部署到适当的服务器环境中\",{\"1\":{\"371\":1}}],[\"将mutation对象导出\",{\"1\":{\"431\":1}}],[\"将mycomponent注册为全局组件\",{\"1\":{\"91\":1}}],[\"将getter对象导出\",{\"1\":{\"430\":1}}],[\"将发起一个异步请求来获取该块\",{\"1\":{\"423\":1}}],[\"将发出类型错误\",{\"1\":{\"310\":1}}],[\"将显示与\",{\"1\":{\"412\":1}}],[\"将组件分为容器组件\",{\"1\":{\"407\":1}}],[\"将组件的数据需求和状态管理放在一个地方\",{\"1\":{\"407\":1}}],[\"将组件连接到redux\",{\"1\":{\"406\":1,\"407\":1}}],[\"将dispatch操作映射到组件的props\",{\"1\":{\"406\":1}}],[\"将sass\",{\"1\":{\"455\":1}}],[\"将state对象导出\",{\"1\":{\"429\":1}}],[\"将state映射到组件的props\",{\"1\":{\"406\":1}}],[\"将store实例注入vue实例\",{\"1\":{\"427\":1}}],[\"将store实例作为属性传递给vue对象的store选项\",{\"1\":{\"427\":1}}],[\"将store分割成模块\",{\"1\":{\"425\":1}}],[\"将session\",{\"1\":{\"357\":1}}],[\"将redux的store传递给它\",{\"1\":{\"406\":1}}],[\"将reducers和必要的中间件传递给store\",{\"1\":{\"406\":1}}],[\"将thunk中间件应用于store\",{\"1\":{\"405\":1}}],[\"将这些懒加载的组件传递给\",{\"1\":{\"397\":1}}],[\"将这些任务封装为一个新的\",{\"1\":{\"198\":1}}],[\"将会渲染settings组件\",{\"1\":{\"415\":1}}],[\"将会替换当前的路由而不是添加一个新的历史记录\",{\"1\":{\"393\":1}}],[\"将会导航到名为\",{\"1\":{\"393\":1}}],[\"将会立即触发\",{\"1\":{\"70\":1}}],[\"将触发一个带有提示消息的确认框\",{\"1\":{\"387\":1}}],[\"将用户划分为不同的角色\",{\"1\":{\"370\":1}}],[\"将静态文件和资源的目录指定为参数\",{\"1\":{\"368\":1}}],[\"将静态资源部署到全球分布的cdn节点上\",{\"1\":{\"55\":1}}],[\"将需要提供给客户端的静态文件和资源放置到该目录下\",{\"1\":{\"368\":1}}],[\"将全部资源升级为https\",{\"1\":{\"359\":1}}],[\"将全局指令注册为局部指令\",{\"1\":{\"70\":1}}],[\"将web应用程序整体加载到一个页面中\",{\"1\":{\"343\":1}}],[\"将函数名作为回调传递\",{\"1\":{\"539\":1}}],[\"将函数赋值给一个变量\",{\"1\":{\"313\":1}}],[\"将函数的输入和对应的输出结果进行缓存\",{\"1\":{\"52\":1}}],[\"将文件移动到指定目录\",{\"1\":{\"581\":1}}],[\"将文件恢复到上一次提交的状态\",{\"1\":{\"334\":1}}],[\"将文件对象传递给它\",{\"1\":{\"282\":1}}],[\"将文本括起来\",{\"1\":{\"251\":1}}],[\"将一组相关的函数和数据封装成一个类或模块\",{\"1\":{\"466\":1}}],[\"将一组相关的变量和函数封装在闭包中\",{\"1\":{\"268\":1}}],[\"将一个类的接口转换成客户端希望的另一个接口\",{\"1\":{\"592\":1}}],[\"将一个类型为\",{\"1\":{\"401\":1}}],[\"将一个或多个数组合并成一个新数组\",{\"1\":{\"578\":1}}],[\"将一个或多个元素添加到数组末尾\",{\"1\":{\"570\":1,\"578\":1}}],[\"将一个或多个元素添加到数组的开头\",{\"1\":{\"257\":1,\"578\":1}}],[\"将一个或多个元素添加到数组的末尾\",{\"1\":{\"257\":1}}],[\"将一些变量和函数封装起来\",{\"1\":{\"268\":1}}],[\"将使用默认值\",{\"1\":{\"258\":2}}],[\"将参数值传递给函数\",{\"1\":{\"258\":1}}],[\"将第三方库和应用程序代码分开打包\",{\"1\":{\"504\":1}}],[\"将第三方库\",{\"1\":{\"458\":1}}],[\"将第二个元素修改为\",{\"1\":{\"257\":1}}],[\"将第一个值除以第二个值\",{\"1\":{\"254\":1}}],[\"将指定的子字符串替换为新的子字符串\",{\"1\":{\"256\":1}}],[\"将数组中的元素顺序反转\",{\"1\":{\"578\":1}}],[\"将数组的所有元素连接成一个字符串\",{\"1\":{\"257\":1}}],[\"将数字转换为字符串\",{\"1\":{\"256\":1}}],[\"将数据库恢复到事务开始之前的状态\",{\"1\":{\"137\":1}}],[\"将字符串写入文件\",{\"1\":{\"570\":1}}],[\"将字符串转换为根据当前环境区域设置的小写形式\",{\"1\":{\"256\":1}}],[\"将字符串转换为根据当前环境区域设置的大写形式\",{\"1\":{\"256\":1}}],[\"将字符串转换为小写\",{\"1\":{\"256\":1}}],[\"将字符串转换为大写\",{\"1\":{\"256\":1}}],[\"将字符串以逗号分割成数组\",{\"1\":{\"256\":1}}],[\"将字符串拆分为子字符串数组\",{\"1\":{\"256\":1}}],[\"将右侧的值赋给左侧的变量\",{\"1\":{\"254\":1}}],[\"将两个值相乘\",{\"1\":{\"254\":1}}],[\"将两个值相加\",{\"1\":{\"254\":1}}],[\"将falsy值\",{\"1\":{\"252\":1}}],[\"将value转换为布尔类型\",{\"1\":{\"252\":1}}],[\"将value转换为字符串类型\",{\"1\":{\"252\":1}}],[\"将value转换为数字类型\",{\"1\":{\"252\":1}}],[\"将方法的返回值转换为大写\",{\"1\":{\"204\":1}}],[\"将装饰器应用于目标对象\",{\"1\":{\"204\":1}}],[\"将值赋给目标对象的指定属性\",{\"1\":{\"191\":1}}],[\"将在0\",{\"1\":{\"151\":1}}],[\"将过渡持续1秒\",{\"1\":{\"151\":1}}],[\"将同时对宽度和高度属性进行过渡动画\",{\"1\":{\"151\":1}}],[\"将元素依次赋值给多个变量\",{\"1\":{\"310\":1}}],[\"将元素绕z轴逆时针旋转45度\",{\"1\":{\"150\":1}}],[\"将元素绕y轴逆时针旋转45度\",{\"1\":{\"150\":1}}],[\"将元素绕x轴逆时针旋转45度\",{\"1\":{\"150\":1}}],[\"将元素水平方向上倾斜20度\",{\"1\":{\"150\":1}}],[\"将元素水平方向上缩放1\",{\"1\":{\"150\":1}}],[\"将元素逆时针旋转45度并放大1\",{\"1\":{\"150\":1}}],[\"将元素逆时针旋转45度\",{\"1\":{\"150\":1}}],[\"将元素向右移动100px\",{\"1\":{\"150\":1}}],[\"将事务的所有操作永久地应用到数据库\",{\"1\":{\"137\":1}}],[\"将旧数据库中的数据导出\",{\"1\":{\"133\":1}}],[\"将多个小文件合并为一个大文件\",{\"1\":{\"504\":1}}],[\"将多个参数收集为一个数组\",{\"1\":{\"313\":1}}],[\"将多个异步操作封装成一个\",{\"1\":{\"196\":1}}],[\"将多个请求合并在一个tcp连接中\",{\"1\":{\"55\":1}}],[\"将多次dom操作转化为最小的修改\",{\"1\":{\"128\":1}}],[\"将补丁树应用于真实的dom元素上\",{\"1\":{\"128\":1}}],[\"将普通对象转换为响应式数据\",{\"1\":{\"102\":1}}],[\"将基本类型转换为响应式数据\",{\"1\":{\"102\":2}}],[\"将name的值修改为\",{\"1\":{\"93\":1}}],[\"将\",{\"1\":{\"88\":1,\"272\":1,\"368\":1,\"390\":1}}],[\"将不同的入口打包为不同的文件\",{\"1\":{\"480\":1}}],[\"将不同的视图映射到不同的url\",{\"1\":{\"63\":1}}],[\"将不同功能或不同模块的代码分别放入不同的文件中\",{\"1\":{\"56\":1}}],[\"将处理结果发送回主线程\",{\"1\":{\"57\":1}}],[\"将ui划分为独立\",{\"1\":{\"56\":1}}],[\"将代码复制到文件中\",{\"1\":{\"508\":1}}],[\"将代码分割为更小的模块\",{\"1\":{\"480\":1}}],[\"将代码划分为独立\",{\"1\":{\"56\":1}}],[\"将代码按照功能或逻辑进行模块化拆分\",{\"1\":{\"56\":1}}],[\"将整个应用程序拆分为多个独立的组件\",{\"1\":{\"56\":1}}],[\"将从服务器获取的数据保存在内存中或本地存储\",{\"1\":{\"55\":1}}],[\"将图片调整为合适的尺寸也是一种优化图片的方法\",{\"1\":{\"54\":1}}],[\"将大型组件拆分成更小的子组件\",{\"1\":{\"49\":1}}],[\"将其发送到服务器进行验证\",{\"1\":{\"370\":1}}],[\"将其发送到服务器\",{\"1\":{\"282\":2}}],[\"将其添加到执行栈中执行\",{\"1\":{\"271\":1}}],[\"将其回调函数添加到任务队列中\",{\"1\":{\"270\":1}}],[\"将其称为\",{\"1\":{\"264\":1}}],[\"将其他数据类型转换为字符串\",{\"1\":{\"256\":1}}],[\"将其赋值给变量\",{\"1\":{\"171\":1}}],[\"将其作为onsubmit事件的处理函数\",{\"1\":{\"33\":1}}],[\"将其放在其他组件中进行渲染\",{\"1\":{\"19\":1}}],[\"将界面拆分成独立的可复用组件\",{\"1\":{\"9\":1}}],[\"这行代码不会被执行\",{\"1\":{\"599\":1}}],[\"这段代码将在控制台中打印出\",{\"1\":{\"508\":1}}],[\"这段代码被标注为\",{\"1\":{\"310\":1}}],[\"这减少了不必要的状态变化和重新计算的机会\",{\"1\":{\"434\":1}}],[\"这有助于跟踪状态的变化以及在开发过程中进行调试\",{\"1\":{\"428\":1}}],[\"这有助于搜索引擎更好地理解和显示页面内容\",{\"1\":{\"231\":1}}],[\"这仅适用于class组件\",{\"1\":{\"387\":1}}],[\"这表示您的\",{\"1\":{\"364\":1}}],[\"这表示服务器同意保持连接开启\",{\"1\":{\"358\":1}}],[\"这告诉服务器要保持连接开启以支持多个请求\",{\"1\":{\"358\":1}}],[\"这大大减少了页面的刷新次数\",{\"1\":{\"342\":1}}],[\"这就使得用户能够在数据加载的同时进行其他操作\",{\"1\":{\"341\":1}}],[\"这就是原型和原型链的基本概念\",{\"1\":{\"267\":1}}],[\"这会在vue实例上注入全局的$store对象\",{\"1\":{\"426\":1}}],[\"这会导致性能上的开销和延迟\",{\"1\":{\"358\":1}}],[\"这会导致性能问题\",{\"1\":{\"53\":1}}],[\"这会显示远程仓库的名称和url\",{\"1\":{\"336\":1}}],[\"这通常涉及设计api端点\",{\"1\":{\"371\":1}}],[\"这通常涉及提供数据库的连接url\",{\"1\":{\"369\":1}}],[\"这通常用于引入全局类型声明的库\",{\"1\":{\"331\":1}}],[\"这通常发生在递归调用或大量函数嵌套的情况下\",{\"1\":{\"274\":1}}],[\"这被称为变量提升\",{\"1\":{\"311\":1}}],[\"这被称为函数表达式\",{\"1\":{\"258\":1}}],[\"这使开发者不需要手动分配和释放内存\",{\"1\":{\"274\":1}}],[\"这使得开发人员能够更好地控制运算符的使用方式\",{\"1\":{\"604\":1}}],[\"这使得开发者可以按照一定的顺序定义和应用混入对象\",{\"1\":{\"97\":1}}],[\"这使得它能够处理大量并发请求而不会阻塞其他操作\",{\"1\":{\"506\":1}}],[\"这使得状态的变化更可预测\",{\"1\":{\"404\":1}}],[\"这使得我们可以用闭包来创建一个特定因子的乘法器\",{\"1\":{\"590\":1}}],[\"这使得我们可以在redux中统一处理异步逻辑\",{\"1\":{\"405\":1}}],[\"这使得我们可以在action中执行异步操作\",{\"1\":{\"405\":1}}],[\"这使得我们可以在ui中动态地使用变量\",{\"1\":{\"13\":1}}],[\"这使得我们可以更好地控制路由过渡\",{\"1\":{\"395\":1}}],[\"这使得在大型应用中更容易添加新功能\",{\"1\":{\"434\":1}}],[\"这使得在控制台或用户权限验证等方面更加灵活\",{\"1\":{\"389\":1}}],[\"这使得在jsx中可以直接使用变量\",{\"1\":{\"14\":1}}],[\"这使得异步代码的编写更加直观\",{\"1\":{\"196\":1}}],[\"这使得你可以为用户提供更好的用户体验\",{\"1\":{\"157\":1}}],[\"这使得子组件能够向父组件传递数据\",{\"1\":{\"96\":1}}],[\"这使得组件更加灵活\",{\"1\":{\"96\":1}}],[\"这使得代码更加可维护\",{\"1\":{\"45\":1}}],[\"这对于一些页面或数据不经常变化的场景非常有效\",{\"1\":{\"601\":1}}],[\"这对于需要在用户会话中保持状态\",{\"1\":{\"439\":1}}],[\"这对于根据特定参数显示不同内容非常有用\",{\"1\":{\"381\":1}}],[\"这对于避免多个路由同时匹配的问题非常有用\",{\"1\":{\"378\":1}}],[\"这对于调试和找出代码引发的问题非常有帮助\",{\"1\":{\"338\":1}}],[\"这对于临时切换到其他分支处理其他任务时非常有用\",{\"1\":{\"338\":1}}],[\"这对于恢复意外删除的分支\",{\"1\":{\"338\":1}}],[\"这对于从其他分支中选择性地合并特定的提交很有用\",{\"1\":{\"338\":1}}],[\"这对于动态添加的子元素特别有用\",{\"1\":{\"263\":1}}],[\"这对于新手来说可能需要一些时间来适应和学习\",{\"1\":{\"9\":1}}],[\"这在处理大型应用程序或减小初始加载时间时非常有用\",{\"1\":{\"494\":1}}],[\"这在处理正则表达式\",{\"1\":{\"167\":1}}],[\"这在大型应用程序中特别有用\",{\"1\":{\"467\":1}}],[\"这在需要在导入时执行某些初始化逻辑的情况下非常有用\",{\"1\":{\"202\":1}}],[\"这与var关键字有所不同\",{\"1\":{\"165\":1}}],[\"这两个任务是模拟了定时器和网络请求\",{\"1\":{\"270\":1}}],[\"这两个新的关键字提供了更好的变量作用域控制和不可变性\",{\"1\":{\"165\":1}}],[\"这两个词是可以互换的\",{\"1\":{\"164\":1}}],[\"这两个例子都是使用数组语法\",{\"1\":{\"82\":1}}],[\"这导致元素的总尺寸大于在标准盒模型下相同的宽度和高度属性\",{\"1\":{\"146\":1}}],[\"这带来了更强大的响应式能力\",{\"1\":{\"99\":1}}],[\"这得益于对编译器的重构和优化\",{\"1\":{\"99\":1}}],[\"这里只有一个方法getcount\",{\"1\":{\"440\":1}}],[\"这里只包含一个count变量\",{\"1\":{\"440\":1}}],[\"这里有两个方法increment和decrement\",{\"1\":{\"440\":2}}],[\"这里有一个简单的例子来演示css动画的使用\",{\"1\":{\"152\":1}}],[\"这里有一个简单的例子来演示css的2d转换和3d转换\",{\"1\":{\"150\":1}}],[\"这里可以根据实际情况获取用户的id\",{\"1\":{\"420\":1}}],[\"这里的\",{\"1\":{\"365\":1}}],[\"这里的worker\",{\"1\":{\"57\":1}}],[\"这里\",{\"1\":{\"329\":5}}],[\"这里是1秒和2秒\",{\"1\":{\"270\":1}}],[\"这里还有更多关于\",{\"1\":{\"234\":1}}],[\"这里还有一些其他的\",{\"1\":{\"223\":1}}],[\"这里通过修改opacity属性来实现淡入和淡出的效果\",{\"1\":{\"98\":1}}],[\"这里设置为\",{\"1\":{\"98\":1}}],[\"这时可以通过显式添加类型注解来指定变量的类型\",{\"1\":{\"316\":1}}],[\"这时可以使用\",{\"1\":{\"91\":1}}],[\"这时候就会用到自定义指令\",{\"1\":{\"70\":1}}],[\"这显然是不合理的\",{\"1\":{\"90\":1}}],[\"这将作为存储在本地的键\",{\"1\":{\"439\":1}}],[\"这将开启vuex\",{\"1\":{\"438\":1}}],[\"这将开启vue\",{\"1\":{\"438\":1}}],[\"这将导致在首次访问该路由之前\",{\"1\":{\"423\":1}}],[\"这将触发页面的重新渲染\",{\"1\":{\"384\":1}}],[\"这将成为\",{\"1\":{\"364\":1}}],[\"这将在当前目录下创建一个新目录\",{\"1\":{\"336\":1}}],[\"这将在当前的提交上创建一个名为\",{\"1\":{\"335\":1}}],[\"这将删除名为\",{\"1\":{\"335\":1}}],[\"这将将\",{\"1\":{\"335\":1}}],[\"这将切换到名为\",{\"1\":{\"335\":1}}],[\"这将使\",{\"1\":{\"155\":1}}],[\"这将永久删除表及其所有数据和结构\",{\"1\":{\"134\":1}}],[\"这将永久删除数据库及其中的所有数据\",{\"1\":{\"133\":1}}],[\"这将从backup\",{\"1\":{\"133\":1}}],[\"这将把databasename数据库备份到backup\",{\"1\":{\"133\":1}}],[\"这将启动一个热重载的开发服务器\",{\"1\":{\"88\":1}}],[\"这将创建一个新的项目文件夹\",{\"1\":{\"88\":1}}],[\"这其中包含\",{\"1\":{\"70\":1}}],[\"这个扩展提供了对数据加密和解密的函数\",{\"1\":{\"604\":1}}],[\"这个函数接收错误代码\",{\"1\":{\"587\":1}}],[\"这个示例是一个简单的计数器应用\",{\"1\":{\"440\":1}}],[\"这个示例展示了消息队列如何处理宏任务和微任务\",{\"1\":{\"271\":1}}],[\"这个实例包含了应用程序的状态\",{\"1\":{\"426\":1}}],[\"这个应用程序有两个按钮\",{\"1\":{\"403\":1}}],[\"这个组件可以包含多个<route>组件\",{\"1\":{\"392\":1}}],[\"这个路径时\",{\"1\":{\"391\":1}}],[\"这个过程涉及url解析\",{\"1\":{\"360\":1}}],[\"这个请求可以使用http协议或者https协议\",{\"1\":{\"360\":1}}],[\"这个新的装饰器函数在被应用到类上时\",{\"1\":{\"324\":1}}],[\"这个事件循环的过程使得\",{\"1\":{\"270\":1}}],[\"这个方法不常用\",{\"1\":{\"401\":1}}],[\"这个方法不会修改原数组\",{\"1\":{\"257\":2}}],[\"这个方法会修改原数组\",{\"1\":{\"257\":5}}],[\"这个方法与\",{\"1\":{\"193\":1}}],[\"这个名字\",{\"1\":{\"164\":1}}],[\"这个版本就是\",{\"1\":{\"164\":1}}],[\"这个例子中\",{\"1\":{\"265\":12}}],[\"这个例子展示了作用域链的工作过程\",{\"1\":{\"261\":1}}],[\"这个例子展示了如何使用事件循环处理异步操作\",{\"1\":{\"264\":1}}],[\"这个例子展示了如何使用stylus的变量\",{\"1\":{\"161\":1}}],[\"这个例子展示了如何使用sass的变量\",{\"1\":{\"161\":1}}],[\"这个例子展示了如何使用less的变量\",{\"1\":{\"161\":1}}],[\"这个例子将背景图像应用于div元素\",{\"1\":{\"158\":1}}],[\"这个值会被缓存\",{\"1\":{\"104\":1}}],[\"这个\",{\"1\":{\"95\":1,\"125\":2}}],[\"这个数组可以在函数内部访问\",{\"1\":{\"524\":1}}],[\"这个数组包含了两个元素\",{\"1\":{\"82\":1,\"85\":1}}],[\"这个数据将决定要渲染哪个组件\",{\"1\":{\"94\":1}}],[\"这个对象包含了两个属性\",{\"1\":{\"82\":2}}],[\"这个指令在组件内部使用时\",{\"1\":{\"70\":1}}],[\"这个特点\",{\"1\":{\"61\":1}}],[\"这个引用在组件重新渲染时不会改变\",{\"1\":{\"41\":1}}],[\"这是通过使用import\",{\"1\":{\"467\":1}}],[\"这是通过\",{\"1\":{\"389\":1}}],[\"这是之前设置的宏任务\",{\"1\":{\"271\":1}}],[\"这是微任务在当前宏任务执行完成后立即执行的结果\",{\"1\":{\"271\":1}}],[\"这是javascript处理异步操作的关键部分\",{\"1\":{\"271\":1}}],[\"这是由于闭包包含了对外部作用域的引用\",{\"1\":{\"261\":1}}],[\"这是网页的描述\",{\"1\":{\"208\":1}}],[\"这是盒子包含的实际内容\",{\"1\":{\"146\":1}}],[\"这是一种更简洁的匿名函数语法\",{\"1\":{\"571\":1}}],[\"这是一种常见的实现方式\",{\"1\":{\"330\":1}}],[\"这是一种常见的垃圾回收算法\",{\"1\":{\"276\":1}}],[\"这是一种在\",{\"1\":{\"330\":1}}],[\"这是一种优化的垃圾回收策略\",{\"1\":{\"276\":1}}],[\"这是一种简单的垃圾回收算法\",{\"1\":{\"276\":1}}],[\"这是一种简洁的组件编写方式\",{\"1\":{\"92\":1}}],[\"这是一些自定义的方法\",{\"1\":{\"170\":1}}],[\"这是一段\",{\"1\":{\"167\":1}}],[\"这是一个重要的功能\",{\"1\":{\"497\":1}}],[\"这是一个基本的配置示例\",{\"1\":{\"492\":1}}],[\"这是一个用于匹配当前路径和给定路径模式的钩子\",{\"1\":{\"398\":1}}],[\"这是一个用于获取当前路由位置信息的钩子\",{\"1\":{\"398\":1}}],[\"这是一个用于导航到其他路由的钩子\",{\"1\":{\"398\":1}}],[\"这是一个顶层路由钩子\",{\"1\":{\"398\":1}}],[\"这是一个\",{\"1\":{\"253\":1,\"515\":1}}],[\"这是一个注释\",{\"1\":{\"212\":1}}],[\"这是一个简单的例子\",{\"1\":{\"150\":1,\"152\":1}}],[\"这是一个更灵活和可重用的api\",{\"1\":{\"99\":1}}],[\"这是一个异步模块加载函数\",{\"1\":{\"95\":1}}],[\"这是因为tcp连接是一个双向通信的通道\",{\"1\":{\"361\":1}}],[\"这是因为组件是可以复用的\",{\"1\":{\"90\":1}}],[\"这是因为hooks是基于函数组件的新特性\",{\"1\":{\"43\":1}}],[\"这是为了确保hook的执行顺序一致\",{\"1\":{\"40\":1}}],[\"这可能会导致内存占用不断增长\",{\"1\":{\"274\":1}}],[\"这可能会导致开发者需要不断跟进和学习新的东西\",{\"1\":{\"9\":1}}],[\"这可以帮助你发现引起问题的具体部分\",{\"1\":{\"501\":1}}],[\"这可以避免重复计算或访问外部资源\",{\"1\":{\"465\":1}}],[\"这可以避免类型错误和运行时异常\",{\"1\":{\"317\":1}}],[\"这可以通过使用对象展开语法\",{\"1\":{\"401\":1}}],[\"这可以提高页面加载性能\",{\"1\":{\"397\":1}}],[\"这可以涉及读取和写入数据\",{\"1\":{\"371\":1}}],[\"这可以防止某个连接一直占用服务器资源\",{\"1\":{\"358\":1}}],[\"这可以使提交历史更加简洁\",{\"1\":{\"338\":1}}],[\"这可以使用字符串\",{\"1\":{\"46\":1}}],[\"这可以是一个状态值\",{\"1\":{\"42\":1}}],[\"这只是bom提供的一小部分功能\",{\"1\":{\"266\":1}}],[\"这只是一部分常见的php设计模式\",{\"1\":{\"592\":1}}],[\"这只是一个简单的示例\",{\"1\":{\"581\":1,\"600\":1}}],[\"这只是一个简单的例子\",{\"1\":{\"97\":1,\"369\":1,\"406\":1}}],[\"这只是一个\",{\"1\":{\"364\":1}}],[\"这只是一些常见的事件类型列表\",{\"1\":{\"28\":1}}],[\"这只是表单元素的基本用法\",{\"1\":{\"30\":1}}],[\"这种思想在大型应用程序中特别有用\",{\"1\":{\"579\":1}}],[\"这种划分方式有助于提高代码的可复用性和可维护性\",{\"1\":{\"435\":1}}],[\"这种划分方式可以使得每个页面或组件的代码更加独立和可维护\",{\"1\":{\"435\":1}}],[\"这种划分方式使代码更具聚焦性\",{\"1\":{\"435\":1}}],[\"这种划分可以根据应用的功能领域\",{\"1\":{\"435\":1}}],[\"这种划分可以使得代码更易于组织和理解\",{\"1\":{\"434\":1}}],[\"这种分工协作可以提高团队的效率和开发速度\",{\"1\":{\"434\":1}}],[\"这种分离使得代码更清晰\",{\"1\":{\"433\":1}}],[\"这种集成使得状态管理变得更加可靠和可预测\",{\"1\":{\"406\":1}}],[\"这种集中式的状态管理使得状态变化更容易跟踪和调试\",{\"1\":{\"404\":1}}],[\"这种集中式的身份认证机制减少了用户的密码管理负担\",{\"1\":{\"370\":1}}],[\"这种组件解耦的机制大大提高了代码的可维护性和复用性\",{\"1\":{\"404\":1}}],[\"这种可预测性有助于减少调试和错误处理的复杂性\",{\"1\":{\"404\":1}}],[\"这种机制使得状态变化可预测\",{\"1\":{\"403\":1}}],[\"这种机制确保了变量的封装性和隔离性\",{\"1\":{\"261\":1}}],[\"这种异步处理方式提高了用户效率和使用体验\",{\"1\":{\"342\":1}}],[\"这种情况下\",{\"1\":{\"314\":1}}],[\"这种情况通常发生在对象之间的相互引用或闭包的使用中\",{\"1\":{\"275\":1}}],[\"这种函数称为递归函数\",{\"1\":{\"313\":1}}],[\"这种作用域链的查找是在词法环境中进行的\",{\"1\":{\"280\":1}}],[\"这种模式以对客户端透明的方式扩展对象的功能\",{\"1\":{\"592\":1}}],[\"这种模式鼓励代码的重用性和可维护性\",{\"1\":{\"278\":1}}],[\"这种模式更接近机器的语言和底层的操作\",{\"1\":{\"278\":1}}],[\"这种模式更适合简单\",{\"1\":{\"278\":1}}],[\"这种模式可以将组件逻辑进行抽象和封装\",{\"1\":{\"23\":1}}],[\"这种动态性使得我们可以在运行时对对象属性和方法进行扩展或修改\",{\"1\":{\"267\":1}}],[\"这种动态的更新方式\",{\"1\":{\"63\":1}}],[\"这种层级结构的作用域链允许内部作用域访问外部作用域的变量\",{\"1\":{\"261\":1}}],[\"这种方法允许我们以同步的方式遍历异步事件流\",{\"1\":{\"198\":1}}],[\"这种方法为异步操作提供了一个手动的取消机制\",{\"1\":{\"198\":1}}],[\"这种方式生成的映射较大\",{\"1\":{\"468\":1}}],[\"这种方式速度最快\",{\"1\":{\"468\":1}}],[\"这种方式不够明确和模块化\",{\"1\":{\"444\":1}}],[\"这种方式适用于小型项目\",{\"1\":{\"458\":1}}],[\"这种方式适用于非嵌套较深的模块之间的通信\",{\"1\":{\"444\":1}}],[\"这种方式适用于仅对个别元素应用特定样式\",{\"1\":{\"142\":1}}],[\"这种方式适用于仅对当前html文档应用特定样式\",{\"1\":{\"142\":1}}],[\"这种方式适用于对多个页面同时应用相同的样式\",{\"1\":{\"142\":1}}],[\"这种方式也可以写成\",{\"1\":{\"82\":1}}],[\"这种方式可以减小初次加载的资源大小\",{\"1\":{\"480\":1}}],[\"这种方式可以减少页面的初始加载时间和带宽占用\",{\"1\":{\"54\":1}}],[\"这种方式可以实现按需加载\",{\"1\":{\"458\":1}}],[\"这种方式可以实现无刷新的页面切换\",{\"1\":{\"416\":1}}],[\"这种方式可以快速检测到错误并中止其他任务的执行\",{\"1\":{\"198\":1}}],[\"这种方式可以方便地动态地切换元素的类\",{\"1\":{\"82\":1}}],[\"这种方式可以方便地传递参数给事件处理函数\",{\"1\":{\"26\":1}}],[\"这种方式可以用于实现一些通用的逻辑\",{\"1\":{\"23\":1}}],[\"这种布局适合简单的网页结构\",{\"1\":{\"147\":1}}],[\"这种差异计算的方式可以最小化对实际dom的操作\",{\"1\":{\"45\":1}}],[\"这种形式适用于需要内部状态管理和生命周期方法的组件\",{\"1\":{\"19\":1}}],[\"这种数据流清晰明了\",{\"1\":{\"9\":1}}],[\"这意味着在文件更改时\",{\"1\":{\"497\":1}}],[\"这意味着在es6中\",{\"1\":{\"172\":1}}],[\"这意味着只有这些模块的状态会被持久化\",{\"1\":{\"439\":1}}],[\"这意味着只要计算属性依赖的数据没有发生变化\",{\"1\":{\"106\":1}}],[\"这意味着当state对象发生变化时\",{\"1\":{\"426\":1}}],[\"这意味着当进入网站的根路径时\",{\"1\":{\"418\":1}}],[\"这意味着当响应式对象的属性发生变化时\",{\"1\":{\"102\":1}}],[\"这意味着所有的状态都集中管理在一个地方\",{\"1\":{\"404\":1}}],[\"这意味着靠近类声明的装饰器会先被执行\",{\"1\":{\"324\":1}}],[\"这意味着如果原始对象或数组中的属性或元素是对象\",{\"1\":{\"281\":1}}],[\"这意味着函数可以访问它的父级作用域\",{\"1\":{\"280\":1}}],[\"这意味着闭包可以继续访问和操作外部作用域中的变量和函数\",{\"1\":{\"268\":1}}],[\"这意味着\",{\"1\":{\"267\":1}}],[\"这意味着可以在声明之前使用变量或调用函数\",{\"1\":{\"249\":1}}],[\"这意味着它们将平均分配可用空间\",{\"1\":{\"155\":1}}],[\"这意味着事务的执行不能破坏数据库的完整性约束和业务规则\",{\"1\":{\"137\":1}}],[\"这意味着每个被缓存的组件实例之间共享同一个模板\",{\"1\":{\"126\":1}}],[\"这意味着每个属性都会被转化为一个独立的ref对象\",{\"1\":{\"102\":1}}],[\"这意味着我们可以在jsx中使用javascript语法\",{\"1\":{\"13\":1}}],[\"这意味着开发者在使用react时需要自己选择和集成其他库或框架来处理路由\",{\"1\":{\"9\":1}}],[\"这些改进使得正则表达式的处理更加强大和灵活\",{\"1\":{\"604\":1}}],[\"这些框架和库通常提供了一系列安全功能和最佳实践\",{\"1\":{\"602\":1}}],[\"这些框架提供了预定义的\",{\"1\":{\"233\":1}}],[\"这些语句用于将一个文件的内容嵌入到另一个文件中\",{\"1\":{\"599\":1}}],[\"这些模式可以与持久化缓存一起使用\",{\"1\":{\"497\":1}}],[\"这些选项包括代码压缩\",{\"1\":{\"496\":1}}],[\"这些库和框架已经经过测试和验证\",{\"1\":{\"466\":1}}],[\"这些插件系统不仅为应用程序提供了丰富的扩展功能\",{\"1\":{\"464\":1}}],[\"这些接口描述了插件应该具备的功能点或方法\",{\"1\":{\"464\":1}}],[\"这些工具可以帮助你识别和解决性能问题\",{\"1\":{\"497\":1}}],[\"这些工具可以帮助你管理和组合异步操作\",{\"1\":{\"272\":1}}],[\"这些工具在打包时会自动进行tree\",{\"1\":{\"462\":1}}],[\"这些核心概念可以在vuex模块中用来管理模块内的状态和操作\",{\"1\":{\"436\":1}}],[\"这些核心概念共同构成了react的编程模型\",{\"1\":{\"11\":1}}],[\"这些信息可以用于在导航过程中执行一些特殊操作\",{\"1\":{\"422\":1}}],[\"这些中间件使得在action中执行异步操作变得容易\",{\"1\":{\"406\":1}}],[\"这些中间件可以根据项目的需求进行选择和配置\",{\"1\":{\"405\":1}}],[\"这些路由钩子可以在函数组件中使用\",{\"1\":{\"398\":1}}],[\"这些文件在客户端请求时会直接被发送给客户端\",{\"1\":{\"368\":1}}],[\"这些技术和工具与ajax密切相关\",{\"1\":{\"343\":1}}],[\"这些优点使得ajax成为开发现代web应用程序的重要技术之一\",{\"1\":{\"342\":1}}],[\"这些优化方法并非适用于所有组件或所有情况\",{\"1\":{\"47\":1}}],[\"这些高级操作提供了更多的灵活性和功能\",{\"1\":{\"338\":1}}],[\"这些高级类型操作符可以帮助我们更灵活地操作和转换类型\",{\"1\":{\"321\":1}}],[\"这些异步编程方式都有各自的优势和适用场景\",{\"1\":{\"322\":1}}],[\"这些注解可以帮助编译器检测类型错误\",{\"1\":{\"315\":1}}],[\"这些是react\",{\"1\":{\"395\":1}}],[\"这些是\",{\"1\":{\"365\":1,\"366\":1}}],[\"这些是常见的http头部信息\",{\"1\":{\"355\":1}}],[\"这些是常见的http请求方法\",{\"1\":{\"353\":1}}],[\"这些是模块解析中的一些重要方面\",{\"1\":{\"328\":1}}],[\"这些是枚举的一些特性和用法\",{\"1\":{\"314\":1}}],[\"这些是函数的一些重要特性和用法\",{\"1\":{\"313\":1}}],[\"这些是jsx的一些基本语法规则\",{\"1\":{\"15\":1}}],[\"这些函数永远不会返回\",{\"1\":{\"310\":1}}],[\"这些类型可以提供更好的类型安全性和代码可读性\",{\"1\":{\"310\":1}}],[\"这些监听器会继续存在\",{\"1\":{\"275\":1}}],[\"这些任务同样也会被添加到任务队列中\",{\"1\":{\"270\":1}}],[\"这些任务会被添加到任务队列中\",{\"1\":{\"270\":1}}],[\"这些变量以$\",{\"1\":{\"522\":1}}],[\"这些变量的可见性和访问范围\",{\"1\":{\"311\":1}}],[\"这些变量也无法被垃圾回收\",{\"1\":{\"268\":1}}],[\"这些变量和参数的值仍然可以通过内部函数进行访问\",{\"1\":{\"268\":1}}],[\"这些控制流程语句可帮助你根据不同的条件和需求控制程序的执行流程\",{\"1\":{\"255\":1}}],[\"这些运算符在不同的情况下有不同的用途\",{\"1\":{\"254\":1}}],[\"这些机制可以在客户端存储和管理数据\",{\"1\":{\"240\":1}}],[\"这些机制可以用于在客户端存储和管理数据\",{\"1\":{\"236\":1}}],[\"这些功能使得基于\",{\"1\":{\"243\":1}}],[\"这些功能允许开发人员在网页中创建交互式的图形和绘图效果\",{\"1\":{\"237\":1}}],[\"这些功能有助于确保网页在全球范围内能够正确地显示和交互\",{\"1\":{\"235\":1}}],[\"这些标签可以用于在网页中嵌入其他资源和内容\",{\"1\":{\"219\":1}}],[\"这些验证属性可以在客户端进行验证\",{\"1\":{\"217\":1}}],[\"这些特性被认为是面向对象编程的基石\",{\"1\":{\"183\":1}}],[\"这些特性使得函数编写更简洁\",{\"1\":{\"172\":1}}],[\"这些常量在语言中扮演着特殊的角色\",{\"1\":{\"174\":1}}],[\"这些范围以\",{\"1\":{\"169\":1}}],[\"这些css预处理器都提供了类似于变量\",{\"1\":{\"161\":1}}],[\"这些css框架都有自己的特点和优势\",{\"1\":{\"160\":1}}],[\"这些只是2d和3d转换的一些基本方法\",{\"1\":{\"150\":1}}],[\"这些属性可以帮助你控制元素的大小\",{\"1\":{\"146\":1}}],[\"这些操作要么全部成功完成\",{\"1\":{\"137\":1}}],[\"这些补丁操作通常是高效的\",{\"1\":{\"128\":1}}],[\"这些对象都是响应式代理\",{\"1\":{\"102\":2}}],[\"这些方法使\",{\"1\":{\"241\":1}}],[\"这些方法允许不同的\",{\"1\":{\"238\":1}}],[\"这些方法可以帮助我们更好地控制和组合多个异步操作\",{\"1\":{\"192\":1}}],[\"这些方法可以让我们在不同的时机执行相关的操作\",{\"1\":{\"22\":1}}],[\"这些方式可以根据具体需求选择使用\",{\"1\":{\"93\":1}}],[\"这些生命周期钩子函数包括\",{\"1\":{\"87\":1}}],[\"这些钩子可以减少渲染次数\",{\"1\":{\"49\":1}}],[\"这些概念是理解和使用react的基础\",{\"1\":{\"11\":1}}],[\"这些缺点并不意味着react是一个不好的框架\",{\"1\":{\"9\":1}}],[\"这样你可以根据需要进行自定义配置\",{\"1\":{\"479\":1}}],[\"这样你的第一个vue应用就创建好了\",{\"1\":{\"67\":1}}],[\"这样做有一个好处是\",{\"1\":{\"440\":1}}],[\"这样做可以将复杂的问题分解为更小\",{\"1\":{\"327\":1}}],[\"这样的设计使得代码更加模块化和可维护\",{\"1\":{\"583\":1}}],[\"这样的设计使得状态管理更加规范和可控\",{\"1\":{\"436\":1}}],[\"这样的函数称为高阶函数\",{\"1\":{\"313\":1}}],[\"这样在不同组件之间共享数据就变得非常简单和可靠\",{\"1\":{\"425\":1}}],[\"这样当访问别名路径时\",{\"1\":{\"419\":1}}],[\"这样我们可以在回调函数中执行一些操作\",{\"1\":{\"401\":1}}],[\"这样就能正确处理异步逻辑\",{\"1\":{\"433\":1}}],[\"这样就可以将路由组件打包成单独的文件\",{\"1\":{\"423\":1}}],[\"这样就可以直接访问参数的数组\",{\"1\":{\"172\":1}}],[\"这样就完成了基本的路由配置和导航链接的设置\",{\"1\":{\"394\":1}}],[\"这样编译后的代码中不会生成实际的枚举对象\",{\"1\":{\"314\":1}}],[\"这样拷贝后的对象或数组与原始对象或数组完全独立\",{\"1\":{\"281\":1}}],[\"这样所有由该原型创建的实例都可以共享这些属性和方法\",{\"1\":{\"267\":1}}],[\"这样有利于保证这门语言的开放性和中立性\",{\"1\":{\"164\":1}}],[\"这样每个\",{\"1\":{\"161\":3}}],[\"这样每次渲染组件时都会调用这个函数来创建一个新的\",{\"1\":{\"90\":1}}],[\"这样数据库才能正确地存储和处理数据\",{\"1\":{\"136\":1}}],[\"这样根实例特有的选项\",{\"1\":{\"89\":1}}],[\"这样简化了开发流程\",{\"1\":{\"45\":1}}],[\"这样可以防止恶意用户通过注入恶意sql代码来破坏\",{\"1\":{\"602\":1}}],[\"这样可以降低服务器的负载并提高响应速度\",{\"1\":{\"601\":1}}],[\"这样可以利用浏览器的缓存机制\",{\"1\":{\"458\":1}}],[\"这样可以让组件的逻辑更简洁\",{\"1\":{\"443\":1}}],[\"这样可以保证状态的一致性并且使应用程序更加灵活可控\",{\"1\":{\"432\":1}}],[\"这样可以保证状态的一致性和可控性\",{\"1\":{\"431\":1}}],[\"这样可以在各个模块之间直接互相读取和修改数据\",{\"1\":{\"444\":1}}],[\"这样可以在状态发生变化时进行记录和调试\",{\"1\":{\"428\":1}}],[\"这样可以在装饰器内部接收一些参数并返回真正的装饰器函数来进行定制\",{\"1\":{\"324\":1}}],[\"这样可以将源映射与生产代码分离\",{\"1\":{\"468\":1}}],[\"这样可以将一个页面分割为多个小组件\",{\"1\":{\"415\":1}}],[\"这样可以将位于项目根目录下的\",{\"1\":{\"366\":1}}],[\"这样可以减少服务器的负载并提供更快的用户体验\",{\"1\":{\"601\":1}}],[\"这样可以减少初始加载的时间\",{\"1\":{\"443\":1}}],[\"这样可以减少状态变化的频率\",{\"1\":{\"443\":1}}],[\"这样可以减少首次加载的时间\",{\"1\":{\"423\":1}}],[\"这样可以减少错误和排错难度\",{\"1\":{\"407\":1}}],[\"这样可以减少网络流量\",{\"1\":{\"356\":1}}],[\"这样可以减少多个小图片的请求\",{\"1\":{\"54\":1}}],[\"这样可以覆盖一些特殊情况和继承关系\",{\"1\":{\"253\":1}}],[\"这样可以实现更高级的表单验证和交互效果\",{\"1\":{\"234\":1}}],[\"这样可以更好地管理模块依赖和优化项目的性能\",{\"1\":{\"201\":1}}],[\"这样可以提高代码的灵活性和适应性\",{\"1\":{\"466\":1}}],[\"这样可以提高代码的重用性\",{\"1\":{\"466\":1}}],[\"这样可以提高代码的重用性和可维护性\",{\"1\":{\"430\":1}}],[\"这样可以提高代码的安全性\",{\"1\":{\"183\":1}}],[\"这样可以提高性能\",{\"1\":{\"95\":1}}],[\"这样可以避免手动引入每个类文件的麻烦\",{\"1\":{\"584\":1}}],[\"这样可以避免一些不必要的代码修改和维护成本\",{\"1\":{\"417\":1}}],[\"这样可以避免直接依赖路径的方式进行路由跳转\",{\"1\":{\"417\":1}}],[\"这样可以避免全局作用域的污染和变量名冲突\",{\"1\":{\"268\":1}}],[\"这样可以避免并发执行事务时产生的问题\",{\"1\":{\"137\":1}}],[\"这样可以避免重新创建和渲染整个列表\",{\"1\":{\"46\":1}}],[\"这样可以确保在开发服务器中也启用了源映射\",{\"1\":{\"468\":1}}],[\"这样可以确保每次组件渲染时\",{\"1\":{\"43\":1}}],[\"这样可以确保函数在重新渲染时保持一致\",{\"1\":{\"26\":1}}],[\"这样可以清楚地表示它是一个自定义hooks\",{\"1\":{\"42\":1,\"43\":1}}],[\"这样\",{\"1\":{\"5\":1,\"16\":1,\"85\":1,\"91\":2,\"92\":1,\"95\":1,\"102\":1,\"146\":1,\"148\":1,\"161\":3,\"195\":1,\"258\":1,\"264\":1,\"267\":1,\"282\":1,\"384\":1,\"406\":1,\"413\":1,\"420\":1,\"428\":1,\"429\":1,\"435\":1,\"437\":1,\"458\":1,\"471\":1,\"483\":1}}],[\"使它们可以互相替换\",{\"1\":{\"592\":1}}],[\"使它们的宽度自动伸缩\",{\"1\":{\"155\":1}}],[\"使原本不兼容的类可以合作\",{\"1\":{\"592\":1}}],[\"使您能够按需获取和处理数据\",{\"1\":{\"582\":1}}],[\"使文件每次有变化时\",{\"1\":{\"469\":1}}],[\"使应用程序能够识别\",{\"1\":{\"464\":1}}],[\"使应用能够在离线状态下运行并具有更好的性能\",{\"1\":{\"243\":1}}],[\"使你能够在使用vue和typescript的情况下使用vuex\",{\"1\":{\"444\":1}}],[\"使团队成员可以并行开发和改进不同的模块\",{\"1\":{\"434\":1}}],[\"使代码结构更清晰\",{\"1\":{\"415\":1}}],[\"使代码更具可扩展性和可维护性\",{\"1\":{\"592\":1}}],[\"使代码更具可维护性和可扩展性以下是一个面向对象编程的示例\",{\"1\":{\"278\":1}}],[\"使代码更加模块化\",{\"1\":{\"579\":1}}],[\"使代码更加清晰\",{\"1\":{\"190\":1,\"204\":1}}],[\"使代码更易于理解和维护\",{\"1\":{\"318\":1}}],[\"使代码更可读\",{\"1\":{\"314\":1}}],[\"使\",{\"1\":{\"325\":1}}],[\"使我们能够更好地管理应用程序的状态\",{\"1\":{\"402\":1}}],[\"使我们能够声明式地将其组件实例的数据绑定到呈现的\",{\"1\":{\"68\":1}}],[\"使我们可以编写更通用且灵活的代码\",{\"1\":{\"320\":1}}],[\"使搜索引擎能够更准确地理解和解释页面内容\",{\"1\":{\"231\":1}}],[\"使表单更强大和易于使用\",{\"1\":{\"227\":1}}],[\"使数据处理更加灵活和便捷\",{\"1\":{\"184\":1}}],[\"使元素具有三维感\",{\"1\":{\"150\":1}}],[\"使网页能够正确显示各种字符\",{\"1\":{\"235\":1}}],[\"使网页能够适应不同的语言和地区\",{\"1\":{\"235\":1}}],[\"使网页能够自动适应不同的屏幕宽度\",{\"1\":{\"233\":1}}],[\"使网页在不同设备上都能良好地显示和运行\",{\"1\":{\"157\":1}}],[\"使网页在各种设备上都能提供优秀的用户体验\",{\"1\":{\"148\":1}}],[\"使网页开发者能够将标记语言\",{\"1\":{\"140\":1}}],[\"使开发者可以使用\",{\"1\":{\"506\":1}}],[\"使开发者能够协同工作\",{\"1\":{\"337\":1}}],[\"使开发者能够方便地与mysql进行交互\",{\"1\":{\"131\":1}}],[\"使开发更加高效和灵活\",{\"1\":{\"278\":1}}],[\"使开发人员能够更专注于业务逻辑而无需手动处理内存管理的细节\",{\"1\":{\"276\":1}}],[\"使开发人员能够更方便地处理和组织数据\",{\"1\":{\"175\":1}}],[\"使开发人员可以使用组件化的方式构建用户界面\",{\"1\":{\"11\":1}}],[\"使其可以在不同的地方被重复调用\",{\"1\":{\"466\":1}}],[\"使其可以被\",{\"1\":{\"185\":1}}],[\"使其生效\",{\"1\":{\"455\":1}}],[\"使其能够处理复杂的业务逻辑和查询操作\",{\"1\":{\"369\":1}}],[\"使其成为开发web应用程序的受欢迎的技术之一\",{\"1\":{\"342\":1}}],[\"使其成为只读属性\",{\"1\":{\"204\":1}}],[\"使其在没有样式和脚本的情况下也能够良好地呈现和理解\",{\"1\":{\"226\":1}}],[\"使其无法添加新的属性\",{\"1\":{\"171\":1}}],[\"使其属性不能被添加或删除\",{\"1\":{\"171\":1}}],[\"使其属性不能被修改\",{\"1\":{\"171\":1}}],[\"使其更具可读性和视觉吸引力\",{\"1\":{\"154\":1}}],[\"使其更灵活和响应式地适应不同的屏幕尺寸和布局需求\",{\"1\":{\"147\":1}}],[\"使其与过渡组件关联起来\",{\"1\":{\"98\":1}}],[\"使其只在当前组件中生效\",{\"1\":{\"70\":1}}],[\"使组件间的通信更加简单和灵活\",{\"1\":{\"38\":1}}],[\"使用已经被广泛验证和审查的安全框架和库\",{\"1\":{\"602\":1}}],[\"使用哈希函数和盐值对密码进行加密存储\",{\"1\":{\"602\":1}}],[\"使用参数化查询或预处理语句来执行数据库操作\",{\"1\":{\"602\":1}}],[\"使用while循环可以在满足指定条件时循环执行代码块\",{\"1\":{\"561\":1}}],[\"使用webpack优化插件\",{\"1\":{\"504\":1}}],[\"使用webpack可以通过配置实现代码拆分\",{\"1\":{\"493\":1}}],[\"使用web\",{\"0\":{\"57\":1}}],[\"使用两个等号\",{\"1\":{\"540\":1}}],[\"使用匿名函数作为回调传递\",{\"1\":{\"539\":1}}],[\"使用概述\",{\"0\":{\"528\":1}}],[\"使用的时候可以不用加括号\",{\"1\":{\"515\":1}}],[\"使用异步编程模式是处理网络请求\",{\"1\":{\"511\":1}}],[\"使用异步请求\",{\"1\":{\"55\":1}}],[\"使用回调函数是一种经典的异步编程模式\",{\"1\":{\"511\":1}}],[\"使用npm安装\",{\"1\":{\"509\":1}}],[\"使用npm或yarn安装vuex\",{\"1\":{\"439\":1}}],[\"使用npm或yarn安装redux和react\",{\"1\":{\"406\":1}}],[\"使用npm或者yarn或者pnpm安装vuex包\",{\"1\":{\"427\":1}}],[\"使用模块\",{\"0\":{\"509\":1}}],[\"使用模板引擎渲染视图\",{\"1\":{\"363\":1}}],[\"使用模板字符串中的插入表达式来组合字符串\",{\"1\":{\"256\":1}}],[\"使用模板\",{\"1\":{\"245\":1}}],[\"使用图片压缩工具\",{\"1\":{\"504\":1}}],[\"使用图片来定义边框样式\",{\"1\":{\"144\":1}}],[\"使用压缩插件\",{\"1\":{\"504\":1}}],[\"使用新的\",{\"1\":{\"497\":1}}],[\"使用懒加载的模块\",{\"1\":{\"494\":1}}],[\"使用配置文件进行项目构建\",{\"1\":{\"475\":1}}],[\"使用了\",{\"1\":{\"515\":1}}],[\"使用了动态导入语法\",{\"1\":{\"467\":1}}],[\"使用了自动的垃圾回收机制来管理内存\",{\"1\":{\"276\":1}}],[\"使用现有的库和框架\",{\"1\":{\"466\":1}}],[\"使用缓存加载\",{\"1\":{\"504\":1}}],[\"使用缓存刷新机制等方式来解决\",{\"1\":{\"465\":1}}],[\"使用缓存时需要注意以下几点\",{\"1\":{\"465\":1}}],[\"使用缓存技术\",{\"1\":{\"138\":1}}],[\"使用热模块替换可以显著提高前端开发的效率和开发体验\",{\"1\":{\"459\":1}}],[\"使用不同的模式可以使webpack对应用程序进行不同的优化和配置\",{\"1\":{\"457\":1}}],[\"使用babel\",{\"1\":{\"471\":1,\"476\":1,\"487\":1}}],[\"使用babel进行es6+语法转换\",{\"1\":{\"455\":1}}],[\"使用babel等工具来进行转换\",{\"1\":{\"15\":1}}],[\"使用事件总线或pub\",{\"1\":{\"444\":1}}],[\"使用事件委托可以将事件处理程序绑定到祖先元素上\",{\"1\":{\"302\":1}}],[\"使用根状态\",{\"1\":{\"444\":1}}],[\"使用严格模式进行开发\",{\"1\":{\"443\":1}}],[\"使用持久化状态\",{\"1\":{\"443\":1}}],[\"使用动态导入来实现懒加载\",{\"1\":{\"494\":1}}],[\"使用动态导入来拆分代码\",{\"1\":{\"493\":1}}],[\"使用动态导入的模块\",{\"1\":{\"493\":1}}],[\"使用动态导入\",{\"1\":{\"467\":2}}],[\"使用动态组件的主要步骤如下\",{\"1\":{\"94\":1}}],[\"使用动作\",{\"1\":{\"443\":1}}],[\"使用插件进行性能监测\",{\"1\":{\"443\":1}}],[\"使用插件扩展vuex功能\",{\"0\":{\"437\":1}}],[\"使用插值表达式\",{\"1\":{\"442\":1}}],[\"使用localstorage进行持久化\",{\"1\":{\"439\":1}}],[\"使用let和const关键字可以更好地控制变量的作用域和可变性\",{\"1\":{\"165\":1}}],[\"使用let关键字声明的变量具有块级作用域\",{\"1\":{\"165\":1}}],[\"使用devserver需要在webpack配置中进行相应的设置\",{\"1\":{\"461\":1}}],[\"使用devtools调试\",{\"1\":{\"438\":1}}],[\"使用devtools调试vuex\",{\"0\":{\"438\":1}}],[\"使用delete\",{\"1\":{\"134\":1}}],[\"使用命名路由的好处是\",{\"1\":{\"417\":1}}],[\"使用命名空间中的类\",{\"1\":{\"584\":1}}],[\"使用命名空间可以通过在模块中添加namespaced\",{\"1\":{\"444\":1}}],[\"使用命名空间\",{\"1\":{\"326\":1}}],[\"使用<router\",{\"1\":{\"413\":2,\"415\":1}}],[\"使用router实例\",{\"1\":{\"413\":1}}],[\"使用rename\",{\"1\":{\"597\":1}}],[\"使用render\",{\"1\":{\"19\":1}}],[\"使用redux\",{\"1\":{\"407\":1}}],[\"使用redux的最佳实践\",{\"0\":{\"407\":1}}],[\"使用redux的过程中\",{\"1\":{\"401\":1}}],[\"使用redux创建一个store对象\",{\"1\":{\"402\":1}}],[\"使用regexp对象构造函数创建正则表达式\",{\"1\":{\"279\":1}}],[\"使用ref函数创建了一个名为count的响应式对象\",{\"1\":{\"102\":1}}],[\"使用react\",{\"1\":{\"49\":2,\"406\":1,\"407\":2}}],[\"使用react的useeffect钩子\",{\"1\":{\"49\":1}}],[\"使用react的usecallback和usememo钩子\",{\"1\":{\"49\":1}}],[\"使用reactdom库中的render方法将react元素渲染到指定的dom容器上\",{\"1\":{\"16\":1}}],[\"使用react组件来封装ui和对应的redux逻辑\",{\"1\":{\"407\":1}}],[\"使用react组件\",{\"1\":{\"15\":1}}],[\"使用纯函数的reducer\",{\"1\":{\"407\":1}}],[\"使用action\",{\"1\":{\"444\":1}}],[\"使用action和mutation处理异步逻辑\",{\"0\":{\"433\":1}}],[\"使用actions可以使你的应用程序更好地处理异步逻辑\",{\"1\":{\"432\":1}}],[\"使用actiontypes常量\",{\"1\":{\"407\":1}}],[\"使用async\",{\"1\":{\"432\":1}}],[\"使用alias选项\",{\"1\":{\"419\":1}}],[\"使用ajax异步提交表单\",{\"1\":{\"346\":1}}],[\"使用ajax可以实现网页的局部更新\",{\"1\":{\"342\":1}}],[\"使用容器组件和展示组件\",{\"1\":{\"407\":1}}],[\"使用状态和操作\",{\"1\":{\"406\":1}}],[\"使用路由钩子\",{\"1\":{\"398\":1}}],[\"使用错误追踪工具\",{\"1\":{\"372\":1}}],[\"使用调试器工具\",{\"1\":{\"372\":1}}],[\"使用所选的编程语言和框架\",{\"1\":{\"371\":1}}],[\"使用视图模板渲染页面\",{\"1\":{\"367\":1}}],[\"使用中间件处理异步操作\",{\"1\":{\"406\":1}}],[\"使用中间件\",{\"1\":{\"364\":1}}],[\"使用以下代码作为应用程序的入口点\",{\"1\":{\"508\":1}}],[\"使用以下基本代码来编写\",{\"1\":{\"364\":1}}],[\"使用以下命令来运行项目\",{\"1\":{\"5\":1}}],[\"使用加密算法对传输的数据进行加密\",{\"1\":{\"359\":1}}],[\"使用对称密钥对数据进行解密\",{\"1\":{\"359\":1}}],[\"使用对象或集合类型的数据结构\",{\"1\":{\"49\":1}}],[\"使用自己的私钥进行解密\",{\"1\":{\"359\":1}}],[\"使用自定义类型来描述交叉类型\",{\"1\":{\"318\":1}}],[\"使用自定义类型来描述联合类型\",{\"1\":{\"318\":1}}],[\"使用自定义类型来描述函数类型\",{\"1\":{\"318\":1}}],[\"使用自定义插件\",{\"1\":{\"298\":1}}],[\"使用onreadystatechange事件回调函数处理服务器返回的建议数据\",{\"1\":{\"347\":1}}],[\"使用获取到的数据\",{\"1\":{\"341\":1}}],[\"使用该对象向服务器发送请求\",{\"1\":{\"341\":1}}],[\"使用感叹号\",{\"1\":{\"334\":1}}],[\"使用通配符来匹配文件名或路径\",{\"1\":{\"334\":1}}],[\"使用getter\",{\"1\":{\"444\":1}}],[\"使用getter获取状态\",{\"0\":{\"430\":1}}],[\"使用git进行版本控制和远程仓库服务进行协作\",{\"1\":{\"337\":1}}],[\"使用git\",{\"1\":{\"333\":1,\"334\":12,\"335\":8,\"336\":8,\"337\":1,\"338\":5}}],[\"使用grid\",{\"1\":{\"156\":2}}],[\"使用辅助函数\",{\"1\":{\"330\":1}}],[\"使用声明合并时\",{\"1\":{\"329\":1}}],[\"使用别名\",{\"1\":{\"326\":1}}],[\"使用泛型\",{\"1\":{\"320\":1}}],[\"使用共同的属性来区分不同的类型\",{\"1\":{\"319\":1}}],[\"使用字符串字面量\",{\"1\":{\"319\":1}}],[\"使用字母\",{\"1\":{\"91\":1}}],[\"使用枚举值进行逻辑判断\",{\"1\":{\"314\":1}}],[\"使用枚举可以使代码更加清晰\",{\"1\":{\"314\":1}}],[\"使用三个点\",{\"1\":{\"313\":1}}],[\"使用等号\",{\"1\":{\"313\":1}}],[\"使用问号\",{\"1\":{\"313\":1}}],[\"使用接口\",{\"1\":{\"310\":1}}],[\"使用方括号\",{\"1\":{\"310\":1}}],[\"使用方括号运算符添加一个新属性\",{\"1\":{\"259\":1}}],[\"使用选择器来选取dom元素\",{\"1\":{\"286\":1}}],[\"使用$j来代替$\",{\"1\":{\"307\":1}}],[\"使用$\",{\"1\":{\"285\":1,\"292\":1,\"580\":1}}],[\"使用时要酌情选择\",{\"1\":{\"281\":1}}],[\"使用第三方库\",{\"1\":{\"281\":1}}],[\"使用示例\",{\"0\":{\"344\":1},\"1\":{\"281\":1}}],[\"使用正斜杠\",{\"1\":{\"279\":1}}],[\"使用正则表达式定义输入字段的模式\",{\"1\":{\"217\":1}}],[\"使用开发者工具进行内存分析和性能测试\",{\"1\":{\"275\":1}}],[\"使用递归的关键是确定递归的终止条件\",{\"1\":{\"269\":1}}],[\"使用闭包\",{\"1\":{\"258\":1}}],[\"使用指定的分隔符\",{\"1\":{\"257\":1}}],[\"使用指定的参数列表调用构造函数\",{\"1\":{\"191\":1}}],[\"使用数组泛型\",{\"1\":{\"310\":1}}],[\"使用数组字面量\",{\"1\":{\"257\":1}}],[\"使用数据库性能分析工具\",{\"1\":{\"138\":1}}],[\"使用数据库\",{\"1\":{\"133\":1}}],[\"使用单引号或双引号创建字符串\",{\"1\":{\"256\":1}}],[\"使用适当的语法\",{\"1\":{\"327\":1}}],[\"使用适当的引用管理和作用域控制\",{\"1\":{\"275\":1}}],[\"使用适当的类型检测运算符可以帮助你在代码中准确地判断数据类型\",{\"1\":{\"253\":1}}],[\"使用适当的图片格式\",{\"1\":{\"54\":1}}],[\"使用未初始化的变量或未声明的变量时\",{\"1\":{\"251\":1}}],[\"使用户可以拖动元素并将其放置到指定的位置\",{\"1\":{\"242\":1}}],[\"使用服务器端模板引擎生成\",{\"1\":{\"241\":1}}],[\"使用表单和服务器端脚本语言\",{\"1\":{\"241\":1}}],[\"使用表单验证库\",{\"1\":{\"32\":1}}],[\"使用这些操作时需要小心\",{\"1\":{\"338\":1}}],[\"使用这些方法\",{\"1\":{\"239\":1}}],[\"使用这些框架可以快速开发具有响应式布局的网页\",{\"1\":{\"233\":1}}],[\"使用框架已经不推荐\",{\"1\":{\"218\":1}}],[\"使用标记元素来表示不同的内容和结构\",{\"1\":{\"209\":1}}],[\"使用哪种模块化取决于项目的需求和环境\",{\"1\":{\"203\":1}}],[\"使用import和export关键字可以清晰地指定要导入和导出的模块内容\",{\"1\":{\"201\":1}}],[\"使用insert\",{\"1\":{\"134\":1}}],[\"使用filemtime\",{\"1\":{\"598\":1}}],[\"使用filesize\",{\"1\":{\"598\":1}}],[\"使用function关键字来定义函数\",{\"1\":{\"566\":1}}],[\"使用for循环可以在指定的次数内循环执行代码块\",{\"1\":{\"560\":1}}],[\"使用foreach循环遍历图片url数组\",{\"1\":{\"264\":1}}],[\"使用for\",{\"1\":{\"174\":1}}],[\"使用flex布局\",{\"1\":{\"155\":1}}],[\"使用float属性可以将元素从正常文档流中脱离\",{\"1\":{\"147\":1}}],[\"使用箭头操作符\",{\"1\":{\"579\":1}}],[\"使用箭头\",{\"1\":{\"172\":1}}],[\"使用箭头函数的简洁语法来定义函数\",{\"1\":{\"313\":1}}],[\"使用箭头函数可以直接在jsx语法中定义并绑定事件处理函数\",{\"1\":{\"26\":1}}],[\"使用箭头函数\",{\"1\":{\"26\":1}}],[\"使用传统的字符串需要使用转义字符\",{\"1\":{\"167\":1}}],[\"使用反引号\",{\"1\":{\"167\":1,\"256\":1}}],[\"使用逗号来跳过对应的位置\",{\"1\":{\"166\":1}}],[\"使用一个独立的事件总线或pub\",{\"1\":{\"444\":1}}],[\"使用一组小型类来构建网页布局和组件\",{\"1\":{\"160\":1}}],[\"使用一种基于\",{\"1\":{\"68\":1}}],[\"使用媒体查询\",{\"1\":{\"157\":1}}],[\"使用媒体查询可以根据不同的媒体类型和特定的css条件\",{\"1\":{\"148\":1}}],[\"使用多列布局时\",{\"1\":{\"154\":1}}],[\"使用多列布局\",{\"1\":{\"154\":1}}],[\"使用terser\",{\"1\":{\"496\":1}}],[\"使用typescript可以提供更好的类型检查和自动补全\",{\"1\":{\"444\":1}}],[\"使用then和catch来处理异步操作的结果\",{\"1\":{\"432\":1}}],[\"使用this\",{\"1\":{\"20\":2,\"429\":1,\"430\":1,\"431\":1,\"433\":1}}],[\"使用transition属性可以为元素的某个或多个属性添加过渡效果\",{\"1\":{\"152\":1}}],[\"使用过滤函数或正则表达式来检查用户输入的格式和内容\",{\"1\":{\"602\":1}}],[\"使用过滤选择器可以根据特定的条件筛选元素\",{\"1\":{\"291\":1}}],[\"使用过滤器\",{\"1\":{\"86\":1}}],[\"使用过渡效果从初始状态过渡到悬停状态\",{\"1\":{\"151\":1}}],[\"使用相对单位\",{\"1\":{\"148\":1}}],[\"使用postcss处理css\",{\"1\":{\"455\":1}}],[\"使用position\",{\"1\":{\"147\":2}}],[\"使用purecomponent和memo可以有效减少组件的不必要渲染\",{\"1\":{\"47\":1}}],[\"使用渐变作为文本颜色\",{\"1\":{\"144\":1}}],[\"使用渐变图片作为边框样式\",{\"1\":{\"144\":1}}],[\"使用外部样式表和内部样式表可以使css代码与html代码相分离\",{\"1\":{\"142\":1}}],[\"使用负载均衡和集群技术\",{\"1\":{\"138\":1}}],[\"使用高性能的硬件设备\",{\"1\":{\"138\":1}}],[\"使用javascript创建一个ajax请求对象\",{\"1\":{\"341\":1}}],[\"使用jquery的\",{\"1\":{\"301\":1}}],[\"使用jquery的ajax方法与服务器进行数据交互\",{\"1\":{\"289\":1}}],[\"使用jquery可以监听页面的滚动事件\",{\"1\":{\"301\":1}}],[\"使用jquery可以轻松地加载\",{\"1\":{\"300\":1}}],[\"使用jquery可以轻松地操作表单元素\",{\"1\":{\"294\":1}}],[\"使用jquery对dom元素进行操作\",{\"1\":{\"288\":1}}],[\"使用join语句和相关的条件来实现\",{\"1\":{\"134\":1}}],[\"使用jsx语法\",{\"1\":{\"25\":1}}],[\"使用jsx语法创建一个react元素\",{\"1\":{\"16\":1}}],[\"使用jsx语法和组件化开发方式\",{\"1\":{\"9\":1}}],[\"使用jsx创建react元素非常简单\",{\"1\":{\"16\":1}}],[\"使用jsx创建react元素\",{\"0\":{\"16\":1}}],[\"使用索引来访问数组中特定位置的元素\",{\"1\":{\"257\":1}}],[\"使用索引访问字符串中的特定字符\",{\"1\":{\"256\":2}}],[\"使用索引和约束可以提高数据库的性能和保证数据的完整性\",{\"1\":{\"134\":1}}],[\"使用索引作为key值是一种常见的误用\",{\"1\":{\"46\":1}}],[\"使用unlink\",{\"1\":{\"597\":1}}],[\"使用url\",{\"1\":{\"463\":1}}],[\"使用update语句\",{\"1\":{\"134\":1}}],[\"使用use字段指定要应用的加载器\",{\"1\":{\"455\":1}}],[\"使用use语句\",{\"1\":{\"133\":1}}],[\"使用useeffect来仅在特定条件下触发副作用逻辑\",{\"1\":{\"49\":1}}],[\"使用usememo来缓存计算结果\",{\"1\":{\"49\":1}}],[\"使用usecallback来缓存回调函数\",{\"1\":{\"49\":1}}],[\"使用mutation\",{\"1\":{\"444\":1}}],[\"使用mutation可以使状态的修改变成可追踪的\",{\"1\":{\"431\":1}}],[\"使用mapmutations来将mutation映射到组件中的方法\",{\"1\":{\"433\":1}}],[\"使用mapmutations辅助函数进行简化\",{\"1\":{\"431\":1}}],[\"使用mapactions来将action映射到组件中的方法\",{\"1\":{\"433\":1}}],[\"使用mapgetters辅助函数进行简化\",{\"1\":{\"430\":1}}],[\"使用mapstate辅助函数方式\",{\"1\":{\"429\":1}}],[\"使用module\",{\"1\":{\"200\":2}}],[\"使用mysql提供的客户端工具\",{\"1\":{\"132\":1}}],[\"使用memoized函数和记忆化技术\",{\"0\":{\"52\":1}}],[\"使用v\",{\"1\":{\"98\":1}}],[\"使用vuex的方式创建和组织你的模块\",{\"1\":{\"444\":1}}],[\"使用vuex的变异\",{\"1\":{\"443\":1}}],[\"使用vuex\",{\"0\":{\"439\":1},\"1\":{\"439\":1}}],[\"使用vue\",{\"1\":{\"91\":1,\"415\":1,\"438\":1}}],[\"使用vue的全局方法vue\",{\"1\":{\"91\":1}}],[\"使用virtual\",{\"1\":{\"45\":1}}],[\"使用性能分析工具\",{\"0\":{\"58\":1}}],[\"使用雪碧图和矢量图等\",{\"1\":{\"55\":1}}],[\"使用矢量图形\",{\"1\":{\"54\":1}}],[\"使用csrf令牌来验证请求的合法性\",{\"1\":{\"602\":1}}],[\"使用css和html压缩插件来压缩样式表和html代码\",{\"1\":{\"504\":1}}],[\"使用css动画时\",{\"1\":{\"152\":1}}],[\"使用css精灵图或矢量图\",{\"1\":{\"54\":1}}],[\"使用connect函数连接组件和redux\",{\"1\":{\"407\":1}}],[\"使用connect函数连接组件到redux\",{\"1\":{\"406\":1}}],[\"使用const关键字声明的变量也具有块级作用域\",{\"1\":{\"165\":1}}],[\"使用call\",{\"1\":{\"262\":1}}],[\"使用cdn\",{\"1\":{\"55\":1}}],[\"使用classname属性来指定元素的类名\",{\"1\":{\"15\":1}}],[\"使用classname属性代替html中的class属性来定义元素的类名\",{\"1\":{\"14\":1}}],[\"使用原始图片尺寸展示一张小图会导致浪费带宽和加载时间\",{\"1\":{\"54\":1}}],[\"使用分页和懒加载\",{\"1\":{\"55\":1}}],[\"使用分页和虚拟滚动\",{\"0\":{\"53\":1}}],[\"使用分页组件或自定义ui展示当前页面的数据\",{\"1\":{\"53\":1}}],[\"使用es6的动态导入语法import\",{\"1\":{\"480\":1}}],[\"使用es6的import语法\",{\"1\":{\"458\":1}}],[\"使用entry选项与optimization\",{\"1\":{\"458\":1}}],[\"使用effect钩子进行异步加载\",{\"1\":{\"50\":1}}],[\"使用event\",{\"1\":{\"33\":1}}],[\"使用生命周期方法进行异步加载\",{\"1\":{\"50\":1}}],[\"使用生命周期方法和effect钩子进行异步加载\",{\"0\":{\"50\":1}}],[\"使用虚拟化技术\",{\"1\":{\"49\":1}}],[\"使用合适的where条件和索引\",{\"1\":{\"138\":1}}],[\"使用合适的数据类型和字段长度\",{\"1\":{\"138\":1}}],[\"使用合适的数据结构\",{\"1\":{\"49\":1}}],[\"使用合适的图片尺寸\",{\"1\":{\"54\":1}}],[\"使用合适的组件拆分方法\",{\"1\":{\"49\":1}}],[\"使用source\",{\"0\":{\"500\":1}}],[\"使用strtoupper\",{\"1\":{\"547\":1}}],[\"使用state中的状态属性\",{\"1\":{\"429\":1}}],[\"使用state管理应用程序的状态\",{\"0\":{\"429\":1}}],[\"使用store\",{\"1\":{\"402\":1}}],[\"使用style\",{\"1\":{\"463\":1}}],[\"使用style标签定义css样式\",{\"1\":{\"142\":1}}],[\"使用style属性传递一个javascript对象来定义元素的样式\",{\"1\":{\"15\":1}}],[\"使用style属性传递一个javascript对象\",{\"1\":{\"14\":1}}],[\"使用symbol\",{\"1\":{\"174\":2}}],[\"使用symbol作为属性键时\",{\"1\":{\"174\":1}}],[\"使用self变量捕获正确的this值\",{\"1\":{\"262\":1}}],[\"使用select语句\",{\"1\":{\"134\":1}}],[\"使用setdata函数更新组件状态\",{\"1\":{\"50\":1}}],[\"使用shouldcomponentupdate或react\",{\"1\":{\"49\":1}}],[\"使用shouldcomponentupdate进行手动优化\",{\"0\":{\"48\":1}}],[\"使用场景\",{\"1\":{\"47\":2}}],[\"使用每个列表项的唯一id作为key值\",{\"1\":{\"46\":1}}],[\"使用key属性可以帮助react更准确地确定哪些元素需要更新\",{\"1\":{\"46\":1}}],[\"使用key属性可以对react元素列表的性能进行优化\",{\"1\":{\"46\":1}}],[\"使用key属性进行性能优化\",{\"0\":{\"46\":1}}],[\"使用htmlwebpackplugin生成html文件\",{\"1\":{\"488\":1}}],[\"使用html标签\",{\"1\":{\"15\":1}}],[\"使用https并不一定意味着所有安全问题都解决了\",{\"1\":{\"359\":1}}],[\"使用https需要服务器获得有效的ssl证书并进行配置\",{\"1\":{\"359\":1}}],[\"使用hooks需要确保react的版本不低于16\",{\"1\":{\"43\":1}}],[\"使用规则\",{\"1\":{\"43\":1}}],[\"使用上下文api可以更灵活地共享数据\",{\"1\":{\"37\":1}}],[\"使用上下文api\",{\"1\":{\"37\":1}}],[\"使用\",{\"1\":{\"31\":2,\"88\":1,\"102\":1,\"152\":1,\"186\":1,\"196\":1,\"198\":1,\"226\":1,\"231\":1,\"234\":1,\"235\":4,\"237\":1,\"241\":1,\"244\":1,\"256\":3,\"257\":1,\"267\":1,\"272\":1,\"275\":1,\"281\":3,\"287\":1,\"290\":1,\"291\":1,\"295\":1,\"296\":1,\"297\":1,\"303\":3,\"304\":1,\"305\":1,\"306\":2,\"310\":3,\"311\":2,\"312\":1,\"313\":1,\"318\":2,\"319\":2,\"320\":2,\"322\":2,\"325\":2,\"326\":2,\"334\":1,\"335\":1,\"365\":8,\"369\":1,\"384\":1,\"390\":1,\"393\":3,\"396\":1,\"414\":1,\"440\":1,\"519\":1,\"538\":1,\"584\":1}}],[\"使用函数组件中的钩子\",{\"1\":{\"26\":1}}],[\"使用类方法作为回调传递\",{\"1\":{\"539\":1}}],[\"使用类组件会引入一些额外的复杂性和冗余代码\",{\"1\":{\"40\":1}}],[\"使用类组件中的方法\",{\"1\":{\"26\":1}}],[\"使用类似html的属性来传递数据给标签\",{\"1\":{\"15\":1}}],[\"使用类似html的标签来描述元素的结构\",{\"1\":{\"15\":1}}],[\"使用片段\",{\"1\":{\"15\":1}}],[\"使用空标签\",{\"1\":{\"15\":1}}],[\"使用花括号和斜杠\",{\"1\":{\"15\":1}}],[\"使用驼峰命名属性等\",{\"1\":{\"14\":1}}],[\"使得你可以在一个文件中重复使用共享的代码\",{\"1\":{\"599\":1}}],[\"使得算法可以独立于使用它的客户端变化\",{\"1\":{\"592\":1}}],[\"使得程序具有更好的可扩展性\",{\"1\":{\"583\":1}}],[\"使得程序能够在执行耗时的操作时不被阻塞\",{\"1\":{\"322\":1}}],[\"使得为你的应用程序创建和使用\",{\"1\":{\"497\":1}}],[\"使得可以在不刷新整个页面的情况下\",{\"1\":{\"461\":1}}],[\"使得可以根据用户的操作实时改变页面内容\",{\"1\":{\"342\":1}}],[\"使得模块的改动可以立即生效\",{\"1\":{\"459\":1}}],[\"使得前端开发更加高效\",{\"1\":{\"448\":1}}],[\"使得状态的变更和获取变得简单和可靠\",{\"1\":{\"426\":1}}],[\"使得状态管理更具结构性和可扩展性\",{\"1\":{\"404\":1}}],[\"使得每个部分都可以单独测试和维护\",{\"1\":{\"407\":1}}],[\"使得它可以处理更复杂的逻辑和异步操作\",{\"1\":{\"405\":1}}],[\"使得它成为一个强大且受欢迎的状态管理库\",{\"1\":{\"404\":1}}],[\"使得将组件与redux状态进行绑定变得非常简单和灵活\",{\"1\":{\"404\":1}}],[\"使得组件可以独立开发和复用\",{\"1\":{\"407\":1}}],[\"使得组件的开发更加专注和独立\",{\"1\":{\"404\":1}}],[\"使得组件变得更加灵活和可扩展\",{\"1\":{\"23\":1}}],[\"使得应用程序的不同组件可以共享和访问同一个状态树\",{\"1\":{\"401\":1}}],[\"使得应用程序具有更快的响应速度和更好的用户体验\",{\"1\":{\"343\":1}}],[\"使得实时通信变得更加便捷和高效\",{\"1\":{\"343\":1}}],[\"使得发送ajax请求变得更加简单和灵活\",{\"1\":{\"343\":1}}],[\"使得使用ajax更加方便和高效\",{\"1\":{\"340\":1}}],[\"使得该声明文件中的类型和接口可用于当前文件的编译环境中\",{\"1\":{\"331\":1}}],[\"使得\",{\"1\":{\"330\":1}}],[\"使得处理序列的逻辑更加灵活\",{\"1\":{\"323\":1}}],[\"使得异步代码的编写和测试更加简洁和可控\",{\"1\":{\"405\":1}}],[\"使得异步代码的写法更像同步代码\",{\"1\":{\"272\":1}}],[\"使得异步操作的编写和阅读更加直观\",{\"1\":{\"195\":1}}],[\"使得我们能够编写更高效和响应性的代码\",{\"1\":{\"271\":1}}],[\"使得外部作用域的变量在函数执行完毕后依然存在\",{\"1\":{\"261\":1}}],[\"使得commonjs模块和es模块能够共存和互相转换\",{\"1\":{\"203\":1}}],[\"使得css的编写更加模块化\",{\"1\":{\"161\":1}}],[\"使得编译器可以进行静态优化和分析\",{\"1\":{\"201\":1}}],[\"使得编写和编译模板更为简单直观\",{\"1\":{\"10\":1}}],[\"使得代码的流程更加直观和易于维护\",{\"1\":{\"196\":1}}],[\"使得代码更加模块化和可维护\",{\"1\":{\"329\":1}}],[\"使得代码更加简洁和可读\",{\"1\":{\"321\":1}}],[\"使得代码更加清晰\",{\"1\":{\"42\":1}}],[\"使得代码更具可读性和可理解性\",{\"1\":{\"201\":1}}],[\"使得代码更具可读性和可维护性\",{\"1\":{\"195\":1}}],[\"使得代码更具可重用性和可维护性\",{\"1\":{\"23\":1}}],[\"使得代码更易于理解\",{\"1\":{\"9\":1}}],[\"使得添加和删除参数更加方便\",{\"1\":{\"172\":1}}],[\"使得页面更具吸引力和多样性\",{\"1\":{\"153\":1}}],[\"使得页面更新的效率更高\",{\"1\":{\"128\":1}}],[\"使得布局更加灵活适应不同的屏幕大小\",{\"1\":{\"148\":1}}],[\"使得在vue应用中实现过渡和动画效果变得更加简单和灵活\",{\"1\":{\"98\":1}}],[\"使得在vue应用中实现过渡和动画变得简单和灵活\",{\"1\":{\"98\":1}}],[\"使得用户在使用应用时可以获得更流畅的页面切换体验\",{\"1\":{\"63\":1}}],[\"使得开发者能够更加轻松地创建高质量的javascript应用程序\",{\"1\":{\"309\":1}}],[\"使得开发者能够更容易地定位并修复错误\",{\"1\":{\"99\":1}}],[\"使得开发者可以更灵活地设计和实现各种应用程序\",{\"1\":{\"583\":1}}],[\"使得开发者可以更方便地进行类型检查和开发\",{\"1\":{\"99\":1}}],[\"使得开发者可以按需加载所需的功能\",{\"1\":{\"99\":1}}],[\"使得开发者可以轻松地构建和管理spa应用\",{\"1\":{\"63\":1}}],[\"使得开发人员可以轻松地拓展和定制应用程序的功能\",{\"1\":{\"363\":1}}],[\"使得开发人员可以在javascript中编写组件\",{\"1\":{\"9\":1}}],[\"使得开发人员能够使用\",{\"1\":{\"363\":1}}],[\"使得开发人员能够高效地构建交互性强\",{\"1\":{\"8\":1}}],[\"使得react成为一个流行的前端开发框架\",{\"1\":{\"45\":1}}],[\"它简单易用\",{\"1\":{\"604\":1}}],[\"它记住了传递给\",{\"1\":{\"590\":1}}],[\"它支持热模块替换\",{\"1\":{\"490\":1}}],[\"它支持变量\",{\"1\":{\"161\":1}}],[\"它还会自动启用一些默认配置项\",{\"1\":{\"457\":1}}],[\"它还会执行更快的增量构建\",{\"1\":{\"457\":1}}],[\"它还可以通过扩展机制\",{\"1\":{\"464\":1}}],[\"它还可以通过\",{\"1\":{\"186\":1}}],[\"它演示了如何使用vuex来管理应用程序的状态\",{\"1\":{\"440\":1}}],[\"它采用集中式存储管理应用的所有组件的状态\",{\"1\":{\"425\":1}}],[\"它与\",{\"1\":{\"409\":1}}],[\"它与for\",{\"1\":{\"191\":1}}],[\"它根据action的类型来返回一个新的状态对象\",{\"1\":{\"401\":1}}],[\"它只定义了一个类应该实现哪些方法\",{\"1\":{\"591\":1}}],[\"它只是打印字符串\",{\"1\":{\"569\":1}}],[\"它只依赖于传入的参数\",{\"1\":{\"401\":1}}],[\"它只能被赋予\",{\"1\":{\"310\":1}}],[\"它都应该返回相同的输出\",{\"1\":{\"401\":1}}],[\"它都会被自动封装在一个\",{\"1\":{\"196\":1}}],[\"它存储应用程序的状态\",{\"1\":{\"401\":1}}],[\"它尤其适用于大型和复杂的应用程序\",{\"1\":{\"400\":1}}],[\"它作为父路由的占位符\",{\"1\":{\"396\":1}}],[\"它取代了\",{\"1\":{\"389\":1}}],[\"它确保用户是其所声称的身份\",{\"1\":{\"370\":1}}],[\"它基于es模块的静态分析能力\",{\"1\":{\"462\":1}}],[\"它基于\",{\"1\":{\"363\":1}}],[\"它基于标准\",{\"1\":{\"60\":1}}],[\"它维护一个连接的池子\",{\"1\":{\"358\":1}}],[\"它被设计为快速且减少资源消耗\",{\"1\":{\"604\":1}}],[\"它被设计为高性能\",{\"1\":{\"604\":1}}],[\"它被广泛用于软件开发项目的版本控制和协作管理\",{\"1\":{\"333\":1}}],[\"它被移出任务队列\",{\"1\":{\"270\":1}}],[\"它提供一种方法来访问集合中的元素\",{\"1\":{\"323\":1}}],[\"它提供了简洁\",{\"1\":{\"604\":1}}],[\"它提供了简单而直观的api\",{\"1\":{\"343\":1}}],[\"它提供了更高级的抽象和工具\",{\"1\":{\"506\":1}}],[\"它提供了更简洁和强大的api来发送http请求和处理响应\",{\"1\":{\"343\":1}}],[\"它提供了更精确的类型检查\",{\"1\":{\"317\":1}}],[\"它提供了修改和控制对象行为的灵活性\",{\"1\":{\"188\":1}}],[\"它提供了一个强大的工具来帮助你调试和优化vuex的状态管理\",{\"1\":{\"438\":1}}],[\"它提供了一组强大的功能\",{\"1\":{\"363\":1}}],[\"它提供了一组用于在函数式组件中使用状态和其他特性的函数\",{\"1\":{\"40\":1}}],[\"它提供了一种集中式的状态管理机制\",{\"1\":{\"401\":1}}],[\"它提供了一种声明式的方式来添加功能或改变逻辑\",{\"1\":{\"204\":1}}],[\"它提供了一种简单的方式来构建表单数据\",{\"1\":{\"282\":1}}],[\"它提供了一种简单且易于使用的模块化方案\",{\"1\":{\"200\":1}}],[\"它提供了一种简洁而强大的模块化语法\",{\"1\":{\"201\":1}}],[\"它提供了一种更优雅的方式来管理和处理异步操作\",{\"1\":{\"192\":1}}],[\"它提供了一种统一的访问方式\",{\"1\":{\"184\":1}}],[\"它提供了许多有用的特性\",{\"1\":{\"161\":1}}],[\"它提供了直观的类和组件\",{\"1\":{\"160\":1}}],[\"它提供了路由功能\",{\"1\":{\"63\":1}}],[\"它具有强大的缓存机制\",{\"1\":{\"604\":1}}],[\"它具有简洁的代码库和直观的文件结构\",{\"1\":{\"604\":1}}],[\"它具有一个\",{\"1\":{\"330\":1}}],[\"它具有\",{\"1\":{\"312\":2,\"330\":1}}],[\"它具有唯一性\",{\"1\":{\"176\":1}}],[\"它用于动态创建匿名函数\",{\"1\":{\"604\":1}}],[\"它用于在打包过程中对不同类型的资源文件进行转换和处理\",{\"1\":{\"463\":1}}],[\"它用于在元素之间创建间距\",{\"1\":{\"146\":1}}],[\"它用于执行各种任务\",{\"1\":{\"366\":1}}],[\"它用于表示任意对象类型\",{\"1\":{\"310\":1}}],[\"它表示变量存在\",{\"1\":{\"310\":1}}],[\"它表示一个异步操作的最终完成或失败\",{\"1\":{\"272\":1}}],[\"它通常在以下两个场景中使用\",{\"1\":{\"310\":1}}],[\"它通过给文件添加唯一的哈希值作为文件名的一部分来实现缓存\",{\"1\":{\"495\":1}}],[\"它通过模块化管理和打包\",{\"1\":{\"448\":1}}],[\"它通过追踪对象之间的引用关系\",{\"1\":{\"276\":1}}],[\"它通过将一个函数作为参数传递给异步操作\",{\"1\":{\"272\":1}}],[\"它通过在内存中操作轻量级的javascript对象来表示整个dom树\",{\"1\":{\"128\":1}}],[\"它扩展了javascript添加了静态类型\",{\"1\":{\"309\":1}}],[\"它指定了在函数被定义时变量和函数可被访问的范围\",{\"1\":{\"280\":1}}],[\"它指向一个原型对象\",{\"1\":{\"267\":1}}],[\"它关注数据和数据流之间的关系\",{\"1\":{\"278\":1}}],[\"它关注问题的解决步骤和功能\",{\"1\":{\"278\":1}}],[\"它强调使用纯函数\",{\"1\":{\"278\":1}}],[\"它遍历整个堆中的所有对象\",{\"1\":{\"276\":1}}],[\"它由协议\",{\"1\":{\"352\":1}}],[\"它由\",{\"1\":{\"273\":1}}],[\"它建立在\",{\"1\":{\"272\":1}}],[\"它负责处理消息队列中的任务\",{\"1\":{\"271\":1}}],[\"它负责管理和调度事件\",{\"1\":{\"264\":1}}],[\"它决定了变量的可访问性和生命周期\",{\"1\":{\"261\":1}}],[\"它接受一个store对象作为参数\",{\"1\":{\"437\":1}}],[\"它接受一个location对象作为参数并返回一个字符串或true\",{\"1\":{\"387\":1}}],[\"它接受两个参数num1和num2\",{\"1\":{\"258\":1}}],[\"它接收store的当前状态和从action传递过来的payload作为参数\",{\"1\":{\"428\":1}}],[\"它接收旧的state和action\",{\"1\":{\"407\":1}}],[\"它接收当前状态和一个action作为参数\",{\"1\":{\"401\":1}}],[\"它接收当前状态和一个action作为输入\",{\"1\":{\"401\":1}}],[\"它接收当前的状态和一个action作为输入\",{\"1\":{\"401\":1}}],[\"它接收请求和响应对象作为参数\",{\"1\":{\"365\":1}}],[\"它接收输入\",{\"1\":{\"313\":1}}],[\"它接收拒绝\",{\"1\":{\"193\":1}}],[\"它接收解决\",{\"1\":{\"193\":1}}],[\"它接收两个参数\",{\"1\":{\"192\":1}}],[\"它接收一个名为id的参数\",{\"1\":{\"420\":1}}],[\"它接收一个路由配置对象作为参数\",{\"1\":{\"398\":1}}],[\"它接收一个参数\",{\"1\":{\"324\":1}}],[\"它接收一个可迭代对象或类数组对象\",{\"1\":{\"170\":1}}],[\"它接收一个\",{\"1\":{\"110\":1}}],[\"它接收一个函数作为参数\",{\"1\":{\"110\":2}}],[\"它接收一个普通的javascript对象作为参数\",{\"1\":{\"102\":1}}],[\"它接收一个回调函数和一个依赖项数组\",{\"1\":{\"41\":2}}],[\"它接收一个context对象作为参数\",{\"1\":{\"41\":1}}],[\"它接收一个副作用函数和一个依赖项数组作为参数\",{\"1\":{\"41\":1}}],[\"它接收一个初始状态作为参数\",{\"1\":{\"41\":1}}],[\"它检查给定对象的原型链是否存在于指定类的原型链中\",{\"1\":{\"253\":1}}],[\"它返回一个负整数\",{\"1\":{\"604\":1}}],[\"它返回一个match对象\",{\"1\":{\"398\":1}}],[\"它返回一个location对象\",{\"1\":{\"398\":1}}],[\"它返回一个navigate函数\",{\"1\":{\"398\":1}}],[\"它返回一个promise对象\",{\"1\":{\"264\":1}}],[\"它返回一个表示数据类型的字符串\",{\"1\":{\"253\":1}}],[\"它返回一个对象\",{\"1\":{\"41\":1}}],[\"它已成为现代前端开发的主流模块化方案\",{\"1\":{\"201\":1}}],[\"它已经成为web开发中的主流技术之一\",{\"1\":{\"8\":1}}],[\"它使\",{\"1\":{\"506\":1}}],[\"它使代码更易于维护\",{\"1\":{\"199\":1}}],[\"它使用redux管理状态\",{\"1\":{\"406\":1}}],[\"它使用observable和基于事件的编程模型来处理异步操作\",{\"1\":{\"405\":1}}],[\"它使用了生成器函数\",{\"1\":{\"405\":1}}],[\"它使用观察者模式和数据订阅来处理异步数据流\",{\"1\":{\"278\":1}}],[\"它使用标记\",{\"1\":{\"206\":1}}],[\"它使用\",{\"1\":{\"196\":1,\"198\":1}}],[\"它使用virtual\",{\"1\":{\"45\":1}}],[\"它使用usestate创建了一个名为count的状态变量\",{\"1\":{\"42\":1}}],[\"它定义了对象应该具有的属性和方法\",{\"1\":{\"312\":1}}],[\"它定义了三个异步任务并将它们存储在变量中\",{\"1\":{\"198\":1}}],[\"它定义了盒子的可见边界\",{\"1\":{\"146\":1}}],[\"它逐步返回数据源中的每一项数据\",{\"1\":{\"198\":1}}],[\"它结合使用生成器的特性和\",{\"1\":{\"197\":1}}],[\"它调用了loadimage函数来异步加载一组图片\",{\"1\":{\"264\":1}}],[\"它调用了\",{\"1\":{\"196\":1}}],[\"它依赖于\",{\"1\":{\"195\":1}}],[\"它仍然使用了事件循环和回调函数\",{\"1\":{\"195\":1}}],[\"它就可以通过props访问到redux中的状态和调度操作\",{\"1\":{\"406\":1}}],[\"它就会变为已完成状态\",{\"1\":{\"193\":1}}],[\"它就会变为已拒绝状态\",{\"1\":{\"193\":1}}],[\"它就不可变更\",{\"1\":{\"192\":1}}],[\"它才会变为已完成状态\",{\"1\":{\"193\":1}}],[\"它有两个属性\",{\"1\":{\"579\":1}}],[\"它有两个子节点documenttype和element\",{\"1\":{\"129\":1}}],[\"它有一个\",{\"1\":{\"312\":1}}],[\"它有三个属性name\",{\"1\":{\"259\":1}}],[\"它有三种状态\",{\"1\":{\"192\":1}}],[\"它为开发人员提供了更大的灵活性和控制力\",{\"1\":{\"174\":1}}],[\"它适用于新闻\",{\"1\":{\"154\":1}}],[\"它适用于共享一些通用的逻辑\",{\"1\":{\"97\":1}}],[\"它的所有变量通常都会被删除\",{\"1\":{\"524\":1}}],[\"它的目的是在进行这些操作时不会阻塞主线程\",{\"1\":{\"511\":1}}],[\"它的目标\",{\"1\":{\"163\":1}}],[\"它的高性能\",{\"1\":{\"506\":1}}],[\"它的完整路径是\",{\"1\":{\"392\":1}}],[\"它的易用性\",{\"1\":{\"333\":1}}],[\"它的信息会从堆栈中弹出\",{\"1\":{\"277\":1}}],[\"它的信息\",{\"1\":{\"277\":1}}],[\"它的输出结果将是\",{\"1\":{\"270\":1}}],[\"它的语法是条件\",{\"1\":{\"254\":1}}],[\"它的语法更像是一种轻量级的编程语言\",{\"1\":{\"161\":1}}],[\"它的宽度\",{\"1\":{\"150\":1,\"152\":1}}],[\"它的作用是将输入的字符串首字母大写\",{\"1\":{\"86\":1}}],[\"它包括内容区域\",{\"1\":{\"146\":1}}],[\"它包含了应用程序的状态\",{\"1\":{\"440\":1}}],[\"它包含了应用程序中不同组件可能需要的数据\",{\"1\":{\"401\":1}}],[\"它包含了应用程序中所有组件可能需要的状态数据\",{\"1\":{\"400\":1}}],[\"它包含了两个属性\",{\"1\":{\"110\":1}}],[\"它包含了data和methods选项\",{\"1\":{\"97\":1}}],[\"它包含了一个默认的插槽<slot>\",{\"1\":{\"96\":1}}],[\"它包含了关于触发事件的详细信息\",{\"1\":{\"27\":1}}],[\"它包含一个状态count\",{\"1\":{\"20\":1}}],[\"它涉及一系列的优化技术和策略\",{\"1\":{\"138\":1}}],[\"它也是幂等的\",{\"1\":{\"353\":1}}],[\"它也可以是一个字符串或数组\",{\"1\":{\"126\":1}}],[\"它也使得逻辑的测试和维护更加容易\",{\"1\":{\"42\":1}}],[\"它不断地从任务队列中取出任务\",{\"1\":{\"270\":1}}],[\"它不能直接读取或写入\",{\"1\":{\"180\":1}}],[\"它不会被销毁和重新创建\",{\"1\":{\"126\":1}}],[\"它不会进行缓存\",{\"1\":{\"111\":1}}],[\"它不应该被用于组件的状态或用途等其他用途\",{\"1\":{\"46\":1}}],[\"它能够将项目中的各种资源文件\",{\"1\":{\"448\":1}}],[\"它能够帮助vue跟踪元素的身份\",{\"1\":{\"70\":1}}],[\"它能够提供快速\",{\"1\":{\"45\":1}}],[\"它将程序中的数据和操作数据的方法封装在一起\",{\"1\":{\"583\":1}}],[\"它将图像文件复制到输出目录\",{\"1\":{\"455\":1}}],[\"它将应用程序的状态存储在一个单一的地方\",{\"1\":{\"425\":1}}],[\"它将被调用\",{\"1\":{\"401\":1}}],[\"它将reducers返回的新状态存储起来\",{\"1\":{\"400\":1}}],[\"它将数据和操作封装在一个单元内部\",{\"1\":{\"312\":1}}],[\"它将在其中一个输入的\",{\"1\":{\"193\":1}}],[\"它将在生成的css中插入一个线性渐变背景样式\",{\"1\":{\"161\":1}}],[\"它将每个html元素视为一个矩形的盒子\",{\"1\":{\"146\":1}}],[\"它将软件界面显示分离为两个部分\",{\"1\":{\"62\":1}}],[\"它将页面的状态映射到组件树上\",{\"1\":{\"9\":1}}],[\"它将页面的状态映射到组件树\",{\"1\":{\"8\":1}}],[\"它可以避免不同代码之间的名称冲突\",{\"1\":{\"584\":1}}],[\"它可以嵌入html中\",{\"1\":{\"513\":1}}],[\"它可以提供较好的调试性能和较快的构建速度\",{\"1\":{\"468\":1}}],[\"它可以帮助你确保接收到的数据符合预期的格式\",{\"1\":{\"603\":1}}],[\"它可以帮助你在浏览器开发工具中正确地定位错误和调试问题\",{\"1\":{\"468\":1}}],[\"它可以帮助开发者更好地理解应用程序的状态变化\",{\"1\":{\"405\":1}}],[\"它可以帮助开发者有效地管理应用程序的状态并进行可预测性的状态管理\",{\"1\":{\"400\":1}}],[\"它可以帮助开发者找到应用程序中的性能瓶颈\",{\"1\":{\"58\":1}}],[\"它可以为开发者提供一个方便的环境来实时预览和调试应用程序的变化\",{\"1\":{\"461\":1}}],[\"它可以为数字\",{\"1\":{\"314\":1}}],[\"它可以实现在开发过程中的实时预览修改的效果\",{\"1\":{\"453\":1,\"459\":1}}],[\"它可以实现复杂的多行多列布局\",{\"1\":{\"156\":1}}],[\"它可以对代码进行压缩和混淆\",{\"1\":{\"469\":1}}],[\"它可以对action进行修改\",{\"1\":{\"405\":1}}],[\"它可以对包含对象和数组的复杂数据结构进行深拷贝\",{\"1\":{\"281\":1}}],[\"它可以包装需要过渡的内容并应用过渡效果\",{\"1\":{\"395\":1}}],[\"它可以包含已经实现的代码和抽象方法\",{\"1\":{\"591\":1}}],[\"它可以包含任意的异步操作\",{\"1\":{\"436\":1}}],[\"它可以包含异步操作\",{\"1\":{\"432\":1,\"433\":1}}],[\"它可以包含组件选项\",{\"1\":{\"97\":1}}],[\"它可以包含其他的hooks\",{\"1\":{\"42\":1}}],[\"它可以处理异步操作成功和失败的情况\",{\"1\":{\"322\":1}}],[\"它可以访问并打印\",{\"1\":{\"268\":1}}],[\"它可以存储相关数据和功能\",{\"1\":{\"259\":1}}],[\"它可以用于遍历数据集合中的元素\",{\"1\":{\"582\":1}}],[\"它可以用于创建函数作用域\",{\"1\":{\"258\":1}}],[\"它可以用来与他人共享代码\",{\"1\":{\"336\":1}}],[\"它可以用来为网页添加交互性\",{\"1\":{\"248\":1}}],[\"它可以是任何合法的javascript数据类型\",{\"1\":{\"401\":1}}],[\"它可以是一个完整的网页\",{\"1\":{\"367\":1}}],[\"它可以是一个字符串或数组\",{\"1\":{\"126\":1}}],[\"它可以是整数或浮点数\",{\"1\":{\"251\":1}}],[\"它可以通过标记测试提交为\",{\"1\":{\"338\":1}}],[\"它可以通过\",{\"1\":{\"197\":1}}],[\"它可以轻松实现自适应且可伸缩的布局结构\",{\"1\":{\"155\":1}}],[\"它可以将文本内容在多个列中呈现\",{\"1\":{\"154\":1}}],[\"它可以在其被定义的上下文之外访问和操作该上下文中的变量\",{\"1\":{\"590\":1}}],[\"它可以在需要的地方直接定义和使用\",{\"1\":{\"590\":1}}],[\"它可以在不同的屏幕尺寸上创建灵活的\",{\"1\":{\"148\":1}}],[\"它可以在内容和边框之间创建间距\",{\"1\":{\"146\":1}}],[\"它可以返回一个\",{\"1\":{\"95\":1}}],[\"它可以让我们将页面划分为多个部分\",{\"1\":{\"90\":1}}],[\"它可以应用于各种复杂的计算过程\",{\"1\":{\"52\":1}}],[\"它可以根据用户的操作或需要来加载所需的代码模块\",{\"1\":{\"51\":1}}],[\"它会返回一个promise对象\",{\"1\":{\"467\":1}}],[\"它会根据配置的解析规则来找到对应的模块并进行加载\",{\"1\":{\"460\":1}}],[\"它会从本地存储中恢复持久化的状态\",{\"1\":{\"439\":1}}],[\"它会通过commit方法触发一个mutation来通知store\",{\"1\":{\"428\":1}}],[\"它会立即触发状态的更新\",{\"1\":{\"401\":1}}],[\"它会将控制权交回给调用方\",{\"1\":{\"195\":1}}],[\"它会将jsx代码转换为纯javascript代码\",{\"1\":{\"13\":1}}],[\"它会被放入事件队列中\",{\"1\":{\"264\":1}}],[\"它会被包装为一个已解决\",{\"1\":{\"196\":1}}],[\"它会被包装成一个已解决的\",{\"1\":{\"195\":1}}],[\"它会被转化为一个返回\",{\"1\":{\"195\":1}}],[\"它会被自动聚焦\",{\"1\":{\"70\":1}}],[\"它会在内存中维护每个对象的引用计数\",{\"1\":{\"276\":1}}],[\"它会在所有输入的\",{\"1\":{\"193\":1}}],[\"它会在生成的css中插入一个线性渐变背景样式\",{\"1\":{\"161\":2}}],[\"它会在\",{\"1\":{\"126\":1}}],[\"它会在组件挂载后立即被调用\",{\"1\":{\"50\":1}}],[\"它会检查多个方面的性能指标\",{\"1\":{\"58\":1}}],[\"它类似于事件\",{\"1\":{\"436\":1}}],[\"它类似于组件中的计算属性\",{\"1\":{\"436\":1}}],[\"它类似于组件中的data\",{\"1\":{\"436\":1}}],[\"它类似于purecomponent\",{\"1\":{\"47\":1}}],[\"它类似于redux中的reducer函数\",{\"1\":{\"41\":1}}],[\"它自动实现了shouldcomponentupdate方法\",{\"1\":{\"47\":1}}],[\"它在执行过程中可以产生一系列的值\",{\"1\":{\"582\":1}}],[\"它在http的基础上使用ssl\",{\"1\":{\"352\":1}}],[\"它在不重新加载整个页面的情况下\",{\"1\":{\"340\":1}}],[\"它在不同的上下文中指向不同的值\",{\"1\":{\"262\":1}}],[\"它在函数内部是可访问的\",{\"1\":{\"261\":1}}],[\"它在整个程序执行期间都是可访问的\",{\"1\":{\"261\":1}}],[\"它在参数声明之前应用\",{\"1\":{\"204\":1}}],[\"它在属性声明之前应用\",{\"1\":{\"204\":1}}],[\"它在方法声明之前应用\",{\"1\":{\"204\":1}}],[\"它在类声明之前应用\",{\"1\":{\"204\":1}}],[\"它在生成器函数中结合了\",{\"1\":{\"197\":1}}],[\"它在创建唯一键值\",{\"1\":{\"174\":1}}],[\"它在渲染和更新方面比vue\",{\"1\":{\"99\":1}}],[\"它在react中起到了重要的作用\",{\"1\":{\"45\":1}}],[\"它在dom更新前同步执行\",{\"1\":{\"41\":1}}],[\"它利用了函数组件的闭包特性来存储状态和处理逻辑\",{\"1\":{\"43\":1}}],[\"它允许您动态地指定要在程序中执行的代码\",{\"1\":{\"539\":1}}],[\"它允许开发人员使用类似于node\",{\"1\":{\"448\":1}}],[\"它允许开发者将一些公共的选项\",{\"1\":{\"97\":1}}],[\"它允许将相关的数据和行为组合到一个单独的实体中\",{\"1\":{\"579\":1}}],[\"它允许将大型状态库拆分为小型\",{\"1\":{\"434\":1}}],[\"它允许将路由组件定义为一个返回组件的函数\",{\"1\":{\"423\":1}}],[\"它允许将页面或组件的部分内容延迟到实际需要时再加载\",{\"1\":{\"51\":1}}],[\"它允许action创建函数返回函数而不是普通的action对象\",{\"1\":{\"405\":1}}],[\"它允许编译器根据赋值语句的右侧表达式推导出变量的类型\",{\"1\":{\"316\":1}}],[\"它允许不同的对象对相同的消息作出不同的响应\",{\"1\":{\"312\":1}}],[\"它允许一个类继承另一个类的属性和方法\",{\"1\":{\"312\":1}}],[\"它允许在执行时间较长的操作\",{\"1\":{\"272\":1}}],[\"它允许我们定义一个固定长度且每个元素类型可以不同的数组\",{\"1\":{\"310\":1}}],[\"它允许我们直接访问和修改对象的原型\",{\"1\":{\"267\":1}}],[\"它允许我们在vue应用中建立单页面应用\",{\"1\":{\"412\":1}}],[\"它允许我们在定义函数\",{\"1\":{\"320\":1}}],[\"它允许我们在组件中定义一些带有特殊用途的占位符\",{\"1\":{\"96\":1}}],[\"它允许我们在javascript代码中直接书写类似于html的标记结构\",{\"1\":{\"13\":1}}],[\"它允许你执行一个替换而不是添加一个新的路由到历史记录中\",{\"1\":{\"393\":1}}],[\"它允许你通过将组件与\",{\"1\":{\"374\":1}}],[\"它允许你在同一个仓库中同时进行不同的工作\",{\"1\":{\"335\":1}}],[\"它允许你在函数式组件中使用状态\",{\"1\":{\"40\":1}}],[\"它允许你扩展或合并已存在的类型声明\",{\"1\":{\"329\":1}}],[\"它允许你根据设备的属性\",{\"1\":{\"157\":1}}],[\"它允许你指定子组件实例的暴露给父组件的api\",{\"1\":{\"41\":1}}],[\"它充当了中介者的角色\",{\"1\":{\"38\":1}}],[\"它们为开发者提供了更多的工具和选项来处理复杂的逻辑和业务需求\",{\"1\":{\"590\":1}}],[\"它们描述了对象的状态和行为\",{\"1\":{\"579\":1}}],[\"它们没有固定的函数名\",{\"1\":{\"539\":1}}],[\"它们用于处理和转换项目中的不同模块\",{\"1\":{\"476\":1}}],[\"它们用于定义特定的操作行为和功能\",{\"1\":{\"174\":1}}],[\"它们各自独立工作\",{\"1\":{\"463\":1}}],[\"它们各自创建了不同的作用域\",{\"1\":{\"261\":1}}],[\"它们只会在其依赖项发生变化时重新计算\",{\"1\":{\"443\":1}}],[\"它们共同提供了一种强大的状态管理和视图渲染的解决方案\",{\"1\":{\"406\":1}}],[\"它们定义了不同的url模式和对应的组件\",{\"1\":{\"392\":1}}],[\"它们允许将静态模板与动态数据结合\",{\"1\":{\"367\":1}}],[\"它们都可以用来描述对象的结构\",{\"1\":{\"318\":1}}],[\"它们都可以在某些情况下避免不必要的重新渲染\",{\"1\":{\"47\":1}}],[\"它们都有一个\",{\"1\":{\"312\":1}}],[\"它们可以用于缓存数据库查询结果\",{\"1\":{\"601\":1}}],[\"它们可以用作变量的类型注解\",{\"1\":{\"310\":1}}],[\"它们可以帮助您实现更灵活和高效的代码\",{\"1\":{\"582\":1}}],[\"它们可以帮助减少初始加载时间和提高应用性能\",{\"1\":{\"51\":1}}],[\"它们可以执行更复杂的任务\",{\"1\":{\"488\":1}}],[\"它们可以处理webpack整个生命周期中的不同事件\",{\"1\":{\"476\":1}}],[\"它们可以捕获错误对象并发送适当的响应\",{\"1\":{\"366\":1}}],[\"它们将处理webpack遇到的不同类型的文件\",{\"1\":{\"487\":1}}],[\"它们将按照注册的顺序依次执行\",{\"1\":{\"437\":1}}],[\"它们将无法被垃圾回收\",{\"1\":{\"275\":1}}],[\"它们将自动填充网格容器的单元格\",{\"1\":{\"156\":1}}],[\"它们会自动将表达式的结果作为返回值\",{\"1\":{\"571\":1}}],[\"它们会根据你的开发或生产环境自动启用一些优化\",{\"1\":{\"489\":1}}],[\"它们会持续引用回调函数\",{\"1\":{\"275\":1}}],[\"它们会被压入栈中的函数调用栈帧中\",{\"1\":{\"273\":1}}],[\"它们会按照混入的顺序依次被调用\",{\"1\":{\"97\":1}}],[\"它们比宏任务优先级更高\",{\"1\":{\"271\":1}}],[\"它们被触发并发送到reducers\",{\"1\":{\"400\":1}}],[\"它们被广泛应用于\",{\"1\":{\"323\":1}}],[\"它们被添加到消息队列中\",{\"1\":{\"271\":1}}],[\"它们被称为\",{\"1\":{\"110\":1}}],[\"它们分别通过提交相应的mutation来修改count的值\",{\"1\":{\"440\":1}}],[\"它们分别是\",{\"1\":{\"270\":1}}],[\"它们分别在不同的阶段被调用\",{\"1\":{\"87\":1}}],[\"它们在任何地方都可访问\",{\"1\":{\"522\":1}}],[\"它们在不同的上下文中提供了有用的信息\",{\"1\":{\"521\":1}}],[\"它们在框架和库的开发中非常有用\",{\"1\":{\"324\":1}}],[\"它们在栈中直接分配和释放\",{\"1\":{\"273\":1}}],[\"它们在主线程上同步执行并立即输出\",{\"1\":{\"270\":1}}],[\"它们在一些细节和功能上有一些区别\",{\"1\":{\"14\":1}}],[\"它们的执行顺序是从上到下的\",{\"1\":{\"324\":1}}],[\"它们的回调函数会被放入事件队列中\",{\"1\":{\"264\":1}}],[\"它们的值分别表示基础样式和覆盖样式\",{\"1\":{\"85\":1}}],[\"它们的值分别表示要添加到元素上的类名\",{\"1\":{\"82\":1}}],[\"它们的值分别表示是否应该添加对应的类名\",{\"1\":{\"82\":1}}],[\"它们的值分别来自\",{\"1\":{\"82\":1}}],[\"它们有一些相似之处\",{\"1\":{\"591\":1}}],[\"它们有助于构建灵活\",{\"1\":{\"183\":1}}],[\"它们有以下区别\",{\"1\":{\"20\":1}}],[\"它们基于\",{\"1\":{\"181\":1}}],[\"它们也是不相等的\",{\"1\":{\"174\":1}}],[\"它们引入了一些功能和语法\",{\"1\":{\"161\":1}}],[\"它们提供了更灵活的函数定义和使用方式\",{\"1\":{\"590\":1}}],[\"它们提供了更多额外的性能分析和改进建议\",{\"1\":{\"58\":1}}],[\"它们提供了一些常用的样式和组件\",{\"1\":{\"160\":1}}],[\"它们本身并不存储任何数据\",{\"1\":{\"108\":1}}],[\"它们主要依赖props而不是内部状态\",{\"1\":{\"47\":1}}],[\"它们之间有一些区别\",{\"1\":{\"18\":1}}],[\"它是存储在vuex的store中的\",{\"1\":{\"429\":1}}],[\"它是store\",{\"1\":{\"401\":1}}],[\"它是连接视图层和状态管理层之间的重要桥梁\",{\"1\":{\"401\":1}}],[\"它是触发状态更新的一种方式\",{\"1\":{\"401\":1}}],[\"它是redux中最核心的概念之一\",{\"1\":{\"401\":1}}],[\"它是react使用的一种轻量级的表示实际dom结构的javascript对象\",{\"1\":{\"11\":1}}],[\"它是基于http协议的加密版本\",{\"1\":{\"359\":1}}],[\"它是浏览器和服务器之间通信的基础协议\",{\"1\":{\"351\":1}}],[\"它是浏览器提供的内置对象\",{\"1\":{\"343\":1}}],[\"它是在web开发中最为重要的协议之一\",{\"1\":{\"351\":1}}],[\"它是在内存中以javascript对象的形式表示整个dom树的副本\",{\"1\":{\"128\":1}}],[\"它是现代软件开发中广泛应用的一项技术\",{\"1\":{\"327\":1}}],[\"它是创建对象的蓝图或模板\",{\"1\":{\"312\":1}}],[\"它是指存储\",{\"1\":{\"274\":1}}],[\"它是\",{\"1\":{\"267\":1,\"394\":1,\"397\":1}}],[\"它是由\",{\"1\":{\"267\":1}}],[\"它是处理异步代码的一种常见模式\",{\"1\":{\"258\":1}}],[\"它是一种元编程的概念\",{\"1\":{\"204\":1}}],[\"它是一种唯一且不可变的值\",{\"1\":{\"174\":1}}],[\"它是一个包含应用程序状态的单一数据容器\",{\"1\":{\"403\":1}}],[\"它是一个通配符路由\",{\"1\":{\"392\":1}}],[\"它是一个参数化路径\",{\"1\":{\"392\":1}}],[\"它是一个非常宽松的类型\",{\"1\":{\"310\":1}}],[\"它是一个\",{\"1\":{\"310\":1}}],[\"它是一个函数\",{\"1\":{\"104\":1}}],[\"它是一个采用组件化开发思想的库\",{\"1\":{\"8\":1}}],[\"它是通过html文档解析而得到的\",{\"1\":{\"129\":1}}],[\"它是对实际dom的抽象表示\",{\"1\":{\"45\":1}}],[\"它是从父组件传递到子组件的数据\",{\"1\":{\"11\":1}}],[\"它专注于构建用户界面的视图层\",{\"1\":{\"9\":1}}],[\"以了解更多关于php过滤器的信息\",{\"1\":{\"603\":1}}],[\"以了解正确的语法和使用方法\",{\"1\":{\"467\":1}}],[\"以获取最新的安全修复和增强功能\",{\"1\":{\"602\":1}}],[\"以获取更好的性能和安全性\",{\"1\":{\"504\":1}}],[\"以\",{\"1\":{\"514\":1,\"528\":2,\"531\":1,\"539\":1}}],[\"以确定问题是否与特定的插件或配置有关\",{\"1\":{\"502\":1}}],[\"以确保每个模块的state都是独立的实例\",{\"1\":{\"436\":1}}],[\"以确保数据的变化和流动可控和可预测\",{\"1\":{\"428\":1}}],[\"以确保数据的传递和共享\",{\"1\":{\"37\":1}}],[\"以确保正确匹配到预期的组件\",{\"1\":{\"414\":1}}],[\"以确保软件系统的功能和性能符合需求\",{\"1\":{\"372\":1}}],[\"以确保连接的可靠关闭\",{\"1\":{\"361\":1}}],[\"以确保缓存机制正常工作\",{\"1\":{\"356\":1}}],[\"以确保所有用户\",{\"1\":{\"246\":1}}],[\"以确保属性的唯一性\",{\"1\":{\"174\":1}}],[\"以确保在事件触发时执行相应的操作\",{\"1\":{\"26\":1}}],[\"以可视化地查看打包后的文件分析报告\",{\"1\":{\"492\":1}}],[\"以供应用程序使用\",{\"1\":{\"487\":1}}],[\"以减小初始加载时间并提高性能\",{\"1\":{\"493\":1}}],[\"以减小文件大小并提高加载速度\",{\"1\":{\"479\":1}}],[\"以减少最后生成的\",{\"1\":{\"497\":1}}],[\"以减少后续页面加载的时间\",{\"1\":{\"483\":1}}],[\"以减少网络请求和服务器计算的次数\",{\"1\":{\"465\":1}}],[\"以减少重新加载和初始化的开销\",{\"1\":{\"443\":1}}],[\"以减少扫描的数据量\",{\"1\":{\"138\":1}}],[\"以删除旧的打包文件\",{\"1\":{\"476\":1}}],[\"以bootstrap为例\",{\"1\":{\"474\":1}}],[\"以图片为例\",{\"1\":{\"473\":1}}],[\"以sass为例\",{\"1\":{\"472\":1}}],[\"以启用tree\",{\"1\":{\"469\":1}}],[\"以eval的方式生成较快的映射\",{\"1\":{\"468\":2}}],[\"以eval的方式生成源映射\",{\"1\":{\"468\":1}}],[\"以降低对资源的访问开销\",{\"1\":{\"465\":1}}],[\"以达到减少打包文件大小和提升应用程序性能的目的\",{\"1\":{\"462\":1}}],[\"以达到相互通信的目的\",{\"1\":{\"444\":1}}],[\"以最小化输出文件的体积并提高性能\",{\"1\":{\"457\":1}}],[\"以方便调试\",{\"1\":{\"457\":1}}],[\"以提供最佳的构建结果\",{\"1\":{\"457\":1}}],[\"以提高读取速度\",{\"1\":{\"601\":1}}],[\"以提高代码的可维护性和重用性\",{\"1\":{\"466\":1}}],[\"以提高程序的稳定性和健壮性\",{\"1\":{\"349\":1}}],[\"以提高可访问性和搜索引擎优化\",{\"1\":{\"230\":1}}],[\"以提高系统的可扩展性和容错性\",{\"1\":{\"138\":1}}],[\"以提高并发性能\",{\"1\":{\"138\":1}}],[\"以提高用户体验\",{\"1\":{\"55\":1}}],[\"以提高应用程序的性能\",{\"1\":{\"47\":1}}],[\"以提高列表渲染的性能\",{\"1\":{\"46\":1}}],[\"以提高性能和效率\",{\"1\":{\"276\":1}}],[\"以提高性能和降低资源消耗\",{\"1\":{\"8\":1}}],[\"以提高性能\",{\"1\":{\"11\":1}}],[\"以优化加载性能\",{\"1\":{\"453\":1,\"458\":1}}],[\"以满足不同环境的需求\",{\"1\":{\"479\":1}}],[\"以满足项目的需求\",{\"1\":{\"456\":1}}],[\"以满足具体需求\",{\"1\":{\"456\":1}}],[\"以满足具体的需求\",{\"1\":{\"444\":1}}],[\"以满足你的需求\",{\"1\":{\"5\":1}}],[\"以检测对状态的非法修改和调试代码\",{\"1\":{\"443\":1}}],[\"以保证缓存数据的一致性\",{\"1\":{\"465\":1}}],[\"以保证应用程序的正确性\",{\"1\":{\"459\":1}}],[\"以保证程序的稳定性和可靠性\",{\"1\":{\"277\":1}}],[\"以保持状态的一致性\",{\"1\":{\"433\":1}}],[\"以改变状态\",{\"1\":{\"406\":1}}],[\"以改善应用程序的性能和加载速度\",{\"1\":{\"496\":1}}],[\"以改善网页在辅助技术中的表现\",{\"1\":{\"246\":1}}],[\"以改善用户体验\",{\"1\":{\"32\":1}}],[\"以在应用程序中管理路由\",{\"1\":{\"398\":1}}],[\"以记录运行时的信息和错误\",{\"1\":{\"372\":1}}],[\"以验证它们之间的交互和协同工作是否正常\",{\"1\":{\"372\":1}}],[\"以释放资源\",{\"1\":{\"358\":1}}],[\"以恢复用户的状态信息\",{\"1\":{\"357\":1}}],[\"以秒为单位\",{\"1\":{\"356\":1}}],[\"以字节为单位\",{\"1\":{\"355\":1}}],[\"以post方式发送表单数据到服务器上的submit\",{\"1\":{\"346\":1}}],[\"以进行路径映射的配置\",{\"1\":{\"328\":1}}],[\"以同步的方式处理异步操作\",{\"1\":{\"322\":1}}],[\"以处理子元素触发的事件\",{\"1\":{\"302\":1}}],[\"以免泄漏敏感信息\",{\"1\":{\"468\":1}}],[\"以免用户觉得页面无反应或者空白\",{\"1\":{\"349\":1}}],[\"以免给服务器过大的负担或者消耗用户过多的流量\",{\"1\":{\"349\":1}}],[\"以免造成其他问题\",{\"1\":{\"277\":1}}],[\"以免影响应用程序的性能和用户体验\",{\"1\":{\"260\":1}}],[\"以维持应用程序的性能和稳定性\",{\"1\":{\"275\":1}}],[\"以响应特定事件的触发\",{\"1\":{\"265\":1}}],[\"以简化对其中成员的引用\",{\"1\":{\"584\":1}}],[\"以简化代码并提高性能\",{\"1\":{\"263\":1}}],[\"以简洁和现代的设计风格为特点\",{\"1\":{\"160\":1}}],[\"以上实例输出结果为\",{\"1\":{\"540\":1,\"541\":1}}],[\"以上配置将会将小于8kb的图片文件转换为base64编码的dataurl\",{\"1\":{\"473\":1}}],[\"以上配置将会使用sass\",{\"1\":{\"472\":1}}],[\"以上是基本的设置\",{\"1\":{\"444\":1}}],[\"以上是一些常见的优化vuex应用程序性能的方法\",{\"1\":{\"443\":1}}],[\"以上是react组件的常用生命周期方法\",{\"1\":{\"22\":1}}],[\"以上代码将根据node\",{\"1\":{\"480\":1}}],[\"以上代码实现了一个简单的无限滚动效果\",{\"1\":{\"348\":1}}],[\"以上代码中\",{\"1\":{\"345\":1,\"346\":1,\"347\":1}}],[\"以上条件都不满足时执行的代码\",{\"1\":{\"255\":1}}],[\"以使页面可访问性更好\",{\"1\":{\"246\":1}}],[\"以下实例演示了在函数内使用常量\",{\"1\":{\"520\":1}}],[\"以下实例我们创建一个\",{\"1\":{\"519\":1}}],[\"以下代码配置了htmlwebpackplugin和minicssextractplugin\",{\"1\":{\"476\":1}}],[\"以下代码配置了babel\",{\"1\":{\"476\":1}}],[\"以下简称\",{\"1\":{\"163\":1}}],[\"以下是loader的一些重要特点和使用方式\",{\"1\":{\"463\":1}}],[\"以下是在vue组件中使用vuex的一些常用方法\",{\"1\":{\"441\":1}}],[\"以下是在es6中使用迭代器的示例\",{\"1\":{\"184\":1}}],[\"以下是详细的步骤和例子\",{\"1\":{\"420\":1}}],[\"以下是实现该应用程序的redux工作原理的例子\",{\"1\":{\"403\":1}}],[\"以下是api开发的一般步骤\",{\"1\":{\"371\":1}}],[\"以下是常见的与http缓存相关的头部信息\",{\"1\":{\"356\":1}}],[\"以下是常见的http头部信息\",{\"1\":{\"355\":1}}],[\"以下是常见的http状态码分类及其含义\",{\"1\":{\"354\":1}}],[\"以下是常用的几种方法\",{\"1\":{\"26\":1}}],[\"以下是其中一些重要的方面\",{\"1\":{\"328\":1}}],[\"以下是模块化的一些重要概念和优势\",{\"1\":{\"327\":1}}],[\"以下是关于声明文件的一些相关知识点\",{\"1\":{\"325\":1}}],[\"以下是关于javascript消息队列的一些基本概念\",{\"1\":{\"271\":1}}],[\"以下是javascript中常见的事件处理机制和相应的代码示例\",{\"1\":{\"263\":1}}],[\"以下是jsx和html的对比示例\",{\"1\":{\"14\":1}}],[\"以下是创建和使用\",{\"1\":{\"192\":1}}],[\"以下是创建侦听器的示例代码\",{\"1\":{\"110\":1}}],[\"以下是生成器函数的基本概念和用法\",{\"1\":{\"186\":1}}],[\"以下是自定义对象实现迭代器的示例\",{\"1\":{\"184\":1}}],[\"以下是es6类的详细说明和示例\",{\"1\":{\"183\":1}}],[\"以下是es6新增的一些数据结构\",{\"1\":{\"175\":1}}],[\"以下是es6中的一些运算符扩展\",{\"1\":{\"173\":1}}],[\"以下是es6中与函数相关的一些重要和常用的特性\",{\"1\":{\"172\":1}}],[\"以下是es6中与对象相关的一些主要特性\",{\"1\":{\"171\":1}}],[\"以下是es6中与数组相关的一些主要特性\",{\"1\":{\"170\":1}}],[\"以下是symbol的其他一些重要特性和应用\",{\"1\":{\"174\":1}}],[\"以下是几种常见的php设计模式\",{\"1\":{\"592\":1}}],[\"以下是几种常见的模式及其特点\",{\"1\":{\"457\":1}}],[\"以下是几种常见的类型守卫方式\",{\"1\":{\"317\":1}}],[\"以下是几种常见的\",{\"1\":{\"236\":1}}],[\"以下是几种常见的方法可以帮助你减少不必要的组件渲染次数\",{\"1\":{\"49\":1}}],[\"以下是几个常见的css预处理器\",{\"1\":{\"161\":1}}],[\"以下是css盒模型的不同部分\",{\"1\":{\"146\":1}}],[\"以下是备份和还原数据库的基本命令示例\",{\"1\":{\"133\":1}}],[\"以下是虚拟dom的基本原理和工作流程\",{\"1\":{\"128\":1}}],[\"以下是vue中过渡和动画的基本概念和用法\",{\"1\":{\"98\":1}}],[\"以下是混入的一些使用方式和特点\",{\"1\":{\"97\":1}}],[\"以下是使用可变函数的示例\",{\"1\":{\"569\":1}}],[\"以下是使用getter获取状态的一般步骤\",{\"1\":{\"430\":1}}],[\"以下是使用state管理应用程序状态的一般步骤\",{\"1\":{\"429\":1}}],[\"以下是使用node\",{\"1\":{\"369\":1}}],[\"以下是使用\",{\"1\":{\"88\":1,\"188\":1}}],[\"以下是\",{\"1\":{\"87\":1}}],[\"以下是如何使用key属性进行性能优化的一些指导原则\",{\"1\":{\"46\":1}}],[\"以下是一般的步骤\",{\"1\":{\"431\":1}}],[\"以下是一些值得注意的新特性\",{\"1\":{\"497\":1}}],[\"以下是一些需要注意和记住的关键要点\",{\"1\":{\"467\":1}}],[\"以下是一些类型推断的示例\",{\"1\":{\"316\":1}}],[\"以下是一些关于npm的重要概念和常用命令\",{\"1\":{\"510\":1}}],[\"以下是一些关于命名空间的重要概念和用法\",{\"1\":{\"326\":1}}],[\"以下是一些关于\",{\"1\":{\"257\":1}}],[\"以下是一些相关的\",{\"1\":{\"242\":1}}],[\"以下是一些语义化表单的示例\",{\"1\":{\"227\":1}}],[\"以下是一些\",{\"1\":{\"225\":1}}],[\"以下是一些示例来说明作用域规则\",{\"1\":{\"311\":1}}],[\"以下是一些示例\",{\"1\":{\"219\":1,\"220\":1,\"224\":1,\"237\":1,\"311\":1,\"597\":1}}],[\"以下是一些常用的php\",{\"1\":{\"604\":1}}],[\"以下是一些常用的php错误处理技术\",{\"1\":{\"585\":1}}],[\"以下是一些常用的魔术变量及其作用\",{\"1\":{\"521\":1}}],[\"以下是一些常用的webpack插件\",{\"1\":{\"476\":1}}],[\"以下是一些常用的webpack加载器\",{\"1\":{\"476\":1}}],[\"以下是一些常用的devtool选项值\",{\"1\":{\"468\":1}}],[\"以下是一些常用的方法\",{\"1\":{\"282\":1}}],[\"以下是一些常用的javascript正则表达式相关操作\",{\"1\":{\"279\":1}}],[\"以下是一些常用的全球化相关的功能\",{\"1\":{\"235\":1}}],[\"以下是一些常用的标记元素\",{\"1\":{\"209\":1}}],[\"以下是一些常用的代理拦截操作\",{\"1\":{\"188\":1}}],[\"以下是一些常用的css动画特性和方法\",{\"1\":{\"152\":1}}],[\"以下是一些常用的父子组件通信方式\",{\"1\":{\"35\":1}}],[\"以下是一些常见的提取公共代码的方法和技术\",{\"1\":{\"466\":1}}],[\"以下是一些常见的缓存应用场景\",{\"1\":{\"465\":1}}],[\"以下是一些常见的devserver配置选项\",{\"1\":{\"461\":1}}],[\"以下是一些常见的测试和调试技术和方法\",{\"1\":{\"372\":1}}],[\"以下是一些常见的身份认证和授权技术\",{\"1\":{\"370\":1}}],[\"以下是一些常见的高级类型操作符\",{\"1\":{\"321\":1}}],[\"以下是一些常见的类型注解示例\",{\"1\":{\"315\":1}}],[\"以下是一些常见的数组操作示例\",{\"1\":{\"310\":1}}],[\"以下是一些常见的控制流程语句\",{\"1\":{\"255\":1}}],[\"以下是一些常见的隐式转换场景\",{\"1\":{\"252\":1}}],[\"以下是一些常见的显式转换函数\",{\"1\":{\"252\":1}}],[\"以下是一些常见的访问性功能\",{\"1\":{\"246\":1}}],[\"以下是一些常见的语义化标记示例\",{\"1\":{\"230\":1}}],[\"以下是一些常见的实体字符示例\",{\"1\":{\"213\":1}}],[\"以下是一些常见的元数据标签\",{\"1\":{\"208\":1}}],[\"以下是一些常见的css框架\",{\"1\":{\"160\":1}}],[\"以下是一些常见的css布局技术\",{\"1\":{\"147\":1}}],[\"以下是一些常见的css样式属性\",{\"1\":{\"144\":1}}],[\"以下是一些常见的css选择器及其详细解释\",{\"1\":{\"143\":1}}],[\"以下是一些常见的\",{\"1\":{\"91\":1,\"211\":1,\"256\":1,\"570\":1}}],[\"以下是一些常见的做法和技巧\",{\"1\":{\"32\":1,\"33\":1}}],[\"以下是一个插件配置的示例\",{\"1\":{\"456\":1}}],[\"以下是一个加载器的示例配置\",{\"1\":{\"455\":1}}],[\"以下是一个类的示例\",{\"1\":{\"312\":1}}],[\"以下是一个接口的示例\",{\"1\":{\"312\":1}}],[\"以下是一个模块化开发的示例\",{\"1\":{\"278\":1}}],[\"以下是一个命令式编程的示例\",{\"1\":{\"278\":1}}],[\"以下是一个响应式编程的示例\",{\"1\":{\"278\":1}}],[\"以下是一个函数式编程的示例\",{\"1\":{\"278\":1}}],[\"以下是一个面向过程编程的示例\",{\"1\":{\"278\":1}}],[\"以下是一个基本的javascript消息队列的示例代码\",{\"1\":{\"271\":1}}],[\"以下是一个使用生成器实现斐波那契数列的示例\",{\"1\":{\"582\":1}}],[\"以下是一个使用redux的简单实例\",{\"1\":{\"407\":1}}],[\"以下是一个使用重定向的示例\",{\"1\":{\"389\":1}}],[\"以下是一个使用访问修饰符实现封装的示例\",{\"1\":{\"312\":1}}],[\"以下是一个使用\",{\"1\":{\"269\":1}}],[\"以下是一个使用闭包的示例\",{\"1\":{\"268\":1}}],[\"以下是一个表示一个人的javascript对象的例子\",{\"1\":{\"259\":1}}],[\"以下是一个计算两个数字之和的函数的例子\",{\"1\":{\"258\":1}}],[\"以下是一个示例\",{\"1\":{\"146\":1,\"153\":2,\"231\":1,\"232\":1,\"396\":1,\"418\":1,\"579\":1,\"590\":2,\"591\":2}}],[\"以下是一个示例的dom树结构\",{\"1\":{\"129\":1}}],[\"以下是一个简单的代码分割配置示例\",{\"1\":{\"480\":1}}],[\"以下是一个简单的例子\",{\"1\":{\"228\":1}}],[\"以下是一个简单的框架示例\",{\"1\":{\"218\":1}}],[\"以下是一个简单的表单示例\",{\"1\":{\"216\":1}}],[\"以下是一个简单的表格示例\",{\"1\":{\"214\":1}}],[\"以下是一个简单的多列布局示例\",{\"1\":{\"154\":1}}],[\"以下是一个简单的示例\",{\"1\":{\"151\":1,\"229\":1,\"422\":1,\"580\":1,\"582\":1,\"600\":1}}],[\"以下是一个简单的混入的例子\",{\"1\":{\"97\":1}}],[\"以下是一个简单的\",{\"1\":{\"92\":1,\"334\":1}}],[\"以下是一个react学习笔记的大纲\",{\"1\":{\"6\":1}}],[\"以下是每个生命周期方法的详细解释和示例代码\",{\"1\":{\"22\":1}}],[\"以下是函数组件和类组件的主要区别\",{\"1\":{\"18\":1}}],[\"以指定背景图像是否应裁剪到内容框\",{\"1\":{\"158\":1}}],[\"以指定背景图像相对于内容框\",{\"1\":{\"158\":1}}],[\"以厘米和毫米为单位的长度\",{\"1\":{\"145\":1}}],[\"以评估系统的性能和容量\",{\"1\":{\"138\":1}}],[\"以适应新内容的加入\",{\"1\":{\"349\":1}}],[\"以适应不同的场景和需求\",{\"1\":{\"466\":1}}],[\"以适应不同的需求和布局要求\",{\"1\":{\"155\":1}}],[\"以适应不同的设备尺寸\",{\"1\":{\"148\":1}}],[\"以适应数据访问模式\",{\"1\":{\"138\":1}}],[\"以适应总数据量的变化\",{\"1\":{\"53\":1}}],[\"以实现功能的组织和复用\",{\"1\":{\"466\":1}}],[\"以实现模块之间的通信\",{\"1\":{\"444\":1}}],[\"以实现与客户端应用程序的通信\",{\"1\":{\"371\":1}}],[\"以实现持久化的状态管理\",{\"1\":{\"268\":1}}],[\"以实现对事件的响应\",{\"1\":{\"263\":1}}],[\"以实现对页面的动态更新和交互\",{\"1\":{\"129\":1}}],[\"以实现更复杂的功能\",{\"1\":{\"241\":1}}],[\"以实现数据交换\",{\"1\":{\"238\":1}}],[\"以实现跨文档通信\",{\"1\":{\"238\":1}}],[\"以实现所需的页面结构和视觉效果\",{\"1\":{\"147\":1}}],[\"以实现并行计算和在后台处理耗时任务\",{\"1\":{\"57\":1}}],[\"以及对长期缓存的改进\",{\"1\":{\"497\":1}}],[\"以及其他需要被webpack构建的源文件\",{\"1\":{\"475\":1}}],[\"以及服务器返回的响应结果\",{\"1\":{\"465\":1}}],[\"以及记录和回放操作\",{\"1\":{\"407\":1}}],[\"以及调度更新状态的操作\",{\"1\":{\"406\":1}}],[\"以及每个规则对应的组件\",{\"1\":{\"394\":1}}],[\"以及导航用户从一个\",{\"1\":{\"374\":1}}],[\"以及token\",{\"1\":{\"370\":1}}],[\"以及http缓存\",{\"1\":{\"601\":1}}],[\"以及http\",{\"1\":{\"359\":1}}],[\"以及在不进行类型检查的情况下执行各种操作\",{\"1\":{\"310\":1}}],[\"以及在不同的状态之间应用过渡\",{\"1\":{\"151\":1}}],[\"以及通过catch方法指定错误处理函数\",{\"1\":{\"264\":1}}],[\"以及通过column\",{\"1\":{\"154\":1}}],[\"以及参数在函数参数列表中的索引\",{\"1\":{\"204\":1}}],[\"以及\",{\"1\":{\"196\":1}}],[\"以及构造函数来初始化对象的状态\",{\"1\":{\"183\":1}}],[\"以及访问内置的symbol常量\",{\"1\":{\"174\":1}}],[\"以及symbol\",{\"1\":{\"174\":2}}],[\"以及更容易进行团队合作和维护\",{\"1\":{\"434\":1}}],[\"以及更好的语义化支持\",{\"1\":{\"225\":1}}],[\"以及更强大的语法和特性\",{\"1\":{\"161\":1}}],[\"以及更新条件\",{\"1\":{\"134\":1}}],[\"以及添加其他样式规则和选择器来创建更复杂和独特的动画效果\",{\"1\":{\"152\":1}}],[\"以及添加其他样式规则和选择器来创建更复杂和独特的转换效果\",{\"1\":{\"150\":1}}],[\"以及ease\",{\"1\":{\"151\":1}}],[\"以及可选的查询条件和排序方式\",{\"1\":{\"134\":1,\"135\":1}}],[\"以及可以使用第三方动画库的能力\",{\"1\":{\"98\":1}}],[\"以及支持分布式和高可用性的数据库集群\",{\"1\":{\"131\":1}}],[\"以及一个构造函数\",{\"1\":{\"579\":1}}],[\"以及一个计算面积的\",{\"1\":{\"312\":1}}],[\"以及一个内部函数innerfunction\",{\"1\":{\"261\":1}}],[\"以及一个方法sayhello\",{\"1\":{\"259\":1}}],[\"以及一个回调函数\",{\"1\":{\"110\":1}}],[\"以及一个method属性来指定数据提交的http方法\",{\"1\":{\"30\":1}}],[\"以及模块的拆分\",{\"1\":{\"99\":1}}],[\"以及与第三方动画库集成的能力\",{\"1\":{\"98\":1}}],[\"以及logcount方法用于打印计数\",{\"1\":{\"97\":1}}],[\"以及生命周期钩子等\",{\"1\":{\"89\":1}}],[\"以及前端资源的加载过程需要特别注意\",{\"1\":{\"63\":1}}],[\"以帮助你在开发过程中进行调试\",{\"1\":{\"479\":1}}],[\"以帮助开发者分析和优化性能\",{\"1\":{\"58\":1}}],[\"以帮助用户理解错误的原因和如何纠正它\",{\"1\":{\"32\":1}}],[\"以防止潜在的安全漏洞\",{\"1\":{\"604\":1}}],[\"以防止恶意代码注入和跨站脚本攻击\",{\"1\":{\"602\":1}}],[\"以防止恶意代码的注入和执行\",{\"1\":{\"467\":1}}],[\"以防止xss攻击\",{\"1\":{\"580\":1}}],[\"以防止常见的安全漏洞\",{\"1\":{\"580\":1}}],[\"以防止跨站脚本攻击\",{\"1\":{\"340\":1}}],[\"以防止不可逆的更改\",{\"1\":{\"338\":1}}],[\"以防止数据丢失和系统故障\",{\"1\":{\"138\":1}}],[\"以防止过大的初始页面加载和性能问题\",{\"1\":{\"63\":1}}],[\"以防止在每次渲染时重新计算\",{\"1\":{\"49\":1}}],[\"以防止在每次渲染时创建新的函数实例\",{\"1\":{\"49\":1}}],[\"以防止用户多次点击提交\",{\"1\":{\"33\":1}}],[\"以表示正在进行操作\",{\"1\":{\"33\":1}}],[\"以突出显示出现错误的输入框\",{\"1\":{\"32\":1}}],[\"以避免每次请求都进行解析和编译的开销\",{\"1\":{\"601\":1}}],[\"以避免恶意文件上传和任意代码执行漏洞\",{\"1\":{\"581\":1}}],[\"以避免类型冲突和错误\",{\"1\":{\"329\":1}}],[\"以避免无限递归调用\",{\"1\":{\"269\":1}}],[\"以避免出现回调地狱\",{\"1\":{\"264\":1}}],[\"以避免出现意外行为或性能问题\",{\"1\":{\"25\":1}}],[\"以避免浪费资源和潜在的内存泄漏问题\",{\"1\":{\"260\":1}}],[\"以避免产生不可预期的结果\",{\"1\":{\"252\":1}}],[\"以避免与当前模块中的同名变量冲突\",{\"1\":{\"202\":1}}],[\"以避免过多的日志写入\",{\"1\":{\"138\":1}}],[\"以避免过多的依赖关系和命名冲突\",{\"1\":{\"97\":1}}],[\"以避免不必要的重新渲染\",{\"1\":{\"49\":1}}],[\"以避免创建一个额外的父级容器元素\",{\"1\":{\"15\":1}}],[\"以便存储\",{\"1\":{\"604\":1}}],[\"以便追踪和调试问题\",{\"1\":{\"602\":1}}],[\"以便及时发现和修复问题\",{\"1\":{\"586\":1}}],[\"以便能够保存上传的文件\",{\"1\":{\"581\":1}}],[\"以便客户端缓存更新的资源\",{\"1\":{\"480\":1}}],[\"以便客户端能够验证服务器证书的合法性\",{\"1\":{\"359\":1}}],[\"以便webpack在不同环境下执行不同的优化策略\",{\"1\":{\"457\":1}}],[\"以便保持输出目录的干净状态\",{\"1\":{\"456\":1}}],[\"以便完成各种操作\",{\"1\":{\"456\":1}}],[\"以便我们的组件可以访问到redux状态\",{\"1\":{\"403\":1}}],[\"以便它们可以获取最新的状态并更新它们自己\",{\"1\":{\"400\":1}}],[\"以便他们可以轻松地集成和使用您的api\",{\"1\":{\"371\":1}}],[\"以便后续的操作和访问\",{\"1\":{\"370\":1}}],[\"以便执行特定的任务或逻辑\",{\"1\":{\"366\":1}}],[\"以便于后续请求中使用\",{\"1\":{\"357\":1}}],[\"以便将来可以直接使用\",{\"1\":{\"356\":1}}],[\"以便团队成员可以按照项目的需要进行访问和操作的限制\",{\"1\":{\"337\":1}}],[\"以便确定要加载的文件类型\",{\"1\":{\"328\":1}}],[\"以便其他开发者可以方便地理解和使用\",{\"1\":{\"466\":1}}],[\"以便其他开发人员能够快速理解其用途\",{\"1\":{\"91\":1}}],[\"以便其他模块可以使用它\",{\"1\":{\"326\":1}}],[\"以便返回到调用点\",{\"1\":{\"277\":1}}],[\"以便屏幕阅读器能够理解图像的内容\",{\"1\":{\"246\":1}}],[\"以便搜索引擎和浏览器正确解析并显示相关信息\",{\"1\":{\"208\":1}}],[\"以便可以像处理数组一样处理自定义对象\",{\"1\":{\"184\":1}}],[\"以便更好地组织和重用代码\",{\"1\":{\"584\":1}}],[\"以便更好地组织和维护代码\",{\"1\":{\"56\":1}}],[\"以便更方便地进行调试\",{\"1\":{\"468\":1}}],[\"以便更方便地处理复杂的数据结构\",{\"1\":{\"166\":1}}],[\"以便在出现错误时重新填充表单\",{\"1\":{\"580\":1}}],[\"以便在项目部署时安装依赖\",{\"1\":{\"510\":1}}],[\"以便在您的项目中使用它们\",{\"1\":{\"510\":1}}],[\"以便在需要时动态加载\",{\"1\":{\"480\":1}}],[\"以便在代码中使用\",{\"1\":{\"476\":1}}],[\"以便在代码中可以直接通过名称来导航到对应的路由\",{\"1\":{\"417\":1}}],[\"以便在旧版浏览器中运行\",{\"1\":{\"476\":1}}],[\"以便在应用程序中使用\",{\"1\":{\"455\":1}}],[\"以便在应用程序中引入\",{\"1\":{\"455\":1}}],[\"以便在开发过程中进行调试\",{\"1\":{\"438\":1}}],[\"以便在状态发生变化时获取新的状态并更新视图\",{\"1\":{\"401\":1}}],[\"以便在路由更改时执行自定义逻辑\",{\"1\":{\"387\":1}}],[\"以便在不同组件之间共享数据\",{\"1\":{\"386\":1}}],[\"以便在点击时触发路由跳转\",{\"1\":{\"384\":1}}],[\"以便在组件层次结构中创建多个级别的路由\",{\"1\":{\"379\":1}}],[\"以便在组件切换时可以保留之前的状态数据\",{\"1\":{\"126\":1}}],[\"以便在实际请求之前做出决策\",{\"1\":{\"353\":1}}],[\"以便在稍后的时间点恢复\",{\"1\":{\"338\":1}}],[\"以便在引入时更方便地使用\",{\"1\":{\"326\":1}}],[\"以便在装饰器内部进行配置\",{\"1\":{\"324\":1}}],[\"以便在嵌套作用域中查找变量和函数\",{\"1\":{\"280\":1}}],[\"以便在事件发生时执行相应的操作\",{\"1\":{\"272\":1}}],[\"以便在函数内部进行处理\",{\"1\":{\"172\":1}}],[\"以便在浏览器中使用\",{\"1\":{\"161\":1}}],[\"以便在回滚时可以回到该保存点\",{\"1\":{\"137\":1}}],[\"以便在模板中使用\",{\"1\":{\"102\":1}}],[\"以便在dom更新期间进行高效的元素重用和更新\",{\"1\":{\"70\":1}}],[\"以便在后续调用中可以直接返回缓存结果\",{\"1\":{\"52\":1}}],[\"以便在合适的时机执行相关操作\",{\"1\":{\"22\":1}}],[\"以便react组件可以正确解析和渲染jsx代码\",{\"1\":{\"15\":1}}],[\"以声明式的方式构建用户界面\",{\"1\":{\"13\":1}}],[\"1中被废弃\",{\"1\":{\"604\":1}}],[\"1中完全移除\",{\"1\":{\"604\":1}}],[\"1开始支持通过关键字declare来定义运算符的优先级和关联性\",{\"1\":{\"604\":1}}],[\"1引入了持久连接\",{\"1\":{\"358\":1}}],[\"1之前的版本中\",{\"1\":{\"358\":1}}],[\"1xx\",{\"1\":{\"354\":1}}],[\"180\",{\"1\":{\"259\":2}}],[\"18\",{\"1\":{\"254\":1,\"558\":2}}],[\"1n\",{\"1\":{\"173\":1}}],[\"13\",{\"1\":{\"172\":1,\"256\":1}}],[\"1为界\",{\"1\":{\"169\":1}}],[\"1和2^53\",{\"1\":{\"169\":1}}],[\"1f603\",{\"1\":{\"167\":1}}],[\"1f602\",{\"1\":{\"167\":1}}],[\"1f601\",{\"1\":{\"167\":1}}],[\"1fr表示每列的宽度相等\",{\"1\":{\"156\":1}}],[\"1fr\",{\"1\":{\"144\":1,\"147\":3,\"156\":2}}],[\"153\",{\"1\":{\"183\":1}}],[\"15\",{\"1\":{\"167\":2,\"172\":1,\"183\":2,\"254\":3,\"258\":1,\"312\":1,\"313\":2,\"524\":1,\"551\":1,\"552\":1,\"590\":1}}],[\"150px\",{\"1\":{\"144\":1,\"145\":1}}],[\"11\",{\"0\":{\"495\":1},\"1\":{\"164\":1,\"314\":2}}],[\"1996\",{\"1\":{\"164\":1}}],[\"1英寸的1\",{\"1\":{\"145\":1}}],[\"1rem\",{\"1\":{\"145\":1}}],[\"1s\",{\"1\":{\"144\":1,\"150\":1,\"151\":2,\"152\":3}}],[\"12\",{\"0\":{\"496\":1},\"1\":{\"254\":1,\"256\":3,\"543\":1}}],[\"120\",{\"1\":{\"172\":1,\"269\":1,\"313\":1}}],[\"120px\",{\"1\":{\"144\":1}}],[\"123n\",{\"1\":{\"173\":1}}],[\"12345\",{\"1\":{\"171\":2,\"312\":2}}],[\"123\",{\"1\":{\"110\":5,\"168\":1,\"169\":12,\"316\":1,\"386\":3,\"391\":2,\"528\":1}}],[\"1px\",{\"1\":{\"144\":2,\"155\":1}}],[\"1415\",{\"1\":{\"249\":1}}],[\"14159\",{\"1\":{\"165\":1,\"183\":2}}],[\"14px\",{\"1\":{\"157\":1}}],[\"14\",{\"1\":{\"65\":1,\"70\":1,\"87\":1,\"169\":6,\"251\":1,\"310\":1,\"311\":2}}],[\"101\",{\"1\":{\"354\":1}}],[\"1020\",{\"1\":{\"252\":1}}],[\"10度\",{\"1\":{\"150\":1}}],[\"10deg\",{\"1\":{\"150\":1}}],[\"10ch\",{\"1\":{\"145\":1}}],[\"10px\",{\"1\":{\"143\":2,\"144\":3,\"147\":2,\"155\":1,\"156\":1,\"161\":6}}],[\"100px的红色方块\",{\"1\":{\"151\":1}}],[\"100px和红色\",{\"1\":{\"150\":1,\"152\":1}}],[\"100px\",{\"1\":{\"144\":1,\"147\":1,\"150\":3,\"151\":2,\"152\":2}}],[\"100\",{\"1\":{\"134\":1,\"144\":3,\"148\":1,\"153\":1,\"228\":2,\"318\":1,\"354\":1}}],[\"1000\",{\"1\":{\"102\":1,\"187\":1,\"193\":3,\"197\":1,\"260\":1,\"270\":1,\"290\":5,\"322\":4}}],[\"10\",{\"0\":{\"494\":1},\"1\":{\"52\":4,\"70\":1,\"135\":2,\"144\":1,\"161\":3,\"169\":2,\"171\":1,\"183\":3,\"252\":2,\"254\":5,\"258\":1,\"273\":1,\"278\":3,\"313\":1,\"314\":2,\"318\":1,\"319\":1,\"329\":2,\"532\":1,\"551\":5,\"552\":2,\"553\":4,\"576\":2,\"582\":1}}],[\"17版本开始\",{\"1\":{\"22\":1}}],[\"16\",{\"1\":{\"18\":3,\"22\":3,\"40\":1,\"180\":1,\"181\":1,\"182\":1,\"397\":1}}],[\"16px\",{\"1\":{\"15\":1,\"145\":2}}],[\"1<\",{\"1\":{\"15\":4,\"147\":1,\"155\":1,\"156\":1}}],[\"1\",{\"0\":{\"471\":1,\"482\":1,\"485\":1,\"499\":1},\"1\":{\"5\":1,\"20\":1,\"41\":4,\"42\":2,\"52\":6,\"86\":1,\"91\":1,\"102\":3,\"134\":3,\"150\":2,\"155\":1,\"164\":1,\"165\":2,\"166\":14,\"168\":1,\"169\":4,\"170\":18,\"171\":7,\"172\":11,\"173\":2,\"174\":2,\"176\":2,\"177\":1,\"180\":1,\"181\":1,\"184\":2,\"185\":6,\"189\":1,\"198\":2,\"251\":1,\"253\":2,\"257\":33,\"258\":1,\"269\":3,\"270\":4,\"273\":1,\"278\":2,\"281\":5,\"310\":11,\"311\":2,\"313\":4,\"314\":5,\"315\":1,\"316\":1,\"318\":2,\"319\":2,\"323\":4,\"341\":1,\"358\":2,\"359\":2,\"392\":1,\"393\":2,\"401\":2,\"402\":2,\"403\":3,\"406\":2,\"420\":1,\"515\":1,\"537\":2,\"538\":1,\"540\":2,\"551\":1,\"564\":2,\"571\":2,\"576\":2,\"578\":9,\"582\":2,\"586\":1,\"600\":2}}],[\"uglifyjsplugin\",{\"1\":{\"453\":1,\"456\":1}}],[\"u>\",{\"1\":{\"320\":3}}],[\"uploads\",{\"1\":{\"581\":2}}],[\"upload\",{\"1\":{\"581\":3}}],[\"uploaded\",{\"1\":{\"580\":1,\"581\":2}}],[\"up\",{\"1\":{\"310\":4}}],[\"uppercase装饰器修改了greet方法\",{\"1\":{\"204\":1}}],[\"uppercase\",{\"1\":{\"204\":2}}],[\"update\",{\"1\":{\"134\":1,\"510\":1,\"600\":1}}],[\"updatemessage\",{\"1\":{\"93\":3,\"442\":2}}],[\"updated\",{\"1\":{\"22\":1,\"87\":4,\"114\":1,\"442\":1}}],[\"updatedtodos\",{\"1\":{\"5\":3}}],[\"updating\",{\"1\":{\"22\":2}}],[\"udc2a\",{\"1\":{\"168\":2}}],[\"ud83d\",{\"1\":{\"168\":4}}],[\"u修饰符\",{\"1\":{\"168\":1}}],[\"ultricies\",{\"1\":{\"154\":2}}],[\"ultrices\",{\"1\":{\"154\":1}}],[\"ullamcorper\",{\"1\":{\"154\":1}}],[\"ul>\",{\"1\":{\"3\":1,\"5\":1,\"219\":1,\"347\":1,\"380\":1,\"384\":1,\"388\":1,\"396\":1,\"407\":1}}],[\"utils\",{\"1\":{\"460\":4}}],[\"utility\",{\"1\":{\"329\":3}}],[\"ut\",{\"1\":{\"154\":4}}],[\"utf8\",{\"1\":{\"509\":1,\"511\":3}}],[\"utf\",{\"1\":{\"70\":1,\"87\":1,\"129\":1,\"208\":2,\"235\":1}}],[\"url路径\",{\"1\":{\"412\":1}}],[\"urlsearchparams\",{\"1\":{\"386\":1}}],[\"urlencoded\",{\"1\":{\"366\":2}}],[\"url输入的时候发生了什么\",{\"0\":{\"360\":1}}],[\"url是用于标识和定位资源的地址\",{\"1\":{\"352\":1}}],[\"url和协议版本\",{\"1\":{\"353\":1}}],[\"url和协议版本构成\",{\"1\":{\"352\":1}}],[\"url和异步标志\",{\"1\":{\"345\":1}}],[\"url和是否使用异步\",{\"1\":{\"341\":1}}],[\"url\",{\"1\":{\"144\":1,\"158\":1,\"159\":1,\"211\":2,\"224\":2,\"227\":2,\"264\":5,\"266\":1,\"271\":2,\"292\":1,\"343\":1,\"352\":1,\"365\":1,\"366\":1,\"369\":2,\"374\":3,\"386\":4,\"390\":3,\"410\":1,\"412\":1,\"455\":1,\"463\":2,\"469\":1,\"473\":2,\"476\":1,\"570\":1,\"603\":1}}],[\"uuid\",{\"1\":{\"136\":1}}],[\"u\",{\"1\":{\"133\":2,\"167\":4,\"168\":2,\"320\":1}}],[\"uint32array\",{\"1\":{\"180\":1}}],[\"ui是一个语义化的css框架\",{\"1\":{\"160\":1}}],[\"ui和vue2的后台管理系统\",{\"1\":{\"129\":1}}],[\"ui\",{\"1\":{\"56\":1,\"160\":2,\"372\":1,\"374\":1}}],[\"uk\",{\"1\":{\"30\":1}}],[\"us\",{\"1\":{\"30\":1}}],[\"usedexports为true来启用未使用代码的剔除\",{\"1\":{\"480\":1}}],[\"usematch\",{\"1\":{\"398\":1}}],[\"usematches\",{\"1\":{\"395\":1}}],[\"usememo用于缓存计算结果\",{\"1\":{\"41\":1}}],[\"usememo\",{\"1\":{\"41\":3}}],[\"usenavigate\",{\"1\":{\"391\":1,\"393\":11,\"398\":1}}],[\"uselocation\",{\"1\":{\"386\":3,\"391\":1,\"395\":1,\"398\":1}}],[\"uselayouteffect会在dom更新前同步触发measureheight函数\",{\"1\":{\"41\":1}}],[\"uselayouteffect与useeffect非常相似\",{\"1\":{\"41\":1}}],[\"uselayouteffect\",{\"1\":{\"41\":3}}],[\"useparams\",{\"1\":{\"386\":3,\"391\":4}}],[\"usehistory\",{\"1\":{\"383\":2,\"387\":4}}],[\"use\",{\"1\":{\"42\":1,\"43\":1,\"93\":1,\"133\":1,\"365\":2,\"366\":7,\"368\":1,\"412\":1,\"415\":1,\"418\":1,\"420\":1,\"426\":1,\"427\":2,\"440\":2,\"444\":1,\"454\":2,\"455\":2,\"463\":2,\"469\":1,\"471\":1,\"472\":1,\"473\":1,\"474\":1,\"476\":2,\"487\":1,\"491\":1,\"584\":2,\"590\":1}}],[\"useimperativehandle用于在父组件中自定义向子组件公开的实例值或方法\",{\"1\":{\"41\":1}}],[\"useimperativehandle\",{\"1\":{\"41\":3}}],[\"usecounter\",{\"1\":{\"42\":4}}],[\"usecontext用于在函数式组件中访问context\",{\"1\":{\"41\":1}}],[\"usecontext\",{\"1\":{\"41\":3}}],[\"usecallback用于优化函数的性能\",{\"1\":{\"41\":1}}],[\"usecallback\",{\"1\":{\"41\":3}}],[\"useroutes\",{\"1\":{\"394\":1,\"398\":1}}],[\"userposts\",{\"1\":{\"379\":1}}],[\"userprofile\",{\"1\":{\"379\":1,\"381\":1}}],[\"userprofilecomponent\",{\"1\":{\"91\":2,\"92\":6}}],[\"userlogger\",{\"1\":{\"366\":2}}],[\"userid\",{\"1\":{\"365\":7,\"391\":2}}],[\"useragent\",{\"1\":{\"266\":1}}],[\"users\",{\"1\":{\"167\":2,\"365\":5,\"366\":2,\"369\":2,\"379\":4,\"381\":1,\"388\":4,\"392\":6,\"600\":4}}],[\"user\",{\"1\":{\"92\":5,\"187\":2,\"336\":2,\"352\":1,\"355\":1,\"365\":2,\"366\":1,\"391\":6,\"405\":19,\"414\":3,\"416\":4,\"420\":6,\"421\":2,\"432\":1}}],[\"usereducer用于在函数式组件中管理复杂的状态逻辑\",{\"1\":{\"41\":1}}],[\"usereducer\",{\"1\":{\"41\":3}}],[\"useref用于在函数式组件中创建一个可变的引用\",{\"1\":{\"41\":1}}],[\"useref\",{\"1\":{\"41\":8}}],[\"username<\",{\"1\":{\"431\":2}}],[\"username\",{\"1\":{\"30\":1,\"133\":2,\"282\":1,\"299\":1,\"365\":2,\"429\":4,\"430\":1,\"431\":3}}],[\"useeffect钩子的回调函数会在组件挂载后执行\",{\"1\":{\"50\":1}}],[\"useeffect函数用于异步获取数据\",{\"1\":{\"41\":1}}],[\"useeffect用于处理副作用操作\",{\"1\":{\"41\":1}}],[\"useeffect\",{\"1\":{\"41\":3,\"50\":2,\"387\":2,\"405\":2}}],[\"useeffect等hooks\",{\"1\":{\"42\":1}}],[\"useeffect等\",{\"0\":{\"41\":1},\"1\":{\"41\":1,\"43\":1}}],[\"usestate是react提供的一个hook\",{\"1\":{\"41\":1}}],[\"usestate\",{\"0\":{\"41\":1},\"1\":{\"5\":3,\"35\":2,\"41\":9,\"42\":2,\"50\":2,\"51\":2}}],[\"unlink\",{\"1\":{\"597\":1}}],[\"unlisten\",{\"1\":{\"387\":2}}],[\"unblock\",{\"1\":{\"387\":2}}],[\"unbind\",{\"1\":{\"70\":3}}],[\"unauthorized\",{\"1\":{\"314\":1}}],[\"unreachable\",{\"1\":{\"310\":1}}],[\"unreachablecode\",{\"1\":{\"310\":1}}],[\"unref\",{\"1\":{\"102\":3}}],[\"unknown\",{\"1\":{\"173\":2}}],[\"undefined\",{\"1\":{\"166\":1,\"173\":1,\"184\":3,\"185\":1,\"186\":1,\"187\":4,\"189\":2,\"191\":1,\"204\":1,\"249\":1,\"251\":3,\"252\":1,\"253\":2,\"262\":1,\"310\":14,\"319\":1,\"323\":1}}],[\"underline\",{\"1\":{\"144\":1}}],[\"unix\",{\"1\":{\"570\":2}}],[\"uninstall\",{\"1\":{\"510\":1}}],[\"unit\",{\"1\":{\"372\":1}}],[\"units\",{\"1\":{\"148\":2}}],[\"uniform\",{\"1\":{\"352\":1}}],[\"union\",{\"1\":{\"310\":1,\"319\":2,\"329\":1}}],[\"unique\",{\"1\":{\"310\":1,\"578\":2}}],[\"unicode\",{\"1\":{\"168\":3,\"256\":2}}],[\"unicode修饰符\",{\"1\":{\"168\":1}}],[\"unicode码点的识别和表示\",{\"1\":{\"167\":1}}],[\"universal\",{\"1\":{\"143\":1}}],[\"unmounted\",{\"1\":{\"114\":1}}],[\"unmounting\",{\"1\":{\"22\":2}}],[\"uncontrolledcomponent\",{\"1\":{\"31\":1}}],[\"uncontrolled\",{\"1\":{\"31\":1}}],[\"unshift\",{\"1\":{\"257\":2,\"578\":2}}],[\"unsubscribe\",{\"1\":{\"22\":1,\"401\":2}}],[\"unsafe\",{\"1\":{\"22\":2}}],[\"你还应注意安全问题\",{\"1\":{\"604\":1}}],[\"你还可以在vue\",{\"1\":{\"438\":1}}],[\"你还可以使用自定义类型来描述函数类型\",{\"1\":{\"318\":1}}],[\"你还可以使用自定义对象实现迭代器协议\",{\"1\":{\"184\":1}}],[\"你必须使用class关键字声明类对象\",{\"1\":{\"535\":1}}],[\"你也可以通过省略第二个参数来返回一个对象\",{\"1\":{\"604\":1}}],[\"你也可以通过设置cache\",{\"1\":{\"482\":1}}],[\"你也可以自定义异常类来表示特定类型的异常\",{\"1\":{\"589\":1}}],[\"你也可以结合其他优化策略来提升应用的性能\",{\"1\":{\"443\":1}}],[\"你也可以使用css关键帧动画\",{\"1\":{\"151\":1}}],[\"你将看到一个计数器应用程序\",{\"1\":{\"440\":1}}],[\"你将看到一个新的选项卡\",{\"1\":{\"438\":1}}],[\"你将继续在该分支上进行工作\",{\"1\":{\"335\":1}}],[\"你需要指定输出的目录\",{\"1\":{\"486\":1}}],[\"你需要确保已经在vue的实例中导入和安装了vuex\",{\"1\":{\"441\":1}}],[\"你需要先将vuex的store实例注入到vue实例中\",{\"1\":{\"441\":1}}],[\"你需要通过提交mutation来进行\",{\"1\":{\"431\":1}}],[\"你需要在vue路由的配置中定义一个重定向路由\",{\"1\":{\"418\":1}}],[\"你需要在其他\",{\"1\":{\"92\":1}}],[\"你已经成功安装和配置了vuex\",{\"1\":{\"427\":1}}],[\"你的第一个vue\",{\"1\":{\"412\":1}}],[\"你只需要确保配置项optimization\",{\"1\":{\"467\":1}}],[\"你只需要在点击事件中调用\",{\"1\":{\"393\":1}}],[\"你只需要传递目标页面的路径作为参数\",{\"1\":{\"393\":1}}],[\"你只需要关注数据的变化\",{\"1\":{\"45\":1}}],[\"你就可以在\",{\"1\":{\"92\":1}}],[\"你就在\",{\"1\":{\"5\":1}}],[\"你可能会需要更小的打包文件和更好的性能\",{\"1\":{\"468\":1}}],[\"你可能需要使用多个单词来命名组件\",{\"1\":{\"91\":1}}],[\"你可以定义一个自定义的错误处理函数来处理运行时错误\",{\"1\":{\"587\":1}}],[\"你可以控制php是否显示和记录错误\",{\"1\":{\"586\":1}}],[\"你可以放在单引号或者双引号中\",{\"1\":{\"530\":1}}],[\"你可以逐个禁用插件或配置项\",{\"1\":{\"502\":1}}],[\"你可以找到报错信息\",{\"1\":{\"499\":1}}],[\"你可以直接导入\",{\"1\":{\"497\":1}}],[\"你可以直接导入和使用\",{\"1\":{\"497\":1}}],[\"你可以直接调用\",{\"1\":{\"393\":1}}],[\"你可以配置devserver的相关选项\",{\"1\":{\"490\":1}}],[\"你可以设置mode选项为development\",{\"1\":{\"489\":1}}],[\"你可以指定一个或多个入口点\",{\"1\":{\"485\":1}}],[\"你可以指定要持久化的模块\",{\"1\":{\"439\":1}}],[\"你可以最大程度地减小文件体积并提高应用程序的加载速度\",{\"1\":{\"480\":1}}],[\"你可以给文件名添加哈希值\",{\"1\":{\"480\":1}}],[\"你可以安装\",{\"1\":{\"475\":1}}],[\"你可以选择使用以上的一种或多种方式来处理多个模块之间的通信\",{\"1\":{\"444\":1}}],[\"你可以提交其他模块的mutation来修改它们的状态\",{\"1\":{\"444\":1}}],[\"你可以点击按钮来增加和减少计数器的值\",{\"1\":{\"440\":1}}],[\"你可以运行你的应用程序并查看效果了\",{\"1\":{\"440\":1}}],[\"你可以进一步自定义持久化设置\",{\"1\":{\"439\":1}}],[\"你可以检查状态的变化\",{\"1\":{\"438\":1}}],[\"你可以查看vuex\",{\"1\":{\"438\":1}}],[\"你可以处理异步操作\",{\"1\":{\"432\":1}}],[\"你可以修改vuex中的状态\",{\"1\":{\"431\":1}}],[\"你可以修改对象的默认行为\",{\"1\":{\"188\":1}}],[\"你可以轻松地实现路由的导航和匹配操作\",{\"1\":{\"398\":1}}],[\"你可以轻松创建多种多样的网格布局\",{\"1\":{\"156\":1}}],[\"你可以自定义其他名称\",{\"1\":{\"336\":1}}],[\"你可以自己编写声明文件来描述其类型\",{\"1\":{\"325\":1}}],[\"你可以告诉编译器应该将相应的值视为特定的类型\",{\"1\":{\"315\":1}}],[\"你可以通过实例化并添加插件来使用它们\",{\"1\":{\"488\":1}}],[\"你可以通过在webpack配置文件中设置optimization\",{\"1\":{\"480\":1}}],[\"你可以通过在组件的计算属性中使用this\",{\"1\":{\"441\":2}}],[\"你可以通过配置不同的模式来优化构建输出\",{\"1\":{\"479\":1}}],[\"你可以通过v\",{\"1\":{\"442\":1}}],[\"你可以通过调用这个函数来进行导航\",{\"1\":{\"393\":1}}],[\"你可以通过创建一个名为\",{\"1\":{\"334\":1}}],[\"你可以通过给特定的事件注册监听器\",{\"1\":{\"272\":1}}],[\"你可以通过\",{\"1\":{\"267\":1,\"393\":1}}],[\"你可以通过设置flex容器的属性来控制内部元素的布局\",{\"1\":{\"155\":1}}],[\"你可以通过设置容器元素的column\",{\"1\":{\"154\":1}}],[\"你可以实现更加灵活的代码分割和按需加载\",{\"1\":{\"467\":1}}],[\"你可以实现更复杂的程序逻辑和流程控制\",{\"1\":{\"255\":1}}],[\"你可以实现在\",{\"1\":{\"94\":1}}],[\"你可以针对不同的设备\",{\"1\":{\"157\":1}}],[\"你可以为不同设备\",{\"1\":{\"157\":1}}],[\"你可以灵活地控制flex容器和子项的布局\",{\"1\":{\"155\":1}}],[\"你可以组合使用这些转换方法\",{\"1\":{\"150\":1}}],[\"你可以这样导入并使用\",{\"1\":{\"92\":1}}],[\"你可以将php数据转换为json格式\",{\"1\":{\"604\":1}}],[\"你可以将它添加到webpack配置中\",{\"1\":{\"492\":1}}],[\"你可以将用户的认证信息存储在状态管理库\",{\"1\":{\"385\":1}}],[\"你可以将容器元素的display属性设置为flex或inline\",{\"1\":{\"155\":1}}],[\"你可以将其命名为userprofilecomponent\",{\"1\":{\"91\":1}}],[\"你可以将组件间共享的逻辑提取出来\",{\"1\":{\"42\":1}}],[\"你可以从node\",{\"1\":{\"475\":1}}],[\"你可以从\",{\"1\":{\"88\":1}}],[\"你可以看到页面上的hello\",{\"1\":{\"67\":1}}],[\"你可以用不同的方式使用\",{\"1\":{\"61\":1}}],[\"你可以在配置中使用entry属性设置多个入口点\",{\"1\":{\"480\":1}}],[\"你可以在项目中引入bootstrap的css文件\",{\"1\":{\"474\":1}}],[\"你可以在devserver配置中设置devtool选项\",{\"1\":{\"468\":1}}],[\"你可以在action中访问其他模块的状态\",{\"1\":{\"444\":1}}],[\"你可以在getter中访问其他模块的状态\",{\"1\":{\"444\":1}}],[\"你可以在vue组件的data选项之外定义变量\",{\"1\":{\"442\":1}}],[\"你可以在组件的方法中调用dispatch方法来触发vuex的动作\",{\"1\":{\"441\":1}}],[\"你可以在组件的方法中调用commit方法来修改vuex的状态\",{\"1\":{\"441\":1}}],[\"你可以在组件树中的任何一个地方访问和更新这个上下文数据\",{\"1\":{\"37\":1}}],[\"你可以在应用程序中执行编程式导航\",{\"1\":{\"398\":1}}],[\"你可以在混入时给属性或方法添加前缀\",{\"1\":{\"330\":1}}],[\"你可以在多个地方逐步扩展全局声明\",{\"1\":{\"329\":1}}],[\"你可以在多个地方对同一个接口\",{\"1\":{\"329\":1}}],[\"你可以在\",{\"1\":{\"325\":1}}],[\"你可以在不改变原始对象的情况下进行自定义操作和增加功能\",{\"1\":{\"188\":1}}],[\"你可以在浏览器中访问应用\",{\"1\":{\"412\":1}}],[\"你可以在浏览器中访问\",{\"1\":{\"88\":1}}],[\"你可以在webpagetest网站上输入网页url并选择测试配置\",{\"1\":{\"58\":1}}],[\"你可以明显减少组件的渲染次数\",{\"1\":{\"49\":1}}],[\"你可以使用内置的函数来处理json数据\",{\"1\":{\"604\":1}}],[\"你可以使用try\",{\"1\":{\"588\":1}}],[\"你可以使用合适的loader来处理这些文件\",{\"1\":{\"491\":1}}],[\"你可以使用它们来设置带有哈希的文件名\",{\"1\":{\"480\":1}}],[\"你可以使用插件如uglifyjsplugin或配置optimization\",{\"1\":{\"480\":1}}],[\"你可以使用url\",{\"1\":{\"473\":1}}],[\"你可以使用usestate\",{\"1\":{\"42\":1}}],[\"你可以使用相应的loader将预处理器转换为css\",{\"1\":{\"472\":1}}],[\"你可以使用较详细的源映射配置\",{\"1\":{\"468\":1}}],[\"你可以使用vue的普通数据绑定和事件处理来处理这些情况\",{\"1\":{\"442\":1}}],[\"你可以使用vuex中的actions来处理\",{\"1\":{\"432\":1}}],[\"你可以使用以下命令来安装它们\",{\"1\":{\"440\":1}}],[\"你可以使用这些服务来托管\",{\"1\":{\"336\":1}}],[\"你可以使用声明合并来实现\",{\"1\":{\"330\":1}}],[\"你可以使用\",{\"1\":{\"318\":1,\"384\":3}}],[\"你可以使用classlist属性来添加和移除元素的css类\",{\"1\":{\"265\":1}}],[\"你可以使用style属性来修改元素的css样式\",{\"1\":{\"265\":1}}],[\"你可以使用dom属性来修改元素的文本内容\",{\"1\":{\"265\":1}}],[\"你可以使用各种选择器方法来选择元素\",{\"1\":{\"265\":1}}],[\"你可以使用grid\",{\"1\":{\"156\":1}}],[\"你可以使用关键帧\",{\"1\":{\"144\":1}}],[\"你可以使用任何的hooks和其他逻辑来定义你的状态逻辑\",{\"1\":{\"42\":1}}],[\"你可以编写更简洁\",{\"1\":{\"40\":1}}],[\"你可以创建一个上下文\",{\"1\":{\"37\":1}}],[\"你可以根据实际需求进行更多的验证和处理\",{\"1\":{\"581\":1}}],[\"你可以根据自己的需要选择适合的方式来包含文件\",{\"1\":{\"599\":1}}],[\"你可以根据自己的需求选择合适的选项\",{\"1\":{\"500\":1}}],[\"你可以根据自己的需求自定义这个辅助函数\",{\"1\":{\"330\":1}}],[\"你可以根据自己的需求创建自定义hooks\",{\"1\":{\"42\":1}}],[\"你可以根据自己的项目需求\",{\"1\":{\"483\":1}}],[\"你可以根据项目需求进行相应的配置和使用\",{\"1\":{\"480\":1}}],[\"你可以根据项目的需求\",{\"1\":{\"454\":1}}],[\"你可以根据需求设置任意的重定向路径\",{\"1\":{\"418\":1}}],[\"你可以根据需求创建更加具体和可读性强的类型\",{\"1\":{\"318\":1}}],[\"你可以根据需要选择其中一种方式\",{\"1\":{\"318\":1}}],[\"你可以根据需要调整属性的值和过渡时间\",{\"1\":{\"152\":1}}],[\"你可以根据需要调整转换方法的参数\",{\"1\":{\"150\":1}}],[\"你可以根据需要查阅相关文档来获取更详细的信息\",{\"1\":{\"27\":1}}],[\"你可以根据需要添加其他功能和样式\",{\"1\":{\"5\":1}}],[\"你可以根据屏幕宽度来应用不同的样式\",{\"1\":{\"148\":1}}],[\"你可以根据具体情况选择合适的模式\",{\"1\":{\"479\":1}}],[\"你可以根据具体需求做更多的扩展和优化\",{\"1\":{\"94\":1}}],[\"你可以根据具体的应用场景和需求选择适合的事件类型来进行事件处理和交互操作\",{\"1\":{\"28\":1}}],[\"你可以像上面的例子一样使用事件对象\",{\"1\":{\"27\":1}}],[\"你可以按照下面的方式来访问事件对象中的属性和方法\",{\"1\":{\"27\":1}}],[\"你可以添加和删除todo\",{\"1\":{\"5\":1}}],[\"中有错误\",{\"1\":{\"599\":1}}],[\"中添加插件\",{\"1\":{\"475\":1}}],[\"中添加加载器规则\",{\"1\":{\"475\":1}}],[\"中添加键值对\",{\"1\":{\"177\":1}}],[\"中获取\",{\"1\":{\"444\":1}}],[\"中获得便捷和灵活的开发体验\",{\"1\":{\"363\":1}}],[\"中定义一个路由\",{\"1\":{\"420\":1}}],[\"中定义的内部函数\",{\"1\":{\"268\":1}}],[\"中定义的区域\",{\"1\":{\"165\":1}}],[\"中访问\",{\"1\":{\"386\":2}}],[\"中引入的新组件\",{\"1\":{\"389\":1}}],[\"中引入了\",{\"1\":{\"168\":1}}],[\"中引入了前行断言\",{\"1\":{\"168\":1}}],[\"中引用\",{\"1\":{\"368\":1}}],[\"中使用路由元数据\",{\"1\":{\"422\":1}}],[\"中使用路由别名有两种方式\",{\"1\":{\"419\":1}}],[\"中使用正常的路径\",{\"1\":{\"390\":1}}],[\"中使用查询字符串来传递参数\",{\"1\":{\"386\":1}}],[\"中使用中间件的常见方法\",{\"1\":{\"366\":1}}],[\"中使用中间件的常见方法有以下几种\",{\"1\":{\"366\":1}}],[\"中使用组件\",{\"0\":{\"4\":1}}],[\"中间件等方面的开发\",{\"1\":{\"512\":1}}],[\"中间件使得redux在处理复杂业务逻辑和异步操作时更加可靠和灵活\",{\"1\":{\"405\":1}}],[\"中间件会根据指定的目录路径将静态文件和资源发送给客户端\",{\"1\":{\"368\":1}}],[\"中间件可以仅应用于特定的路由或路由组\",{\"1\":{\"366\":1}}],[\"中间件是一个函数\",{\"1\":{\"366\":1}}],[\"中间件\",{\"0\":{\"366\":1}}],[\"中基本的路由定义和处理请求的方法\",{\"1\":{\"365\":1}}],[\"中组合多个类特性的方式\",{\"1\":{\"330\":1}}],[\"中实现带有历史记录的跳转的详细步骤\",{\"1\":{\"384\":1}}],[\"中实现\",{\"1\":{\"330\":1}}],[\"中实现对象继承的重要概念\",{\"1\":{\"267\":1}}],[\"中强大而灵活的特性\",{\"1\":{\"329\":1}}],[\"中一种特性\",{\"1\":{\"329\":1}}],[\"中一种特殊类型的装饰器\",{\"1\":{\"324\":1}}],[\"中进行设置\",{\"1\":{\"328\":1}}],[\"中是一种组织和封装代码的方式\",{\"1\":{\"326\":1}}],[\"中是否存在指定的键\",{\"1\":{\"177\":1}}],[\"中用来声明变量\",{\"1\":{\"315\":1}}],[\"中用于处理集合和序列的重要概念\",{\"1\":{\"323\":1}}],[\"中用于存储多个相同类型值的数据结构\",{\"1\":{\"310\":1}}],[\"中用于延迟执行或周期性执行代码的机制\",{\"1\":{\"260\":1}}],[\"中经常一起使用\",{\"1\":{\"312\":1}}],[\"中调用\",{\"1\":{\"268\":1}}],[\"中具有以下特点\",{\"1\":{\"268\":1}}],[\"中每个对象都具有的一个特殊属性\",{\"1\":{\"267\":1}}],[\"中常见的定时器函数有\",{\"1\":{\"260\":1}}],[\"中表示语义信息的一种机制\",{\"1\":{\"231\":1}}],[\"中提取结果\",{\"1\":{\"195\":1}}],[\"中继续进行下一个异步操作\",{\"1\":{\"193\":1}}],[\"中键值对的个数\",{\"1\":{\"177\":1}}],[\"中指定的键值对\",{\"1\":{\"177\":1}}],[\"中移除\",{\"1\":{\"114\":1}}],[\"中它们是并发执行的\",{\"1\":{\"114\":1}}],[\"中动态渲染不同的组件\",{\"1\":{\"94\":1}}],[\"中后\",{\"1\":{\"70\":1}}],[\"中的迭代器\",{\"1\":{\"582\":1}}],[\"中的路由懒加载\",{\"1\":{\"397\":1}}],[\"中的循环\",{\"1\":{\"323\":1}}],[\"中的一项重要特性\",{\"1\":{\"320\":1}}],[\"中的一种技术\",{\"1\":{\"317\":1}}],[\"中的一种数据类型\",{\"1\":{\"310\":1}}],[\"中的一种特殊数组类型\",{\"1\":{\"310\":1}}],[\"中的一个重要特性\",{\"1\":{\"90\":1}}],[\"中的一个特性\",{\"1\":{\"86\":1}}],[\"中的表单数据将作为请求的主体发送到服务器\",{\"1\":{\"282\":1}}],[\"中的生成器函数为基础\",{\"1\":{\"197\":1}}],[\"中的\",{\"1\":{\"190\":1,\"194\":1,\"328\":2,\"389\":1}}],[\"中的key起什么作用\",{\"1\":{\"70\":1}}],[\"中的所有数据都会被渲染到dom中\",{\"1\":{\"53\":1}}],[\"中\",{\"1\":{\"55\":1,\"57\":1,\"91\":2,\"95\":1,\"102\":1,\"110\":3,\"114\":3,\"165\":1,\"213\":1,\"224\":1,\"252\":1,\"253\":1,\"267\":1,\"270\":1,\"272\":1,\"275\":1,\"276\":2,\"310\":3,\"311\":4,\"312\":2,\"313\":2,\"314\":1,\"318\":1,\"321\":1,\"322\":1,\"326\":1,\"327\":1,\"328\":2,\"329\":1,\"330\":1,\"331\":1,\"365\":1,\"366\":1,\"385\":1,\"386\":1,\"393\":3,\"394\":1,\"397\":1,\"410\":1,\"413\":1,\"414\":1,\"423\":1,\"427\":1,\"438\":1,\"439\":1,\"440\":1,\"528\":1,\"535\":1,\"539\":1,\"569\":2,\"579\":1,\"583\":1}}],[\"中传递一个空数组\",{\"1\":{\"50\":1}}],[\"中通过mycontext\",{\"1\":{\"37\":1}}],[\"中创建了一个简单的\",{\"1\":{\"5\":1}}],[\"访问控制修饰符\",{\"1\":{\"583\":1}}],[\"访问控制列表\",{\"1\":{\"370\":1}}],[\"访问http\",{\"1\":{\"440\":1}}],[\"访问特定的数据或使用特定的功能\",{\"1\":{\"370\":1}}],[\"访问元素\",{\"1\":{\"310\":1}}],[\"访问属性和方法\",{\"1\":{\"267\":1}}],[\"访问和更新person对象的属性\",{\"1\":{\"259\":1}}],[\"访问和更新对象的属性\",{\"1\":{\"259\":1}}],[\"访问数组元素\",{\"0\":{\"575\":1},\"1\":{\"257\":1}}],[\"访问字符\",{\"1\":{\"256\":1}}],[\"访问性\",{\"0\":{\"246\":1}}],[\"访问键盘导航\",{\"0\":{\"232\":1}}],[\"访问mysql官方网站\",{\"1\":{\"132\":1}}],[\"访问事件对象的属性\",{\"1\":{\"27\":1}}],[\"访问\",{\"1\":{\"5\":1,\"100\":1}}],[\"rsort\",{\"1\":{\"578\":2}}],[\"rbac\",{\"1\":{\"370\":1}}],[\"r\",{\"1\":{\"336\":1,\"594\":1,\"595\":1}}],[\"r命令可以查看本地仓库所知道的远程分支\",{\"1\":{\"336\":1}}],[\"rm\",{\"1\":{\"334\":1}}],[\"rxjs\",{\"1\":{\"272\":1,\"278\":1}}],[\"rtl\",{\"1\":{\"235\":1}}],[\"ridiculus\",{\"1\":{\"154\":1}}],[\"risus\",{\"1\":{\"154\":1}}],[\"right等\",{\"1\":{\"153\":1}}],[\"right\",{\"1\":{\"134\":1,\"144\":3,\"147\":4,\"153\":1,\"310\":4}}],[\"rhoncus\",{\"1\":{\"154\":1}}],[\"rules中进行配置\",{\"1\":{\"487\":1}}],[\"rules字段进行配置\",{\"1\":{\"463\":1,\"476\":1}}],[\"rules\",{\"1\":{\"454\":1,\"455\":1,\"463\":1,\"469\":1,\"471\":2,\"472\":1,\"473\":1,\"474\":1,\"475\":2,\"476\":1,\"487\":1,\"491\":1}}],[\"rules选项中进行配置\",{\"1\":{\"453\":1}}],[\"rule设置列之间的样式和边框等\",{\"1\":{\"154\":1}}],[\"rutrum\",{\"1\":{\"154\":1}}],[\"runoob\",{\"1\":{\"515\":1,\"519\":5,\"520\":2,\"528\":1}}],[\"runtimeexception等\",{\"1\":{\"589\":1}}],[\"runtime会与webpackdevserver建立websocket连接\",{\"1\":{\"459\":1}}],[\"runtime来处理这个信号\",{\"1\":{\"459\":1}}],[\"running\",{\"1\":{\"367\":1,\"368\":1,\"509\":1}}],[\"rungenerator\",{\"1\":{\"197\":6}}],[\"run\",{\"1\":{\"5\":1,\"88\":1,\"100\":1,\"412\":1,\"440\":1,\"510\":1}}],[\"rgba\",{\"1\":{\"144\":1}}],[\"rdbms\",{\"1\":{\"131\":1}}],[\"range\",{\"1\":{\"227\":1}}],[\"race\",{\"1\":{\"192\":1,\"193\":4}}],[\"raw`c\",{\"1\":{\"167\":1}}],[\"raw\",{\"1\":{\"167\":2}}],[\"rawhtml\",{\"1\":{\"70\":3}}],[\"radial\",{\"1\":{\"144\":1,\"153\":4}}],[\"radius\",{\"1\":{\"144\":2,\"161\":6,\"183\":10,\"319\":2,\"330\":6}}],[\"radio\",{\"1\":{\"30\":1}}],[\"route组件的onenter和onexit属性\",{\"1\":{\"387\":1}}],[\"routename=\",{\"1\":{\"384\":3}}],[\"route<\",{\"1\":{\"383\":1}}],[\"route>\",{\"1\":{\"379\":1,\"382\":1,\"392\":1,\"396\":1}}],[\"routes>\",{\"1\":{\"389\":1,\"392\":1,\"394\":1,\"396\":1,\"397\":1}}],[\"routes\",{\"0\":{\"379\":1},\"1\":{\"384\":2,\"385\":2,\"389\":1,\"392\":1,\"394\":2,\"396\":1,\"397\":1,\"412\":2,\"413\":1,\"415\":2,\"417\":4,\"418\":2,\"419\":2,\"420\":1,\"421\":1,\"423\":1}}],[\"route\",{\"0\":{\"377\":1,\"381\":1},\"1\":{\"376\":1,\"383\":1,\"384\":1,\"385\":4,\"386\":2,\"387\":2,\"388\":1,\"389\":1,\"391\":1,\"392\":1,\"393\":4,\"394\":2,\"396\":1,\"397\":2}}],[\"router来管理路由\",{\"1\":{\"415\":1}}],[\"router应用已经创建完成了\",{\"1\":{\"412\":1}}],[\"router是vue\",{\"1\":{\"412\":1}}],[\"router=\",{\"1\":{\"384\":1}}],[\"router5中实现路由保护可以通过以下几个步骤\",{\"1\":{\"385\":1}}],[\"router5\",{\"1\":{\"384\":3}}],[\"router提供了一组方法\",{\"1\":{\"416\":1}}],[\"router提供了一些默认的转场动画效果和配置选项\",{\"1\":{\"395\":1}}],[\"router提供了一些方法\",{\"1\":{\"383\":1}}],[\"router提供了一种更加灵活和强大的方式来处理路由过渡\",{\"1\":{\"395\":1}}],[\"router提供了<link>和<navlink>组件用于在应用程序中进行导航\",{\"1\":{\"380\":1}}],[\"router允许在路由中使用动态参数\",{\"1\":{\"381\":1}}],[\"router允许使用嵌套路由\",{\"1\":{\"379\":1}}],[\"router>\",{\"1\":{\"376\":1,\"384\":1,\"385\":1,\"388\":1,\"389\":1,\"392\":1,\"394\":1,\"396\":1,\"397\":1}}],[\"router进行路由管理\",{\"1\":{\"63\":1}}],[\"router\",{\"0\":{\"375\":1,\"376\":1},\"1\":{\"9\":1,\"63\":1,\"374\":2,\"375\":3,\"376\":2,\"380\":1,\"383\":1,\"384\":11,\"386\":2,\"387\":3,\"388\":2,\"389\":3,\"391\":2,\"392\":2,\"393\":11,\"394\":7,\"395\":2,\"396\":4,\"397\":8,\"398\":2,\"409\":1,\"410\":1,\"412\":9,\"413\":6,\"414\":2,\"415\":5,\"416\":3,\"417\":6,\"418\":3,\"419\":1,\"420\":4,\"421\":5,\"422\":2,\"423\":1}}],[\"router用于处理路由\",{\"1\":{\"8\":1}}],[\"rows\",{\"1\":{\"600\":1}}],[\"rows属性定义网格的行\",{\"1\":{\"156\":1}}],[\"row\",{\"1\":{\"155\":2}}],[\"rotatez\",{\"1\":{\"150\":2}}],[\"rotatey\",{\"1\":{\"150\":2}}],[\"rotatex\",{\"1\":{\"150\":2}}],[\"rotate\",{\"1\":{\"150\":3}}],[\"rollback\",{\"1\":{\"137\":1}}],[\"rollup等\",{\"1\":{\"56\":1,\"201\":1,\"203\":1,\"462\":1}}],[\"rootreducer\",{\"1\":{\"402\":3,\"405\":4}}],[\"root\",{\"1\":{\"5\":1,\"16\":2,\"21\":1,\"394\":1,\"403\":1,\"406\":1,\"444\":1,\"600\":1}}],[\"rename\",{\"1\":{\"597\":1}}],[\"render=\",{\"1\":{\"385\":1}}],[\"render方法将其渲染到一个id为root的dom容器中\",{\"1\":{\"21\":1}}],[\"render方法将组件渲染到指定的dom容器中\",{\"1\":{\"21\":1}}],[\"render方法将该元素渲染到id为root的dom容器中\",{\"1\":{\"16\":1}}],[\"render方法是类组件中必须实现的一个方法\",{\"1\":{\"21\":1}}],[\"render方法应该只负责返回组件的ui表示\",{\"1\":{\"21\":1}}],[\"rendering\",{\"0\":{\"21\":1}}],[\"render\",{\"1\":{\"5\":1,\"13\":1,\"16\":2,\"18\":1,\"19\":1,\"20\":1,\"21\":2,\"22\":4,\"23\":1,\"26\":1,\"31\":2,\"47\":1,\"48\":1,\"50\":1,\"87\":1,\"93\":1,\"367\":2,\"387\":1,\"389\":1,\"394\":1,\"403\":1,\"406\":1,\"412\":1,\"415\":1,\"427\":1,\"440\":1}}],[\"render将todo组件渲染到dom中\",{\"1\":{\"5\":1}}],[\"rewind\",{\"1\":{\"582\":1}}],[\"req\",{\"1\":{\"364\":1,\"365\":11,\"366\":5,\"367\":1,\"509\":1,\"512\":1}}],[\"request的action来表示异步操作已经开始\",{\"1\":{\"405\":1}}],[\"requesttime\",{\"1\":{\"366\":2}}],[\"requesttimelogger\",{\"1\":{\"366\":2}}],[\"request\",{\"1\":{\"282\":6,\"314\":3,\"366\":1,\"405\":2,\"521\":1,\"580\":1,\"581\":1}}],[\"require语句也可用于包含文件\",{\"1\":{\"599\":1}}],[\"required装饰器应用于greet方法的name参数\",{\"1\":{\"204\":1}}],[\"required\",{\"1\":{\"204\":4,\"217\":1,\"365\":1}}],[\"require\",{\"1\":{\"200\":1,\"364\":1,\"367\":1,\"368\":1,\"369\":1,\"450\":1,\"454\":1,\"456\":2,\"469\":3,\"475\":1,\"476\":2,\"488\":1,\"492\":1,\"496\":1,\"509\":2,\"511\":3,\"512\":1,\"599\":1}}],[\"rebase命令可以将一个分支的修改基于另一个分支进行重演\",{\"1\":{\"338\":1}}],[\"rebase命令将远程分支合并到本地分支\",{\"1\":{\"335\":1}}],[\"rebase\",{\"1\":{\"338\":2}}],[\"retriever\",{\"1\":{\"312\":1}}],[\"return\",{\"1\":{\"3\":7,\"5\":2,\"13\":1,\"18\":2,\"19\":3,\"20\":3,\"21\":2,\"22\":5,\"23\":10,\"26\":2,\"31\":2,\"35\":2,\"36\":2,\"37\":2,\"41\":17,\"42\":2,\"47\":2,\"48\":2,\"51\":2,\"52\":11,\"57\":1,\"67\":1,\"74\":1,\"86\":2,\"91\":1,\"92\":1,\"93\":2,\"94\":1,\"95\":1,\"97\":1,\"98\":1,\"102\":1,\"105\":2,\"110\":1,\"116\":1,\"126\":1,\"166\":1,\"170\":2,\"172\":7,\"183\":5,\"184\":3,\"185\":3,\"186\":3,\"187\":1,\"188\":5,\"189\":22,\"192\":1,\"193\":2,\"196\":5,\"197\":1,\"198\":5,\"200\":2,\"201\":2,\"202\":4,\"204\":4,\"257\":1,\"258\":7,\"264\":1,\"268\":1,\"269\":2,\"271\":1,\"272\":4,\"278\":6,\"281\":2,\"310\":1,\"312\":1,\"313\":7,\"315\":1,\"316\":1,\"317\":1,\"319\":3,\"320\":3,\"321\":1,\"322\":2,\"323\":3,\"324\":2,\"330\":1,\"376\":1,\"380\":1,\"383\":1,\"384\":3,\"385\":3,\"386\":4,\"387\":7,\"389\":4,\"391\":2,\"392\":1,\"393\":5,\"394\":3,\"396\":2,\"397\":1,\"401\":4,\"402\":3,\"403\":5,\"405\":9,\"406\":7,\"407\":10,\"422\":2,\"432\":1,\"440\":2,\"441\":2,\"442\":2,\"444\":2,\"462\":2,\"535\":1,\"568\":1,\"571\":2,\"580\":1,\"582\":3,\"590\":2,\"591\":2,\"604\":1}}],[\"reject\",{\"1\":{\"192\":6,\"193\":6,\"264\":2,\"272\":3,\"322\":5,\"432\":2}}],[\"rejectedpromise\",{\"1\":{\"193\":2}}],[\"rejected\",{\"1\":{\"192\":2,\"193\":2,\"264\":1}}],[\"revoked\",{\"1\":{\"189\":1}}],[\"revoke\",{\"1\":{\"189\":2}}],[\"revocable\",{\"1\":{\"189\":2}}],[\"reversedmessage\",{\"1\":{\"74\":2}}],[\"reversed\",{\"1\":{\"74\":1}}],[\"reverse\",{\"1\":{\"70\":1,\"74\":1,\"155\":3,\"578\":2}}],[\"reversemessage\",{\"1\":{\"70\":3,\"77\":1}}],[\"recursive\",{\"1\":{\"313\":1}}],[\"recursion\",{\"1\":{\"269\":1}}],[\"rect\",{\"1\":{\"312\":2}}],[\"rectangle\",{\"1\":{\"183\":9,\"278\":4,\"312\":4}}],[\"record\",{\"1\":{\"280\":1}}],[\"received\",{\"1\":{\"258\":2,\"271\":3,\"272\":1}}],[\"receiver\",{\"1\":{\"188\":2,\"189\":1,\"191\":2}}],[\"regular\",{\"1\":{\"279\":1,\"604\":1}}],[\"regularfunc\",{\"1\":{\"262\":2}}],[\"registry\",{\"1\":{\"174\":1}}],[\"regexp\",{\"1\":{\"168\":1,\"256\":2,\"279\":1}}],[\"regex\",{\"1\":{\"168\":19,\"174\":2,\"279\":8}}],[\"relational\",{\"1\":{\"600\":1}}],[\"relative\",{\"1\":{\"147\":3}}],[\"releases\",{\"1\":{\"507\":1}}],[\"reload\",{\"1\":{\"266\":1}}],[\"rel=\",{\"1\":{\"142\":1}}],[\"removal\",{\"1\":{\"497\":1}}],[\"removeclass\",{\"1\":{\"288\":1}}],[\"removechild\",{\"1\":{\"265\":1}}],[\"remove\",{\"1\":{\"265\":1,\"296\":1}}],[\"removeeventlistener\",{\"1\":{\"70\":1}}],[\"remote命令可以查看当前仓库关联的所有远程仓库\",{\"1\":{\"336\":1}}],[\"remote命令可以管理远程仓库\",{\"1\":{\"334\":1}}],[\"remote\",{\"1\":{\"336\":3}}],[\"remainder\",{\"1\":{\"254\":2}}],[\"rem\",{\"1\":{\"145\":1}}],[\"representational\",{\"1\":{\"371\":1}}],[\"repo\",{\"1\":{\"336\":2}}],[\"repository\",{\"1\":{\"333\":1}}],[\"reporting\",{\"1\":{\"586\":1}}],[\"report\",{\"1\":{\"58\":1}}],[\"replacereducer\",{\"1\":{\"401\":1}}],[\"replacement\",{\"0\":{\"459\":1},\"1\":{\"279\":1,\"453\":2,\"457\":1,\"459\":2}}],[\"replacechild\",{\"1\":{\"265\":1}}],[\"replace\",{\"1\":{\"256\":2,\"279\":1,\"393\":2,\"416\":1,\"546\":2,\"570\":1}}],[\"replace等\",{\"1\":{\"174\":2}}],[\"repeat\",{\"1\":{\"144\":4,\"158\":4,\"167\":2}}],[\"readfile方法就是使用回调函数的典型例子\",{\"1\":{\"511\":1}}],[\"readfile\",{\"1\":{\"509\":1,\"511\":5}}],[\"readme\",{\"1\":{\"334\":2}}],[\"ready\",{\"1\":{\"285\":2}}],[\"readystate\",{\"1\":{\"282\":1,\"345\":1,\"346\":1,\"347\":1,\"348\":1}}],[\"read\",{\"1\":{\"204\":2}}],[\"readonly装饰器修改了property属性\",{\"1\":{\"204\":1}}],[\"readonlystate\",{\"1\":{\"102\":3}}],[\"readonly\",{\"1\":{\"102\":3,\"204\":2}}],[\"real\",{\"1\":{\"128\":1,\"136\":1}}],[\"react组件可以通过连接到redux来访问和管理全局状态\",{\"1\":{\"406\":1}}],[\"react组件通过连接到redux\",{\"1\":{\"403\":1}}],[\"reactrouter\",{\"0\":{\"373\":1}}],[\"reactive函数的返回值是一个对象\",{\"1\":{\"102\":1}}],[\"reactive函数\",{\"1\":{\"102\":1}}],[\"reactive\",{\"1\":{\"102\":14,\"105\":2,\"110\":9,\"278\":1}}],[\"react能够快速更新变化的部分\",{\"1\":{\"45\":1}}],[\"react能够最小化对实际dom的操作\",{\"1\":{\"9\":1}}],[\"react依赖于hooks的顺序来确保每个hook的状态对应正确的组件实例\",{\"1\":{\"43\":1}}],[\"react表单验证通常在提交时或输入时进行\",{\"1\":{\"32\":1}}],[\"react提供了高效的页面更新和管理组件状态的能力\",{\"1\":{\"11\":1}}],[\"react会基于key属性来决定更新的方式\",{\"1\":{\"46\":1}}],[\"react会找出两个虚拟dom树之间的差异\",{\"1\":{\"45\":1}}],[\"react会首先生成一个新的虚拟dom树\",{\"1\":{\"45\":1}}],[\"react会根据变化自动更新组件的渲染结果\",{\"1\":{\"21\":1}}],[\"react会根据声明的规则自动更新界面\",{\"1\":{\"8\":1}}],[\"react会重新渲染组件\",{\"1\":{\"11\":1}}],[\"react会通过比较新旧虚拟dom的差异\",{\"1\":{\"11\":1}}],[\"react将会将jsx转换为相应的javascript代码\",{\"1\":{\"16\":1}}],[\"react将用户界面拆分成独立的可复用组件\",{\"1\":{\"11\":1}}],[\"react将页面拆分成多个可复用和独立的组件\",{\"1\":{\"8\":1}}],[\"react适合构建大型应用和复杂场景\",{\"1\":{\"10\":1}}],[\"react和vue在性能上表现相似\",{\"1\":{\"10\":1}}],[\"react和vue都采用组件化开发模型\",{\"1\":{\"10\":1}}],[\"react拥有庞大且成熟的生态系统\",{\"1\":{\"10\":1}}],[\"react拥有庞大的生态系统和活跃的社区\",{\"1\":{\"10\":1}}],[\"react拥有庞大的生态系统\",{\"1\":{\"8\":1,\"9\":1}}],[\"react在处理大型应用和频繁更新时具有较好的性能\",{\"1\":{\"10\":1}}],[\"react相对于angular来说\",{\"1\":{\"10\":1}}],[\"react与其他前端框架相比具有不同的特点和优势\",{\"1\":{\"10\":1}}],[\"react与其他前端框架的比较\",{\"0\":{\"10\":1}}],[\"react生态系统发展迅速\",{\"1\":{\"9\":1}}],[\"react仍然可能面临性能问题\",{\"1\":{\"9\":1}}],[\"react应用可能变得越来越复杂\",{\"1\":{\"9\":1}}],[\"react只是一个ui库\",{\"1\":{\"9\":1}}],[\"react的核心概念包括组件\",{\"1\":{\"11\":1}}],[\"react的核心概念\",{\"0\":{\"11\":1}}],[\"react的组件化开发模式和virtual\",{\"1\":{\"45\":1}}],[\"react的组件化开发\",{\"1\":{\"9\":1}}],[\"react的优点和特点\",{\"0\":{\"9\":1}}],[\"react还有一些弃用和即将弃用的生命周期方法\",{\"1\":{\"22\":1}}],[\"react还拥有丰富的生态系统和跨平台开发能力\",{\"1\":{\"9\":1}}],[\"react还与其他流行的库和框架\",{\"1\":{\"9\":1}}],[\"react还支持使用purecomponent和memo组件进行性能优化\",{\"1\":{\"9\":1}}],[\"react采用组件化开发思想\",{\"1\":{\"10\":1}}],[\"react采用组件化的开发思想\",{\"1\":{\"9\":1}}],[\"react采用了一种特殊的编程模型\",{\"1\":{\"9\":1}}],[\"react采用单向数据流的数据管理模式\",{\"1\":{\"9\":1}}],[\"react使用jsx语法来描述组件的结构和外观\",{\"1\":{\"9\":1}}],[\"react使用虚拟dom来进行高效的页面更新\",{\"1\":{\"11\":1}}],[\"react使用虚拟dom\",{\"1\":{\"9\":1}}],[\"react使用了虚拟dom\",{\"1\":{\"8\":1}}],[\"react是一个强大而灵活的javascript库\",{\"1\":{\"8\":1}}],[\"react是一个由facebook开发的用于构建用户界面的javascript库\",{\"1\":{\"8\":1}}],[\"react通过使用虚拟dom和高效的dom\",{\"1\":{\"8\":1}}],[\"react中的数据流是单向的\",{\"1\":{\"8\":1}}],[\"react具有以下特点\",{\"1\":{\"8\":1}}],[\"reactdom\",{\"1\":{\"5\":2,\"16\":4,\"21\":1,\"394\":2,\"403\":2,\"406\":2}}],[\"react\",{\"0\":{\"6\":1},\"1\":{\"5\":9,\"8\":1,\"10\":3,\"13\":3,\"14\":2,\"15\":1,\"16\":6,\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"23\":1,\"26\":1,\"31\":2,\"32\":1,\"35\":4,\"36\":4,\"37\":7,\"41\":19,\"42\":3,\"45\":1,\"47\":2,\"48\":1,\"50\":3,\"51\":6,\"374\":2,\"375\":2,\"376\":1,\"379\":1,\"380\":2,\"381\":1,\"383\":2,\"384\":11,\"386\":2,\"387\":4,\"388\":3,\"389\":2,\"390\":1,\"391\":2,\"392\":1,\"393\":11,\"394\":10,\"395\":3,\"396\":3,\"397\":12,\"398\":1,\"403\":7,\"405\":3,\"406\":10,\"407\":8}}],[\"referer\",{\"1\":{\"355\":1}}],[\"references\",{\"1\":{\"331\":1}}],[\"reference\",{\"1\":{\"276\":1,\"280\":1}}],[\"referenceerror\",{\"1\":{\"172\":1}}],[\"reflog命令可以查看本地仓库的操作记录\",{\"1\":{\"338\":1}}],[\"reflog\",{\"1\":{\"338\":1}}],[\"reflect\",{\"0\":{\"190\":1},\"1\":{\"174\":2,\"189\":10,\"190\":2,\"191\":30}}],[\"reflect用于访问对象的反射元信息\",{\"1\":{\"174\":1}}],[\"ref函数还可以接受对象\",{\"1\":{\"102\":1}}],[\"ref函数的返回值是一个包装了初始值的响应式对象\",{\"1\":{\"102\":1}}],[\"ref函数的使用方式如下\",{\"1\":{\"102\":1}}],[\"ref函数\",{\"1\":{\"102\":1}}],[\"refs\",{\"1\":{\"93\":3}}],[\"ref\",{\"1\":{\"31\":2,\"41\":2,\"102\":12,\"110\":4,\"116\":1}}],[\"ref=\",{\"1\":{\"3\":1,\"31\":1,\"41\":4}}],[\"resource\",{\"0\":{\"538\":1},\"1\":{\"352\":1,\"538\":6}}],[\"resolved\",{\"1\":{\"193\":2,\"264\":1}}],[\"resolvedpromise\",{\"1\":{\"193\":2}}],[\"resolve\",{\"1\":{\"187\":2,\"192\":7,\"193\":7,\"196\":2,\"197\":2,\"198\":2,\"264\":2,\"271\":4,\"272\":5,\"306\":1,\"322\":5,\"328\":1,\"432\":2,\"450\":1,\"454\":3,\"460\":5,\"475\":1,\"486\":1}}],[\"resolution\",{\"1\":{\"157\":1,\"328\":3,\"460\":1}}],[\"res\",{\"1\":{\"318\":4,\"364\":2,\"365\":10,\"366\":6,\"367\":3,\"509\":2,\"512\":2}}],[\"resize\",{\"1\":{\"297\":2}}],[\"resizeto\",{\"1\":{\"266\":1}}],[\"rest\",{\"1\":{\"172\":3,\"385\":2}}],[\"restprops\",{\"1\":{\"23\":2}}],[\"resetchild\",{\"1\":{\"41\":2}}],[\"resultdiv\",{\"1\":{\"345\":3}}],[\"result3\",{\"1\":{\"193\":2}}],[\"result2\",{\"1\":{\"193\":2,\"320\":2}}],[\"result1\",{\"1\":{\"193\":2}}],[\"results\",{\"1\":{\"193\":2,\"198\":6}}],[\"result\",{\"1\":{\"41\":4,\"52\":6,\"57\":4,\"168\":4,\"171\":2,\"187\":2,\"192\":4,\"193\":4,\"196\":3,\"198\":2,\"204\":4,\"252\":2,\"254\":2,\"258\":10,\"278\":2,\"279\":3,\"313\":10,\"318\":3,\"320\":2,\"345\":2,\"369\":2}}],[\"responsetext\",{\"1\":{\"345\":1,\"346\":1,\"347\":1,\"348\":1}}],[\"response\",{\"1\":{\"22\":2,\"23\":2,\"41\":2,\"196\":2,\"289\":1,\"322\":4,\"346\":2,\"348\":2,\"405\":2,\"432\":5,\"433\":2}}],[\"redirect\",{\"1\":{\"382\":2,\"418\":1}}],[\"reduce\",{\"1\":{\"310\":1,\"313\":1}}],[\"reducer函数\",{\"1\":{\"407\":1}}],[\"reducer是纯函数\",{\"1\":{\"407\":1}}],[\"reducer是一个纯函数\",{\"1\":{\"401\":2}}],[\"reducer2\",{\"1\":{\"402\":2}}],[\"reducer1\",{\"1\":{\"402\":2}}],[\"reducer会返回一个新的状态对象\",{\"1\":{\"401\":2}}],[\"reducer通常使用switch语句来根据action的类型进行状态更新\",{\"1\":{\"401\":1}}],[\"reducer根据action的类型来执行相应的逻辑\",{\"1\":{\"401\":1}}],[\"reducer的作用是根据action的类型来判断应该如何更新状态树\",{\"1\":{\"401\":1}}],[\"reducer的作用是根据不同的action类型来更新状态树\",{\"1\":{\"401\":1}}],[\"reducers应该总是返回一个新的状态对象\",{\"1\":{\"403\":1}}],[\"reducers对状态进行相应的修改\",{\"1\":{\"403\":1}}],[\"reducers接收两个参数\",{\"1\":{\"403\":1}}],[\"reducers根据action类型来执行相应的逻辑\",{\"1\":{\"402\":1}}],[\"reducers根据action的类型来决定如何更新状态\",{\"1\":{\"401\":1}}],[\"reducers根据action的类型来决定如何更新状态树\",{\"1\":{\"400\":1}}],[\"reducers根据接收到的action类型来更新状态\",{\"1\":{\"402\":1}}],[\"reducers基于action的类型来判断如何对状态进行更新\",{\"1\":{\"401\":1}}],[\"reducers是一个纯函数\",{\"1\":{\"401\":1}}],[\"reducers是纯函数\",{\"1\":{\"400\":1,\"403\":1}}],[\"reducers的作用是根据action的类型来更新应用程序的状态树\",{\"1\":{\"400\":1}}],[\"reducers\",{\"1\":{\"400\":1,\"402\":2,\"403\":1,\"405\":2}}],[\"reducer\",{\"1\":{\"41\":2,\"401\":2,\"403\":2,\"406\":3,\"407\":2}}],[\"redux提供的connect函数\",{\"1\":{\"407\":1}}],[\"redux提供了一种结构和一套规则来管理应用程序的状态\",{\"1\":{\"404\":1}}],[\"redux提供了一个特殊的react组件<provider>\",{\"1\":{\"404\":1}}],[\"redux库提供的connect函数将需要访问redux状态或调度操作的组件连接到redux\",{\"1\":{\"406\":1}}],[\"redux库\",{\"1\":{\"406\":2}}],[\"redux与react非常适合集成在一起\",{\"1\":{\"406\":1}}],[\"redux与react非常契合\",{\"1\":{\"404\":1}}],[\"redux与react的集成\",{\"0\":{\"406\":1}}],[\"redux中间件非常有用\",{\"1\":{\"405\":1}}],[\"redux中间件的作用是增强redux的功能\",{\"1\":{\"405\":1}}],[\"redux中间件是一个位于redux\",{\"1\":{\"405\":1}}],[\"redux中间件\",{\"0\":{\"405\":1}}],[\"redux都能提供良好的状态管理解决方案\",{\"1\":{\"404\":1}}],[\"redux具有可预测性\",{\"1\":{\"404\":1}}],[\"redux可以帮助开发者更好地组织和管理大型应用程序的状态\",{\"1\":{\"404\":1}}],[\"redux还提供了一个可以将组件与store连接起来的高阶函数connect\",{\"1\":{\"404\":1}}],[\"redux将应用程序的状态从组件中分离出来\",{\"1\":{\"404\":1}}],[\"redux使用纯函数来处理状态的更新逻辑\",{\"1\":{\"404\":1}}],[\"redux使用单一数据源存储应用程序的状态\",{\"1\":{\"404\":1}}],[\"redux作为一种状态管理库\",{\"1\":{\"404\":1}}],[\"redux实现了一个可预测且可维护的状态管理机制\",{\"1\":{\"402\":1}}],[\"redux要求reducer是纯函数\",{\"1\":{\"401\":1}}],[\"redux要求reducer必须是一个纯函数\",{\"1\":{\"401\":1}}],[\"redux也可以与各种前端框架\",{\"1\":{\"400\":1}}],[\"redux会通知所有订阅\",{\"1\":{\"400\":1}}],[\"redux会将action发送给reducers\",{\"1\":{\"400\":1}}],[\"redux的优点\",{\"0\":{\"404\":1}}],[\"redux的provider组件将redux\",{\"1\":{\"403\":1}}],[\"redux的工作原理借助了纯函数和单一数据源的思想\",{\"1\":{\"403\":1}}],[\"redux的工作原理可以概括为三个关键概念\",{\"1\":{\"403\":1}}],[\"redux的工作原理\",{\"0\":{\"403\":1}}],[\"redux的工作流程是基于\",{\"1\":{\"402\":1}}],[\"redux的工作流程\",{\"0\":{\"402\":1}}],[\"redux的store将reducer返回的新状态更新到store中\",{\"1\":{\"402\":1}}],[\"redux的store会调用reducers\",{\"1\":{\"402\":1}}],[\"redux的store会使用派发的action来调用reducers\",{\"1\":{\"401\":1}}],[\"redux的store会通过调用reducers来处理这个action\",{\"1\":{\"401\":1}}],[\"redux的订阅机制能够帮助我们有效地监听状态的变化\",{\"1\":{\"401\":1}}],[\"redux的核心概念\",{\"0\":{\"401\":1}}],[\"redux的核心概念包括\",{\"1\":{\"400\":1}}],[\"redux的设计思想受到了flux架构的启发\",{\"1\":{\"400\":1}}],[\"redux是一个用于javascript应用程序的状态管理库\",{\"1\":{\"400\":1}}],[\"redux\",{\"0\":{\"399\":1},\"1\":{\"402\":2,\"403\":4,\"405\":14,\"406\":5,\"407\":8}}],[\"redux等\",{\"1\":{\"9\":1}}],[\"redux和mobx等状态管理库\",{\"1\":{\"8\":1}}],[\"red\",{\"1\":{\"15\":1,\"70\":2,\"141\":1,\"143\":4,\"144\":1,\"150\":1,\"151\":1,\"152\":1,\"153\":3,\"228\":1,\"265\":1,\"295\":1,\"314\":2,\"318\":1,\"321\":2,\"579\":2,\"583\":1}}],[\"plugin插件来压缩javascript代码\",{\"1\":{\"496\":2}}],[\"plugin插件来进行优化和压缩\",{\"1\":{\"469\":1}}],[\"plugin\",{\"0\":{\"464\":1},\"1\":{\"456\":2,\"464\":5,\"469\":3,\"476\":2,\"488\":1,\"496\":1,\"504\":1}}],[\"plugins\",{\"0\":{\"456\":1,\"488\":1},\"1\":{\"437\":1,\"439\":2,\"453\":1,\"454\":3,\"456\":2,\"469\":2,\"475\":2,\"476\":2,\"488\":1,\"492\":1}}],[\"plain\",{\"1\":{\"355\":1}}],[\"playwithanimal\",{\"1\":{\"317\":1}}],[\"play\",{\"1\":{\"300\":1,\"317\":1}}],[\"placeholder=\",{\"1\":{\"3\":1,\"30\":2,\"346\":2,\"347\":1}}],[\"pytest\",{\"1\":{\"372\":1}}],[\"python和ruby\",{\"1\":{\"527\":1}}],[\"python\",{\"1\":{\"241\":1}}],[\"pwa\",{\"0\":{\"243\":1},\"1\":{\"243\":1}}],[\"pwa特性等内容\",{\"1\":{\"58\":1}}],[\"pdf\",{\"1\":{\"219\":2}}],[\"pipe\",{\"1\":{\"455\":1}}],[\"pick<person\",{\"1\":{\"321\":1}}],[\"pick\",{\"1\":{\"321\":1,\"338\":3}}],[\"pi\",{\"1\":{\"165\":4,\"183\":4,\"249\":1,\"251\":1,\"310\":1,\"311\":2,\"319\":1,\"330\":1,\"591\":2}}],[\"phalcon\",{\"1\":{\"604\":3}}],[\"phasellus\",{\"1\":{\"154\":1}}],[\"php的json函数支持的数据类型和特性可能有所限制\",{\"1\":{\"604\":1}}],[\"php还提供了许多其他过滤器函数\",{\"1\":{\"603\":1}}],[\"php代码在执行之前需要被解析和编译成可执行的opcode\",{\"1\":{\"601\":1}}],[\"php支持将计算结果缓存起来\",{\"1\":{\"601\":1}}],[\"php支持数据库连接\",{\"1\":{\"513\":1}}],[\"php是一种非常灵活和强大的编程语言\",{\"1\":{\"592\":1}}],[\"php是一种通用的开源脚本语言\",{\"1\":{\"513\":1}}],[\"php中的接口\",{\"1\":{\"591\":1}}],[\"php也支持异常处理机制\",{\"1\":{\"588\":1}}],[\"php提供了一些内置的过滤器函数和过滤器常量\",{\"1\":{\"603\":1}}],[\"php提供了一些内置的异常类\",{\"1\":{\"589\":1}}],[\"php提供了丰富的面向对象特性和语法支持\",{\"1\":{\"583\":1}}],[\"php提供了丰富的内置函数\",{\"1\":{\"565\":1}}],[\"php提供了三个访问控制修饰符\",{\"1\":{\"583\":1}}],[\"php7\",{\"1\":{\"519\":1}}],[\"php主要用于服务器端的web开发\",{\"1\":{\"513\":1}}],[\"php可以与多种数据库进行交互\",{\"1\":{\"513\":1}}],[\"php可以在多个操作系统上运行\",{\"1\":{\"513\":1}}],[\"php有庞大的开源社区支持\",{\"1\":{\"513\":1}}],[\"php语法简单易懂\",{\"1\":{\"513\":1}}],[\"php文件\",{\"1\":{\"346\":1,\"347\":1}}],[\"php\",{\"0\":{\"513\":1,\"519\":1},\"1\":{\"241\":1,\"289\":1,\"346\":1,\"347\":1,\"514\":5,\"515\":5,\"517\":1,\"519\":3,\"520\":1,\"524\":5,\"525\":2,\"526\":1,\"527\":2,\"528\":2,\"530\":1,\"531\":1,\"532\":1,\"534\":1,\"535\":2,\"537\":4,\"538\":2,\"539\":3,\"540\":4,\"541\":7,\"546\":2,\"569\":1,\"570\":4,\"571\":1,\"579\":1,\"580\":9,\"581\":3,\"582\":2,\"583\":4,\"599\":7,\"600\":1,\"601\":1,\"603\":1,\"604\":14}}],[\"photoshop\",{\"1\":{\"54\":1}}],[\"pending\",{\"1\":{\"192\":1}}],[\"penatibus\",{\"1\":{\"154\":1}}],[\"perl\",{\"1\":{\"604\":1}}],[\"perform\",{\"1\":{\"189\":1}}],[\"performance\",{\"1\":{\"58\":2,\"372\":1,\"497\":1}}],[\"persistent\",{\"1\":{\"497\":2}}],[\"persistedstate\",{\"1\":{\"439\":2}}],[\"persistedstate插件可以确保vuex状态在刷新页面或关闭\",{\"1\":{\"439\":1}}],[\"persistedstate插件注册到vuex\",{\"1\":{\"439\":1}}],[\"persistedstate插件并注册它\",{\"1\":{\"439\":1}}],[\"persistedstate插件\",{\"1\":{\"439\":1}}],[\"persistedstate插件来持久化vuex状态\",{\"1\":{\"439\":1}}],[\"persistedstate插件持久化状态\",{\"0\":{\"439\":1}}],[\"personnameandage\",{\"1\":{\"321\":1}}],[\"personwithoutage\",{\"1\":{\"321\":1}}],[\"personkey\",{\"1\":{\"321\":1}}],[\"personkeys\",{\"1\":{\"319\":1}}],[\"persontype\",{\"1\":{\"319\":1}}],[\"person2\",{\"1\":{\"183\":2,\"267\":6}}],[\"person1\",{\"1\":{\"183\":2,\"267\":6}}],[\"person\",{\"1\":{\"171\":12,\"172\":2,\"173\":3,\"183\":9,\"189\":9,\"191\":37,\"231\":1,\"251\":1,\"259\":13,\"262\":10,\"267\":25,\"310\":6,\"312\":13,\"315\":1,\"316\":2,\"319\":6,\"321\":4}}],[\"perspective\",{\"1\":{\"150\":2}}],[\"pt\",{\"1\":{\"145\":1}}],[\"pseudo\",{\"1\":{\"143\":2,\"159\":1}}],[\"p选择器\",{\"1\":{\"143\":3}}],[\"powershell和zsh\",{\"1\":{\"527\":1}}],[\"polling\",{\"1\":{\"497\":1}}],[\"polymorphism\",{\"1\":{\"183\":1,\"583\":1}}],[\"port\",{\"1\":{\"364\":3,\"367\":1,\"368\":1,\"461\":3,\"490\":1,\"509\":1,\"512\":1}}],[\"porttitor\",{\"1\":{\"154\":1}}],[\"pooling\",{\"1\":{\"358\":1}}],[\"pop\",{\"1\":{\"257\":2,\"570\":1,\"578\":2}}],[\"points\",{\"1\":{\"458\":1}}],[\"pointer\",{\"1\":{\"144\":2}}],[\"point\",{\"0\":{\"485\":1},\"1\":{\"136\":1,\"318\":4,\"464\":1}}],[\"positioning\",{\"1\":{\"144\":1,\"147\":2}}],[\"position\",{\"1\":{\"144\":4,\"147\":3,\"229\":3}}],[\"position属性进行展示\",{\"1\":{\"54\":1}}],[\"post用于处理通过post方法提交的表单数据\",{\"1\":{\"580\":1}}],[\"post或$\",{\"1\":{\"580\":1}}],[\"post和cookie方式提交的所有参数值\",{\"1\":{\"521\":1}}],[\"post方法提交的表单数据\",{\"1\":{\"521\":1}}],[\"postcss\",{\"1\":{\"455\":1}}],[\"posts\",{\"1\":{\"379\":1}}],[\"postgresql和oracle\",{\"1\":{\"369\":1}}],[\"post请求对服务器资源可能产生副作用\",{\"1\":{\"353\":1}}],[\"post等\",{\"1\":{\"341\":1,\"352\":1,\"360\":1,\"603\":1}}],[\"postmessage将结果发送回主线程\",{\"1\":{\"57\":1}}],[\"postmessage\",{\"1\":{\"57\":2,\"238\":1}}],[\"post\",{\"1\":{\"30\":3,\"282\":1,\"289\":1,\"338\":1,\"346\":1,\"352\":1,\"353\":1,\"365\":2,\"432\":1,\"521\":1,\"580\":5,\"581\":2}}],[\"p\",{\"1\":{\"129\":1,\"133\":2,\"141\":1,\"143\":5,\"145\":4,\"168\":3,\"286\":1,\"299\":1,\"318\":2,\"319\":1,\"345\":1}}],[\"px\",{\"1\":{\"85\":1,\"145\":1}}],[\"pngquant\",{\"1\":{\"469\":1}}],[\"png|jpg|jpeg|gif\",{\"1\":{\"473\":1}}],[\"png|jpg|jpeg|gif|svg\",{\"1\":{\"469\":1}}],[\"png|jpg|gif\",{\"1\":{\"463\":1,\"491\":1}}],[\"png|jpe\",{\"1\":{\"455\":1}}],[\"png\",{\"1\":{\"144\":1,\"463\":1}}],[\"png是一种无损压缩的格式\",{\"1\":{\"54\":1}}],[\"png和gif等\",{\"1\":{\"54\":1}}],[\"pug\",{\"1\":{\"367\":1}}],[\"put请求是幂等的\",{\"1\":{\"353\":1}}],[\"put\",{\"1\":{\"352\":1,\"353\":1,\"365\":2,\"570\":1}}],[\"pull\",{\"1\":{\"336\":2}}],[\"pull命令可以将远程仓库的修改拉取到本地仓库\",{\"1\":{\"334\":1}}],[\"public\",{\"1\":{\"312\":3,\"356\":1,\"366\":2,\"368\":4,\"444\":2,\"461\":2,\"539\":1,\"579\":5,\"582\":6,\"583\":8,\"591\":8}}],[\"publishedat\",{\"1\":{\"70\":1}}],[\"publisher\",{\"1\":{\"38\":1,\"272\":1}}],[\"publish\",{\"1\":{\"38\":1,\"272\":4}}],[\"pubsub\",{\"1\":{\"272\":4}}],[\"purecomponent类或通过手动编写shouldcomponentupdate来确保组件只在其props或state发生实际变化时才进行重新渲染\",{\"1\":{\"49\":1}}],[\"purecomponent或优化的函数组件\",{\"1\":{\"49\":1}}],[\"purecomponent会阻止组件重新渲染\",{\"1\":{\"47\":1}}],[\"purecomponent是react中的一个基类组件\",{\"1\":{\"47\":1}}],[\"purecomponent\",{\"1\":{\"47\":2}}],[\"purecomponent和memo都是react中用于性能优化的组件包装器\",{\"1\":{\"47\":1}}],[\"purecomponent和memo组件\",{\"0\":{\"47\":1}}],[\"push等\",{\"1\":{\"338\":1}}],[\"push命令可以将本地仓库的修改推送到远程仓库\",{\"1\":{\"334\":1}}],[\"push\",{\"1\":{\"3\":1,\"243\":1,\"257\":2,\"272\":1,\"310\":1,\"336\":4,\"383\":1,\"416\":3,\"417\":3,\"420\":1,\"429\":1,\"431\":1,\"570\":1,\"578\":2}}],[\"paint\",{\"1\":{\"579\":2}}],[\"pair<number\",{\"1\":{\"320\":1}}],[\"pair<t\",{\"1\":{\"320\":2}}],[\"pair\",{\"1\":{\"320\":4}}],[\"package\",{\"1\":{\"475\":1,\"506\":1,\"507\":1,\"510\":1}}],[\"pause\",{\"1\":{\"300\":1}}],[\"padend\",{\"1\":{\"167\":2}}],[\"padstart\",{\"1\":{\"167\":2}}],[\"padding\",{\"1\":{\"143\":1,\"144\":3,\"146\":3,\"147\":1,\"155\":1,\"156\":1,\"158\":3,\"161\":12}}],[\"path模块\",{\"1\":{\"509\":1}}],[\"paths\",{\"1\":{\"439\":1}}],[\"pathname\",{\"1\":{\"387\":2}}],[\"path=\",{\"1\":{\"326\":2,\"331\":2,\"377\":1,\"378\":3,\"379\":3,\"381\":1,\"382\":1,\"384\":3,\"386\":2,\"387\":1,\"388\":3,\"389\":4,\"391\":1,\"392\":6,\"394\":2,\"396\":3,\"397\":2}}],[\"path\",{\"1\":{\"167\":2,\"327\":2,\"328\":2,\"331\":1,\"357\":1,\"365\":5,\"384\":3,\"385\":3,\"391\":2,\"394\":1,\"412\":2,\"413\":2,\"414\":3,\"415\":5,\"416\":2,\"417\":5,\"418\":3,\"419\":2,\"420\":1,\"421\":2,\"423\":2,\"450\":4,\"453\":1,\"454\":4,\"460\":1,\"461\":1,\"475\":4,\"486\":2,\"586\":1}}],[\"patch请求通常用于部分更新资源\",{\"1\":{\"353\":1}}],[\"patch\",{\"1\":{\"128\":1,\"353\":1}}],[\"pattern$\",{\"1\":{\"279\":1}}],[\"pattern\",{\"1\":{\"38\":1,\"174\":1,\"217\":1,\"272\":1,\"279\":5,\"592\":8}}],[\"payload\",{\"1\":{\"93\":4,\"401\":2,\"405\":4,\"444\":2}}],[\"pascalcase\",{\"1\":{\"91\":3}}],[\"passive=\",{\"1\":{\"70\":1}}],[\"passive\",{\"1\":{\"70\":1}}],[\"passed\",{\"1\":{\"36\":1}}],[\"password和databasename为您自己的实际值\",{\"1\":{\"133\":1}}],[\"password\",{\"1\":{\"30\":1,\"133\":2,\"600\":1}}],[\"page<\",{\"1\":{\"393\":1,\"514\":1}}],[\"pagetitle\",{\"1\":{\"367\":2}}],[\"page\",{\"1\":{\"70\":1,\"129\":1,\"343\":1,\"389\":3,\"393\":4}}],[\"pagespeed\",{\"1\":{\"58\":1}}],[\"pagey\",{\"1\":{\"27\":1}}],[\"pagex\",{\"1\":{\"27\":1}}],[\"party\",{\"1\":{\"370\":1}}],[\"parturient\",{\"1\":{\"154\":1}}],[\"parse\",{\"1\":{\"281\":1,\"345\":1,\"347\":1,\"348\":1}}],[\"parsefloat\",{\"1\":{\"169\":4}}],[\"parseint\",{\"1\":{\"169\":5}}],[\"paragraph\",{\"1\":{\"70\":1,\"129\":1}}],[\"params来获取传递的参数\",{\"1\":{\"420\":1}}],[\"params\",{\"1\":{\"365\":3,\"386\":2,\"391\":2,\"416\":2,\"420\":1,\"421\":4,\"422\":2}}],[\"parameter2\",{\"1\":{\"258\":2}}],[\"parameter1\",{\"1\":{\"258\":2}}],[\"parameter\",{\"1\":{\"204\":1,\"524\":1}}],[\"parameterindex\",{\"1\":{\"204\":2}}],[\"parameters\",{\"0\":{\"381\":1},\"1\":{\"172\":4,\"258\":1}}],[\"param\",{\"1\":{\"25\":2,\"26\":1,\"187\":2}}],[\"parentelement\",{\"1\":{\"265\":10,\"286\":1}}],[\"parent<\",{\"1\":{\"93\":1}}],[\"parent\",{\"1\":{\"35\":1,\"36\":1,\"37\":1,\"93\":3,\"265\":4,\"267\":2,\"299\":1,\"302\":1,\"303\":2}}],[\"parentcomponent\",{\"1\":{\"20\":1,\"35\":3,\"36\":3,\"37\":3,\"41\":3,\"96\":1,\"396\":3}}],[\"price\",{\"1\":{\"583\":1}}],[\"private\",{\"1\":{\"312\":3,\"320\":1,\"356\":1,\"444\":5,\"582\":2,\"583\":1,\"591\":1}}],[\"print有返回值1\",{\"1\":{\"515\":1}}],[\"printing\",{\"1\":{\"330\":2}}],[\"printable\",{\"1\":{\"330\":6}}],[\"printlength\",{\"1\":{\"320\":1}}],[\"printlength<t\",{\"1\":{\"320\":1}}],[\"printvalue\",{\"1\":{\"317\":1}}],[\"printuppercase\",{\"1\":{\"313\":2}}],[\"print\",{\"1\":{\"157\":1,\"330\":4,\"515\":12}}],[\"primary\",{\"1\":{\"134\":1,\"161\":11}}],[\"prod\",{\"1\":{\"454\":1}}],[\"production或none\",{\"1\":{\"489\":1}}],[\"production模式\",{\"1\":{\"479\":1}}],[\"production\",{\"1\":{\"453\":1,\"457\":3,\"469\":2,\"479\":1,\"489\":1}}],[\"production和none\",{\"1\":{\"453\":1,\"457\":1,\"479\":1}}],[\"product\",{\"1\":{\"254\":2}}],[\"prompt参数是一个函数\",{\"1\":{\"387\":1}}],[\"prompt\",{\"1\":{\"387\":1}}],[\"promise的then回调会被执行\",{\"1\":{\"467\":1}}],[\"promise<void>\",{\"1\":{\"444\":2}}],[\"promise<string>\",{\"1\":{\"322\":2}}],[\"promise会被拒绝\",{\"1\":{\"264\":1}}],[\"promise会被解决\",{\"1\":{\"264\":1}}],[\"promise3\",{\"1\":{\"193\":4}}],[\"promise2\",{\"1\":{\"193\":4}}],[\"promise1\",{\"1\":{\"193\":4}}],[\"promises还是async\",{\"1\":{\"511\":1}}],[\"promises是一种更现代和清晰的处理异步代码的方式\",{\"1\":{\"511\":1}}],[\"promises和async\",{\"1\":{\"511\":1}}],[\"promises\",{\"1\":{\"187\":1,\"192\":2,\"322\":2,\"511\":3}}],[\"promise\",{\"0\":{\"192\":1},\"1\":{\"33\":1,\"95\":2,\"187\":3,\"192\":11,\"193\":48,\"194\":1,\"195\":13,\"196\":22,\"197\":7,\"198\":15,\"264\":2,\"270\":1,\"271\":5,\"272\":8,\"306\":4,\"322\":3,\"325\":1,\"432\":1}}],[\"protectedroute\",{\"1\":{\"385\":1}}],[\"protected\",{\"1\":{\"312\":2,\"385\":5,\"387\":1,\"583\":1}}],[\"proto\",{\"1\":{\"267\":4}}],[\"protocol\",{\"1\":{\"184\":1,\"351\":1,\"359\":1,\"371\":1}}],[\"prototype\",{\"1\":{\"170\":6,\"189\":12,\"191\":5,\"204\":1,\"253\":1,\"267\":12,\"330\":3}}],[\"programmatic\",{\"0\":{\"383\":1}}],[\"programming\",{\"1\":{\"278\":5,\"371\":1,\"583\":1}}],[\"progressive\",{\"0\":{\"243\":1}}],[\"process\",{\"1\":{\"457\":3,\"469\":1}}],[\"processstring\",{\"1\":{\"313\":2}}],[\"processdata\",{\"1\":{\"198\":3,\"258\":2,\"272\":7}}],[\"procedural\",{\"1\":{\"278\":1}}],[\"proxy2\",{\"1\":{\"189\":2}}],[\"proxy1\",{\"1\":{\"189\":2}}],[\"proxy陷阱的嵌套使用\",{\"1\":{\"189\":1}}],[\"proxyfunction\",{\"1\":{\"189\":2}}],[\"proxyconstructor\",{\"1\":{\"189\":2}}],[\"proxy\",{\"0\":{\"188\":1},\"1\":{\"188\":15,\"189\":47,\"461\":3}}],[\"propb\",{\"1\":{\"319\":2}}],[\"propa\",{\"1\":{\"319\":2}}],[\"prop\",{\"1\":{\"188\":12,\"189\":23,\"304\":3}}],[\"propertyname\",{\"1\":{\"259\":2}}],[\"propertykey\",{\"1\":{\"191\":10}}],[\"property2\",{\"1\":{\"151\":1}}],[\"property1\",{\"1\":{\"151\":1}}],[\"property\",{\"1\":{\"151\":4,\"189\":10,\"204\":4,\"444\":1,\"583\":1}}],[\"properties\",{\"1\":{\"144\":9,\"152\":1}}],[\"props和事件\",{\"1\":{\"93\":1}}],[\"props传递\",{\"1\":{\"35\":1}}],[\"props来访问父组件传递的属性\",{\"1\":{\"20\":1}}],[\"props来访问传入的属性\",{\"1\":{\"19\":1}}],[\"props\",{\"0\":{\"20\":1},\"1\":{\"3\":1,\"11\":2,\"18\":3,\"19\":3,\"20\":7,\"22\":3,\"23\":13,\"31\":2,\"36\":3,\"41\":1,\"47\":1,\"48\":1,\"93\":2,\"385\":2,\"403\":4,\"405\":7,\"406\":4,\"420\":1}}],[\"provideplugin\",{\"1\":{\"456\":1}}],[\"provide\",{\"1\":{\"117\":2}}],[\"providers\",{\"1\":{\"370\":1}}],[\"provider需要放置在消费者组件的父组件中\",{\"1\":{\"37\":1}}],[\"provider组件将共享的数据shareddata传递给所有子组件\",{\"1\":{\"37\":1}}],[\"provider>\",{\"1\":{\"37\":1,\"403\":1,\"406\":1,\"407\":1}}],[\"provider\",{\"1\":{\"37\":1,\"403\":1,\"406\":1,\"407\":1}}],[\"profile路由下又定义了一个子路由settings\",{\"1\":{\"415\":1}}],[\"profile优先匹配\",{\"1\":{\"414\":1}}],[\"profile\",{\"1\":{\"92\":2,\"389\":5,\"415\":8}}],[\"profile<\",{\"1\":{\"92\":1}}],[\"profilelistcomponent\",{\"1\":{\"91\":1}}],[\"project\",{\"1\":{\"88\":3}}],[\"prepared\",{\"1\":{\"600\":1}}],[\"prepend\",{\"1\":{\"288\":1,\"296\":2}}],[\"preset\",{\"1\":{\"471\":1}}],[\"presets\",{\"1\":{\"471\":1}}],[\"presentation\",{\"1\":{\"407\":1}}],[\"pressed\",{\"1\":{\"25\":2}}],[\"pre>\",{\"1\":{\"70\":1}}],[\"pre\",{\"1\":{\"70\":1,\"338\":1}}],[\"previous\",{\"1\":{\"507\":1}}],[\"preventing\",{\"1\":{\"189\":2}}],[\"preventextensions\",{\"1\":{\"171\":2,\"189\":4,\"191\":3}}],[\"prevent><\",{\"1\":{\"70\":1}}],[\"prevent=\",{\"1\":{\"70\":2}}],[\"prevent\",{\"1\":{\"70\":1,\"458\":1}}],[\"preventdefault\",{\"1\":{\"25\":2,\"27\":2,\"30\":1,\"31\":2,\"70\":1,\"294\":1,\"346\":1}}],[\"prevcount\",{\"1\":{\"42\":4}}],[\"prevprops\",{\"1\":{\"22\":1}}],[\"prevstate\",{\"1\":{\"22\":4}}],[\"p>\",{\"1\":{\"13\":1,\"14\":2,\"15\":6,\"35\":1,\"36\":1,\"37\":1,\"41\":8,\"42\":1,\"70\":11,\"74\":2,\"77\":1,\"86\":1,\"92\":2,\"94\":2,\"96\":1,\"102\":2,\"105\":2,\"147\":3,\"154\":3,\"231\":2,\"288\":2,\"296\":2,\"367\":1,\"405\":3,\"407\":1,\"412\":1,\"433\":1,\"442\":1,\"444\":1,\"528\":1}}],[\"hmr还能够帮助开发人员保持应用程序的状态和数据\",{\"1\":{\"459\":1}}],[\"hmr不仅可以处理javascript模块的热替换\",{\"1\":{\"459\":1}}],[\"hmr的工作原理如下\",{\"1\":{\"459\":1}}],[\"hmr\",{\"1\":{\"453\":1,\"459\":2,\"461\":2,\"490\":1}}],[\"hsts\",{\"1\":{\"359\":2}}],[\"hugenumber\",{\"1\":{\"310\":1}}],[\"href\",{\"1\":{\"211\":1,\"224\":2,\"266\":1,\"288\":2}}],[\"href=\",{\"1\":{\"142\":1,\"224\":1,\"232\":3}}],[\"hypertext\",{\"1\":{\"206\":1,\"351\":1,\"359\":1}}],[\"hide\",{\"1\":{\"288\":1,\"300\":1,\"307\":1}}],[\"hidden\",{\"1\":{\"144\":1,\"174\":1,\"299\":1}}],[\"history模式\",{\"1\":{\"461\":2}}],[\"historyapifallback\",{\"1\":{\"461\":3}}],[\"history\",{\"1\":{\"266\":2,\"376\":1,\"383\":2,\"384\":1,\"387\":8,\"390\":1,\"417\":1}}],[\"highlight\",{\"1\":{\"265\":2,\"288\":2}}],[\"higher\",{\"1\":{\"23\":1,\"258\":1,\"313\":1}}],[\"hi\",{\"1\":{\"256\":2,\"313\":2}}],[\"h1\",{\"1\":{\"129\":1,\"142\":2,\"143\":1,\"144\":1,\"145\":1}}],[\"h1>\",{\"1\":{\"3\":1,\"4\":1,\"5\":1,\"13\":1,\"14\":2,\"15\":5,\"16\":2,\"18\":2,\"19\":2,\"20\":2,\"21\":2,\"22\":1,\"35\":1,\"36\":1,\"37\":1,\"70\":1,\"92\":2,\"96\":2,\"119\":2,\"142\":1,\"231\":1,\"367\":1,\"384\":1,\"386\":2,\"389\":3,\"391\":1,\"394\":2,\"396\":1,\"403\":1,\"405\":1,\"406\":1,\"412\":1,\"420\":1,\"421\":1,\"422\":1,\"514\":1,\"528\":1}}],[\"h\",{\"1\":{\"93\":2,\"167\":1,\"170\":2,\"173\":1,\"185\":1,\"232\":1,\"256\":3,\"412\":2,\"415\":2,\"427\":2,\"440\":2,\"598\":1}}],[\"handshake\",{\"1\":{\"361\":2}}],[\"handling\",{\"0\":{\"491\":1},\"1\":{\"255\":1,\"497\":1}}],[\"handletoggletodo\",{\"1\":{\"407\":2}}],[\"handledecrement\",{\"1\":{\"403\":2}}],[\"handledeletetodo\",{\"1\":{\"5\":2}}],[\"handleincrement\",{\"1\":{\"403\":2}}],[\"handlesetfilter\",{\"1\":{\"407\":4}}],[\"handlestatechange\",{\"1\":{\"401\":2}}],[\"handlesubmit\",{\"1\":{\"25\":3,\"30\":2,\"31\":4}}],[\"handlegoback\",{\"1\":{\"393\":2}}],[\"handleexit\",{\"1\":{\"387\":2}}],[\"handleenter\",{\"1\":{\"387\":2}}],[\"handleevent\",{\"1\":{\"22\":1,\"27\":1,\"38\":2,\"272\":2}}],[\"handlebars\",{\"1\":{\"367\":1}}],[\"handlebuttonclick\",{\"1\":{\"26\":1,\"35\":2}}],[\"handleresponse\",{\"1\":{\"314\":2}}],[\"handlereset\",{\"1\":{\"41\":2}}],[\"handler2\",{\"1\":{\"189\":3}}],[\"handler1\",{\"1\":{\"189\":2}}],[\"handler\",{\"1\":{\"188\":7,\"189\":28,\"365\":6,\"587\":1}}],[\"handlefocus\",{\"1\":{\"41\":2}}],[\"handlemessagechange\",{\"1\":{\"35\":2}}],[\"handlechildevent\",{\"1\":{\"93\":2}}],[\"handlechange\",{\"1\":{\"31\":2}}],[\"handleclick来访问父组件传递的name和handleclick\",{\"1\":{\"36\":1}}],[\"handleclick=\",{\"1\":{\"36\":1}}],[\"handleclick\",{\"1\":{\"15\":1,\"22\":3,\"25\":5,\"26\":4,\"36\":3,\"383\":2,\"384\":2,\"393\":4}}],[\"handlekeydown\",{\"1\":{\"25\":3}}],[\"handleaddtodo\",{\"1\":{\"5\":2,\"407\":2}}],[\"hash\",{\"1\":{\"416\":1,\"473\":1}}],[\"hashrouter\",{\"1\":{\"390\":2}}],[\"hasownproperty\",{\"1\":{\"281\":2}}],[\"hasname\",{\"1\":{\"191\":2}}],[\"has\",{\"1\":{\"176\":2,\"177\":2,\"178\":2,\"179\":1,\"188\":1,\"189\":3,\"191\":2,\"282\":1,\"603\":1}}],[\"hasinstance用于定义对象的instanceof操作符行为\",{\"1\":{\"174\":1}}],[\"haserror\",{\"1\":{\"82\":5}}],[\"honda\",{\"1\":{\"579\":2}}],[\"hot\",{\"0\":{\"459\":1},\"1\":{\"453\":2,\"457\":1,\"459\":1,\"461\":3,\"490\":1}}],[\"hotmodulereplacementplugin\",{\"1\":{\"453\":1}}],[\"homecomponent\",{\"1\":{\"417\":2,\"423\":1}}],[\"home路径和携带参数跳转到\",{\"1\":{\"416\":1}}],[\"home和about分别是两个路由对象的名称\",{\"1\":{\"417\":1}}],[\"home和about\",{\"1\":{\"413\":1}}],[\"home\",{\"1\":{\"377\":2,\"378\":1,\"380\":1,\"382\":1,\"384\":7,\"385\":2,\"388\":2,\"389\":2,\"394\":1,\"397\":2,\"412\":3,\"413\":2,\"414\":1,\"415\":3,\"416\":1,\"417\":3,\"418\":6,\"421\":1,\"423\":1}}],[\"home时\",{\"1\":{\"377\":1}}],[\"hoisting\",{\"1\":{\"311\":1}}],[\"hover\",{\"1\":{\"143\":1,\"150\":1,\"151\":1,\"152\":1,\"161\":6}}],[\"hover伪类选择器的css规则会生效\",{\"1\":{\"150\":1,\"152\":1}}],[\"hover伪类选择器\",{\"1\":{\"143\":1}}],[\"how\",{\"1\":{\"70\":1}}],[\"hook来在组件加载时触发fetchuser\",{\"1\":{\"405\":1}}],[\"hook的调用不能在条件语句中\",{\"1\":{\"43\":1}}],[\"hook的调用顺序稳定\",{\"1\":{\"43\":1}}],[\"hooks包括pre\",{\"1\":{\"338\":1}}],[\"hooks是一些特定事件触发的自定义脚本\",{\"1\":{\"338\":1}}],[\"hooks是react\",{\"1\":{\"40\":1}}],[\"hooks不能在嵌套的函数内部使用\",{\"1\":{\"43\":1}}],[\"hooks只能在顶层使用\",{\"1\":{\"43\":1}}],[\"hooks只能在函数组件中使用\",{\"1\":{\"43\":2}}],[\"hooks只能在函数式组件的顶层调用\",{\"1\":{\"40\":1}}],[\"hooks的调用会导致额外的重渲染\",{\"1\":{\"43\":1}}],[\"hooks的调用必须在函数组件的顶层\",{\"1\":{\"43\":1}}],[\"hooks的调用必须遵循一些特定的规则\",{\"1\":{\"43\":1}}],[\"hooks的性能优化\",{\"1\":{\"43\":1}}],[\"hooks的使用注意事项\",{\"0\":{\"43\":1}}],[\"hooks的引入解决了这个问题\",{\"1\":{\"40\":1}}],[\"hooks\",{\"0\":{\"39\":1},\"1\":{\"40\":1,\"338\":1,\"398\":1}}],[\"hook\",{\"1\":{\"32\":1}}],[\"hoc也提高了代码的可读性和可测试性\",{\"1\":{\"23\":1}}],[\"hoc可以用于很多场景\",{\"1\":{\"23\":1}}],[\"hoc本质上是一个函数\",{\"1\":{\"23\":1}}],[\"hoc\",{\"0\":{\"23\":1},\"1\":{\"385\":1}}],[\"h2>\",{\"1\":{\"15\":2,\"35\":1,\"36\":1,\"37\":1,\"119\":1,\"388\":3,\"415\":1,\"440\":1,\"515\":1}}],[\"htmlspecialchars\",{\"1\":{\"580\":2}}],[\"html等\",{\"1\":{\"528\":1}}],[\"html文件\",{\"1\":{\"461\":1,\"488\":1}}],[\"html文档\",{\"1\":{\"355\":1}}],[\"htmlwebpackplugin使用了一个template选项\",{\"1\":{\"456\":1}}],[\"htmlwebpackplugin\",{\"1\":{\"453\":1,\"456\":3,\"476\":3,\"488\":2}}],[\"html部分\",{\"1\":{\"345\":1,\"346\":1,\"347\":1,\"348\":1}}],[\"html内容和class属性\",{\"1\":{\"265\":1}}],[\"html内容和属性\",{\"1\":{\"265\":1}}],[\"html<\",{\"1\":{\"265\":1}}],[\"html属性中的事件处理\",{\"1\":{\"263\":1}}],[\"html5\",{\"0\":{\"225\":1},\"1\":{\"207\":1,\"217\":1,\"225\":4,\"227\":1,\"228\":1,\"229\":1,\"236\":1,\"237\":1,\"238\":1,\"242\":1,\"245\":1,\"390\":1}}],[\"html>\",{\"1\":{\"70\":2,\"87\":2,\"129\":1,\"207\":3,\"367\":2,\"514\":2,\"581\":2}}],[\"html=\",{\"1\":{\"70\":1}}],[\"html\",{\"0\":{\"205\":1},\"1\":{\"60\":1,\"61\":1,\"68\":3,\"70\":4,\"129\":1,\"140\":1,\"145\":1,\"150\":1,\"152\":1,\"206\":1,\"218\":2,\"234\":1,\"235\":1,\"238\":2,\"239\":1,\"240\":1,\"241\":3,\"242\":1,\"243\":2,\"244\":3,\"245\":1,\"246\":1,\"301\":1,\"352\":1,\"355\":1,\"367\":2,\"368\":2,\"456\":2,\"476\":2,\"488\":2,\"581\":1}}],[\"html示例\",{\"1\":{\"14\":1}}],[\"html中没有这种内嵌表达式的能力\",{\"1\":{\"14\":1}}],[\"html是一种更宽松的标记语言\",{\"1\":{\"14\":1}}],[\"http模块\",{\"1\":{\"509\":1}}],[\"http请求响应等环节\",{\"1\":{\"360\":1}}],[\"http请求方法是通过http协议中的请求行来指定的\",{\"1\":{\"353\":1}}],[\"http请求方法\",{\"0\":{\"353\":1}}],[\"http或者https\",{\"1\":{\"360\":1}}],[\"http缓存是通过设置合适的http头信息来缓存页面或资源\",{\"1\":{\"601\":1}}],[\"http缓存是通过使用缓存头部信息来控制的\",{\"1\":{\"356\":1}}],[\"http缓存是一种机制\",{\"1\":{\"356\":1}}],[\"http缓存可以有效地降低服务器负载并改善用户体验\",{\"1\":{\"356\":1}}],[\"http缓存\",{\"0\":{\"356\":1},\"1\":{\"601\":1}}],[\"http头部信息\",{\"0\":{\"355\":1},\"1\":{\"355\":1}}],[\"http状态码是在http响应中表示请求处理结果的简短数字代码\",{\"1\":{\"354\":1}}],[\"http状态码\",{\"0\":{\"354\":1}}],[\"http本身是明文传输的\",{\"1\":{\"352\":1}}],[\"http支持缓存机制\",{\"1\":{\"352\":1}}],[\"http的请求和响应中都会包含头部信息\",{\"1\":{\"352\":1}}],[\"http响应中的状态码表示请求的处理结果\",{\"1\":{\"352\":1}}],[\"http定义了多种请求方法\",{\"1\":{\"352\":1,\"353\":1}}],[\"http使用请求\",{\"1\":{\"352\":1}}],[\"http基本概念\",{\"0\":{\"352\":1}}],[\"http是一种无状态的协议\",{\"1\":{\"352\":1}}],[\"http是一个无连接的协议\",{\"1\":{\"351\":1}}],[\"http是web开发中不可或缺的协议\",{\"1\":{\"351\":1}}],[\"http在web开发中扮演着重要的角色\",{\"1\":{\"351\":1}}],[\"http还包括头部信息\",{\"1\":{\"351\":1}}],[\"https性能\",{\"1\":{\"359\":1}}],[\"https是建立在ssl\",{\"1\":{\"359\":1}}],[\"https的性能已经得到了改善\",{\"1\":{\"359\":1}}],[\"https的建立和维护安全通道的过程需要更多的计算开销和资源消耗\",{\"1\":{\"359\":1}}],[\"https的使用可以提供以下安全性和好处\",{\"1\":{\"359\":1}}],[\"https的工作原理如下\",{\"1\":{\"359\":1}}],[\"https使用ssl\",{\"1\":{\"351\":1}}],[\"httpstatus\",{\"1\":{\"314\":5}}],[\"https\",{\"0\":{\"359\":1},\"1\":{\"41\":1,\"65\":1,\"70\":1,\"87\":1,\"132\":1,\"160\":5,\"196\":1,\"219\":1,\"224\":1,\"271\":3,\"284\":1,\"336\":2,\"348\":1,\"359\":1,\"364\":1,\"507\":1,\"510\":1}}],[\"http\",{\"0\":{\"350\":1},\"1\":{\"5\":1,\"88\":1,\"100\":1,\"231\":1,\"351\":1,\"352\":1,\"355\":1,\"358\":1,\"359\":1,\"364\":2,\"365\":2,\"367\":1,\"368\":1,\"461\":2,\"506\":2}}],[\"heap\",{\"1\":{\"273\":2,\"274\":1}}],[\"head请求通常用于获取资源的各种元信息\",{\"1\":{\"353\":1}}],[\"head\",{\"1\":{\"129\":1,\"352\":1,\"353\":1}}],[\"head>\",{\"1\":{\"70\":1,\"87\":1,\"142\":2,\"207\":1,\"367\":1,\"581\":1}}],[\"headercomponent\",{\"1\":{\"417\":2}}],[\"header选择器\",{\"1\":{\"143\":1}}],[\"header>\",{\"1\":{\"3\":1,\"70\":1}}],[\"header\",{\"1\":{\"3\":1,\"143\":1,\"144\":1,\"355\":1,\"417\":3,\"580\":1}}],[\"hell\",{\"1\":{\"192\":1,\"264\":1}}],[\"hello\",{\"1\":{\"16\":1,\"35\":1,\"37\":1,\"67\":1,\"70\":5,\"74\":1,\"77\":1,\"87\":1,\"93\":2,\"100\":1,\"102\":2,\"129\":1,\"167\":12,\"170\":2,\"171\":3,\"172\":3,\"173\":1,\"183\":4,\"185\":1,\"186\":4,\"187\":8,\"188\":1,\"189\":2,\"191\":2,\"192\":2,\"204\":3,\"251\":3,\"253\":1,\"256\":16,\"258\":9,\"259\":2,\"262\":6,\"265\":1,\"267\":8,\"268\":2,\"278\":4,\"299\":1,\"310\":1,\"311\":2,\"313\":4,\"316\":1,\"318\":1,\"319\":3,\"320\":3,\"321\":1,\"324\":2,\"329\":2,\"364\":2,\"365\":1,\"508\":3,\"509\":1,\"512\":1,\"514\":1,\"515\":1,\"517\":1,\"530\":2,\"539\":3,\"543\":1,\"544\":2,\"545\":1,\"546\":2,\"547\":3,\"548\":2,\"569\":3,\"590\":2,\"596\":1,\"599\":2}}],[\"height=\",{\"1\":{\"228\":1}}],[\"heightmeasurement\",{\"1\":{\"41\":1}}],[\"height\",{\"1\":{\"41\":4,\"144\":6,\"145\":6,\"146\":1,\"148\":1,\"150\":1,\"151\":4,\"152\":3,\"157\":1,\"183\":4,\"259\":2,\"266\":2,\"290\":1,\"312\":6,\"348\":1}}],[\"heredoc\",{\"0\":{\"527\":1},\"1\":{\"527\":1,\"528\":1}}],[\"here\",{\"1\":{\"3\":1}}],[\"axios是一个流行的基于promise的http客户端\",{\"1\":{\"343\":1}}],[\"axios\",{\"1\":{\"343\":1,\"405\":3,\"432\":2,\"433\":1}}],[\"aftereach\",{\"1\":{\"421\":2}}],[\"after\",{\"1\":{\"288\":1,\"296\":2}}],[\"avatar\",{\"1\":{\"282\":1}}],[\"avg\",{\"1\":{\"135\":1}}],[\"aeiou\",{\"1\":{\"279\":1}}],[\"ajax请求可能会引发一些安全问题\",{\"1\":{\"349\":1}}],[\"ajax请求通常不能跨域\",{\"1\":{\"340\":1,\"349\":1}}],[\"ajax的优点包括提升用户体验\",{\"1\":{\"342\":1}}],[\"ajax的进一步使用\",{\"0\":{\"292\":1}}],[\"ajax可以实现动态的页面更新\",{\"1\":{\"342\":1}}],[\"ajax可以用于许多应用场景\",{\"1\":{\"340\":1}}],[\"ajax通过局部刷新而不是整个页面的重新加载\",{\"1\":{\"342\":1}}],[\"ajax通过异步发送请求和接收响应的方式\",{\"1\":{\"342\":1}}],[\"ajax通过在后台与服务器进行数据交换\",{\"1\":{\"341\":1}}],[\"ajax具有许多优点\",{\"1\":{\"342\":1}}],[\"ajax是一种强大的web开发技术\",{\"1\":{\"340\":1}}],[\"ajax\",{\"0\":{\"234\":1,\"289\":1,\"339\":1},\"1\":{\"234\":2,\"241\":1,\"270\":1,\"292\":2,\"340\":1,\"343\":1}}],[\"acl通常包含用户\",{\"1\":{\"370\":1}}],[\"acl\",{\"1\":{\"370\":1}}],[\"ack包后\",{\"1\":{\"361\":1}}],[\"ack包\",{\"1\":{\"361\":1}}],[\"accelerating\",{\"1\":{\"583\":2}}],[\"accelerate\",{\"1\":{\"583\":2}}],[\"accept\",{\"1\":{\"355\":2}}],[\"access\",{\"1\":{\"312\":1,\"370\":1,\"371\":1}}],[\"accessibility\",{\"0\":{\"246\":1}}],[\"accesskey\",{\"1\":{\"232\":1}}],[\"accesskey=\",{\"1\":{\"232\":3}}],[\"acc\",{\"1\":{\"172\":3,\"313\":2}}],[\"ac\",{\"1\":{\"168\":2}}],[\"actionname\",{\"1\":{\"441\":1}}],[\"action的handler函数可以接受一个包含commit\",{\"1\":{\"436\":1}}],[\"action的创建由用户代码负责\",{\"1\":{\"401\":1}}],[\"action用于处理异步操作\",{\"1\":{\"436\":1}}],[\"action通过commit来触发对应的mutation\",{\"1\":{\"433\":1}}],[\"action负责处理异步逻辑\",{\"1\":{\"433\":1}}],[\"action可以执行异步操作\",{\"1\":{\"428\":1}}],[\"action执行异步操作\",{\"1\":{\"428\":1}}],[\"action类型常量\",{\"1\":{\"407\":1}}],[\"action和中间件编写单元测试\",{\"1\":{\"407\":1}}],[\"action来更新状态\",{\"1\":{\"405\":1}}],[\"action创建函数\",{\"1\":{\"407\":1}}],[\"action创建函数时\",{\"1\":{\"405\":1}}],[\"action创建函数来发起异步操作\",{\"1\":{\"405\":1}}],[\"action被发起和reducer处理之间的拦截层\",{\"1\":{\"405\":1}}],[\"action时\",{\"1\":{\"403\":2}}],[\"action是vuex中用于处理异步逻辑和提交mutation的方法\",{\"1\":{\"444\":1}}],[\"action是通过提交一个mutation来改变state的值\",{\"1\":{\"436\":1}}],[\"action是描述状态变化的普通javascript对象\",{\"1\":{\"401\":1}}],[\"action是一个简单的javascript对象\",{\"1\":{\"401\":1}}],[\"action代表着对状态进行修改的意图\",{\"1\":{\"401\":1}}],[\"action对象包含两个必要的属性\",{\"1\":{\"401\":1}}],[\"actions和mutations之间的通信是通过commit来完成的\",{\"1\":{\"433\":1}}],[\"actions和getters来管理应用程序的状态和逻辑\",{\"1\":{\"427\":1}}],[\"actions和getters\",{\"1\":{\"427\":1}}],[\"actions和reducers\",{\"1\":{\"403\":1}}],[\"actions用于处理异步操作\",{\"1\":{\"426\":1}}],[\"actions的异步操作\",{\"1\":{\"426\":1}}],[\"actions是通过调用dispatch方法派发到redux的store中\",{\"1\":{\"403\":1}}],[\"actions是描述状态变化的普通javascript对象\",{\"1\":{\"403\":1}}],[\"actions是描述状态树更新操作的纯javascript对象\",{\"1\":{\"400\":1}}],[\"actionscript\",{\"1\":{\"164\":1}}],[\"actions\",{\"1\":{\"93\":1,\"400\":1,\"403\":1,\"405\":2,\"425\":1,\"427\":1,\"432\":2,\"433\":2,\"440\":3,\"443\":1,\"444\":2}}],[\"action\",{\"1\":{\"41\":2,\"387\":2,\"393\":1,\"401\":9,\"402\":3,\"403\":6,\"405\":5,\"406\":2,\"407\":5,\"436\":1,\"441\":1,\"444\":2}}],[\"action=\",{\"1\":{\"30\":3,\"580\":1,\"581\":1}}],[\"active>\",{\"1\":{\"122\":4}}],[\"active是用来描述过渡期间的样式\",{\"1\":{\"98\":1}}],[\"active和\",{\"1\":{\"98\":1}}],[\"activecolor\",{\"1\":{\"85\":2}}],[\"activeclassname=\",{\"1\":{\"380\":2,\"393\":1}}],[\"activeclass\",{\"1\":{\"82\":8}}],[\"active\",{\"1\":{\"14\":2,\"82\":18,\"98\":4,\"125\":4,\"265\":2,\"380\":2,\"393\":1,\"394\":1,\"407\":1}}],[\"awesome\",{\"1\":{\"161\":1}}],[\"await使得异步代码的编写和阅读更加直观和可维护\",{\"1\":{\"511\":1}}],[\"await是es2017引入的一种编写异步代码的简洁方式\",{\"1\":{\"511\":1}}],[\"await来实现\",{\"1\":{\"511\":1}}],[\"await来处理异步操作的结果\",{\"1\":{\"432\":1}}],[\"await等方式来处理\",{\"1\":{\"264\":1}}],[\"await等方式来处理通信或数据操作的过程\",{\"1\":{\"33\":1}}],[\"await\",{\"1\":{\"41\":2,\"95\":2,\"195\":10,\"196\":15,\"197\":2,\"198\":8,\"272\":4,\"322\":4,\"432\":1,\"444\":1,\"511\":3}}],[\"audio>\",{\"1\":{\"222\":1}}],[\"audio\",{\"1\":{\"222\":1}}],[\"auctor\",{\"1\":{\"154\":2}}],[\"auth\",{\"1\":{\"439\":2}}],[\"authentication\",{\"1\":{\"355\":1,\"370\":1}}],[\"authorization\",{\"1\":{\"355\":1,\"370\":1}}],[\"author\",{\"1\":{\"70\":1,\"208\":1}}],[\"autoloader\",{\"1\":{\"583\":1,\"584\":1}}],[\"automatic\",{\"1\":{\"497\":1}}],[\"auto\",{\"1\":{\"144\":1,\"148\":1,\"156\":1,\"161\":6,\"348\":1}}],[\"ambient\",{\"1\":{\"325\":2}}],[\"amp\",{\"1\":{\"213\":1}}],[\"am\",{\"1\":{\"183\":8}}],[\"amet\",{\"1\":{\"154\":4}}],[\"amd\",{\"1\":{\"56\":1,\"327\":1,\"331\":2}}],[\"adapter\",{\"1\":{\"592\":1}}],[\"admin\",{\"1\":{\"167\":2}}],[\"adipiscing\",{\"1\":{\"154\":1}}],[\"adjacent\",{\"1\":{\"143\":1}}],[\"addslashes\",{\"1\":{\"549\":1}}],[\"add命令标记已解决的冲突\",{\"1\":{\"335\":1}}],[\"add命令将文件添加到暂存区\",{\"1\":{\"334\":1}}],[\"addfunctiontype\",{\"1\":{\"321\":1}}],[\"addfunc\",{\"1\":{\"318\":2}}],[\"addclass\",{\"1\":{\"288\":1}}],[\"addnumbers\",{\"1\":{\"258\":2,\"566\":1,\"567\":1}}],[\"addition\",{\"1\":{\"202\":3}}],[\"address\",{\"1\":{\"173\":3,\"319\":2,\"321\":3}}],[\"add\",{\"1\":{\"134\":1,\"172\":2,\"176\":5,\"178\":2,\"183\":2,\"200\":3,\"201\":3,\"202\":11,\"258\":4,\"265\":1,\"313\":6,\"315\":1,\"316\":2,\"318\":1,\"321\":2,\"336\":2,\"375\":1,\"384\":1,\"401\":2,\"407\":4,\"427\":1}}],[\"addeventlistener\",{\"1\":{\"70\":1,\"263\":6,\"265\":1,\"272\":1,\"322\":1,\"347\":1,\"493\":1,\"494\":1}}],[\"addtodo\",{\"1\":{\"3\":4,\"401\":1,\"407\":5,\"429\":1,\"431\":4}}],[\"attr\",{\"1\":{\"288\":2,\"300\":1}}],[\"attributes\",{\"1\":{\"191\":1}}],[\"attribute\",{\"1\":{\"143\":1}}],[\"attachment\",{\"1\":{\"158\":1}}],[\"at\",{\"1\":{\"154\":4,\"364\":1}}],[\"atomicity\",{\"1\":{\"137\":1}}],[\"abstract\",{\"1\":{\"591\":5}}],[\"absolute\",{\"1\":{\"147\":4}}],[\"aboutcomponent\",{\"1\":{\"423\":1}}],[\"about<\",{\"1\":{\"384\":1}}],[\"about\",{\"1\":{\"378\":2,\"380\":1,\"384\":10,\"388\":4,\"392\":3,\"394\":3,\"396\":5,\"397\":3,\"413\":6,\"415\":5,\"417\":4,\"418\":2,\"421\":1,\"422\":1,\"423\":1}}],[\"ab\",{\"1\":{\"168\":2}}],[\"abcdefg将应用提交号为abcdefg的提交到当前分支\",{\"1\":{\"338\":1}}],[\"abcabcabc\",{\"1\":{\"168\":1}}],[\"abc\",{\"1\":{\"135\":1,\"167\":1,\"168\":5,\"169\":1,\"279\":1,\"528\":1}}],[\"ab开发\",{\"1\":{\"131\":1}}],[\"a<\",{\"1\":{\"94\":1}}],[\"age或expires字段来控制cookie的过期时间\",{\"1\":{\"357\":1}}],[\"age=3600\",{\"1\":{\"356\":1}}],[\"agent\",{\"1\":{\"352\":1,\"355\":1,\"360\":1}}],[\"age和gender\",{\"1\":{\"259\":1}}],[\"age和pi分别是变量的名称\",{\"1\":{\"249\":1}}],[\"age和email\",{\"1\":{\"102\":1}}],[\"age\",{\"1\":{\"92\":2,\"102\":2,\"134\":5,\"171\":9,\"172\":3,\"183\":11,\"188\":6,\"189\":5,\"191\":5,\"231\":1,\"249\":3,\"251\":2,\"254\":2,\"259\":4,\"273\":1,\"310\":3,\"312\":18,\"315\":3,\"316\":4,\"319\":6,\"321\":7,\"329\":3,\"356\":1,\"369\":1,\"574\":2,\"575\":1,\"576\":3,\"577\":2}}],[\"analyzer\",{\"1\":{\"492\":1,\"504\":1}}],[\"analyzer插件\",{\"1\":{\"492\":1}}],[\"analysis\",{\"0\":{\"492\":1}}],[\"any\",{\"1\":{\"310\":5,\"316\":1,\"322\":1,\"330\":2}}],[\"anonymous\",{\"1\":{\"258\":1,\"313\":1,\"590\":1,\"604\":1}}],[\"anothervariable\",{\"1\":{\"310\":1}}],[\"another\",{\"1\":{\"70\":1,\"92\":1,\"135\":1}}],[\"an\",{\"1\":{\"196\":1,\"313\":1,\"314\":1,\"537\":1}}],[\"animate\",{\"1\":{\"290\":2}}],[\"animations\",{\"0\":{\"152\":1},\"1\":{\"152\":1}}],[\"animation\",{\"1\":{\"144\":12,\"152\":5,\"395\":1}}],[\"animation等\",{\"1\":{\"98\":1}}],[\"animal\",{\"1\":{\"171\":2,\"183\":4,\"312\":16,\"317\":14,\"591\":5}}],[\"and\",{\"0\":{\"150\":1},\"1\":{\"136\":1,\"144\":1,\"148\":1,\"157\":2,\"171\":2,\"172\":1,\"183\":6,\"276\":1,\"312\":4,\"313\":1,\"340\":1,\"497\":1}}],[\"angular和vue等\",{\"1\":{\"400\":1}}],[\"angular和vue都是强大的前端框架\",{\"1\":{\"10\":1}}],[\"angular则采用模块化和依赖注入的方式\",{\"1\":{\"10\":1}}],[\"angular包含更多的概念和复杂度\",{\"1\":{\"10\":1}}],[\"angular\",{\"1\":{\"10\":1}}],[\"a>\",{\"1\":{\"70\":3,\"224\":1,\"232\":3}}],[\"arsort\",{\"1\":{\"578\":2}}],[\"aria\",{\"1\":{\"246\":1}}],[\"arial\",{\"1\":{\"144\":1}}],[\"arg\",{\"1\":{\"320\":2}}],[\"argumentslist\",{\"1\":{\"188\":4,\"189\":10,\"191\":2}}],[\"args\",{\"1\":{\"52\":6,\"204\":2,\"260\":4}}],[\"arr=arr\",{\"1\":{\"257\":1}}],[\"arr\",{\"1\":{\"174\":2,\"253\":4,\"257\":32,\"273\":3,\"319\":2}}],[\"arr2\",{\"1\":{\"173\":2,\"257\":3}}],[\"arr1\",{\"1\":{\"173\":2,\"257\":3}}],[\"arrow\",{\"1\":{\"172\":1,\"258\":1,\"313\":1,\"571\":1}}],[\"array<number>\",{\"1\":{\"310\":1}}],[\"array<elementtype>\",{\"1\":{\"310\":1}}],[\"arraybuffer\",{\"0\":{\"180\":1},\"1\":{\"180\":2,\"181\":2,\"182\":2}}],[\"array2\",{\"1\":{\"170\":6,\"257\":1}}],[\"array1\",{\"1\":{\"170\":6,\"257\":1}}],[\"array\",{\"0\":{\"170\":1,\"257\":1,\"534\":1},\"1\":{\"170\":35,\"251\":1,\"253\":1,\"281\":3,\"310\":1,\"325\":1,\"563\":1,\"570\":3,\"571\":2,\"573\":1,\"574\":1,\"578\":26,\"603\":2}}],[\"around\",{\"1\":{\"155\":2}}],[\"area\",{\"1\":{\"183\":4,\"278\":2,\"319\":1}}],[\"area属性来控制网格项在网格中的位置\",{\"1\":{\"156\":1}}],[\"are\",{\"1\":{\"3\":1,\"172\":2,\"329\":2}}],[\"api响应等\",{\"1\":{\"601\":1}}],[\"api开发是构建应用程序和服务的关键环节之一\",{\"1\":{\"371\":1}}],[\"api使用promise对象来处理异步操作\",{\"1\":{\"343\":1}}],[\"api是一种现代的替代xmlhttprequest的技术\",{\"1\":{\"343\":1}}],[\"api是react提供的一种机制\",{\"1\":{\"37\":1}}],[\"api和axios\",{\"1\":{\"340\":1}}],[\"api或axios\",{\"1\":{\"266\":1}}],[\"api允许开发者根据逻辑相关性组织代码\",{\"1\":{\"99\":1}}],[\"api相比\",{\"1\":{\"99\":1}}],[\"api\",{\"0\":{\"37\":1,\"282\":1,\"371\":1},\"1\":{\"22\":1,\"23\":1,\"41\":1,\"54\":1,\"99\":2,\"177\":1,\"196\":1,\"229\":1,\"241\":1,\"271\":3,\"282\":3,\"343\":1,\"363\":3,\"371\":1,\"374\":1,\"376\":1,\"390\":1,\"405\":1,\"432\":2,\"433\":1,\"459\":1,\"461\":2,\"506\":2}}],[\"append\",{\"1\":{\"282\":6,\"288\":1,\"296\":2}}],[\"appendchild\",{\"1\":{\"265\":2,\"345\":1,\"347\":1}}],[\"apps\",{\"0\":{\"243\":1}}],[\"apple\",{\"1\":{\"251\":1,\"291\":1,\"537\":5,\"578\":26}}],[\"application\",{\"1\":{\"240\":1,\"343\":1,\"355\":2,\"371\":1}}],[\"applymiddleware\",{\"1\":{\"405\":2}}],[\"applymixins\",{\"1\":{\"330\":4}}],[\"apply或bind方法可以显式地指定函数执行时的上下文对象\",{\"1\":{\"262\":1}}],[\"apply或bind方法调用\",{\"1\":{\"262\":1}}],[\"apply\",{\"1\":{\"52\":1,\"188\":5,\"189\":8,\"191\":2,\"204\":1,\"262\":1}}],[\"app=createapp\",{\"1\":{\"101\":1}}],[\"app4\",{\"1\":{\"70\":1}}],[\"app3\",{\"1\":{\"70\":1}}],[\"app2\",{\"1\":{\"70\":7}}],[\"app<\",{\"1\":{\"5\":1,\"367\":1}}],[\"app\",{\"0\":{\"4\":1},\"1\":{\"4\":1,\"5\":7,\"19\":1,\"51\":4,\"66\":1,\"67\":3,\"69\":1,\"70\":22,\"87\":3,\"91\":2,\"93\":2,\"101\":5,\"116\":2,\"202\":2,\"243\":1,\"364\":7,\"365\":11,\"366\":7,\"367\":5,\"368\":3,\"376\":1,\"384\":1,\"386\":2,\"388\":2,\"389\":2,\"391\":1,\"392\":1,\"394\":4,\"396\":1,\"397\":2,\"403\":5,\"406\":5,\"407\":3,\"412\":4,\"413\":2,\"415\":4,\"420\":1,\"427\":4,\"440\":4,\"508\":1,\"509\":3,\"512\":3}}],[\"a\",{\"1\":{\"15\":1,\"41\":3,\"70\":1,\"98\":1,\"119\":2,\"129\":1,\"143\":2,\"166\":8,\"167\":3,\"168\":6,\"170\":3,\"171\":10,\"172\":12,\"174\":3,\"183\":4,\"184\":2,\"189\":1,\"200\":4,\"201\":4,\"202\":8,\"232\":1,\"256\":1,\"257\":2,\"273\":2,\"279\":2,\"281\":4,\"312\":4,\"313\":6,\"319\":3,\"321\":3,\"372\":2,\"444\":5,\"517\":1,\"549\":2,\"556\":1}}],[\"alert\",{\"1\":{\"229\":2,\"263\":3,\"294\":1,\"346\":1}}],[\"alt\",{\"1\":{\"211\":1,\"221\":1,\"246\":2}}],[\"alternative\",{\"1\":{\"601\":1}}],[\"alter\",{\"1\":{\"134\":1}}],[\"alt=\",{\"1\":{\"15\":3,\"221\":1}}],[\"alias\",{\"1\":{\"419\":3,\"454\":1,\"460\":3}}],[\"aliases\",{\"1\":{\"319\":1}}],[\"aliquet\",{\"1\":{\"154\":1}}],[\"aliquam\",{\"1\":{\"154\":3}}],[\"align\",{\"1\":{\"144\":2,\"155\":2}}],[\"alive\",{\"1\":{\"126\":7,\"358\":4}}],[\"alive>\",{\"0\":{\"126\":1},\"1\":{\"126\":2}}],[\"alice\",{\"1\":{\"19\":1,\"20\":1,\"93\":2,\"167\":2,\"171\":9,\"172\":4,\"173\":1,\"183\":6,\"267\":9,\"310\":4,\"312\":2,\"313\":2,\"315\":3,\"316\":3,\"319\":1}}],[\"allcompleted\",{\"1\":{\"3\":4}}],[\"all\",{\"1\":{\"3\":5,\"157\":1,\"192\":1,\"193\":3,\"196\":3,\"198\":4,\"407\":2,\"480\":1,\"586\":1}}],[\"asort\",{\"1\":{\"578\":2}}],[\"assoc\",{\"1\":{\"570\":1,\"600\":1}}],[\"assets\",{\"1\":{\"368\":1}}],[\"assignment\",{\"1\":{\"172\":1}}],[\"assign\",{\"1\":{\"171\":3,\"204\":1,\"281\":2}}],[\"asyncincrement\",{\"1\":{\"444\":4}}],[\"asynchronous\",{\"1\":{\"340\":1}}],[\"asynctask\",{\"1\":{\"198\":3}}],[\"asynctasks\",{\"1\":{\"198\":6}}],[\"asyncgenerator\",{\"1\":{\"197\":4,\"198\":3}}],[\"asynccomponent\",{\"1\":{\"95\":9}}],[\"async\",{\"0\":{\"194\":1},\"1\":{\"33\":1,\"41\":1,\"95\":2,\"194\":2,\"195\":9,\"196\":15,\"197\":3,\"198\":3,\"264\":1,\"270\":8,\"272\":5,\"322\":5,\"432\":1,\"444\":2,\"467\":1,\"511\":4}}],[\"as\",{\"1\":{\"3\":1,\"202\":4,\"326\":1,\"376\":1,\"388\":1,\"389\":1,\"392\":1,\"394\":1,\"396\":1,\"397\":1,\"563\":1,\"577\":2,\"582\":2}}],[\"iife是一种在声明时立即调用函数的技术\",{\"1\":{\"258\":1}}],[\"iife\",{\"1\":{\"258\":1,\"261\":1,\"313\":1}}],[\"i++\",{\"1\":{\"255\":2,\"281\":1,\"345\":1,\"347\":1}}],[\"i18n\",{\"0\":{\"235\":1}}],[\"i\",{\"1\":{\"168\":1,\"170\":10,\"171\":2,\"183\":7,\"255\":3,\"270\":1,\"281\":4,\"312\":4,\"313\":1,\"345\":3,\"347\":3,\"506\":1,\"598\":1}}],[\"io\",{\"1\":{\"160\":1}}],[\"ip\",{\"1\":{\"603\":1}}],[\"ipsum\",{\"1\":{\"154\":2}}],[\"ip地址等\",{\"1\":{\"136\":1}}],[\"ie盒模型可能提供更方便的尺寸计算\",{\"1\":{\"146\":1}}],[\"ie盒模型是在早期的internet\",{\"1\":{\"146\":1}}],[\"ie盒模型\",{\"1\":{\"146\":1}}],[\"it\",{\"1\":{\"549\":2}}],[\"iterable\",{\"1\":{\"184\":2,\"185\":2,\"323\":2}}],[\"iterator方法返回一个迭代器对象\",{\"1\":{\"184\":1}}],[\"iterator方法获取迭代器对象\",{\"1\":{\"184\":1}}],[\"iterator用于定义自定义对象的迭代器\",{\"1\":{\"174\":1}}],[\"iterator用于定义对象的默认迭代器\",{\"1\":{\"174\":1}}],[\"iterator\",{\"0\":{\"184\":1},\"1\":{\"174\":3,\"184\":15,\"185\":1,\"323\":7,\"582\":3,\"592\":1}}],[\"iteration\",{\"1\":{\"144\":2}}],[\"item2\",{\"1\":{\"257\":1}}],[\"item1\",{\"1\":{\"257\":1}}],[\"itemprop=\",{\"1\":{\"231\":3}}],[\"itemtype=\",{\"1\":{\"231\":1}}],[\"item是网格项\",{\"1\":{\"156\":1}}],[\"item是flex容器的子项\",{\"1\":{\"155\":1}}],[\"itemscope\",{\"1\":{\"231\":1}}],[\"items\",{\"1\":{\"155\":1}}],[\"item\",{\"1\":{\"3\":4,\"23\":3,\"147\":2,\"155\":4,\"156\":5,\"198\":3,\"263\":2,\"345\":3}}],[\"italic\",{\"1\":{\"143\":1}}],[\"isvalidid\",{\"1\":{\"421\":1}}],[\"isvisible\",{\"1\":{\"265\":1}}],[\"isbirdorfish\",{\"1\":{\"317\":2}}],[\"isopen\",{\"1\":{\"310\":1}}],[\"isolation\",{\"1\":{\"137\":2}}],[\"isloggedin\",{\"1\":{\"421\":1,\"422\":1,\"429\":4,\"430\":5,\"431\":1}}],[\"islogged\",{\"1\":{\"310\":1}}],[\"isloading\",{\"1\":{\"23\":2}}],[\"isauthenticated\",{\"1\":{\"385\":2}}],[\"isarray\",{\"1\":{\"281\":1}}],[\"isadult\",{\"1\":{\"251\":1}}],[\"isactive\",{\"1\":{\"14\":2,\"82\":10,\"310\":2,\"311\":2}}],[\"isset\",{\"1\":{\"581\":1,\"582\":1}}],[\"isstudent\",{\"1\":{\"249\":1,\"251\":2,\"315\":1,\"316\":2}}],[\"issafeinteger\",{\"1\":{\"169\":5}}],[\"isextensible\",{\"1\":{\"189\":4,\"191\":4}}],[\"isnan\",{\"1\":{\"169\":5}}],[\"isinteger\",{\"1\":{\"169\":5}}],[\"isfinite\",{\"1\":{\"169\":5}}],[\"isref\",{\"1\":{\"102\":4}}],[\"is=\",{\"1\":{\"94\":1,\"126\":1}}],[\"is\",{\"1\":{\"15\":1,\"41\":1,\"94\":3,\"98\":1,\"129\":1,\"171\":2,\"172\":1,\"183\":6,\"204\":2,\"259\":2,\"267\":14,\"310\":1,\"312\":10,\"317\":1,\"365\":1,\"367\":2,\"368\":1,\"509\":1,\"537\":1,\"579\":3,\"583\":8,\"591\":1}}],[\"img\",{\"1\":{\"145\":1,\"300\":4}}],[\"img>\",{\"1\":{\"15\":1}}],[\"immediately\",{\"1\":{\"313\":1}}],[\"immediate\",{\"1\":{\"110\":1}}],[\"imagemin\",{\"1\":{\"469\":1}}],[\"imageminplugin\",{\"1\":{\"469\":2}}],[\"images\",{\"1\":{\"463\":1,\"473\":1}}],[\"image2wbmp函数在php\",{\"1\":{\"604\":1}}],[\"image2wbmp函数\",{\"1\":{\"604\":1}}],[\"image2\",{\"1\":{\"264\":1}}],[\"image1\",{\"1\":{\"264\":1}}],[\"imageurls\",{\"1\":{\"264\":2}}],[\"image和background\",{\"1\":{\"54\":1}}],[\"image\",{\"1\":{\"15\":6,\"144\":7,\"158\":3,\"221\":1,\"264\":10,\"300\":1,\"368\":3}}],[\"improvements\",{\"1\":{\"497\":1}}],[\"improved\",{\"1\":{\"497\":2}}],[\"imperative\",{\"1\":{\"278\":1}}],[\"implicit\",{\"1\":{\"252\":1}}],[\"implements\",{\"1\":{\"312\":2,\"582\":1,\"591\":3}}],[\"implemented\",{\"1\":{\"183\":1}}],[\"implement\",{\"1\":{\"3\":2,\"312\":1}}],[\"import\",{\"1\":{\"3\":2,\"4\":2,\"5\":6,\"13\":1,\"14\":1,\"16\":4,\"35\":3,\"36\":3,\"37\":6,\"38\":3,\"41\":9,\"42\":3,\"50\":1,\"51\":6,\"92\":1,\"93\":6,\"95\":3,\"101\":2,\"102\":7,\"105\":1,\"110\":5,\"116\":1,\"201\":1,\"202\":6,\"278\":2,\"326\":3,\"327\":3,\"328\":4,\"331\":1,\"376\":1,\"380\":1,\"383\":1,\"384\":8,\"386\":2,\"387\":3,\"388\":2,\"389\":1,\"391\":1,\"392\":1,\"393\":5,\"394\":4,\"396\":2,\"397\":4,\"402\":4,\"403\":9,\"405\":7,\"406\":10,\"407\":8,\"412\":2,\"413\":2,\"415\":8,\"418\":2,\"420\":3,\"423\":3,\"427\":7,\"429\":1,\"430\":1,\"431\":1,\"433\":2,\"439\":1,\"440\":5,\"444\":5,\"458\":1,\"462\":2,\"467\":3,\"480\":1,\"493\":2,\"494\":1}}],[\"ide\",{\"1\":{\"508\":1}}],[\"identity\",{\"1\":{\"320\":1,\"370\":1}}],[\"identity<string>\",{\"1\":{\"320\":1}}],[\"identity<t>\",{\"1\":{\"320\":1}}],[\"identifier\",{\"1\":{\"159\":1}}],[\"id路径\",{\"1\":{\"416\":1}}],[\"id中的\",{\"1\":{\"416\":1}}],[\"id会比\",{\"1\":{\"414\":1}}],[\"id是一个参数\",{\"1\":{\"414\":1}}],[\"id与存储在服务器的session数据进行匹配\",{\"1\":{\"357\":1}}],[\"id与用户的状态数据相关联\",{\"1\":{\"357\":1}}],[\"id传递给客户端\",{\"1\":{\"357\":1}}],[\"id来恢复会话\",{\"1\":{\"357\":1}}],[\"id来识别客户端的会话\",{\"1\":{\"357\":1}}],[\"id来检索和管理用户的状态数据\",{\"1\":{\"357\":1}}],[\"id来告知服务器该请求属于哪个会话\",{\"1\":{\"357\":1}}],[\"id的元素\",{\"1\":{\"143\":1}}],[\"id选择器以井号\",{\"1\":{\"143\":1}}],[\"id选择器通过元素的id属性选择元素\",{\"1\":{\"143\":1}}],[\"id选择器\",{\"1\":{\"143\":1}}],[\"id\",{\"1\":{\"3\":2,\"23\":1,\"134\":6,\"143\":1,\"171\":3,\"211\":1,\"216\":1,\"260\":2,\"310\":4,\"312\":2,\"357\":3,\"365\":12,\"379\":2,\"381\":1,\"386\":6,\"391\":6,\"392\":3,\"407\":9,\"414\":1,\"416\":3,\"420\":4,\"421\":5,\"422\":2,\"600\":2}}],[\"id=$id\",{\"1\":{\"600\":2}}],[\"id=123中的id\",{\"1\":{\"416\":1}}],[\"id=123\",{\"1\":{\"365\":1,\"386\":1,\"521\":1}}],[\"id=\",{\"1\":{\"3\":1,\"66\":1,\"69\":1,\"70\":10,\"74\":1,\"77\":1,\"82\":2,\"87\":1,\"91\":1,\"216\":2,\"228\":1,\"345\":1,\"346\":2,\"347\":2,\"348\":1,\"412\":1,\"413\":1,\"420\":1,\"581\":1}}],[\"ini\",{\"1\":{\"586\":3}}],[\"init\",{\"1\":{\"364\":2,\"437\":1,\"475\":1,\"510\":1}}],[\"init命令在一个目录中创建一个新的git仓库\",{\"1\":{\"334\":1}}],[\"initialstate\",{\"1\":{\"402\":2,\"403\":2,\"405\":2,\"406\":2,\"407\":2}}],[\"initializing\",{\"1\":{\"202\":2}}],[\"initialize\",{\"1\":{\"202\":2}}],[\"initialcount\",{\"1\":{\"42\":2}}],[\"in<\",{\"1\":{\"431\":2}}],[\"invoked\",{\"1\":{\"313\":1}}],[\"in循环的行为类似\",{\"1\":{\"191\":1}}],[\"in循环只能获取普通的键\",{\"1\":{\"174\":1}}],[\"in运算符等\",{\"1\":{\"188\":1}}],[\"inheritance\",{\"1\":{\"183\":1,\"583\":1}}],[\"infer\",{\"1\":{\"319\":1}}],[\"infinity\",{\"1\":{\"169\":2}}],[\"infiniteloop\",{\"1\":{\"310\":2}}],[\"infinite\",{\"1\":{\"144\":1}}],[\"info<\",{\"1\":{\"70\":1}}],[\"inline\",{\"1\":{\"142\":1,\"161\":6,\"210\":1}}],[\"innerhtml\",{\"1\":{\"265\":1,\"345\":1,\"347\":1,\"348\":1}}],[\"innervariable\",{\"1\":{\"261\":2}}],[\"innerfunction\",{\"1\":{\"261\":2,\"268\":5}}],[\"inner\",{\"1\":{\"134\":1,\"261\":3}}],[\"introduce\",{\"1\":{\"312\":4}}],[\"int32array\",{\"1\":{\"181\":6}}],[\"integration\",{\"1\":{\"372\":1}}],[\"integer两个常量\",{\"1\":{\"169\":1}}],[\"integer和number\",{\"1\":{\"169\":1}}],[\"integer\",{\"0\":{\"531\":1},\"1\":{\"136\":2,\"169\":2,\"173\":1}}],[\"intersection\",{\"1\":{\"319\":1}}],[\"interfaces\",{\"1\":{\"320\":1}}],[\"interface\",{\"1\":{\"310\":1,\"312\":4,\"317\":2,\"318\":4,\"319\":7,\"320\":2,\"321\":3,\"325\":1,\"329\":6,\"330\":1,\"371\":1,\"464\":1,\"591\":4}}],[\"intervalid\",{\"1\":{\"260\":2}}],[\"interval\",{\"1\":{\"260\":1,\"266\":2}}],[\"internationalization\",{\"0\":{\"235\":1}}],[\"internal\",{\"1\":{\"142\":1,\"366\":1}}],[\"interdum\",{\"1\":{\"154\":1}}],[\"into\",{\"1\":{\"134\":1,\"600\":1}}],[\"into语句\",{\"1\":{\"134\":1}}],[\"int\",{\"1\":{\"134\":2,\"603\":1}}],[\"include语句会在脚本执行时包含指定的文件\",{\"1\":{\"599\":1}}],[\"includes\",{\"1\":{\"167\":2,\"170\":9,\"256\":2}}],[\"include\",{\"1\":{\"126\":1,\"161\":1,\"599\":2}}],[\"increment<\",{\"1\":{\"444\":1}}],[\"incrementaction\",{\"1\":{\"401\":2,\"402\":2}}],[\"increment和decrement\",{\"1\":{\"42\":2}}],[\"increment才会重新创建\",{\"1\":{\"41\":1}}],[\"increment=\",{\"1\":{\"41\":1}}],[\"increment\",{\"1\":{\"41\":10,\"42\":4,\"97\":2,\"102\":3,\"258\":3,\"401\":6,\"402\":2,\"403\":2,\"406\":4,\"429\":2,\"431\":4,\"440\":6,\"441\":4,\"444\":5}}],[\"incrementcount\",{\"1\":{\"20\":2,\"278\":2,\"429\":2}}],[\"in>\",{\"1\":{\"123\":1}}],[\"inject\",{\"1\":{\"117\":2}}],[\"injection\",{\"1\":{\"117\":1}}],[\"insensitive\",{\"1\":{\"519\":2}}],[\"inserted\",{\"1\":{\"369\":1}}],[\"insertone\",{\"1\":{\"369\":2}}],[\"insert\",{\"1\":{\"134\":1,\"369\":1,\"600\":1}}],[\"instance\",{\"1\":{\"204\":8,\"326\":1,\"327\":1}}],[\"instanceof运算符等\",{\"1\":{\"254\":1}}],[\"instanceof\",{\"1\":{\"189\":1,\"191\":1,\"253\":9,\"317\":2}}],[\"install\",{\"1\":{\"2\":2,\"88\":1,\"100\":1,\"364\":1,\"367\":1,\"375\":1,\"384\":1,\"394\":1,\"397\":1,\"403\":1,\"405\":1,\"406\":1,\"407\":1,\"412\":1,\"427\":1,\"439\":1,\"440\":1,\"444\":2,\"449\":1,\"472\":1,\"473\":1,\"474\":1,\"475\":1,\"510\":3,\"512\":1}}],[\"inside\",{\"1\":{\"172\":2,\"189\":3}}],[\"insights等\",{\"1\":{\"58\":1}}],[\"input<\",{\"1\":{\"41\":2}}],[\"inputref\",{\"1\":{\"31\":2,\"41\":3}}],[\"inputvalue\",{\"1\":{\"31\":6,\"294\":1}}],[\"input\",{\"1\":{\"28\":1,\"70\":2,\"144\":1,\"282\":1,\"286\":1,\"294\":3,\"347\":1,\"580\":4,\"603\":3}}],[\"inactive\",{\"1\":{\"14\":1}}],[\"indexable\",{\"1\":{\"319\":1}}],[\"indexof\",{\"1\":{\"256\":2,\"257\":3}}],[\"indexeddb\",{\"1\":{\"236\":1}}],[\"index++\",{\"1\":{\"184\":1,\"185\":1,\"323\":1}}],[\"index\",{\"1\":{\"3\":1,\"5\":8,\"144\":2,\"184\":2,\"185\":2,\"200\":1,\"201\":1,\"202\":4,\"256\":2,\"319\":2,\"323\":2,\"352\":1,\"364\":3,\"367\":3,\"385\":3,\"396\":2,\"403\":1,\"406\":1,\"420\":1,\"450\":1,\"454\":1,\"456\":1,\"462\":1,\"475\":2,\"476\":1,\"485\":2,\"488\":1,\"524\":2}}],[\"in\",{\"1\":{\"3\":1,\"70\":3,\"135\":1,\"144\":1,\"151\":3,\"152\":1,\"154\":2,\"172\":1,\"174\":1,\"183\":3,\"188\":1,\"189\":3,\"191\":1,\"273\":1,\"281\":1,\"317\":1,\"319\":2,\"578\":2}}],[\"if语句用于在指定条件为真时执行一段代码\",{\"1\":{\"555\":1}}],[\"if语句\",{\"0\":{\"555\":1},\"1\":{\"255\":1}}],[\"iframe>\",{\"1\":{\"219\":1}}],[\"if指令绑定的<div>\",{\"1\":{\"98\":1}}],[\"if指令\",{\"1\":{\"98\":1}}],[\"if=\",{\"1\":{\"70\":1,\"98\":1}}],[\"if\",{\"1\":{\"3\":3,\"22\":3,\"23\":1,\"48\":1,\"52\":4,\"70\":6,\"86\":1,\"94\":1,\"165\":2,\"170\":2,\"172\":3,\"184\":1,\"185\":1,\"188\":1,\"189\":1,\"196\":1,\"197\":1,\"198\":1,\"204\":1,\"229\":1,\"255\":6,\"260\":1,\"263\":1,\"269\":1,\"272\":2,\"281\":3,\"282\":2,\"294\":1,\"311\":1,\"313\":1,\"314\":3,\"317\":3,\"319\":2,\"323\":1,\"329\":1,\"345\":1,\"346\":1,\"347\":1,\"348\":1,\"355\":1,\"356\":4,\"365\":1,\"369\":2,\"385\":1,\"387\":1,\"405\":2,\"421\":4,\"509\":1,\"511\":1,\"537\":1,\"540\":2,\"553\":4,\"555\":1,\"556\":1,\"564\":2,\"580\":4,\"581\":2,\"589\":1,\"598\":1,\"600\":5}}],[\"fwrite\",{\"1\":{\"596\":1}}],[\"fgets\",{\"1\":{\"595\":1}}],[\"fclose\",{\"1\":{\"570\":1,\"594\":1,\"595\":1,\"596\":1}}],[\"fs\",{\"1\":{\"509\":3,\"511\":9}}],[\"fs模块\",{\"1\":{\"509\":1}}],[\"fn\",{\"1\":{\"298\":1,\"571\":2}}],[\"fn对象\",{\"1\":{\"298\":1}}],[\"fully\",{\"1\":{\"584\":1}}],[\"fullname\",{\"1\":{\"256\":1,\"262\":2}}],[\"fulfilled\",{\"1\":{\"192\":2}}],[\"func\",{\"1\":{\"52\":2}}],[\"function函数在php\",{\"1\":{\"604\":1}}],[\"function函数\",{\"1\":{\"604\":1}}],[\"functionvariable\",{\"1\":{\"311\":2}}],[\"functional\",{\"1\":{\"278\":1}}],[\"functionname\",{\"1\":{\"258\":2}}],[\"functions\",{\"1\":{\"110\":1,\"172\":1,\"258\":4,\"313\":1,\"320\":1,\"322\":1,\"569\":1,\"571\":1,\"590\":1}}],[\"functioncomponent被渲染为一个element\",{\"1\":{\"21\":1}}],[\"functioncomponent\",{\"1\":{\"18\":1,\"19\":1,\"21\":1}}],[\"function\",{\"0\":{\"172\":1,\"258\":1},\"1\":{\"5\":2,\"11\":1,\"18\":1,\"19\":2,\"20\":2,\"21\":1,\"23\":2,\"25\":6,\"26\":1,\"27\":1,\"30\":1,\"35\":2,\"36\":2,\"37\":2,\"38\":1,\"41\":12,\"42\":2,\"50\":1,\"51\":2,\"52\":5,\"57\":3,\"70\":2,\"74\":1,\"77\":1,\"86\":1,\"91\":1,\"144\":2,\"151\":4,\"152\":1,\"165\":1,\"166\":1,\"170\":2,\"172\":14,\"186\":3,\"187\":8,\"188\":5,\"189\":30,\"191\":1,\"192\":2,\"196\":5,\"197\":4,\"198\":7,\"200\":2,\"201\":2,\"202\":4,\"204\":8,\"229\":2,\"249\":1,\"251\":2,\"253\":2,\"257\":1,\"258\":15,\"259\":1,\"260\":2,\"261\":3,\"262\":7,\"263\":6,\"264\":4,\"265\":1,\"266\":2,\"267\":6,\"268\":2,\"269\":1,\"271\":1,\"272\":9,\"273\":1,\"278\":7,\"281\":1,\"282\":1,\"285\":1,\"287\":2,\"289\":2,\"291\":1,\"292\":3,\"294\":1,\"297\":1,\"298\":1,\"300\":1,\"301\":2,\"302\":1,\"306\":1,\"310\":4,\"311\":3,\"313\":20,\"314\":1,\"315\":1,\"316\":1,\"317\":4,\"319\":1,\"320\":3,\"321\":1,\"322\":5,\"323\":3,\"324\":14,\"326\":2,\"327\":2,\"329\":8,\"330\":1,\"345\":3,\"346\":2,\"347\":3,\"348\":2,\"376\":1,\"380\":1,\"383\":2,\"386\":4,\"387\":2,\"389\":4,\"391\":2,\"392\":1,\"393\":7,\"394\":3,\"396\":2,\"401\":3,\"402\":1,\"403\":1,\"405\":1,\"406\":5,\"407\":10,\"452\":1,\"462\":2,\"511\":1,\"520\":1,\"524\":3,\"525\":1,\"526\":1,\"535\":2,\"539\":4,\"566\":1,\"568\":1,\"569\":1,\"571\":1,\"579\":3,\"580\":1,\"582\":7,\"583\":4,\"587\":1,\"590\":3,\"591\":8}}],[\"feof\",{\"1\":{\"595\":1}}],[\"federation\",{\"1\":{\"497\":1}}],[\"feature\",{\"1\":{\"335\":8,\"336\":2}}],[\"felis\",{\"1\":{\"154\":1}}],[\"fetch命令下载远程仓库中的更新\",{\"1\":{\"335\":1}}],[\"fetchmultipledata\",{\"1\":{\"196\":2}}],[\"fetched\",{\"1\":{\"196\":1,\"432\":2}}],[\"fetches\",{\"1\":{\"183\":2}}],[\"fetching\",{\"1\":{\"196\":1}}],[\"fetchuser\",{\"1\":{\"187\":2,\"405\":4}}],[\"fetchdataandprocess\",{\"1\":{\"322\":2}}],[\"fetchdata函数模拟一个异步操作\",{\"1\":{\"258\":1}}],[\"fetchdatafromfile\",{\"1\":{\"198\":1}}],[\"fetchdatafromdatabase\",{\"1\":{\"198\":1}}],[\"fetchdatafromapi\",{\"1\":{\"198\":1}}],[\"fetchdatafromapi3\",{\"1\":{\"196\":1,\"198\":2}}],[\"fetchdatafromapi2\",{\"1\":{\"196\":1,\"198\":2}}],[\"fetchdatafromapi1\",{\"1\":{\"196\":1,\"198\":2}}],[\"fetchdata3\",{\"1\":{\"193\":3}}],[\"fetchdata2\",{\"1\":{\"193\":3}}],[\"fetchdata1\",{\"1\":{\"193\":3}}],[\"fetchdata\",{\"1\":{\"41\":2,\"50\":2,\"192\":2,\"196\":7,\"198\":1,\"258\":2,\"271\":2,\"272\":9,\"322\":8,\"432\":5,\"433\":4}}],[\"fetch\",{\"1\":{\"22\":1,\"23\":1,\"41\":1,\"183\":3,\"196\":1,\"270\":1,\"282\":2,\"340\":1,\"343\":3,\"405\":6,\"570\":1}}],[\"flip\",{\"1\":{\"578\":2}}],[\"flags\",{\"1\":{\"319\":3}}],[\"flatmap\",{\"1\":{\"170\":3}}],[\"flat\",{\"1\":{\"170\":5}}],[\"fly\",{\"1\":{\"317\":3}}],[\"fluid\",{\"1\":{\"148\":2}}],[\"flow属性来定义网格的自动放置方式等等\",{\"1\":{\"156\":1}}],[\"flow\",{\"1\":{\"147\":1}}],[\"float\",{\"0\":{\"532\":1},\"1\":{\"144\":1,\"147\":3,\"603\":1,\"604\":1}}],[\"floating\",{\"1\":{\"136\":1}}],[\"flexible\",{\"1\":{\"155\":1}}],[\"flex布局适用于响应式设计和快速构建简单而灵活的布局结构\",{\"1\":{\"155\":1}}],[\"flex布局还有其他一些常用的属性\",{\"1\":{\"155\":1}}],[\"flex布局\",{\"1\":{\"155\":1}}],[\"flexbox\",{\"0\":{\"155\":1},\"1\":{\"147\":1,\"148\":2}}],[\"flex\",{\"1\":{\"144\":2,\"147\":3,\"148\":1,\"155\":11,\"157\":2}}],[\"fff\",{\"1\":{\"144\":1,\"161\":6}}],[\"ff0000\",{\"1\":{\"144\":3,\"321\":1}}],[\"f1f1f1\",{\"1\":{\"142\":2}}],[\"failure的action来处理错误信息\",{\"1\":{\"405\":1}}],[\"failure\",{\"1\":{\"405\":2}}],[\"failed\",{\"1\":{\"264\":1,\"282\":1,\"369\":2,\"493\":1,\"494\":1}}],[\"facebook\",{\"1\":{\"370\":1}}],[\"factory\",{\"1\":{\"592\":1}}],[\"factor\",{\"1\":{\"258\":3,\"313\":2}}],[\"factorial\",{\"1\":{\"172\":3,\"269\":4,\"313\":3}}],[\"family\",{\"1\":{\"144\":2}}],[\"fadeout\",{\"1\":{\"290\":1}}],[\"fadein\",{\"1\":{\"290\":1}}],[\"fade\",{\"1\":{\"98\":10}}],[\"fallback=\",{\"1\":{\"51\":1,\"397\":1}}],[\"false为0\",{\"1\":{\"252\":1}}],[\"false\",{\"0\":{\"541\":1},\"1\":{\"3\":5,\"22\":1,\"48\":1,\"51\":1,\"70\":1,\"82\":3,\"95\":1,\"98\":1,\"110\":1,\"168\":5,\"169\":8,\"170\":3,\"178\":1,\"179\":1,\"184\":7,\"185\":1,\"186\":5,\"187\":10,\"191\":2,\"198\":1,\"204\":1,\"251\":2,\"252\":1,\"253\":1,\"254\":5,\"281\":2,\"310\":2,\"319\":1,\"323\":4,\"405\":3,\"407\":1,\"421\":2,\"422\":1,\"429\":1,\"431\":2,\"469\":1,\"519\":2,\"533\":1,\"541\":32}}],[\"fish\",{\"1\":{\"317\":3}}],[\"fifo\",{\"1\":{\"264\":1,\"270\":2}}],[\"finally\",{\"1\":{\"186\":3,\"192\":1,\"193\":2}}],[\"findlast\",{\"1\":{\"170\":3}}],[\"findindexlast\",{\"1\":{\"170\":3}}],[\"findindex\",{\"1\":{\"170\":3}}],[\"find\",{\"1\":{\"170\":3,\"303\":2}}],[\"finibus\",{\"1\":{\"154\":2}}],[\"filemtime\",{\"1\":{\"598\":1}}],[\"filename选项中的\",{\"1\":{\"504\":1}}],[\"filename选项使用哈希命名文件\",{\"1\":{\"495\":1}}],[\"filename和output\",{\"1\":{\"480\":1,\"483\":1}}],[\"filename\",{\"1\":{\"326\":1,\"450\":1,\"453\":1,\"454\":1,\"469\":1,\"475\":1,\"476\":1,\"480\":1,\"483\":1,\"486\":1,\"495\":1,\"509\":1,\"511\":3}}],[\"filesize\",{\"1\":{\"598\":1}}],[\"files数组获取上传文件的相关信息\",{\"1\":{\"581\":1}}],[\"files全局变量来处理上传的文件\",{\"1\":{\"580\":1}}],[\"filesystem类型是持久化缓存\",{\"1\":{\"482\":1}}],[\"filesystem类型将缓存在文件系统中\",{\"1\":{\"482\":1}}],[\"filesystem\",{\"1\":{\"482\":1}}],[\"files\",{\"1\":{\"282\":1,\"325\":1,\"521\":1,\"581\":2}}],[\"file\",{\"0\":{\"491\":1},\"1\":{\"282\":1,\"455\":2,\"473\":1,\"476\":1,\"491\":1,\"538\":1,\"570\":2,\"580\":1,\"581\":10,\"597\":1,\"598\":1}}],[\"fileinput\",{\"1\":{\"282\":2}}],[\"fillrect\",{\"1\":{\"228\":1}}],[\"fillstyle\",{\"1\":{\"228\":1}}],[\"fill\",{\"1\":{\"144\":2,\"152\":1,\"170\":3}}],[\"filtername\",{\"1\":{\"86\":2}}],[\"filters\",{\"1\":{\"86\":1}}],[\"filter\",{\"1\":{\"3\":1,\"86\":2,\"310\":1,\"407\":15,\"580\":2,\"603\":14}}],[\"filtering\",{\"1\":{\"3\":1}}],[\"filteredtodos\",{\"1\":{\"3\":4}}],[\"fixed\",{\"1\":{\"144\":1,\"158\":1}}],[\"firstdecorator\",{\"1\":{\"324\":2}}],[\"firstvalue\",{\"1\":{\"320\":2}}],[\"firstelementchild\",{\"1\":{\"265\":1}}],[\"firstchild\",{\"1\":{\"265\":2}}],[\"firstname\",{\"1\":{\"256\":1,\"262\":4}}],[\"first\",{\"1\":{\"143\":2,\"159\":7,\"273\":1,\"291\":1,\"299\":1,\"320\":3,\"324\":2,\"514\":1}}],[\"fibonacci函数使用memoized函数的方式进行记忆化\",{\"1\":{\"52\":1}}],[\"fibonacci\",{\"1\":{\"52\":9,\"172\":3,\"582\":2}}],[\"fruit\",{\"1\":{\"537\":4}}],[\"fruits\",{\"1\":{\"251\":1}}],[\"fri\",{\"1\":{\"356\":1}}],[\"fringilla\",{\"1\":{\"154\":2}}],[\"frameset>\",{\"1\":{\"218\":1}}],[\"fragment\",{\"1\":{\"159\":1}}],[\"fragment>\",{\"1\":{\"15\":2}}],[\"fragments\",{\"1\":{\"15\":1,\"99\":1}}],[\"freeze\",{\"1\":{\"171\":3}}],[\"fromevent\",{\"1\":{\"278\":2}}],[\"from语句\",{\"1\":{\"134\":1}}],[\"from\",{\"1\":{\"3\":2,\"4\":2,\"5\":5,\"13\":1,\"14\":1,\"16\":4,\"35\":5,\"36\":4,\"37\":7,\"38\":3,\"41\":9,\"42\":3,\"50\":1,\"51\":2,\"92\":1,\"93\":10,\"101\":2,\"102\":7,\"105\":1,\"110\":5,\"116\":1,\"125\":4,\"134\":3,\"135\":8,\"170\":4,\"189\":2,\"201\":1,\"202\":7,\"271\":3,\"272\":3,\"278\":3,\"281\":2,\"327\":3,\"328\":1,\"376\":1,\"380\":1,\"383\":1,\"384\":8,\"386\":2,\"387\":3,\"388\":2,\"389\":1,\"391\":1,\"392\":1,\"393\":5,\"394\":4,\"396\":2,\"397\":2,\"402\":4,\"403\":9,\"405\":7,\"406\":10,\"407\":8,\"412\":2,\"413\":2,\"415\":8,\"418\":2,\"420\":3,\"421\":9,\"427\":7,\"429\":1,\"430\":1,\"431\":1,\"433\":2,\"439\":1,\"440\":5,\"444\":5,\"462\":1,\"600\":2}}],[\"fopen\",{\"1\":{\"538\":1,\"570\":1,\"594\":1,\"595\":1,\"596\":1}}],[\"four\",{\"1\":{\"361\":1}}],[\"foundindex\",{\"1\":{\"170\":2}}],[\"foundelement\",{\"1\":{\"170\":2}}],[\"foundation是另一个流行的css框架\",{\"1\":{\"160\":1}}],[\"foundation\",{\"1\":{\"160\":2,\"233\":1}}],[\"font\",{\"1\":{\"143\":3,\"144\":7,\"145\":5,\"157\":1}}],[\"fontsize\",{\"1\":{\"15\":1,\"85\":4,\"265\":1}}],[\"foobarfoo\",{\"1\":{\"168\":1}}],[\"foo\",{\"1\":{\"102\":1,\"110\":14,\"117\":4,\"168\":5,\"172\":11,\"273\":3,\"311\":2,\"319\":1,\"326\":1,\"327\":3,\"329\":6,\"467\":1,\"538\":1}}],[\"footer>\",{\"1\":{\"70\":1,\"396\":1}}],[\"forward\",{\"1\":{\"266\":1}}],[\"forwardref\",{\"1\":{\"41\":2}}],[\"for循环\",{\"0\":{\"560\":1},\"1\":{\"255\":1}}],[\"for中的元素提供key属性是一种最佳实践\",{\"1\":{\"70\":1}}],[\"for渲染列表时\",{\"1\":{\"70\":1}}],[\"for指令中\",{\"1\":{\"70\":1}}],[\"for\",{\"1\":{\"70\":3,\"167\":1,\"170\":2,\"172\":1,\"174\":4,\"185\":8,\"191\":1,\"196\":1,\"198\":5,\"255\":1,\"281\":2,\"323\":1,\"345\":1,\"347\":1,\"560\":1,\"564\":2,\"582\":1}}],[\"form等\",{\"1\":{\"32\":1}}],[\"formdata\",{\"1\":{\"30\":2,\"282\":17,\"346\":3}}],[\"form>\",{\"1\":{\"25\":1,\"30\":3,\"31\":2,\"70\":2,\"216\":1,\"346\":1,\"580\":1,\"581\":1}}],[\"form\",{\"1\":{\"25\":3,\"282\":3,\"346\":2,\"581\":1}}],[\"foreach循环\",{\"0\":{\"563\":1}}],[\"foreach\",{\"1\":{\"3\":1,\"264\":1,\"272\":1,\"313\":1,\"330\":2,\"563\":1,\"577\":2,\"582\":2}}],[\"for=\",{\"1\":{\"3\":2,\"70\":2,\"216\":2,\"580\":3,\"581\":1}}],[\"focused\",{\"1\":{\"70\":1}}],[\"focuschild\",{\"1\":{\"41\":2}}],[\"focusinput\",{\"1\":{\"41\":2}}],[\"focus\",{\"1\":{\"3\":1,\"28\":1,\"41\":2,\"70\":6}}],[\"$variable\",{\"1\":{\"603\":1}}],[\"$values\",{\"1\":{\"578\":2}}],[\"$value\",{\"1\":{\"519\":1,\"577\":2,\"582\":2,\"604\":1}}],[\"$b\",{\"1\":{\"582\":4}}],[\"$brand\",{\"1\":{\"579\":4,\"583\":1}}],[\"$password\",{\"1\":{\"600\":2}}],[\"$position\",{\"1\":{\"582\":1}}],[\"$price\",{\"1\":{\"583\":1}}],[\"$primary\",{\"1\":{\"161\":5}}],[\"$product\",{\"1\":{\"551\":2,\"568\":2}}],[\"$username\",{\"1\":{\"600\":2}}],[\"$uploaddir\",{\"1\":{\"581\":2}}],[\"$uppercase\",{\"1\":{\"547\":2}}],[\"$uniquenumbers\",{\"1\":{\"578\":2}}],[\"$message\",{\"1\":{\"580\":3}}],[\"$mergedfruits\",{\"1\":{\"578\":2}}],[\"$mount\",{\"1\":{\"93\":1,\"412\":1,\"413\":1,\"415\":1,\"427\":1,\"440\":1}}],[\"$keys\",{\"1\":{\"578\":2}}],[\"$key\",{\"1\":{\"577\":2,\"578\":2,\"582\":2}}],[\"$input\",{\"1\":{\"603\":1}}],[\"$inputdata\",{\"1\":{\"603\":1}}],[\"$id\",{\"1\":{\"600\":2}}],[\"$iterator\",{\"1\":{\"582\":2}}],[\"$isbananaexists\",{\"1\":{\"578\":2}}],[\"$isadult\",{\"1\":{\"558\":2}}],[\"$i++\",{\"1\":{\"560\":1,\"561\":1,\"562\":1,\"564\":2,\"582\":1}}],[\"$i\",{\"1\":{\"560\":3,\"561\":3,\"562\":3,\"564\":8,\"582\":2}}],[\"$greeting\",{\"1\":{\"590\":2}}],[\"$grade\",{\"1\":{\"556\":3}}],[\"$globals\",{\"1\":{\"524\":2}}],[\"$quotient\",{\"1\":{\"551\":2}}],[\"$default\",{\"1\":{\"604\":1}}],[\"$destination\",{\"1\":{\"581\":2}}],[\"$database\",{\"1\":{\"600\":2}}],[\"$data\",{\"1\":{\"580\":8,\"582\":5,\"603\":1,\"604\":2}}],[\"$day\",{\"1\":{\"557\":2}}],[\"$diff\",{\"1\":{\"551\":2}}],[\"$doc\",{\"1\":{\"538\":2}}],[\"$e\",{\"1\":{\"588\":1,\"589\":1}}],[\"$errormessage\",{\"1\":{\"604\":1}}],[\"$errorcode\",{\"1\":{\"604\":1}}],[\"$errline\",{\"1\":{\"587\":1}}],[\"$errfile\",{\"1\":{\"587\":1}}],[\"$errstr\",{\"1\":{\"587\":1}}],[\"$errno\",{\"1\":{\"587\":1}}],[\"$emailerr\",{\"1\":{\"580\":5}}],[\"$email\",{\"1\":{\"580\":5,\"600\":2}}],[\"$emit\",{\"1\":{\"3\":1,\"93\":3}}],[\"$escapedstr\",{\"1\":{\"549\":2}}],[\"$line\",{\"1\":{\"595\":1}}],[\"$lowercase\",{\"1\":{\"547\":2}}],[\"$length\",{\"1\":{\"543\":2}}],[\"$filter参数指定要应用的过滤器类型\",{\"1\":{\"603\":1}}],[\"$filter\",{\"1\":{\"603\":2}}],[\"$filtereddata\",{\"1\":{\"603\":1}}],[\"$fileerror\",{\"1\":{\"581\":1}}],[\"$filesize\",{\"1\":{\"581\":1}}],[\"$filetmppath\",{\"1\":{\"581\":2}}],[\"$filename\",{\"1\":{\"581\":2}}],[\"$file\",{\"1\":{\"581\":5,\"594\":2,\"595\":4,\"596\":3,\"598\":4}}],[\"$factor\",{\"1\":{\"590\":4}}],[\"$flippedarray\",{\"1\":{\"578\":2}}],[\"$functionname\",{\"1\":{\"569\":3}}],[\"$fp\",{\"1\":{\"538\":2}}],[\"$fruits2\",{\"1\":{\"578\":2}}],[\"$fruits1\",{\"1\":{\"578\":2}}],[\"$fruits\",{\"1\":{\"578\":36}}],[\"$fruit\",{\"1\":{\"537\":2}}],[\"$triple\",{\"1\":{\"590\":2}}],[\"$trimmedstr\",{\"1\":{\"548\":2}}],[\"$this\",{\"1\":{\"535\":2,\"579\":5,\"582\":9,\"591\":4}}],[\"$txt=\",{\"1\":{\"517\":1}}],[\"$txt2\",{\"1\":{\"515\":1}}],[\"$txt2=\",{\"1\":{\"515\":1}}],[\"$txt1\",{\"1\":{\"515\":1}}],[\"$txt1=\",{\"1\":{\"515\":1}}],[\"$conn\",{\"1\":{\"600\":11}}],[\"$count\",{\"1\":{\"578\":1}}],[\"$colors\",{\"1\":{\"563\":2}}],[\"$color=\",{\"1\":{\"535\":1}}],[\"$color\",{\"1\":{\"535\":2,\"563\":2,\"579\":4,\"583\":1}}],[\"$c\",{\"1\":{\"538\":2}}],[\"$car\",{\"1\":{\"583\":8}}],[\"$car2\",{\"1\":{\"579\":4}}],[\"$car1\",{\"1\":{\"579\":8}}],[\"$cars\",{\"1\":{\"515\":1,\"534\":1}}],[\"$cars=array\",{\"1\":{\"515\":1,\"534\":1}}],[\"$callback\",{\"1\":{\"539\":6}}],[\"$case\",{\"1\":{\"519\":1}}],[\"$age\",{\"1\":{\"558\":2}}],[\"$a\",{\"1\":{\"528\":1,\"582\":4}}],[\"$a=\",{\"1\":{\"528\":1}}],[\"$x++\",{\"1\":{\"524\":1}}],[\"$x=0\",{\"1\":{\"524\":1}}],[\"$x=5\",{\"1\":{\"517\":1,\"524\":2,\"525\":1}}],[\"$x\",{\"1\":{\"524\":2,\"525\":2,\"526\":2,\"530\":4,\"531\":8,\"532\":6,\"604\":1}}],[\"$n\",{\"1\":{\"571\":4,\"582\":2}}],[\"$number\",{\"1\":{\"577\":2,\"582\":2,\"590\":2}}],[\"$numbers\",{\"1\":{\"571\":4,\"573\":2,\"575\":2,\"576\":3,\"577\":2,\"578\":6}}],[\"$num\",{\"1\":{\"552\":6}}],[\"$num2\",{\"1\":{\"551\":10,\"553\":12,\"566\":2,\"568\":2}}],[\"$num1\",{\"1\":{\"551\":10,\"553\":12,\"566\":2,\"568\":2}}],[\"$newname\",{\"1\":{\"600\":2}}],[\"$newcolor\",{\"1\":{\"579\":2}}],[\"$newstr\",{\"1\":{\"546\":2}}],[\"$nexttick\",{\"1\":{\"3\":1}}],[\"$nameerr\",{\"1\":{\"580\":4}}],[\"$name=\",{\"1\":{\"528\":1}}],[\"$name\",{\"1\":{\"519\":1,\"528\":1,\"580\":4,\"590\":2,\"600\":2}}],[\"$y=$x+$y\",{\"1\":{\"524\":1}}],[\"$y=10\",{\"1\":{\"517\":1,\"524\":2,\"525\":1}}],[\"$y\",{\"1\":{\"517\":2,\"524\":3,\"525\":2}}],[\"$row\",{\"1\":{\"600\":4}}],[\"$route\",{\"1\":{\"421\":1,\"422\":3}}],[\"$router\",{\"1\":{\"416\":2,\"420\":1}}],[\"$router来获取路由对象\",{\"1\":{\"416\":1}}],[\"$radius\",{\"1\":{\"591\":3}}],[\"$reversednumbers\",{\"1\":{\"578\":2}}],[\"$removedfruit\",{\"1\":{\"578\":4}}],[\"$remainder\",{\"1\":{\"551\":2}}],[\"$result\",{\"1\":{\"544\":2,\"568\":2,\"571\":4,\"600\":3}}],[\"$refs可以用来访问子组件的实例和方法\",{\"1\":{\"93\":1}}],[\"$refs\",{\"1\":{\"3\":1}}],[\"$jsonstring\",{\"1\":{\"604\":2}}],[\"$j\",{\"1\":{\"307\":2}}],[\"$\",{\"1\":{\"167\":1,\"171\":2,\"172\":3,\"183\":5,\"187\":2,\"188\":4,\"189\":8,\"191\":2,\"204\":4,\"249\":1,\"256\":2,\"267\":6,\"271\":1,\"272\":3,\"285\":1,\"286\":5,\"287\":2,\"288\":11,\"289\":3,\"290\":5,\"291\":5,\"292\":1,\"294\":4,\"295\":2,\"296\":5,\"297\":1,\"298\":2,\"299\":5,\"300\":6,\"301\":2,\"302\":1,\"303\":4,\"304\":2,\"305\":2,\"306\":1,\"307\":1,\"310\":1,\"312\":6,\"313\":1,\"315\":1,\"329\":4,\"364\":1,\"365\":4,\"366\":1,\"422\":1,\"455\":1,\"463\":1,\"469\":1,\"473\":1,\"491\":1,\"517\":1,\"518\":1,\"521\":9,\"580\":6,\"581\":3,\"603\":1}}],[\"$sql\",{\"1\":{\"600\":8}}],[\"$servername\",{\"1\":{\"600\":2}}],[\"$secondary\",{\"1\":{\"161\":2}}],[\"$slicedfruits\",{\"1\":{\"578\":2}}],[\"$score\",{\"1\":{\"555\":2}}],[\"$sum\",{\"1\":{\"551\":2,\"566\":2}}],[\"$substring\",{\"1\":{\"545\":2}}],[\"$student\",{\"1\":{\"574\":2,\"575\":2,\"576\":3,\"577\":2}}],[\"$str2\",{\"1\":{\"544\":2}}],[\"$str1\",{\"1\":{\"544\":2}}],[\"$str\",{\"1\":{\"543\":2,\"545\":2,\"546\":2,\"547\":3,\"548\":2,\"549\":2}}],[\"$store来访问vuex的状态\",{\"1\":{\"444\":1}}],[\"$store来访问vuex的存储对象\",{\"1\":{\"426\":1,\"427\":1}}],[\"$store\",{\"1\":{\"3\":5,\"429\":4,\"430\":5,\"431\":5,\"432\":3,\"440\":5,\"441\":10,\"444\":8}}],[\"$obj\",{\"1\":{\"584\":2}}],[\"$object\",{\"1\":{\"539\":2}}],[\"$on\",{\"1\":{\"93\":1}}],[\"$options等\",{\"1\":{\"91\":1}}],[\"$options\",{\"1\":{\"70\":1,\"95\":1,\"603\":2}}],[\"=$globals\",{\"1\":{\"524\":1}}],[\"=b\",{\"1\":{\"168\":2}}],[\"=new\",{\"1\":{\"67\":1}}],[\"==\",{\"1\":{\"3\":2,\"22\":2,\"48\":1,\"174\":1,\"254\":4,\"265\":1,\"281\":1,\"421\":1,\"469\":1,\"540\":2,\"541\":21,\"553\":2,\"556\":2,\"564\":2,\"580\":1,\"581\":1}}],[\"===\",{\"1\":{\"3\":1,\"22\":2,\"52\":4,\"126\":1,\"172\":2,\"174\":1,\"188\":1,\"189\":1,\"204\":1,\"254\":2,\"260\":1,\"262\":4,\"263\":1,\"267\":1,\"269\":1,\"281\":3,\"282\":2,\"294\":1,\"313\":1,\"314\":3,\"317\":1,\"319\":2,\"329\":1,\"345\":2,\"346\":2,\"347\":2,\"348\":2,\"387\":1,\"407\":1,\"537\":1,\"540\":2,\"541\":21,\"600\":3}}],[\"=>\",{\"1\":{\"3\":8,\"5\":5,\"20\":1,\"22\":2,\"23\":9,\"25\":1,\"26\":2,\"31\":4,\"35\":2,\"36\":1,\"37\":1,\"41\":16,\"42\":4,\"47\":1,\"50\":5,\"51\":4,\"52\":1,\"93\":2,\"102\":2,\"105\":1,\"110\":7,\"170\":6,\"172\":2,\"184\":1,\"185\":1,\"187\":3,\"192\":7,\"193\":20,\"196\":3,\"197\":2,\"198\":8,\"202\":1,\"258\":1,\"264\":4,\"270\":2,\"271\":5,\"272\":8,\"313\":4,\"315\":2,\"316\":1,\"318\":2,\"321\":1,\"322\":11,\"323\":1,\"330\":2,\"364\":2,\"365\":5,\"366\":3,\"367\":2,\"368\":1,\"369\":2,\"384\":4,\"385\":3,\"387\":8,\"388\":4,\"393\":1,\"397\":3,\"402\":1,\"403\":4,\"405\":7,\"406\":2,\"407\":6,\"412\":1,\"415\":1,\"421\":2,\"423\":2,\"427\":1,\"430\":4,\"432\":7,\"433\":2,\"437\":2,\"440\":1,\"467\":2,\"493\":3,\"494\":3,\"509\":3,\"511\":3,\"512\":2,\"571\":2,\"574\":6,\"575\":3,\"576\":3,\"577\":4,\"578\":6,\"582\":1}}],[\"=\",{\"1\":{\"3\":6,\"5\":5,\"13\":1,\"14\":3,\"15\":1,\"16\":2,\"20\":1,\"21\":1,\"22\":3,\"23\":7,\"26\":1,\"27\":2,\"30\":1,\"31\":6,\"35\":3,\"36\":2,\"37\":2,\"38\":1,\"41\":26,\"42\":4,\"47\":1,\"50\":1,\"51\":3,\"52\":13,\"57\":6,\"70\":11,\"74\":1,\"77\":1,\"86\":1,\"87\":1,\"93\":4,\"94\":1,\"95\":3,\"97\":1,\"98\":1,\"102\":13,\"105\":2,\"110\":5,\"117\":1,\"126\":1,\"134\":4,\"135\":1,\"161\":2,\"165\":4,\"166\":14,\"167\":6,\"168\":13,\"169\":2,\"170\":22,\"171\":21,\"172\":9,\"173\":10,\"174\":12,\"176\":1,\"177\":5,\"178\":3,\"179\":5,\"180\":4,\"181\":4,\"182\":2,\"183\":26,\"184\":5,\"185\":5,\"186\":2,\"187\":9,\"188\":8,\"189\":42,\"191\":23,\"192\":2,\"193\":11,\"196\":4,\"197\":2,\"198\":21,\"200\":2,\"204\":11,\"228\":3,\"229\":2,\"249\":9,\"251\":10,\"252\":6,\"253\":3,\"254\":27,\"255\":2,\"256\":12,\"257\":23,\"258\":16,\"259\":6,\"260\":2,\"261\":3,\"262\":7,\"263\":7,\"264\":5,\"265\":31,\"267\":20,\"268\":2,\"271\":1,\"272\":8,\"273\":4,\"278\":12,\"279\":8,\"281\":14,\"282\":4,\"294\":1,\"295\":1,\"298\":1,\"306\":2,\"307\":1,\"310\":28,\"311\":9,\"312\":16,\"313\":12,\"314\":20,\"315\":7,\"316\":8,\"317\":1,\"318\":11,\"319\":23,\"320\":7,\"321\":12,\"322\":5,\"323\":3,\"326\":2,\"327\":1,\"329\":2,\"330\":2,\"345\":8,\"346\":5,\"347\":10,\"348\":5,\"364\":3,\"365\":4,\"366\":4,\"367\":4,\"368\":2,\"369\":5,\"383\":1,\"384\":6,\"385\":3,\"386\":4,\"387\":6,\"388\":4,\"391\":2,\"393\":4,\"397\":3,\"401\":4,\"402\":7,\"403\":7,\"405\":6,\"406\":3,\"407\":8,\"412\":2,\"413\":3,\"415\":2,\"417\":4,\"418\":2,\"419\":2,\"420\":1,\"421\":1,\"423\":1,\"427\":1,\"429\":4,\"430\":1,\"431\":3,\"432\":1,\"433\":3,\"437\":2,\"438\":1,\"439\":2,\"440\":1,\"442\":2,\"444\":7,\"450\":2,\"454\":2,\"456\":3,\"457\":3,\"460\":1,\"461\":1,\"463\":1,\"469\":8,\"471\":1,\"472\":1,\"473\":1,\"474\":1,\"475\":2,\"476\":4,\"479\":3,\"480\":1,\"482\":1,\"483\":1,\"485\":1,\"486\":1,\"487\":1,\"488\":2,\"489\":1,\"490\":1,\"491\":1,\"492\":2,\"493\":1,\"494\":1,\"495\":1,\"496\":2,\"500\":1,\"509\":3,\"511\":4,\"512\":2,\"519\":1,\"530\":2,\"531\":4,\"532\":3,\"535\":1,\"537\":1,\"538\":3,\"539\":4,\"543\":2,\"544\":3,\"545\":2,\"546\":2,\"547\":3,\"548\":2,\"549\":2,\"551\":15,\"552\":8,\"553\":10,\"555\":1,\"556\":1,\"557\":1,\"558\":2,\"560\":1,\"561\":1,\"562\":1,\"563\":1,\"564\":2,\"566\":1,\"568\":2,\"569\":1,\"571\":4,\"573\":2,\"574\":2,\"575\":2,\"576\":4,\"577\":2,\"578\":31,\"579\":5,\"580\":14,\"581\":7,\"582\":11,\"583\":4,\"584\":2,\"590\":2,\"591\":1,\"594\":1,\"595\":2,\"596\":1,\"598\":1,\"600\":16,\"603\":2,\"604\":5}}],[\"lts版本\",{\"1\":{\"507\":1}}],[\"lt\",{\"1\":{\"213\":1}}],[\"l\",{\"1\":{\"167\":2,\"170\":4,\"173\":2,\"185\":2}}],[\"lexical\",{\"1\":{\"280\":4}}],[\"lengthwise>\",{\"1\":{\"320\":1}}],[\"lengthwise\",{\"1\":{\"320\":1}}],[\"length\",{\"1\":{\"170\":2,\"180\":1,\"181\":1,\"183\":4,\"184\":1,\"185\":1,\"255\":1,\"256\":5,\"257\":2,\"278\":6,\"281\":1,\"310\":1,\"320\":2,\"323\":1,\"345\":1,\"347\":1,\"352\":1,\"355\":1,\"430\":1}}],[\"let或const进行声明\",{\"1\":{\"249\":1}}],[\"let或const声明它们\",{\"1\":{\"249\":1}}],[\"let声明的变量可以在同一作用域中重新赋值\",{\"1\":{\"165\":1}}],[\"let\",{\"1\":{\"165\":3,\"166\":8,\"170\":2,\"172\":2,\"184\":1,\"185\":1,\"198\":4,\"249\":1,\"279\":8,\"281\":12,\"310\":22,\"311\":11,\"315\":6,\"316\":7,\"318\":5,\"319\":8,\"320\":6,\"323\":1}}],[\"let和const声明的变量也不会被添加到全局对象\",{\"1\":{\"165\":1}}],[\"let和const\",{\"1\":{\"165\":1}}],[\"letter选择器选择块级元素的首字母\",{\"1\":{\"159\":1}}],[\"letter选择器\",{\"1\":{\"159\":1}}],[\"letter\",{\"1\":{\"143\":1}}],[\"letter伪元素选择器\",{\"1\":{\"143\":1}}],[\"leak\",{\"1\":{\"274\":1,\"275\":1}}],[\"leaner\",{\"1\":{\"161\":1}}],[\"leave>\",{\"1\":{\"124\":2}}],[\"leave钩子函数在过渡结束后执行一些后置操作\",{\"1\":{\"98\":1}}],[\"leave\",{\"1\":{\"98\":8,\"125\":5}}],[\"less或stylus\",{\"1\":{\"472\":1}}],[\"less文件\",{\"1\":{\"455\":1}}],[\"less文件使用\",{\"1\":{\"161\":1}}],[\"less与sass类似\",{\"1\":{\"161\":1}}],[\"less扩展名\",{\"1\":{\"161\":1}}],[\"less是另一个流行的css预处理器\",{\"1\":{\"161\":1}}],[\"less\",{\"1\":{\"161\":1,\"455\":1}}],[\"leo\",{\"1\":{\"154\":1}}],[\"level\",{\"1\":{\"137\":1,\"210\":1}}],[\"left\",{\"1\":{\"134\":1,\"144\":3,\"147\":4,\"153\":1,\"290\":1,\"310\":4}}],[\"laravel\",{\"1\":{\"604\":3}}],[\"layer\",{\"1\":{\"359\":4}}],[\"layout\",{\"0\":{\"154\":1},\"1\":{\"144\":1,\"147\":3,\"154\":1,\"155\":1}}],[\"layout>\",{\"1\":{\"70\":2}}],[\"latitude\",{\"1\":{\"229\":3}}],[\"labrador\",{\"1\":{\"183\":1}}],[\"label>\",{\"1\":{\"3\":2,\"216\":2,\"580\":3,\"581\":1}}],[\"lastelementchild\",{\"1\":{\"265\":1}}],[\"lastchild\",{\"1\":{\"265\":1}}],[\"lastchild等属性和方法来访问和操作元素的子元素\",{\"1\":{\"265\":1}}],[\"lastname\",{\"1\":{\"256\":1,\"262\":4}}],[\"lastindexof\",{\"1\":{\"256\":2}}],[\"lastindex\",{\"1\":{\"168\":1}}],[\"last\",{\"1\":{\"159\":4,\"273\":1,\"291\":1,\"356\":2,\"601\":1,\"604\":4}}],[\"lang\",{\"1\":{\"235\":1}}],[\"language\",{\"1\":{\"131\":1,\"206\":1,\"266\":1,\"371\":1}}],[\"lang=\",{\"1\":{\"87\":1,\"235\":1,\"444\":1}}],[\"lazy和import函数将mycomponent组件进行懒加载\",{\"1\":{\"51\":1}}],[\"lazy和suspense组件来实现懒加载\",{\"1\":{\"51\":1}}],[\"lazy允许你以动态的方式引入一个组件\",{\"1\":{\"51\":1}}],[\"lazy\",{\"0\":{\"494\":1},\"1\":{\"51\":3,\"397\":5,\"423\":1,\"494\":1}}],[\"lodash模块\",{\"1\":{\"509\":1}}],[\"lodash等\",{\"1\":{\"458\":1}}],[\"lodash\",{\"1\":{\"281\":1}}],[\"locator\",{\"1\":{\"352\":1}}],[\"location\",{\"1\":{\"266\":2,\"386\":2,\"387\":4,\"416\":2,\"580\":1}}],[\"local\",{\"1\":{\"249\":1,\"524\":1}}],[\"localvariable\",{\"1\":{\"249\":3}}],[\"localstorage\",{\"1\":{\"236\":1,\"439\":2}}],[\"localhost\",{\"1\":{\"5\":1,\"88\":1,\"100\":1,\"364\":2,\"365\":1,\"367\":1,\"368\":1,\"369\":1,\"440\":1,\"461\":2,\"600\":1}}],[\"loop\",{\"0\":{\"264\":1},\"1\":{\"255\":1,\"264\":1,\"270\":1,\"271\":1}}],[\"lobortis\",{\"1\":{\"154\":1}}],[\"lorem\",{\"1\":{\"154\":1}}],[\"long\",{\"1\":{\"483\":1}}],[\"longitude\",{\"1\":{\"229\":3}}],[\"longblob\",{\"1\":{\"136\":1}}],[\"longtext等\",{\"1\":{\"136\":1}}],[\"loader对javascript文件进行转换\",{\"1\":{\"487\":1}}],[\"loader在webpack配置的module\",{\"1\":{\"487\":1}}],[\"loader插入到页面中\",{\"1\":{\"476\":1}}],[\"loader解析\",{\"1\":{\"476\":1}}],[\"loader进行转换\",{\"1\":{\"476\":1}}],[\"loader进行处理\",{\"1\":{\"463\":2}}],[\"loader和babel\",{\"1\":{\"504\":1}}],[\"loader和file\",{\"1\":{\"473\":1}}],[\"loader和node\",{\"1\":{\"472\":1}}],[\"loader和css\",{\"1\":{\"463\":1,\"472\":1,\"476\":1}}],[\"loader来处理图片文件\",{\"1\":{\"491\":1}}],[\"loader来处理这些资源\",{\"1\":{\"473\":1}}],[\"loader来处理javascript文件\",{\"1\":{\"471\":1}}],[\"loader来集成babel\",{\"1\":{\"471\":1}}],[\"loader配合imagemin\",{\"1\":{\"469\":1}}],[\"loader或file\",{\"1\":{\"469\":1,\"473\":1}}],[\"loader的cachedirectory选项\",{\"1\":{\"504\":1}}],[\"loader的使用方式可以通过以下示例来说明\",{\"1\":{\"463\":1}}],[\"loader的工作原理是通过模块链式调用的方式\",{\"1\":{\"463\":1}}],[\"loader用于webpack中的文件转换\",{\"1\":{\"487\":1}}],[\"loader用于将图片转换为dataurl或输出文件\",{\"1\":{\"463\":1}}],[\"loader用于将es6+的javascript代码转换为向后兼容的javascript代码\",{\"1\":{\"463\":1}}],[\"loader用于处理文件资源\",{\"1\":{\"463\":1}}],[\"loader用于处理css文件\",{\"1\":{\"463\":1}}],[\"loader可以通过webpack配置文件中的module\",{\"1\":{\"463\":1}}],[\"loader可以将非javascript文件\",{\"1\":{\"463\":1}}],[\"loader将图片文件复制到输出目录\",{\"1\":{\"491\":1}}],[\"loader将es6+代码转换为向后兼容的javascript代码\",{\"1\":{\"487\":1}}],[\"loader将文件复制到输出目录的images文件夹中\",{\"1\":{\"473\":1}}],[\"loader将css添加到页面中\",{\"1\":{\"472\":1}}],[\"loader将css转换为javascript模块\",{\"1\":{\"463\":1}}],[\"loader将sass文件转换为css\",{\"1\":{\"472\":1}}],[\"loader将sass代码转换为css\",{\"1\":{\"463\":1}}],[\"loader将会对javascript文件进行处理\",{\"1\":{\"471\":1}}],[\"loader将转换后的css模块注入到页面中\",{\"1\":{\"463\":1}}],[\"loader机制的灵活性和可配置性使得webpack能够处理各种类型的资源文件\",{\"1\":{\"463\":1}}],[\"loader机制是webpack中的核心概念之一\",{\"1\":{\"463\":1}}],[\"loader机制\",{\"0\":{\"463\":1}}],[\"loader类似\",{\"1\":{\"455\":1}}],[\"loader处理\",{\"1\":{\"455\":2}}],[\"loader处理的css代码插入到html页面中作为style标签\",{\"1\":{\"455\":1}}],[\"loader\",{\"0\":{\"487\":1},\"1\":{\"454\":3,\"455\":12,\"463\":7,\"469\":2,\"471\":2,\"472\":4,\"473\":5,\"474\":6,\"476\":11,\"487\":1,\"491\":1,\"504\":2}}],[\"loaders\",{\"0\":{\"455\":1},\"1\":{\"453\":1,\"454\":1,\"455\":1,\"476\":1}}],[\"loaded\",{\"1\":{\"95\":3,\"264\":1}}],[\"loadmore\",{\"1\":{\"348\":2}}],[\"load\",{\"1\":{\"264\":1,\"300\":1,\"301\":2,\"348\":2,\"494\":1}}],[\"loadimageasync\",{\"1\":{\"264\":2}}],[\"loadimage\",{\"1\":{\"264\":2}}],[\"loading\",{\"0\":{\"494\":1},\"1\":{\"51\":4,\"397\":1,\"405\":7,\"423\":1,\"453\":1,\"458\":1}}],[\"loadasynccomponent\",{\"1\":{\"95\":2}}],[\"loadcomponent\",{\"1\":{\"51\":2}}],[\"loginuser\",{\"1\":{\"432\":1}}],[\"login\",{\"1\":{\"385\":4,\"421\":1,\"432\":1}}],[\"logic\",{\"1\":{\"3\":2}}],[\"logs\",{\"1\":{\"334\":1}}],[\"log命令可以查看提交历史记录\",{\"1\":{\"334\":1}}],[\"log打印结果\",{\"1\":{\"258\":1}}],[\"logging\",{\"1\":{\"204\":2,\"366\":1}}],[\"logger是一个用于在控制台中打印redux状态变化的中间件\",{\"1\":{\"405\":1}}],[\"logger装饰器和sanitizer装饰器按照从上到下的顺序依次应用于example类\",{\"1\":{\"204\":1}}],[\"logger装饰器通过在目标类的原型上添加了一个log方法\",{\"1\":{\"204\":1}}],[\"logger\",{\"1\":{\"204\":4,\"405\":1}}],[\"logcount\",{\"1\":{\"97\":2}}],[\"log\",{\"1\":{\"22\":1,\"23\":1,\"25\":6,\"26\":2,\"36\":1,\"41\":1,\"50\":2,\"51\":1,\"52\":8,\"70\":1,\"77\":3,\"87\":8,\"93\":2,\"97\":1,\"102\":9,\"110\":5,\"165\":2,\"166\":19,\"167\":18,\"168\":21,\"169\":30,\"170\":21,\"171\":14,\"172\":12,\"173\":6,\"174\":10,\"176\":4,\"177\":4,\"178\":2,\"179\":2,\"180\":2,\"181\":2,\"182\":2,\"183\":12,\"184\":8,\"185\":4,\"186\":8,\"187\":15,\"188\":8,\"189\":37,\"191\":17,\"192\":1,\"193\":8,\"196\":3,\"197\":3,\"198\":5,\"200\":2,\"201\":2,\"202\":6,\"204\":8,\"249\":5,\"251\":2,\"252\":4,\"253\":13,\"254\":21,\"256\":24,\"257\":18,\"258\":11,\"259\":7,\"260\":2,\"261\":3,\"262\":10,\"263\":5,\"264\":1,\"265\":1,\"267\":9,\"268\":1,\"269\":1,\"270\":8,\"271\":5,\"272\":5,\"278\":7,\"281\":3,\"282\":1,\"310\":17,\"311\":3,\"312\":11,\"313\":11,\"314\":14,\"315\":1,\"317\":4,\"320\":1,\"322\":4,\"323\":5,\"324\":6,\"329\":6,\"330\":2,\"334\":2,\"364\":1,\"366\":2,\"367\":1,\"368\":1,\"369\":2,\"387\":3,\"401\":1,\"402\":1,\"432\":2,\"437\":2,\"462\":1,\"508\":1,\"509\":2,\"511\":3,\"512\":1,\"586\":3}}],[\"lib=\",{\"1\":{\"331\":1}}],[\"libero\",{\"1\":{\"154\":1}}],[\"literal\",{\"1\":{\"319\":1}}],[\"lifo\",{\"1\":{\"273\":1}}],[\"li\",{\"1\":{\"263\":1,\"291\":5,\"347\":1}}],[\"ligula\",{\"1\":{\"154\":1}}],[\"lighthouse会评估网页的性能\",{\"1\":{\"58\":1}}],[\"lighthouse可以通过chrome浏览器的开发者工具使用\",{\"1\":{\"58\":1}}],[\"lighthouse是一个由google开发的开源工具\",{\"1\":{\"58\":1}}],[\"lighthouse\",{\"1\":{\"58\":3}}],[\"light\",{\"1\":{\"41\":2,\"319\":3}}],[\"link或者编程式导航来传递参数\",{\"1\":{\"420\":1}}],[\"link>来生成路由链接\",{\"1\":{\"413\":1}}],[\"link>\",{\"1\":{\"380\":1,\"384\":3,\"388\":3,\"393\":1,\"396\":3,\"413\":2,\"421\":2,\"422\":2}}],[\"link\",{\"1\":{\"380\":1,\"384\":1,\"388\":1,\"393\":4,\"413\":2,\"421\":2,\"422\":2,\"538\":1}}],[\"link标签应放置在html文档的head标签内\",{\"1\":{\"142\":1}}],[\"line选择器选择块级元素的首行文本\",{\"1\":{\"159\":1}}],[\"line和\",{\"1\":{\"159\":1}}],[\"line\",{\"1\":{\"145\":1,\"407\":1}}],[\"linear\",{\"1\":{\"144\":1,\"151\":1,\"152\":1,\"153\":4,\"161\":6}}],[\"linux\",{\"1\":{\"131\":1,\"513\":1}}],[\"like\",{\"1\":{\"135\":2}}],[\"limit\",{\"1\":{\"135\":1,\"463\":1,\"469\":1,\"473\":1}}],[\"limit子句用于限制查询结果返回的行数\",{\"1\":{\"135\":1}}],[\"live属性或类似技术\",{\"1\":{\"32\":1}}],[\"listener是一个回调函数\",{\"1\":{\"401\":1}}],[\"listener\",{\"1\":{\"401\":4,\"402\":1}}],[\"listeners\",{\"1\":{\"272\":1}}],[\"listen\",{\"1\":{\"364\":1,\"367\":1,\"368\":1,\"387\":2,\"509\":1,\"512\":1}}],[\"listening\",{\"1\":{\"322\":1,\"364\":1}}],[\"lists\",{\"1\":{\"70\":1,\"370\":1}}],[\"list\",{\"1\":{\"3\":1,\"263\":2,\"603\":1}}],[\"li><\",{\"1\":{\"219\":2}}],[\"li><li>项目2<\",{\"1\":{\"219\":2}}],[\"li>\",{\"1\":{\"3\":1,\"5\":1,\"70\":2,\"380\":3,\"384\":3,\"388\":3,\"396\":3,\"407\":1}}],[\"bmw\",{\"1\":{\"515\":1,\"534\":1}}],[\"b测试可以帮助确定哪个版本对于用户更有效\",{\"1\":{\"372\":1}}],[\"b测试\",{\"1\":{\"372\":1}}],[\"braking\",{\"1\":{\"583\":2}}],[\"brake\",{\"1\":{\"583\":2}}],[\"brand\",{\"1\":{\"583\":1}}],[\"branch命令可以查看当前仓库中存在的所有分支\",{\"1\":{\"335\":1}}],[\"branch命令可以查看当前所有的分支\",{\"1\":{\"334\":1}}],[\"branch\",{\"1\":{\"333\":1,\"335\":4,\"336\":2}}],[\"browserrouter>\",{\"1\":{\"386\":2}}],[\"browserrouter\",{\"1\":{\"376\":1,\"386\":2,\"388\":1,\"389\":1,\"390\":2,\"392\":1,\"394\":1,\"396\":1,\"397\":1}}],[\"browserrouter使用浏览器的html5\",{\"1\":{\"376\":1}}],[\"browser\",{\"1\":{\"266\":1}}],[\"break语句\",{\"0\":{\"564\":1}}],[\"break\",{\"1\":{\"255\":3,\"557\":3,\"564\":1}}],[\"breed\",{\"1\":{\"183\":3,\"312\":5}}],[\"bg\",{\"1\":{\"144\":1,\"153\":2}}],[\"btn\",{\"1\":{\"144\":3}}],[\"blockvariable\",{\"1\":{\"311\":2}}],[\"block\",{\"1\":{\"161\":6,\"172\":2,\"210\":1,\"261\":1,\"311\":2,\"387\":2}}],[\"blank\",{\"1\":{\"143\":3}}],[\"bluebird\",{\"1\":{\"272\":1}}],[\"blue\",{\"1\":{\"142\":3,\"143\":2,\"144\":1,\"152\":1,\"153\":1,\"314\":2,\"321\":2,\"579\":2}}],[\"blur\",{\"1\":{\"28\":1,\"70\":1}}],[\"blur=\",{\"1\":{\"3\":1}}],[\"bisect命令可以进行二分查找来定位引入错误的提交\",{\"1\":{\"338\":1}}],[\"bisect\",{\"1\":{\"338\":1}}],[\"bitbucket\",{\"1\":{\"336\":1,\"337\":1}}],[\"bird\",{\"1\":{\"317\":4}}],[\"bignumber\",{\"1\":{\"310\":1}}],[\"bigint2\",{\"1\":{\"173\":2}}],[\"bigint\",{\"1\":{\"173\":1,\"310\":4}}],[\"bigint1\",{\"1\":{\"173\":2}}],[\"bigint有自己的运算符\",{\"1\":{\"173\":1}}],[\"bigint数据类型和运算符\",{\"1\":{\"173\":1}}],[\"bigint等\",{\"1\":{\"136\":1}}],[\"binary\",{\"1\":{\"136\":1,\"169\":2}}],[\"bind指令传递数据给父组件\",{\"1\":{\"96\":1}}],[\"binding\",{\"1\":{\"70\":4}}],[\"bind\",{\"1\":{\"22\":1,\"25\":1,\"70\":5,\"81\":1,\"82\":9,\"84\":1,\"85\":4,\"86\":1,\"262\":1}}],[\"by子句用于对查询结果进行排序\",{\"1\":{\"135\":1}}],[\"by\",{\"1\":{\"135\":2}}],[\"by语句用于将查询结果按照一个或多个列进行分组\",{\"1\":{\"135\":1}}],[\"by语句\",{\"1\":{\"135\":1}}],[\"babel是一个用于将新版本javascript代码转换为向后兼容版本的工具\",{\"1\":{\"471\":1}}],[\"babel\",{\"0\":{\"471\":1},\"1\":{\"454\":1,\"455\":1,\"463\":1,\"471\":3,\"476\":2,\"487\":1}}],[\"bad\",{\"1\":{\"314\":1}}],[\"badrequest\",{\"1\":{\"314\":2}}],[\"banana\",{\"1\":{\"251\":1,\"537\":2,\"578\":29}}],[\"ball\",{\"1\":{\"183\":2}}],[\"bash\",{\"1\":{\"527\":1}}],[\"basic\",{\"1\":{\"355\":1}}],[\"basis\",{\"1\":{\"147\":1}}],[\"based访问控制\",{\"1\":{\"370\":1}}],[\"based身份认证\",{\"1\":{\"370\":1}}],[\"basector\",{\"1\":{\"330\":3}}],[\"basectors\",{\"1\":{\"330\":2}}],[\"baseurl\",{\"1\":{\"328\":1}}],[\"baseline\",{\"1\":{\"155\":1}}],[\"basestyles\",{\"1\":{\"85\":3}}],[\"base\",{\"1\":{\"70\":1}}],[\"back<\",{\"1\":{\"393\":1}}],[\"back\",{\"1\":{\"266\":1}}],[\"backwards\",{\"1\":{\"152\":1}}],[\"background\",{\"0\":{\"158\":1},\"1\":{\"142\":2,\"144\":16,\"147\":1,\"150\":1,\"151\":1,\"152\":3,\"153\":4,\"156\":1,\"158\":10,\"161\":36}}],[\"backup\",{\"1\":{\"133\":2}}],[\"barking\",{\"1\":{\"312\":2}}],[\"bark\",{\"1\":{\"312\":3,\"317\":2}}],[\"barks\",{\"1\":{\"171\":2,\"312\":2}}],[\"bar\",{\"1\":{\"102\":1,\"110\":10,\"168\":3,\"319\":2,\"326\":1}}],[\"b<\",{\"1\":{\"94\":1}}],[\"bom的具体实现可能会因浏览器而异\",{\"1\":{\"266\":1}}],[\"bom提供了一系列对象来访问和操作浏览器窗口\",{\"1\":{\"266\":1}}],[\"bom\",{\"1\":{\"266\":1}}],[\"bom操作\",{\"0\":{\"266\":1}}],[\"boundgreet\",{\"1\":{\"262\":2}}],[\"bool\",{\"1\":{\"519\":2,\"541\":14}}],[\"boolean\",{\"0\":{\"533\":1},\"1\":{\"136\":1,\"251\":1,\"252\":2,\"253\":1,\"310\":4,\"311\":3,\"315\":1,\"316\":1,\"319\":4,\"603\":1}}],[\"bootstrap是最受欢迎的css框架之一\",{\"1\":{\"160\":1}}],[\"bootstrap\",{\"1\":{\"160\":1,\"233\":1,\"474\":1}}],[\"both等\",{\"1\":{\"152\":1}}],[\"bottom和left属性\",{\"1\":{\"147\":2}}],[\"bottom\",{\"1\":{\"144\":2,\"153\":1,\"161\":6}}],[\"bold\",{\"1\":{\"144\":1}}],[\"border\",{\"1\":{\"144\":17,\"146\":3,\"155\":1,\"161\":6}}],[\"box<number>\",{\"1\":{\"320\":1}}],[\"box<t>\",{\"1\":{\"320\":1}}],[\"box或border\",{\"1\":{\"158\":2}}],[\"box的初始状态是一个100px\",{\"1\":{\"151\":1}}],[\"box\",{\"1\":{\"144\":11,\"146\":5,\"147\":2,\"150\":4,\"151\":3,\"152\":4,\"155\":1,\"158\":6,\"320\":2}}],[\"body\",{\"1\":{\"119\":1,\"129\":1,\"142\":2,\"157\":1}}],[\"body>\",{\"1\":{\"70\":1,\"87\":1,\"207\":1,\"367\":1,\"514\":1,\"581\":1}}],[\"bob\",{\"1\":{\"19\":1,\"183\":2,\"267\":11,\"312\":3,\"313\":2,\"315\":1,\"316\":1}}],[\"b的计算结果\",{\"1\":{\"41\":1}}],[\"b\",{\"1\":{\"41\":3,\"119\":2,\"166\":6,\"167\":3,\"168\":4,\"170\":3,\"171\":9,\"172\":12,\"174\":3,\"183\":2,\"184\":2,\"200\":4,\"201\":4,\"202\":8,\"257\":2,\"273\":2,\"281\":6,\"313\":6,\"319\":3,\"321\":3,\"444\":1,\"556\":2}}],[\"build\",{\"1\":{\"497\":1}}],[\"builddependencies和cache\",{\"1\":{\"482\":1}}],[\"bundleanalyzerplugin\",{\"1\":{\"492\":2}}],[\"bundle\",{\"0\":{\"492\":1},\"1\":{\"450\":1,\"452\":1,\"454\":1,\"475\":1,\"486\":1,\"492\":2,\"497\":1,\"504\":1}}],[\"bugsnag\",{\"1\":{\"372\":1}}],[\"bug和其他项目问题\",{\"1\":{\"337\":1}}],[\"bubbling\",{\"1\":{\"263\":1}}],[\"buddy\",{\"1\":{\"183\":3,\"312\":3}}],[\"buffer\",{\"1\":{\"180\":2,\"181\":2,\"182\":2}}],[\"bulma是一个轻量级的css框架\",{\"1\":{\"160\":1}}],[\"bulma\",{\"1\":{\"160\":2,\"233\":1}}],[\"bus\",{\"1\":{\"38\":1}}],[\"buttonclicks\",{\"1\":{\"278\":2}}],[\"buttoncounter\",{\"1\":{\"91\":1}}],[\"button类中\",{\"1\":{\"161\":3}}],[\"button\",{\"1\":{\"25\":2,\"26\":2,\"36\":1,\"91\":4,\"144\":1,\"161\":9,\"263\":13,\"272\":4,\"278\":3,\"287\":1,\"493\":3,\"494\":3}}],[\"button>`\",{\"1\":{\"91\":1}}],[\"button>\",{\"1\":{\"3\":1,\"5\":2,\"15\":1,\"20\":1,\"22\":1,\"25\":3,\"26\":3,\"30\":3,\"31\":2,\"35\":1,\"36\":1,\"41\":7,\"42\":2,\"51\":1,\"70\":2,\"77\":1,\"93\":3,\"94\":1,\"97\":2,\"98\":1,\"102\":1,\"126\":1,\"229\":1,\"263\":1,\"345\":1,\"346\":1,\"348\":1,\"383\":1,\"384\":1,\"393\":3,\"403\":2,\"406\":2,\"407\":4,\"420\":1,\"429\":1,\"431\":8,\"432\":2,\"433\":2,\"440\":2,\"442\":2,\"444\":2}}],[\"being\",{\"1\":{\"324\":2}}],[\"been\",{\"1\":{\"189\":1}}],[\"between\",{\"1\":{\"144\":1,\"147\":1,\"155\":2}}],[\"begin\",{\"1\":{\"137\":1}}],[\"beforerouteleave\",{\"1\":{\"421\":2}}],[\"beforerouteupdate\",{\"1\":{\"421\":2}}],[\"beforerouteenter\",{\"1\":{\"421\":2}}],[\"beforeenter\",{\"1\":{\"421\":3}}],[\"beforeeach\",{\"1\":{\"421\":2}}],[\"before\",{\"1\":{\"288\":1,\"296\":2}}],[\"beforeunmount\",{\"1\":{\"114\":1}}],[\"beforeupdate\",{\"1\":{\"87\":4,\"114\":1}}],[\"beforedestroy\",{\"1\":{\"87\":4,\"421\":1}}],[\"beforemount\",{\"1\":{\"87\":4,\"114\":1}}],[\"beforecreate\",{\"1\":{\"87\":4,\"114\":1}}],[\"be\",{\"1\":{\"3\":1,\"70\":3,\"77\":1,\"183\":1}}],[\"dump\",{\"1\":{\"531\":4,\"532\":3,\"534\":1,\"541\":14,\"571\":2}}],[\"duplication\",{\"1\":{\"458\":1}}],[\"duration用于指定动画的持续时间\",{\"1\":{\"152\":1}}],[\"duration\",{\"1\":{\"144\":2,\"151\":4}}],[\"durability\",{\"1\":{\"137\":1}}],[\"db\",{\"1\":{\"369\":4}}],[\"dblclick\",{\"1\":{\"28\":1}}],[\"dblclick=\",{\"1\":{\"3\":1}}],[\"dns服务器负责将域名解析为对应的ip地址\",{\"1\":{\"360\":1}}],[\"dns解析\",{\"1\":{\"360\":2}}],[\"d选项来强制删除分支\",{\"1\":{\"335\":1}}],[\"d选项将无法进行删除\",{\"1\":{\"335\":1}}],[\"dragend\",{\"1\":{\"242\":1}}],[\"dragenter\",{\"1\":{\"242\":1}}],[\"dragleave\",{\"1\":{\"242\":1}}],[\"dragover\",{\"1\":{\"242\":1}}],[\"drag\",{\"1\":{\"242\":1}}],[\"dragstart\",{\"1\":{\"242\":1}}],[\"dropdown\",{\"1\":{\"144\":1}}],[\"drop\",{\"1\":{\"133\":1,\"134\":1,\"242\":1}}],[\"d\",{\"1\":{\"168\":3,\"325\":2,\"328\":1,\"331\":1,\"335\":2,\"449\":1,\"598\":1}}],[\"ddd\",{\"1\":{\"147\":1}}],[\"dashboard\",{\"1\":{\"389\":6}}],[\"dark\",{\"1\":{\"319\":3}}],[\"darken\",{\"1\":{\"161\":3}}],[\"day\",{\"1\":{\"168\":1}}],[\"dapibus\",{\"1\":{\"154\":1}}],[\"danger\",{\"1\":{\"82\":12}}],[\"datetime\",{\"1\":{\"136\":1,\"235\":1}}],[\"date\",{\"1\":{\"3\":1,\"70\":1,\"136\":1,\"227\":1,\"366\":1,\"367\":1,\"407\":1,\"570\":1,\"598\":1}}],[\"dataready\",{\"1\":{\"322\":2}}],[\"datatype\",{\"1\":{\"292\":1,\"311\":2}}],[\"data3\",{\"1\":{\"196\":2}}],[\"data2\",{\"1\":{\"196\":2}}],[\"data1\",{\"1\":{\"196\":2,\"249\":1}}],[\"dataview\",{\"0\":{\"182\":1},\"1\":{\"180\":1,\"182\":2}}],[\"databasename\",{\"1\":{\"133\":2}}],[\"databases\",{\"1\":{\"133\":1}}],[\"databases语句\",{\"1\":{\"133\":1}}],[\"database\",{\"1\":{\"133\":2,\"236\":1,\"369\":2}}],[\"database语句\",{\"1\":{\"133\":2}}],[\"data中有一个count变量用于计数\",{\"1\":{\"97\":1}}],[\"data<\",{\"1\":{\"93\":1,\"432\":2,\"433\":2}}],[\"datafetcher\",{\"1\":{\"41\":1}}],[\"data=\",{\"1\":{\"23\":1,\"219\":1}}],[\"data\",{\"1\":{\"3\":2,\"22\":3,\"23\":6,\"37\":1,\"38\":2,\"41\":5,\"50\":5,\"57\":6,\"67\":1,\"70\":10,\"74\":1,\"77\":1,\"82\":3,\"87\":3,\"89\":1,\"90\":5,\"91\":1,\"92\":1,\"93\":9,\"94\":1,\"95\":1,\"97\":1,\"98\":1,\"126\":1,\"184\":3,\"192\":2,\"196\":8,\"198\":7,\"251\":1,\"258\":6,\"265\":3,\"271\":12,\"272\":22,\"289\":2,\"292\":2,\"305\":3,\"322\":19,\"345\":6,\"405\":1,\"422\":1,\"432\":6,\"433\":7,\"442\":2,\"509\":2,\"511\":6,\"581\":1,\"600\":1}}],[\"dynamic\",{\"1\":{\"51\":1,\"458\":1,\"462\":1,\"467\":1,\"480\":1,\"493\":1}}],[\"die\",{\"1\":{\"600\":1}}],[\"dictionary<number>\",{\"1\":{\"319\":1}}],[\"dictionary<t>\",{\"1\":{\"319\":1}}],[\"dict\",{\"1\":{\"319\":1}}],[\"dim\",{\"1\":{\"319\":1}}],[\"dimension\",{\"1\":{\"144\":1}}],[\"difference\",{\"1\":{\"254\":2}}],[\"diff算法\",{\"1\":{\"8\":1}}],[\"dirname\",{\"1\":{\"450\":1,\"454\":1,\"460\":1,\"461\":1,\"475\":1,\"486\":1}}],[\"dir=\",{\"1\":{\"235\":1}}],[\"dir\",{\"1\":{\"235\":1}}],[\"directionname\",{\"1\":{\"314\":2}}],[\"direction\",{\"1\":{\"153\":2,\"155\":1,\"310\":12,\"314\":22}}],[\"directive\",{\"1\":{\"70\":3}}],[\"directives\",{\"1\":{\"70\":2}}],[\"diameter\",{\"1\":{\"183\":4}}],[\"divide\",{\"1\":{\"202\":1}}],[\"div\",{\"1\":{\"145\":3,\"146\":1,\"158\":1,\"265\":2,\"287\":1,\"298\":1}}],[\"div>\",{\"1\":{\"3\":1,\"4\":1,\"5\":2,\"13\":1,\"14\":2,\"15\":4,\"19\":3,\"20\":1,\"22\":1,\"23\":5,\"35\":2,\"36\":2,\"37\":2,\"41\":11,\"42\":1,\"47\":2,\"51\":3,\"66\":1,\"69\":1,\"70\":13,\"74\":1,\"77\":1,\"82\":9,\"85\":2,\"87\":1,\"91\":1,\"92\":2,\"93\":6,\"94\":3,\"96\":2,\"97\":1,\"98\":2,\"102\":1,\"105\":1,\"116\":1,\"119\":5,\"126\":1,\"147\":1,\"150\":1,\"151\":1,\"152\":1,\"154\":1,\"155\":4,\"156\":5,\"231\":1,\"288\":2,\"296\":2,\"345\":1,\"348\":1,\"384\":1,\"386\":2,\"388\":1,\"391\":2,\"396\":1,\"397\":1,\"403\":1,\"405\":1,\"406\":2,\"407\":2,\"412\":2,\"413\":3,\"415\":1,\"417\":1,\"420\":2,\"421\":1,\"422\":1,\"429\":2,\"430\":8,\"440\":1,\"442\":2,\"444\":1}}],[\"di\",{\"1\":{\"117\":1}}],[\"disable\",{\"1\":{\"469\":1}}],[\"disabled\",{\"1\":{\"304\":2}}],[\"disabled选择器用于选择禁用的表单元素\",{\"1\":{\"159\":1}}],[\"disabled选择器\",{\"1\":{\"159\":1}}],[\"discriminated\",{\"1\":{\"319\":1}}],[\"dis\",{\"1\":{\"154\":1}}],[\"displaydata\",{\"1\":{\"345\":2}}],[\"display\",{\"1\":{\"70\":1,\"144\":3,\"147\":2,\"148\":1,\"155\":1,\"156\":1,\"157\":1,\"161\":6,\"265\":2,\"586\":1}}],[\"dispatch来触发increment和decrement动作\",{\"1\":{\"440\":1}}],[\"dispatch来分发action\",{\"1\":{\"432\":1}}],[\"dispatch函数来派发redux\",{\"1\":{\"403\":1}}],[\"dispatch是将一个action发送到redux的store以触发状态更新的过程\",{\"1\":{\"401\":1}}],[\"dispatch是一个同步的操作\",{\"1\":{\"401\":1}}],[\"dispatchevent\",{\"1\":{\"322\":1}}],[\"dispatch\",{\"1\":{\"41\":3,\"400\":1,\"401\":9,\"402\":3,\"403\":2,\"405\":4,\"406\":3,\"432\":2,\"436\":1,\"437\":1,\"440\":2,\"441\":3,\"444\":2}}],[\"dist\",{\"1\":{\"65\":1,\"70\":1,\"87\":1,\"450\":1,\"452\":1,\"454\":1,\"475\":1,\"486\":1}}],[\"doing\",{\"1\":{\"329\":2}}],[\"dosomethingelse\",{\"1\":{\"329\":1}}],[\"dosomething\",{\"1\":{\"329\":1}}],[\"doaction\",{\"1\":{\"317\":1}}],[\"down\",{\"1\":{\"310\":2}}],[\"dog\",{\"1\":{\"171\":4,\"183\":6,\"312\":14,\"317\":2}}],[\"dotall\",{\"1\":{\"168\":1}}],[\"dothat\",{\"1\":{\"70\":2}}],[\"dothis\",{\"1\":{\"70\":3}}],[\"dolor\",{\"1\":{\"154\":1}}],[\"doublecount\",{\"1\":{\"441\":2}}],[\"doublednumbers\",{\"1\":{\"278\":2}}],[\"double\",{\"1\":{\"136\":1,\"258\":2,\"313\":2}}],[\"docs\",{\"1\":{\"510\":1}}],[\"doctype\",{\"1\":{\"70\":1,\"87\":1,\"129\":1,\"207\":2,\"367\":1,\"514\":1,\"581\":1}}],[\"documenttype\",{\"1\":{\"129\":1}}],[\"document\",{\"1\":{\"5\":1,\"16\":2,\"21\":1,\"129\":2,\"219\":1,\"228\":1,\"263\":6,\"265\":18,\"272\":1,\"278\":1,\"282\":1,\"285\":2,\"322\":2,\"345\":2,\"347\":3,\"348\":1,\"369\":2,\"394\":1,\"403\":1,\"406\":1,\"493\":1,\"494\":1,\"538\":1}}],[\"do\",{\"0\":{\"562\":1},\"1\":{\"70\":1,\"562\":1}}],[\"doe<\",{\"1\":{\"231\":1}}],[\"doe\",{\"1\":{\"13\":1,\"14\":2,\"15\":1,\"36\":1,\"70\":1,\"92\":1,\"134\":1,\"208\":1,\"262\":2,\"282\":1}}],[\"domxml\",{\"1\":{\"538\":1}}],[\"domain\",{\"1\":{\"357\":1}}],[\"dom事件处理函数等都属于宏任务\",{\"1\":{\"271\":1}}],[\"dom操作\",{\"0\":{\"265\":1,\"288\":1}}],[\"dom元素属性上的事件处理\",{\"1\":{\"263\":1}}],[\"dom树是一个由各种类型的节点组成的树状结构\",{\"1\":{\"129\":1}}],[\"dom还没有被渲染\",{\"1\":{\"114\":1}}],[\"dom可以通过减少实际dom操作\",{\"1\":{\"45\":1}}],[\"dom可以通过批量更新的方式减少对实际dom的操作次数\",{\"1\":{\"45\":1}}],[\"dom和高效的差异算法\",{\"1\":{\"45\":1}}],[\"dom紧密结合\",{\"1\":{\"45\":1}}],[\"dom来实现在移动端的ui渲染\",{\"1\":{\"45\":1}}],[\"dom是一个独立于平台的抽象层\",{\"1\":{\"45\":1}}],[\"dom提供了一种声明式的方式来描述想要渲染的ui\",{\"1\":{\"45\":1}}],[\"dom会在内部使用算法来最小化对实际dom的修改\",{\"1\":{\"45\":1}}],[\"dom的优势\",{\"1\":{\"45\":1}}],[\"dom的原理\",{\"1\":{\"45\":1}}],[\"dom的原理和优势\",{\"0\":{\"45\":1},\"1\":{\"45\":1}}],[\"dom\",{\"0\":{\"128\":1},\"1\":{\"5\":1,\"8\":1,\"9\":1,\"11\":1,\"16\":2,\"45\":1,\"68\":2,\"70\":4,\"87\":5,\"114\":5,\"119\":1,\"128\":2,\"265\":1,\"275\":2,\"375\":2,\"376\":1,\"380\":1,\"383\":1,\"386\":2,\"387\":3,\"388\":1,\"389\":1,\"391\":1,\"392\":1,\"393\":5,\"394\":4,\"396\":2,\"397\":2,\"403\":1,\"406\":1}}],[\"done属性表示迭代是否已结束\",{\"1\":{\"184\":1}}],[\"done表示迭代是否已结束\",{\"1\":{\"184\":1}}],[\"donec\",{\"1\":{\"154\":1}}],[\"done\",{\"1\":{\"3\":1,\"184\":10,\"185\":2,\"186\":9,\"187\":14,\"197\":3,\"198\":1,\"282\":1,\"306\":1,\"323\":7}}],[\"doneedit\",{\"1\":{\"3\":2}}],[\"dead\",{\"1\":{\"497\":1}}],[\"devtool\",{\"1\":{\"468\":1,\"500\":1}}],[\"devtool选项用于配置生成源映射\",{\"1\":{\"468\":1}}],[\"devtool选项\",{\"1\":{\"468\":1}}],[\"devtools调试vuex能够更轻松地追踪和理解应用程序的状态和变化\",{\"1\":{\"438\":1}}],[\"devtools中手动触发一个mutation\",{\"1\":{\"438\":1}}],[\"devtools中\",{\"1\":{\"438\":1}}],[\"devtools的调试功能\",{\"1\":{\"438\":2}}],[\"devtools扩展程序\",{\"1\":{\"438\":3}}],[\"devtools插件来监控和管理状态的变化\",{\"1\":{\"407\":1}}],[\"devtools是一个强大的开发工具\",{\"1\":{\"407\":1}}],[\"devtools\",{\"1\":{\"407\":1,\"438\":2}}],[\"devtools工具来记录和回放状态变化\",{\"1\":{\"404\":1}}],[\"devserver是一个web服务器\",{\"1\":{\"490\":1}}],[\"devserver是webpack提供的一个内置开发服务器\",{\"1\":{\"461\":1}}],[\"devserver会自动重新编译并刷新页面\",{\"1\":{\"461\":1}}],[\"devserver\",{\"0\":{\"461\":1,\"490\":1},\"1\":{\"454\":2,\"461\":1,\"468\":2,\"490\":1}}],[\"dev\",{\"1\":{\"444\":1,\"454\":1,\"472\":1,\"473\":1,\"474\":1,\"475\":2,\"510\":1}}],[\"development模式\",{\"1\":{\"479\":1}}],[\"development\",{\"1\":{\"278\":1,\"371\":1,\"453\":1,\"457\":4,\"479\":2}}],[\"developer<\",{\"1\":{\"231\":1}}],[\"debugger\",{\"1\":{\"372\":1}}],[\"derivedctor\",{\"1\":{\"330\":2}}],[\"detail\",{\"1\":{\"322\":2}}],[\"deepcopyobj\",{\"1\":{\"281\":6}}],[\"deepcopy\",{\"1\":{\"281\":4}}],[\"deep\",{\"1\":{\"281\":1}}],[\"delegation\",{\"1\":{\"263\":1,\"313\":1}}],[\"delegate\",{\"1\":{\"187\":1,\"323\":1}}],[\"deleting\",{\"1\":{\"189\":1}}],[\"delete请求用于删除指定标识的资源\",{\"1\":{\"353\":1}}],[\"deletecount\",{\"1\":{\"257\":1}}],[\"deletedelements\",{\"1\":{\"257\":2}}],[\"deletedelement\",{\"1\":{\"257\":4}}],[\"deleteproperty\",{\"1\":{\"189\":2,\"191\":2}}],[\"delete\",{\"1\":{\"3\":2,\"134\":1,\"171\":1,\"176\":2,\"177\":2,\"178\":1,\"179\":1,\"189\":2,\"191\":1,\"282\":1,\"336\":2,\"352\":1,\"353\":1,\"365\":2,\"597\":1,\"600\":1}}],[\"deletetodo\",{\"1\":{\"3\":7}}],[\"delay用于指定动画的延迟时间\",{\"1\":{\"152\":1}}],[\"delay\",{\"1\":{\"144\":2,\"151\":3,\"196\":2,\"197\":4,\"260\":4,\"266\":1}}],[\"decode\",{\"1\":{\"604\":3}}],[\"decorated\",{\"1\":{\"324\":2}}],[\"decorators\",{\"1\":{\"324\":1,\"444\":1}}],[\"decorator\",{\"1\":{\"204\":4,\"324\":4,\"444\":1,\"592\":1}}],[\"decoration\",{\"1\":{\"144\":2}}],[\"dec\",{\"1\":{\"356\":1}}],[\"declare\",{\"1\":{\"325\":2,\"329\":1}}],[\"declarations\",{\"1\":{\"604\":3}}],[\"declaration\",{\"1\":{\"313\":1,\"325\":1,\"329\":1,\"331\":1}}],[\"decimal等\",{\"1\":{\"136\":1}}],[\"decrement的动作\",{\"1\":{\"441\":1}}],[\"decrement的变异\",{\"1\":{\"441\":1}}],[\"decrementaction\",{\"1\":{\"402\":2}}],[\"decrement\",{\"1\":{\"41\":4,\"42\":4,\"401\":3,\"402\":2,\"403\":2,\"406\":4,\"440\":6,\"441\":4}}],[\"dependency\",{\"1\":{\"117\":1,\"331\":1}}],[\"deflate等\",{\"1\":{\"355\":1}}],[\"deferred\",{\"1\":{\"306\":5}}],[\"deferred对象和promise\",{\"0\":{\"306\":1}}],[\"defining\",{\"1\":{\"189\":1}}],[\"define\",{\"1\":{\"519\":4,\"520\":1}}],[\"defineplugin\",{\"1\":{\"456\":1,\"476\":1}}],[\"defineproperty\",{\"1\":{\"99\":1,\"189\":2,\"191\":3,\"204\":1,\"330\":1}}],[\"defined\",{\"1\":{\"172\":1}}],[\"default和header\",{\"1\":{\"417\":1}}],[\"default语法用于导出默认的模块内容\",{\"1\":{\"202\":1}}],[\"defaultname\",{\"1\":{\"173\":2}}],[\"default\",{\"1\":{\"3\":4,\"4\":1,\"5\":2,\"35\":2,\"36\":2,\"37\":3,\"38\":1,\"41\":1,\"51\":2,\"92\":2,\"93\":5,\"94\":2,\"95\":2,\"98\":1,\"102\":1,\"105\":1,\"117\":2,\"126\":1,\"172\":1,\"202\":1,\"255\":1,\"258\":1,\"327\":1,\"388\":1,\"389\":1,\"397\":1,\"401\":1,\"402\":1,\"403\":4,\"405\":4,\"406\":4,\"407\":4,\"416\":1,\"417\":3,\"418\":1,\"419\":1,\"420\":2,\"421\":1,\"422\":1,\"427\":1,\"429\":3,\"430\":2,\"431\":2,\"432\":2,\"433\":3,\"440\":2,\"442\":2,\"444\":3,\"469\":1,\"557\":1}}],[\"destination\",{\"1\":{\"597\":1}}],[\"destructuring\",{\"1\":{\"172\":1}}],[\"destroyed\",{\"1\":{\"87\":4,\"421\":1}}],[\"destroy\",{\"1\":{\"3\":1}}],[\"desktop\",{\"1\":{\"167\":1}}],[\"desktop`\",{\"1\":{\"167\":1}}],[\"description\",{\"1\":{\"174\":1,\"208\":1}}],[\"descriptor\",{\"1\":{\"52\":4,\"189\":4,\"191\":2,\"204\":6}}],[\"descendant\",{\"1\":{\"143\":1}}],[\"desc\",{\"1\":{\"135\":1}}],[\"demand\",{\"1\":{\"51\":2,\"453\":1,\"458\":1}}],[\"mcrypt扩展在php\",{\"1\":{\"604\":1}}],[\"mcrypt扩展\",{\"1\":{\"604\":1}}],[\"mkdir\",{\"1\":{\"364\":1}}],[\"mp3\",{\"1\":{\"222\":1}}],[\"mp4\",{\"1\":{\"219\":1,\"223\":1}}],[\"m\",{\"1\":{\"171\":2,\"312\":4,\"313\":1,\"598\":1}}],[\"ms\",{\"1\":{\"151\":2,\"196\":2,\"197\":2}}],[\"msg\",{\"1\":{\"70\":3,\"604\":2}}],[\"mm\",{\"1\":{\"145\":1}}],[\"mixed\",{\"1\":{\"359\":2,\"519\":1}}],[\"mixin等功能\",{\"1\":{\"161\":2}}],[\"mixin\",{\"1\":{\"161\":2,\"330\":24}}],[\"mixins\",{\"0\":{\"330\":1},\"1\":{\"97\":2}}],[\"micro\",{\"1\":{\"271\":1}}],[\"microdata\",{\"1\":{\"231\":2}}],[\"middleware\",{\"1\":{\"401\":1}}],[\"middle\",{\"1\":{\"197\":1}}],[\"mi\",{\"1\":{\"154\":1}}],[\"mini\",{\"1\":{\"476\":1}}],[\"minimize为true来启用代码压缩\",{\"1\":{\"480\":1}}],[\"minimizer\",{\"1\":{\"469\":1,\"496\":1}}],[\"minimize\",{\"1\":{\"469\":1,\"496\":1}}],[\"minicssextractplugin\",{\"1\":{\"456\":1,\"476\":3}}],[\"min\",{\"1\":{\"144\":3,\"169\":2,\"217\":1,\"284\":1}}],[\"min和max等\",{\"1\":{\"135\":1}}],[\"might\",{\"1\":{\"70\":1}}],[\"mitt\",{\"1\":{\"38\":3}}],[\"mutationname\",{\"1\":{\"441\":1}}],[\"mutation被提交了\",{\"1\":{\"437\":1}}],[\"mutation用于修改state的值\",{\"1\":{\"436\":1}}],[\"mutation应该是同步操作\",{\"1\":{\"436\":1}}],[\"mutation的handler函数接受state作为第一个参数\",{\"1\":{\"436\":1}}],[\"mutation是vuex中用于修改状态的方法\",{\"1\":{\"444\":1}}],[\"mutation是用于修改state的唯一方式\",{\"1\":{\"436\":1}}],[\"mutation是修改状态的唯一途径\",{\"1\":{\"428\":1}}],[\"mutation\",{\"1\":{\"436\":1,\"437\":3,\"441\":1,\"444\":2}}],[\"mutation和action\",{\"0\":{\"436\":1}}],[\"mutation修改状态\",{\"1\":{\"428\":1}}],[\"mutations和getters逻辑划分为模块\",{\"1\":{\"434\":1}}],[\"mutations和actions等\",{\"1\":{\"426\":1}}],[\"mutations和actions\",{\"1\":{\"425\":1,\"426\":1}}],[\"mutations是用于同步地修改state的函数\",{\"1\":{\"426\":1}}],[\"mutations的同步修改\",{\"1\":{\"426\":1}}],[\"mutations\",{\"1\":{\"3\":1,\"93\":1,\"425\":1,\"427\":3,\"429\":1,\"431\":2,\"433\":2,\"440\":3,\"443\":1,\"444\":2}}],[\"mus\",{\"1\":{\"154\":1}}],[\"mustaches\",{\"1\":{\"70\":1}}],[\"mustache\",{\"1\":{\"69\":1,\"70\":1,\"367\":1}}],[\"multipart\",{\"1\":{\"581\":1}}],[\"multiple\",{\"1\":{\"497\":1}}],[\"multiplynumbers\",{\"1\":{\"258\":1,\"568\":2}}],[\"multiplyby函数接受一个因子\",{\"1\":{\"258\":1}}],[\"multiplyby\",{\"1\":{\"258\":3,\"313\":3}}],[\"multiply\",{\"1\":{\"202\":1,\"258\":2,\"590\":4}}],[\"multiline\",{\"1\":{\"167\":2}}],[\"multi\",{\"0\":{\"154\":1},\"1\":{\"154\":1}}],[\"mvvm\",{\"1\":{\"62\":3}}],[\"mvvm模型\",{\"0\":{\"62\":1}}],[\"mvc模式\",{\"1\":{\"592\":1}}],[\"mvc<\",{\"1\":{\"4\":1}}],[\"mvc\",{\"1\":{\"1\":1,\"2\":1,\"5\":4,\"62\":2}}],[\"myiterator\",{\"1\":{\"582\":2}}],[\"myisam等\",{\"1\":{\"131\":1}}],[\"mymethod\",{\"1\":{\"539\":2}}],[\"mymixin\",{\"1\":{\"97\":2}}],[\"mytest\",{\"1\":{\"520\":2,\"524\":8,\"525\":2,\"526\":2}}],[\"mytable\",{\"1\":{\"134\":7}}],[\"myapp\",{\"1\":{\"439\":2}}],[\"myroutecomponent\",{\"1\":{\"387\":1}}],[\"myglobal\",{\"1\":{\"329\":4}}],[\"mygenerator\",{\"1\":{\"323\":2}}],[\"mynamespace\",{\"1\":{\"326\":7,\"584\":4}}],[\"mybaseclass\",{\"1\":{\"324\":2}}],[\"mybutton\",{\"1\":{\"263\":5,\"278\":1}}],[\"myderivedclass\",{\"1\":{\"324\":1}}],[\"mydirection\",{\"1\":{\"314\":6}}],[\"mydatabase\",{\"1\":{\"369\":1,\"600\":1}}],[\"mydata\",{\"1\":{\"110\":17}}],[\"myplugin\",{\"1\":{\"298\":2,\"437\":2}}],[\"myform\",{\"1\":{\"289\":1,\"294\":1}}],[\"myfunction\",{\"1\":{\"249\":2,\"539\":2}}],[\"myelement\",{\"1\":{\"265\":7,\"286\":2,\"288\":11,\"290\":5,\"295\":2,\"296\":5,\"301\":1,\"303\":4,\"304\":2,\"305\":2,\"307\":1}}],[\"myvariable\",{\"1\":{\"249\":1,\"310\":6}}],[\"mysymbol\",{\"1\":{\"174\":9}}],[\"mysql扩展在php\",{\"1\":{\"604\":1}}],[\"mysql扩展\",{\"1\":{\"604\":1}}],[\"mysqli\",{\"1\":{\"570\":3,\"600\":1}}],[\"mysqldump\",{\"1\":{\"133\":1}}],[\"mysql本身没有提供专门的命令来直接修改数据库的名称\",{\"1\":{\"133\":1}}],[\"mysql官方提供了详细的文档和指南\",{\"1\":{\"132\":1}}],[\"mysql的安装和配置过程可能会因操作系统和mysql版本的不同而略有差异\",{\"1\":{\"132\":1}}],[\"mysql的开源性\",{\"1\":{\"131\":1}}],[\"mysql提供了多个版本\",{\"1\":{\"132\":1}}],[\"mysql提供了丰富的功能和特性\",{\"1\":{\"131\":1}}],[\"mysql支持多种储存引擎\",{\"1\":{\"131\":1}}],[\"mysql支持多种操作系统\",{\"1\":{\"131\":1}}],[\"mysql采用了传统的客户端\",{\"1\":{\"131\":1}}],[\"mysql是一种高性能的数据库系统\",{\"1\":{\"131\":1}}],[\"mysql是一种开源的关系型数据库管理系统\",{\"1\":{\"131\":1}}],[\"mysql\",{\"0\":{\"130\":1},\"1\":{\"131\":1,\"132\":1,\"133\":1,\"538\":2,\"570\":1}}],[\"myobject\",{\"1\":{\"310\":3}}],[\"myobj\",{\"1\":{\"52\":3,\"329\":1}}],[\"mycanvas\",{\"1\":{\"228\":2}}],[\"myclassdecoratorfactory\",{\"1\":{\"324\":2}}],[\"myclassdecorator\",{\"1\":{\"324\":9}}],[\"myclass\",{\"1\":{\"52\":2,\"253\":3,\"265\":1,\"324\":4,\"329\":5,\"539\":2,\"584\":3}}],[\"mycontext\",{\"1\":{\"37\":9}}],[\"mycomponent>\",{\"1\":{\"15\":1}}],[\"mycomponent\",{\"1\":{\"13\":1,\"23\":3,\"26\":2,\"47\":2,\"48\":1,\"50\":2,\"51\":3,\"383\":1,\"386\":4,\"387\":3,\"393\":5,\"444\":2}}],[\"my\",{\"1\":{\"13\":1,\"14\":2,\"88\":3,\"97\":1,\"116\":1,\"171\":2,\"183\":6,\"259\":2,\"267\":14,\"312\":3,\"364\":3,\"367\":1,\"386\":4,\"387\":1}}],[\"meow\",{\"1\":{\"591\":1}}],[\"meows\",{\"1\":{\"312\":2}}],[\"merge命令可以合并分支\",{\"1\":{\"337\":1}}],[\"merge命令可以将一个分支合并到当前分支\",{\"1\":{\"334\":1}}],[\"merge命令或git\",{\"1\":{\"335\":1}}],[\"merge\",{\"1\":{\"335\":2,\"578\":2}}],[\"merging\",{\"1\":{\"329\":1}}],[\"memcached\",{\"1\":{\"601\":1}}],[\"memcached等\",{\"1\":{\"465\":1}}],[\"membername\",{\"1\":{\"326\":1}}],[\"memory类型将缓存在内存中\",{\"1\":{\"482\":1}}],[\"memory和filesystem\",{\"1\":{\"482\":1}}],[\"memoryrouter\",{\"1\":{\"390\":2}}],[\"memory\",{\"1\":{\"58\":1,\"274\":1,\"275\":1}}],[\"memoize\",{\"1\":{\"52\":2}}],[\"memoizedfibonacci\",{\"1\":{\"52\":3}}],[\"memoizedfunction函数接受一个普通的函数作为参数\",{\"1\":{\"52\":1}}],[\"memoizedfunction\",{\"1\":{\"52\":3}}],[\"memoizedadd\",{\"1\":{\"52\":4}}],[\"memoized函数和记忆化技术可以应用于任何需要缓存的函数计算过程\",{\"1\":{\"52\":1}}],[\"memoized函数和记忆化技术是一种优化方法\",{\"1\":{\"52\":1}}],[\"memoized函数的例子\",{\"1\":{\"52\":1}}],[\"memoized函数是指在函数的计算过程中\",{\"1\":{\"52\":1}}],[\"memoized函数\",{\"1\":{\"52\":1}}],[\"memo包装组件来进行浅层比较\",{\"1\":{\"49\":1}}],[\"memo会对组件的props进行浅层比较\",{\"1\":{\"47\":1}}],[\"memo接收一个组件作为参数\",{\"1\":{\"47\":1}}],[\"memo是一个高阶组件\",{\"1\":{\"47\":1}}],[\"memo\",{\"1\":{\"43\":1,\"47\":2,\"49\":1}}],[\"memo等\",{\"1\":{\"9\":1}}],[\"menu\",{\"1\":{\"218\":1}}],[\"mediafeature是设备属性或条件\",{\"1\":{\"157\":1}}],[\"mediafeature\",{\"1\":{\"157\":1}}],[\"mediatype可以是以下三种之一\",{\"1\":{\"157\":1}}],[\"mediatype\",{\"1\":{\"157\":1}}],[\"media\",{\"0\":{\"157\":1},\"1\":{\"148\":3,\"157\":3}}],[\"metus\",{\"1\":{\"154\":1}}],[\"metainfo\",{\"1\":{\"422\":2}}],[\"metadata\",{\"1\":{\"324\":2,\"422\":1}}],[\"meta\",{\"1\":{\"129\":1,\"422\":2}}],[\"methodname\",{\"1\":{\"204\":2}}],[\"method\",{\"1\":{\"171\":2,\"183\":1,\"204\":2,\"292\":1,\"580\":1,\"581\":1,\"583\":1}}],[\"method=\",{\"1\":{\"30\":3,\"580\":1,\"581\":1}}],[\"methods中有increment方法用于增加计数\",{\"1\":{\"97\":1}}],[\"methods\",{\"1\":{\"3\":3,\"70\":2,\"89\":1,\"93\":4,\"94\":1,\"95\":1,\"97\":2,\"98\":1,\"126\":1,\"416\":1,\"420\":1,\"429\":1,\"431\":1,\"432\":1,\"433\":2,\"440\":1,\"441\":2,\"442\":2}}],[\"me\",{\"1\":{\"91\":1}}],[\"measuredheight\",{\"1\":{\"41\":2}}],[\"measureheight\",{\"1\":{\"41\":2}}],[\"messagetype\",{\"1\":{\"321\":1}}],[\"message<\",{\"1\":{\"35\":1,\"77\":1,\"93\":1}}],[\"message=\",{\"1\":{\"35\":1,\"93\":1}}],[\"message\",{\"1\":{\"30\":1,\"35\":4,\"66\":1,\"67\":1,\"69\":1,\"70\":12,\"74\":5,\"77\":6,\"86\":1,\"87\":2,\"93\":8,\"102\":3,\"187\":1,\"204\":2,\"251\":1,\"271\":1,\"278\":4,\"310\":2,\"311\":2,\"313\":2,\"321\":2,\"322\":2,\"365\":1,\"405\":1,\"442\":4,\"497\":1,\"580\":3}}],[\"me<\",{\"1\":{\"15\":1,\"25\":3,\"26\":3,\"36\":1,\"263\":1}}],[\"monday\",{\"1\":{\"557\":2}}],[\"mongoose模块\",{\"1\":{\"509\":1}}],[\"mongodb\",{\"1\":{\"369\":3}}],[\"mongoclient\",{\"1\":{\"369\":4}}],[\"month\",{\"1\":{\"168\":1}}],[\"montes\",{\"1\":{\"154\":1}}],[\"more\",{\"1\":{\"348\":2}}],[\"morbi\",{\"1\":{\"154\":1}}],[\"molestie\",{\"1\":{\"154\":2}}],[\"moveto\",{\"1\":{\"266\":1}}],[\"move\",{\"1\":{\"144\":2,\"581\":1}}],[\"modifiers\",{\"1\":{\"312\":1}}],[\"modified和cache\",{\"1\":{\"601\":1}}],[\"modified和if\",{\"1\":{\"352\":1,\"356\":1}}],[\"modified\",{\"1\":{\"204\":1,\"352\":1,\"356\":5}}],[\"modified来实现缓存验证等\",{\"1\":{\"55\":1}}],[\"modularization\",{\"1\":{\"327\":1}}],[\"modular\",{\"1\":{\"278\":1}}],[\"module模块\",{\"1\":{\"494\":1}}],[\"module模块拆分成一个单独的小块\",{\"1\":{\"493\":1}}],[\"moduleresolution\",{\"1\":{\"328\":2}}],[\"modules目录中的模块将其打包到一个名为vendors的文件中\",{\"1\":{\"480\":1}}],[\"modules文件夹\",{\"1\":{\"476\":1}}],[\"modules\",{\"1\":{\"327\":1,\"328\":1,\"425\":1,\"444\":2,\"454\":1,\"460\":6,\"471\":1,\"476\":1,\"480\":1,\"487\":1,\"497\":1}}],[\"moduleb\",{\"1\":{\"278\":2,\"327\":1,\"444\":2}}],[\"moduleastate\",{\"1\":{\"444\":1}}],[\"modulea启用了命名空间\",{\"1\":{\"444\":1}}],[\"modulea\",{\"1\":{\"278\":5,\"327\":2,\"444\":5}}],[\"module\",{\"0\":{\"459\":1},\"1\":{\"51\":1,\"200\":1,\"201\":1,\"203\":1,\"325\":1,\"326\":1,\"327\":2,\"328\":4,\"331\":1,\"444\":4,\"450\":1,\"453\":2,\"454\":3,\"455\":1,\"456\":1,\"457\":4,\"459\":2,\"460\":2,\"461\":1,\"463\":2,\"467\":4,\"468\":3,\"469\":6,\"471\":2,\"472\":2,\"473\":2,\"474\":2,\"475\":3,\"476\":3,\"479\":3,\"480\":1,\"482\":1,\"483\":1,\"485\":1,\"486\":1,\"487\":2,\"488\":1,\"489\":1,\"490\":1,\"491\":2,\"492\":1,\"493\":3,\"494\":3,\"495\":1,\"496\":1,\"497\":1,\"500\":1}}],[\"modes\",{\"1\":{\"497\":1}}],[\"mode\",{\"0\":{\"457\":1,\"489\":1},\"1\":{\"144\":1,\"152\":1,\"319\":4,\"453\":1,\"457\":4,\"469\":1,\"479\":3,\"489\":1}}],[\"model指令将表单元素与vue组件中的数据进行双向绑定\",{\"1\":{\"442\":1}}],[\"model\",{\"1\":{\"62\":2,\"70\":2,\"129\":1,\"144\":1,\"266\":2,\"592\":1}}],[\"model=\",{\"1\":{\"3\":4,\"70\":1,\"442\":1}}],[\"mounted\",{\"1\":{\"87\":4,\"114\":1}}],[\"mount\",{\"1\":{\"67\":1,\"101\":1}}],[\"mounting\",{\"1\":{\"22\":2}}],[\"mouseup\",{\"1\":{\"28\":1}}],[\"mousedown\",{\"1\":{\"28\":1}}],[\"mousemove\",{\"1\":{\"28\":1}}],[\"mouseout\",{\"1\":{\"28\":1}}],[\"mouseover\",{\"1\":{\"28\":1,\"287\":1}}],[\"mobx等状态管理库\",{\"1\":{\"9\":1}}],[\"major\",{\"1\":{\"574\":2,\"575\":1,\"576\":1,\"577\":2}}],[\"magic\",{\"1\":{\"521\":1}}],[\"magnis\",{\"1\":{\"154\":1}}],[\"manager\",{\"1\":{\"464\":1,\"506\":1,\"507\":1,\"510\":1}}],[\"manifest\",{\"1\":{\"243\":1,\"464\":1}}],[\"making\",{\"1\":{\"312\":2}}],[\"makes\",{\"1\":{\"171\":2,\"183\":2,\"312\":2}}],[\"mac等\",{\"1\":{\"513\":1}}],[\"mac和linux等多个平台\",{\"1\":{\"507\":1}}],[\"macro\",{\"1\":{\"271\":1}}],[\"macos等\",{\"1\":{\"131\":1}}],[\"male\",{\"1\":{\"259\":1}}],[\"malesuada\",{\"1\":{\"154\":1}}],[\"match头部\",{\"1\":{\"352\":1}}],[\"match\",{\"1\":{\"174\":3,\"256\":2,\"279\":1,\"355\":1,\"356\":2}}],[\"mathutils\",{\"1\":{\"183\":3}}],[\"math\",{\"1\":{\"169\":9,\"183\":2,\"202\":2,\"319\":1,\"330\":1,\"462\":3}}],[\"mattis\",{\"1\":{\"154\":1}}],[\"maecenas\",{\"1\":{\"154\":1}}],[\"mauris\",{\"1\":{\"154\":3}}],[\"master将当前分支的修改基于master分支进行重演\",{\"1\":{\"338\":1}}],[\"master\",{\"1\":{\"336\":2}}],[\"massa\",{\"1\":{\"154\":3}}],[\"mask\",{\"1\":{\"144\":1}}],[\"maxlength\",{\"1\":{\"217\":1}}],[\"maximus\",{\"1\":{\"154\":1}}],[\"max\",{\"1\":{\"144\":3,\"148\":2,\"157\":1,\"169\":2,\"171\":3,\"173\":1,\"217\":1,\"356\":2}}],[\"mark\",{\"1\":{\"276\":1}}],[\"markup\",{\"1\":{\"206\":1,\"371\":1}}],[\"markall\",{\"1\":{\"3\":2}}],[\"margin\",{\"1\":{\"143\":3,\"144\":2,\"145\":2,\"146\":3,\"161\":6}}],[\"mapping\",{\"1\":{\"600\":1}}],[\"mapped\",{\"1\":{\"319\":1}}],[\"maps可以映射压缩后的代码到原始源代码\",{\"1\":{\"500\":1}}],[\"maps\",{\"0\":{\"500\":1},\"1\":{\"500\":1}}],[\"maps来方便的追踪错误和警告\",{\"1\":{\"479\":1}}],[\"mapstatetoprops函数\",{\"1\":{\"407\":1}}],[\"mapstatetoprops\",{\"1\":{\"403\":2,\"405\":2,\"406\":2,\"407\":2}}],[\"mapstate\",{\"1\":{\"93\":2,\"429\":2,\"433\":1}}],[\"map选项来生成独立的源映射文件\",{\"1\":{\"468\":1}}],[\"mapmutations\",{\"1\":{\"431\":2,\"433\":2}}],[\"mapmutations和mapactions来获取或者修改状态\",{\"1\":{\"93\":1}}],[\"mapgetters\",{\"1\":{\"430\":2}}],[\"mapdispatchtoprops函数\",{\"1\":{\"407\":1}}],[\"mapdispatchtoprops\",{\"1\":{\"406\":2,\"407\":2}}],[\"map等\",{\"1\":{\"185\":1}}],[\"map等数据结构进行迭代\",{\"1\":{\"184\":1}}],[\"mapactions\",{\"1\":{\"93\":2,\"433\":2}}],[\"map\",{\"0\":{\"177\":1},\"1\":{\"5\":1,\"23\":1,\"177\":17,\"179\":1,\"278\":1,\"310\":1,\"385\":1,\"407\":2,\"468\":6,\"500\":1,\"571\":2}}],[\"main\",{\"1\":{\"3\":1,\"70\":1,\"93\":1,\"196\":4,\"415\":1,\"467\":1}}],[\"tmp\",{\"1\":{\"581\":1}}],[\"tcp连接建立\",{\"1\":{\"360\":1}}],[\"tls是ssl的后续版本\",{\"1\":{\"359\":1}}],[\"tls协议用于安全地传输数据\",{\"1\":{\"359\":1}}],[\"tls协议\",{\"1\":{\"359\":1}}],[\"tls协议进行加密和认证\",{\"1\":{\"352\":1}}],[\"tls协议对传输的数据进行加密和认证\",{\"1\":{\"351\":1}}],[\"txt\",{\"1\":{\"334\":2,\"509\":1,\"511\":3,\"594\":1,\"595\":1,\"596\":1,\"597\":5,\"598\":1}}],[\"txt表示不忽略以\",{\"1\":{\"334\":1}}],[\"txt表示所有以\",{\"1\":{\"334\":1}}],[\"txt为扩展名的文件\",{\"1\":{\"334\":2}}],[\"typings\",{\"1\":{\"325\":1}}],[\"types=\",{\"1\":{\"331\":1}}],[\"types\",{\"1\":{\"310\":1,\"319\":7,\"325\":1,\"444\":1}}],[\"typescript是javascript的一个超集\",{\"1\":{\"309\":1}}],[\"typescript\",{\"0\":{\"308\":1},\"1\":{\"310\":15,\"311\":6,\"312\":3,\"313\":2,\"314\":2,\"315\":3,\"316\":2,\"317\":2,\"318\":1,\"319\":1,\"320\":1,\"321\":1,\"322\":1,\"323\":2,\"324\":1,\"325\":6,\"326\":2,\"327\":1,\"328\":11,\"329\":4,\"330\":4,\"331\":3}}],[\"typescript支持\",{\"1\":{\"99\":1}}],[\"type来获取事件类型\",{\"1\":{\"263\":1}}],[\"typeerror\",{\"1\":{\"189\":1}}],[\"typedarray\",{\"0\":{\"181\":1},\"1\":{\"180\":1,\"181\":1}}],[\"typeof运算符\",{\"1\":{\"254\":1}}],[\"typeof\",{\"1\":{\"174\":1,\"189\":1,\"204\":1,\"253\":12,\"281\":1,\"317\":2,\"321\":5,\"329\":1}}],[\"type选择器选择同类型的元素中的唯一一个元素\",{\"1\":{\"159\":1}}],[\"type选择器选择同类型的元素中的最后一个元素\",{\"1\":{\"159\":1}}],[\"type选择器选择同类型的元素中的第一个元素\",{\"1\":{\"159\":1}}],[\"type选择器\",{\"1\":{\"159\":4}}],[\"type和\",{\"1\":{\"159\":1}}],[\"type\",{\"1\":{\"27\":2,\"41\":3,\"159\":2,\"216\":1,\"252\":1,\"263\":1,\"317\":1,\"318\":7,\"319\":13,\"321\":10,\"325\":1,\"352\":1,\"355\":1,\"360\":1,\"401\":4,\"402\":3,\"403\":3,\"405\":4,\"406\":3,\"407\":4,\"437\":1,\"482\":1,\"538\":4,\"603\":1,\"604\":2}}],[\"type=\",{\"1\":{\"3\":2,\"5\":1,\"30\":4,\"31\":4,\"41\":2,\"201\":1,\"203\":1,\"216\":3,\"225\":1,\"227\":4,\"282\":1,\"286\":1,\"346\":3,\"347\":1,\"442\":1,\"580\":3,\"581\":3}}],[\"tsx\",{\"1\":{\"328\":1}}],[\"tsconfig\",{\"1\":{\"328\":3,\"331\":1}}],[\"ts\",{\"1\":{\"325\":2,\"326\":4,\"327\":2,\"328\":2,\"331\":1,\"444\":3}}],[\"t\",{\"1\":{\"319\":3,\"320\":8}}],[\"tuesday\",{\"1\":{\"557\":1}}],[\"tuple\",{\"1\":{\"310\":1}}],[\"turpis\",{\"1\":{\"154\":1}}],[\"td>\",{\"1\":{\"214\":6}}],[\"tabindex\",{\"1\":{\"246\":1}}],[\"table>\",{\"1\":{\"214\":1}}],[\"table2\",{\"1\":{\"134\":2}}],[\"table1\",{\"1\":{\"134\":2}}],[\"table\",{\"1\":{\"134\":3,\"135\":8}}],[\"table语句\",{\"1\":{\"134\":3}}],[\"tagname\",{\"1\":{\"263\":1}}],[\"tag\",{\"1\":{\"206\":1}}],[\"task\",{\"1\":{\"198\":2,\"270\":8,\"271\":2}}],[\"task3\",{\"1\":{\"198\":4}}],[\"task2\",{\"1\":{\"198\":4}}],[\"task1\",{\"1\":{\"198\":4}}],[\"tailwindcss\",{\"1\":{\"160\":1}}],[\"tailwind\",{\"1\":{\"160\":2,\"474\":1}}],[\"target来获取触发事件的目标元素\",{\"1\":{\"263\":1}}],[\"target选择器用于选择url片段标识符\",{\"1\":{\"159\":1}}],[\"target选择器\",{\"1\":{\"159\":1}}],[\"target=\",{\"1\":{\"143\":2}}],[\"target<\",{\"1\":{\"119\":2}}],[\"target\",{\"1\":{\"5\":1,\"25\":2,\"27\":3,\"30\":1,\"31\":1,\"33\":2,\"52\":1,\"70\":1,\"119\":3,\"171\":2,\"188\":18,\"189\":63,\"191\":19,\"204\":8,\"263\":2,\"346\":1}}],[\"timing\",{\"1\":{\"144\":2,\"151\":4,\"152\":1}}],[\"timeout\",{\"1\":{\"260\":1,\"266\":1,\"271\":3}}],[\"time\",{\"1\":{\"136\":2,\"151\":2,\"366\":1,\"570\":1}}],[\"timestamp等\",{\"1\":{\"136\":1}}],[\"times\",{\"1\":{\"91\":1}}],[\"timeconsumingtask\",{\"1\":{\"57\":2}}],[\"timer\",{\"1\":{\"22\":1,\"260\":1}}],[\"title访问这个元数据\",{\"1\":{\"422\":1}}],[\"title>\",{\"1\":{\"70\":1,\"87\":1,\"207\":1,\"367\":1,\"581\":1}}],[\"title<\",{\"1\":{\"70\":1}}],[\"title=\",{\"1\":{\"70\":2}}],[\"title\",{\"1\":{\"3\":4,\"70\":1,\"129\":1,\"422\":1}}],[\"thunk中间件允许我们执行异步操作\",{\"1\":{\"405\":1}}],[\"thunk中间件处理异步操作\",{\"1\":{\"405\":1}}],[\"thunk中间件处理异步操作的例子\",{\"1\":{\"405\":1}}],[\"thunk库\",{\"1\":{\"405\":1}}],[\"thunk是redux官方推荐的中间件之一\",{\"1\":{\"405\":1}}],[\"thunk\",{\"1\":{\"405\":6,\"407\":1}}],[\"thunk或redux\",{\"1\":{\"401\":1,\"406\":1}}],[\"thinkphp\",{\"1\":{\"604\":2}}],[\"third\",{\"1\":{\"370\":1}}],[\"this的指向是根据函数执行时的上下文而动态确定的\",{\"1\":{\"262\":1}}],[\"this的指向可能会发生变化\",{\"1\":{\"262\":1}}],[\"this的指向取决于函数的调用方式\",{\"1\":{\"262\":1}}],[\"this通常指向调用该方法的对象\",{\"1\":{\"262\":1}}],[\"this指向新创建的对象\",{\"1\":{\"262\":1}}],[\"this指向该对象\",{\"1\":{\"262\":1}}],[\"this指向全局对象\",{\"1\":{\"262\":2}}],[\"this指向\",{\"0\":{\"262\":1}}],[\"thisarg\",{\"1\":{\"188\":3,\"189\":6,\"191\":1}}],[\"this\",{\"1\":{\"3\":17,\"15\":1,\"18\":1,\"19\":1,\"20\":6,\"22\":15,\"23\":4,\"26\":1,\"31\":9,\"47\":1,\"48\":1,\"50\":1,\"52\":3,\"70\":5,\"74\":1,\"93\":3,\"94\":1,\"95\":3,\"97\":2,\"98\":2,\"126\":2,\"129\":1,\"170\":5,\"171\":5,\"183\":28,\"184\":2,\"185\":2,\"188\":1,\"189\":3,\"191\":2,\"204\":1,\"259\":1,\"262\":12,\"267\":10,\"278\":4,\"310\":1,\"312\":19,\"317\":2,\"320\":2,\"323\":2,\"330\":2,\"387\":2,\"416\":2,\"420\":1,\"422\":2,\"429\":1,\"432\":1,\"440\":3,\"441\":6,\"442\":1,\"444\":10,\"537\":1}}],[\"through\",{\"1\":{\"407\":1}}],[\"throwerror\",{\"1\":{\"310\":2}}],[\"throw\",{\"1\":{\"183\":1,\"187\":1,\"196\":1,\"310\":1,\"365\":1,\"509\":1,\"511\":1,\"589\":1}}],[\"three\",{\"1\":{\"361\":1}}],[\"th>\",{\"1\":{\"214\":3}}],[\"that\",{\"1\":{\"189\":1}}],[\"the\",{\"1\":{\"70\":1,\"77\":1,\"183\":2,\"312\":6,\"389\":3,\"579\":3,\"583\":8,\"591\":1}}],[\"theme\",{\"1\":{\"41\":3}}],[\"themecomponent\",{\"1\":{\"41\":1}}],[\"themecontext\",{\"1\":{\"41\":3}}],[\"then\",{\"1\":{\"22\":2,\"23\":2,\"50\":2,\"51\":1,\"187\":1,\"192\":4,\"193\":10,\"196\":2,\"197\":2,\"198\":4,\"202\":1,\"264\":1,\"271\":3,\"272\":2,\"322\":1,\"405\":1,\"432\":3,\"433\":1,\"467\":1,\"493\":1,\"494\":1,\"511\":2}}],[\"term\",{\"1\":{\"483\":1}}],[\"termination\",{\"1\":{\"186\":2}}],[\"terser\",{\"1\":{\"469\":1,\"496\":1}}],[\"terserplugin\",{\"1\":{\"469\":2,\"496\":2}}],[\"testing\",{\"1\":{\"372\":5}}],[\"test\",{\"1\":{\"168\":15,\"279\":1,\"334\":2,\"454\":2,\"455\":2,\"463\":2,\"469\":1,\"471\":1,\"472\":1,\"473\":1,\"474\":1,\"476\":2,\"480\":1,\"487\":1,\"491\":1,\"510\":1,\"580\":4}}],[\"teleport>\",{\"1\":{\"119\":3}}],[\"teleport\",{\"1\":{\"119\":5}}],[\"template\",{\"1\":{\"91\":1,\"97\":1,\"116\":1,\"144\":1,\"147\":1,\"156\":3,\"167\":1,\"413\":2,\"456\":1,\"476\":1,\"488\":1}}],[\"template>\",{\"1\":{\"3\":3,\"4\":1,\"70\":2,\"92\":2,\"93\":5,\"94\":4,\"96\":2,\"98\":1,\"102\":1,\"105\":1,\"119\":2,\"126\":1,\"412\":2,\"415\":1,\"417\":1,\"420\":2,\"421\":1,\"422\":1,\"429\":3,\"430\":2,\"431\":2,\"432\":2,\"433\":2,\"440\":1,\"442\":2,\"444\":1}}],[\"textdecoration\",{\"1\":{\"407\":1}}],[\"text选择器\",{\"1\":{\"143\":1}}],[\"text类的元素\",{\"1\":{\"143\":1}}],[\"text=\",{\"1\":{\"70\":2}}],[\"textcontent\",{\"1\":{\"70\":2,\"265\":3,\"345\":1,\"347\":1}}],[\"textinput\",{\"1\":{\"41\":1}}],[\"textarea><br>\",{\"1\":{\"580\":1}}],[\"textarea>\",{\"1\":{\"30\":1}}],[\"text\",{\"1\":{\"5\":1,\"30\":2,\"31\":2,\"41\":2,\"47\":3,\"70\":6,\"82\":12,\"129\":3,\"136\":1,\"143\":1,\"144\":8,\"216\":2,\"265\":1,\"286\":2,\"288\":1,\"346\":1,\"347\":1,\"355\":2,\"401\":2,\"407\":2,\"431\":2,\"442\":1,\"580\":2}}],[\"triple\",{\"1\":{\"258\":2,\"313\":2}}],[\"trimend\",{\"1\":{\"167\":2}}],[\"trimstart\",{\"1\":{\"167\":2}}],[\"trim\",{\"1\":{\"3\":3,\"256\":2,\"548\":1,\"580\":1}}],[\"tr>\",{\"1\":{\"214\":3}}],[\"try\",{\"1\":{\"186\":2,\"187\":2,\"196\":3,\"198\":3,\"255\":2,\"272\":2,\"322\":2,\"432\":1,\"511\":1,\"588\":1,\"589\":1}}],[\"trailing\",{\"1\":{\"172\":1}}],[\"transport\",{\"1\":{\"359\":3}}],[\"transfer\",{\"1\":{\"351\":1,\"359\":1,\"371\":1}}],[\"transforms\",{\"0\":{\"150\":1}}],[\"transform\",{\"1\":{\"144\":3,\"150\":9}}],[\"translate\",{\"1\":{\"150\":2}}],[\"translatex\",{\"1\":{\"144\":3}}],[\"transaction\",{\"1\":{\"137\":1}}],[\"transitions\",{\"0\":{\"151\":1},\"1\":{\"152\":1}}],[\"transition>\",{\"1\":{\"98\":1}}],[\"transition\",{\"1\":{\"98\":2,\"150\":2,\"151\":15,\"152\":1,\"161\":6,\"395\":3}}],[\"trunc\",{\"1\":{\"169\":4}}],[\"true选项来启用\",{\"1\":{\"444\":1}}],[\"true表示异步\",{\"1\":{\"345\":1}}],[\"true或false\",{\"1\":{\"254\":1,\"341\":1}}],[\"true为1\",{\"1\":{\"252\":1}}],[\"true\",{\"1\":{\"3\":1,\"14\":1,\"22\":1,\"48\":1,\"51\":1,\"70\":2,\"82\":5,\"95\":2,\"102\":1,\"165\":1,\"167\":3,\"168\":10,\"169\":4,\"170\":3,\"172\":1,\"174\":2,\"176\":1,\"177\":1,\"178\":1,\"184\":3,\"185\":1,\"186\":2,\"187\":4,\"189\":6,\"191\":8,\"198\":1,\"249\":1,\"251\":3,\"253\":5,\"254\":6,\"262\":4,\"265\":1,\"267\":1,\"273\":1,\"282\":1,\"304\":1,\"310\":7,\"311\":3,\"315\":1,\"316\":1,\"318\":2,\"319\":3,\"323\":2,\"345\":1,\"346\":1,\"347\":1,\"348\":1,\"366\":1,\"385\":1,\"387\":1,\"393\":1,\"405\":1,\"420\":1,\"431\":2,\"438\":2,\"444\":2,\"461\":4,\"469\":1,\"490\":1,\"496\":1,\"519\":3,\"533\":1,\"541\":6,\"578\":1,\"600\":3,\"604\":1}}],[\"tree\",{\"0\":{\"462\":1},\"1\":{\"128\":1,\"129\":2,\"462\":5,\"469\":1,\"496\":1,\"497\":2}}],[\"trees\",{\"1\":{\"99\":1}}],[\"toyota\",{\"1\":{\"515\":1,\"534\":1,\"579\":2,\"583\":1}}],[\"tokens\",{\"1\":{\"370\":1}}],[\"tofixed\",{\"1\":{\"317\":1}}],[\"tolocaledatestring\",{\"1\":{\"367\":1}}],[\"tolocalelowercase\",{\"1\":{\"256\":2}}],[\"tolocaleuppercase\",{\"1\":{\"256\":2}}],[\"tolocalestring\",{\"1\":{\"70\":1,\"366\":1}}],[\"tolowercase\",{\"1\":{\"256\":2}}],[\"total\",{\"1\":{\"172\":3}}],[\"torvalds在2005年创建\",{\"1\":{\"333\":1}}],[\"tortor\",{\"1\":{\"154\":1}}],[\"torefs只会将顶层属性转化为ref对象\",{\"1\":{\"102\":1}}],[\"torefs函数的返回值是一个包含所有属性的ref对象\",{\"1\":{\"102\":1}}],[\"torefs\",{\"1\":{\"102\":3}}],[\"top\",{\"1\":{\"144\":3,\"147\":2,\"153\":1}}],[\"to=\",{\"1\":{\"119\":3,\"380\":3,\"382\":1,\"385\":1,\"388\":3,\"389\":1,\"393\":2,\"394\":2,\"396\":3,\"413\":2,\"421\":2,\"422\":2}}],[\"to则是用来描述元素在进入过渡状态和离开过渡状态时的样式变化\",{\"1\":{\"98\":1}}],[\"to等\",{\"1\":{\"98\":1}}],[\"to来定义过渡效果\",{\"1\":{\"98\":1}}],[\"touppercase\",{\"1\":{\"86\":1,\"204\":1,\"256\":2,\"313\":1,\"317\":1}}],[\"touchend\",{\"1\":{\"28\":1}}],[\"touchmove\",{\"1\":{\"28\":1}}],[\"touchstart\",{\"1\":{\"28\":1}}],[\"tostring\",{\"1\":{\"86\":1,\"253\":1,\"256\":2,\"267\":3}}],[\"to\",{\"1\":{\"3\":2,\"13\":1,\"14\":2,\"70\":1,\"93\":1,\"98\":2,\"125\":2,\"144\":1,\"153\":5,\"161\":6,\"188\":2,\"204\":1,\"264\":1,\"282\":1,\"327\":2,\"328\":1,\"331\":1,\"367\":1,\"369\":4,\"383\":1,\"384\":1,\"389\":3,\"393\":1,\"394\":1,\"421\":10,\"586\":1,\"597\":1}}],[\"toggletodo\",{\"1\":{\"407\":5}}],[\"togglecomponent\",{\"1\":{\"126\":2}}],[\"toggleelement\",{\"1\":{\"98\":2}}],[\"toggle\",{\"1\":{\"3\":4,\"407\":4}}],[\"todo<\",{\"1\":{\"5\":1,\"407\":1,\"431\":2}}],[\"todos\",{\"1\":{\"3\":7,\"5\":4,\"70\":2,\"407\":9,\"429\":2,\"430\":1,\"431\":1}}],[\"todoinput\",{\"1\":{\"3\":2,\"4\":3,\"5\":3}}],[\"todoitem\",{\"1\":{\"3\":5}}],[\"todo=\",{\"1\":{\"3\":2}}],[\"todolist\",{\"1\":{\"3\":2,\"4\":3,\"407\":5}}],[\"todo\",{\"0\":{\"3\":1},\"1\":{\"1\":1,\"2\":1,\"3\":20,\"5\":12,\"70\":3,\"401\":2,\"407\":24,\"429\":2,\"431\":4}}],[\"todomvc\",{\"0\":{\"0\":1},\"1\":{\"129\":1}}],[\"v8\",{\"1\":{\"506\":1}}],[\"v5\",{\"1\":{\"389\":1,\"396\":1}}],[\"v6已经引入了一些新的概念和api来管理路由\",{\"1\":{\"398\":1}}],[\"v6中的路由钩子\",{\"1\":{\"398\":1}}],[\"v6中的route组件具有一种新的特性\",{\"1\":{\"395\":1}}],[\"v6中路由过渡的一些新特性和变化\",{\"1\":{\"395\":1}}],[\"v6还引入了转场动画\",{\"1\":{\"395\":1}}],[\"v6还引入了过渡组件\",{\"1\":{\"395\":1}}],[\"v6引入了一些新的特性和变化\",{\"1\":{\"395\":1}}],[\"v6\",{\"1\":{\"389\":1,\"391\":1,\"393\":5,\"394\":2,\"396\":2,\"397\":2}}],[\"volvo\",{\"1\":{\"515\":1,\"534\":1}}],[\"volutpat\",{\"1\":{\"154\":1}}],[\"void\",{\"1\":{\"310\":9,\"311\":1,\"312\":8,\"313\":4,\"314\":1,\"315\":1,\"317\":2,\"320\":1,\"322\":1,\"329\":7,\"330\":1,\"444\":2}}],[\"version选项自定义缓存的存储位置和版本号\",{\"1\":{\"482\":1}}],[\"vendors\",{\"1\":{\"480\":1}}],[\"vendor\",{\"1\":{\"458\":1,\"480\":1}}],[\"vector\",{\"1\":{\"237\":1}}],[\"vestibulum\",{\"1\":{\"154\":1}}],[\"vel\",{\"1\":{\"154\":1}}],[\"velocity\",{\"1\":{\"98\":1}}],[\"vw\",{\"1\":{\"148\":1}}],[\"vw`\",{\"1\":{\"145\":1}}],[\"vh\",{\"1\":{\"145\":1,\"148\":1}}],[\"vm\",{\"1\":{\"74\":2,\"77\":1}}],[\"vnode\",{\"1\":{\"70\":4}}],[\"vjuː\",{\"1\":{\"60\":1}}],[\"valid\",{\"1\":{\"582\":1}}],[\"validate\",{\"1\":{\"580\":1,\"603\":6}}],[\"val\",{\"1\":{\"294\":3}}],[\"valueof\",{\"1\":{\"267\":3}}],[\"value表示当前迭代的值\",{\"1\":{\"184\":1}}],[\"value2\",{\"1\":{\"177\":4,\"179\":4,\"255\":1,\"259\":2}}],[\"value1\",{\"1\":{\"177\":3,\"179\":3,\"255\":1,\"259\":2}}],[\"values\",{\"1\":{\"134\":1,\"170\":3,\"171\":3,\"185\":3,\"323\":3,\"578\":2,\"600\":1}}],[\"value访问name属性的值\",{\"1\":{\"102\":1}}],[\"value可以改变响应式对象的值\",{\"1\":{\"102\":1}}],[\"value可以读取到响应式对象的值\",{\"1\":{\"102\":1}}],[\"value=3\",{\"1\":{\"102\":1}}],[\"value=\",{\"1\":{\"5\":1,\"30\":3,\"31\":1,\"37\":1,\"216\":1,\"580\":3,\"581\":1}}],[\"value\",{\"1\":{\"3\":4,\"5\":1,\"31\":2,\"33\":1,\"41\":1,\"52\":2,\"70\":3,\"86\":6,\"102\":6,\"174\":2,\"176\":3,\"177\":1,\"184\":10,\"185\":8,\"186\":9,\"187\":16,\"188\":4,\"189\":2,\"191\":4,\"193\":2,\"197\":3,\"198\":5,\"204\":2,\"252\":3,\"265\":4,\"282\":1,\"294\":1,\"305\":1,\"310\":4,\"311\":2,\"313\":6,\"316\":6,\"317\":4,\"319\":4,\"320\":7,\"323\":8,\"324\":8,\"347\":1,\"357\":1,\"431\":2,\"519\":1,\"582\":1}}],[\"variable\",{\"1\":{\"569\":1}}],[\"variables\",{\"1\":{\"521\":1,\"522\":1}}],[\"variablename\",{\"1\":{\"311\":2}}],[\"varius\",{\"1\":{\"154\":2}}],[\"varbinary等\",{\"1\":{\"136\":1}}],[\"varchar\",{\"1\":{\"134\":2}}],[\"var\",{\"1\":{\"57\":4,\"70\":9,\"74\":1,\"77\":1,\"228\":2,\"229\":2,\"249\":9,\"251\":11,\"252\":6,\"253\":3,\"254\":14,\"255\":2,\"256\":13,\"257\":22,\"258\":15,\"259\":3,\"260\":2,\"261\":3,\"262\":6,\"263\":6,\"265\":24,\"268\":2,\"273\":4,\"278\":10,\"282\":3,\"294\":1,\"295\":1,\"306\":2,\"307\":1,\"345\":5,\"346\":4,\"347\":7,\"348\":4,\"531\":4,\"532\":3,\"534\":1,\"535\":1,\"541\":14,\"571\":2,\"580\":2,\"603\":4}}],[\"vs\",{\"1\":{\"10\":2}}],[\"vite\",{\"0\":{\"445\":1}}],[\"vitae\",{\"1\":{\"154\":1}}],[\"visible\",{\"1\":{\"299\":1}}],[\"video>\",{\"1\":{\"223\":1}}],[\"video\",{\"1\":{\"219\":1,\"223\":1,\"300\":2}}],[\"viverra\",{\"1\":{\"154\":1}}],[\"virtualized\",{\"1\":{\"53\":1}}],[\"virtualized库\",{\"1\":{\"49\":1}}],[\"virtual\",{\"0\":{\"45\":1,\"128\":1},\"1\":{\"8\":1,\"9\":1,\"11\":1,\"45\":6,\"53\":1,\"128\":1}}],[\"views\",{\"1\":{\"367\":1}}],[\"viewport\",{\"1\":{\"145\":2}}],[\"view>标签进行嵌套路由的渲染\",{\"1\":{\"415\":1}}],[\"view>标签作为路由视图的占位符\",{\"1\":{\"412\":1}}],[\"view>来渲染嵌套的子路由\",{\"1\":{\"415\":1}}],[\"view>来展示路由组件\",{\"1\":{\"413\":1}}],[\"view><\",{\"1\":{\"412\":1,\"413\":1,\"415\":2,\"417\":1}}],[\"view>\",{\"1\":{\"126\":1,\"412\":1,\"413\":1,\"415\":1,\"417\":3}}],[\"view\",{\"1\":{\"3\":1,\"60\":1,\"62\":2,\"180\":5,\"182\":5,\"367\":1,\"414\":1,\"417\":2,\"592\":1}}],[\"v\",{\"1\":{\"3\":5,\"70\":52,\"77\":1,\"82\":9,\"85\":4,\"86\":1,\"91\":1,\"94\":2,\"98\":7,\"125\":10,\"336\":1,\"442\":1,\"507\":2}}],[\"vue的组件\",{\"1\":{\"440\":1}}],[\"vue的响应式系统会自动通知相关组件进行更新\",{\"1\":{\"428\":1}}],[\"vue的学习曲线比react更为平缓\",{\"1\":{\"10\":1}}],[\"vue组件中为一个按钮添加点击事件\",{\"1\":{\"420\":1}}],[\"vue路由使用路径匹配规则来根据用户访问的路径找到对应的组件\",{\"1\":{\"414\":1}}],[\"vue路由使用路由器\",{\"1\":{\"414\":1}}],[\"vuerouter\",{\"0\":{\"408\":1},\"1\":{\"412\":4,\"413\":2,\"415\":3,\"418\":3,\"421\":1}}],[\"vue3\",{\"1\":{\"100\":1,\"102\":2}}],[\"vue3相对vue2增加了那些东西\",{\"0\":{\"99\":1}}],[\"vue还可以与一些第三方动画库集成\",{\"1\":{\"98\":1}}],[\"vue还提供了一些javascript钩子函数来在过渡的不同阶段执行自定义逻辑\",{\"1\":{\"98\":1}}],[\"vue还支持具名插槽和作用域插槽\",{\"1\":{\"96\":1}}],[\"vue在过渡过程中会自动添加和删除css类名\",{\"1\":{\"98\":1}}],[\"vue通过内置的<transition>组件来实现css过渡效果\",{\"1\":{\"98\":1}}],[\"vue提供了内置的过渡组件和过渡类名\",{\"1\":{\"98\":2}}],[\"vue提供了丰富的功能和工具来构建spa\",{\"1\":{\"63\":1}}],[\"vue会根据一定的合并策略来处理\",{\"1\":{\"97\":1}}],[\"vue实例提供了一些特殊属性\",{\"1\":{\"93\":2}}],[\"vue实例的事件总线\",{\"1\":{\"93\":1}}],[\"vue过滤器是\",{\"1\":{\"86\":1}}],[\"vue自定义指令是用来操作\",{\"1\":{\"70\":1}}],[\"vue可以准确地确定元素之间的差异\",{\"1\":{\"70\":1}}],[\"vue可能具有更好的性能\",{\"1\":{\"10\":1}}],[\"vue使用key来检测哪些元素被添加\",{\"1\":{\"70\":1}}],[\"vue使用这个key来跟踪每个元素的身份\",{\"1\":{\"70\":1}}],[\"vue作为一种现代的javascript框架\",{\"1\":{\"63\":1}}],[\"vue也有一些优秀的插件和库可供选择\",{\"1\":{\"10\":1}}],[\"vuexmodule\",{\"1\":{\"444\":2}}],[\"vuex中的命名空间问题\",{\"1\":{\"444\":1}}],[\"vuex中的状态和数据流\",{\"0\":{\"428\":1}}],[\"vuex提供了插件系统\",{\"1\":{\"443\":1}}],[\"vuex允许通过使用插件来扩展其功能\",{\"1\":{\"437\":1}}],[\"vuex允许将状态\",{\"1\":{\"434\":1}}],[\"vuex保证了单向数据流的规范\",{\"1\":{\"428\":1}}],[\"vuex使用vue的响应式系统来追踪状态的变化\",{\"1\":{\"428\":1}}],[\"vuex使用一个响应式的state对象来存储应用程序的状态\",{\"1\":{\"426\":1}}],[\"vuex实现了状态的集中管理\",{\"1\":{\"426\":1}}],[\"vuex的模块化提供了一种结构化和可维护的方式来管理应用程序的状态\",{\"1\":{\"434\":1}}],[\"vuex的数据流可以概括为以下几个步骤\",{\"1\":{\"428\":1}}],[\"vuex的工作原理可以总结为以下几个步骤\",{\"1\":{\"426\":1}}],[\"vuex的出现就是为了解决这个问题\",{\"1\":{\"425\":1}}],[\"vuex包含以下几个核心概念\",{\"1\":{\"425\":1}}],[\"vuex是一个专为vue\",{\"1\":{\"425\":1}}],[\"vuex是vue官方提供的用于管理应用状态的库\",{\"1\":{\"93\":1}}],[\"vuex状态管理\",{\"1\":{\"93\":1}}],[\"vuex\",{\"0\":{\"424\":1},\"1\":{\"2\":1,\"3\":1,\"93\":6,\"426\":1,\"427\":9,\"429\":2,\"430\":2,\"431\":2,\"432\":1,\"433\":3,\"437\":1,\"438\":3,\"439\":4,\"440\":6,\"444\":8}}],[\"vue\",{\"0\":{\"1\":1,\"4\":1,\"59\":1},\"1\":{\"1\":2,\"3\":7,\"4\":2,\"5\":1,\"10\":1,\"53\":1,\"61\":1,\"63\":2,\"65\":2,\"67\":2,\"68\":1,\"70\":21,\"74\":1,\"77\":1,\"82\":2,\"86\":3,\"87\":4,\"88\":10,\"90\":1,\"91\":3,\"92\":2,\"93\":7,\"94\":2,\"95\":2,\"96\":2,\"97\":1,\"99\":9,\"100\":2,\"101\":2,\"102\":9,\"105\":1,\"107\":1,\"110\":11,\"112\":1,\"116\":1,\"409\":3,\"410\":1,\"412\":9,\"413\":4,\"415\":12,\"416\":1,\"418\":4,\"419\":1,\"420\":4,\"422\":1,\"423\":3,\"427\":10,\"438\":1,\"440\":8,\"444\":7,\"458\":1}}],[\">error\",{\"1\":{\"600\":3}}],[\">num\",{\"1\":{\"600\":1}}],[\">query\",{\"1\":{\"600\":4}}],[\">radius\",{\"1\":{\"591\":4}}],[\">reverse\",{\"1\":{\"77\":1}}],[\">reset\",{\"1\":{\"41\":1}}],[\">brake\",{\"1\":{\"583\":1}}],[\">brand\",{\"1\":{\"579\":2,\"583\":1}}],[\">price\",{\"1\":{\"583\":1}}],[\">position++\",{\"1\":{\"582\":1}}],[\">position\",{\"1\":{\"582\":5}}],[\">paint\",{\"1\":{\"579\":2}}],[\">选择文件\",{\"1\":{\"581\":1}}],[\">表单元素和相应的服务器端处理来实现文件上传功能\",{\"1\":{\"581\":1}}],[\">留言\",{\"1\":{\"580\":1}}],[\">data\",{\"1\":{\"582\":3}}],[\">doc\",{\"1\":{\"538\":1}}],[\">decrement<\",{\"1\":{\"41\":1,\"42\":1,\"403\":1,\"406\":1,\"440\":1}}],[\">delete<\",{\"1\":{\"5\":1}}],[\">update<\",{\"1\":{\"442\":1}}],[\">users<\",{\"1\":{\"388\":1}}],[\">fetch\",{\"1\":{\"432\":2,\"433\":1,\"600\":1}}],[\">focus\",{\"1\":{\"41\":1}}],[\">focus<\",{\"1\":{\"41\":1}}],[\">查看用户详情<\",{\"1\":{\"420\":1}}],[\">联系<\",{\"1\":{\"396\":1}}],[\">联系我们<\",{\"1\":{\"232\":1}}],[\">关于<\",{\"1\":{\"396\":1,\"413\":1}}],[\">关于我们<\",{\"1\":{\"232\":1}}],[\">首页<\",{\"1\":{\"396\":1,\"413\":1}}],[\">跳转到其他路由<\",{\"1\":{\"393\":3}}],[\">go\",{\"1\":{\"383\":1,\"384\":1,\"393\":2}}],[\">accelerate\",{\"1\":{\"583\":1}}],[\">active<\",{\"1\":{\"407\":1}}],[\">async\",{\"1\":{\"444\":1}}],[\">all<\",{\"1\":{\"407\":1}}],[\">about<\",{\"1\":{\"380\":1,\"384\":1,\"388\":1,\"394\":1,\"421\":1,\"422\":1}}],[\">add\",{\"1\":{\"5\":1,\"407\":1,\"431\":2}}],[\">home<\",{\"1\":{\"380\":1,\"384\":1,\"388\":1,\"421\":1,\"422\":1}}],[\">hello\",{\"1\":{\"70\":1,\"142\":1}}],[\">加载更多<\",{\"1\":{\"348\":1}}],[\">获取数据<\",{\"1\":{\"345\":1}}],[\">获取位置<\",{\"1\":{\"229\":1}}],[\">主页<\",{\"1\":{\"232\":1}}],[\">web\",{\"1\":{\"231\":1}}],[\">welcome\",{\"1\":{\"14\":2}}],[\">25<\",{\"1\":{\"231\":1}}],[\">john\",{\"1\":{\"231\":1}}],[\">点击这里<\",{\"1\":{\"224\":1}}],[\">邮箱\",{\"1\":{\"216\":1,\"580\":1}}],[\">姓名\",{\"1\":{\"216\":1,\"580\":1}}],[\">标签加载和运行es模块\",{\"1\":{\"203\":1}}],[\">标签将脚本文件标记为模块\",{\"1\":{\"201\":1}}],[\">item\",{\"1\":{\"155\":3,\"156\":4}}],[\">increment<\",{\"1\":{\"20\":1,\"22\":1,\"41\":3,\"42\":1,\"97\":1,\"102\":1,\"403\":1,\"406\":1,\"429\":1,\"431\":2,\"440\":1,\"444\":1}}],[\">=\",{\"1\":{\"135\":1,\"170\":2,\"254\":3,\"555\":1,\"558\":1}}],[\">切换组件<\",{\"1\":{\"126\":1}}],[\">log\",{\"1\":{\"97\":1,\"431\":2}}],[\">load\",{\"1\":{\"51\":1}}],[\">stop\",{\"1\":{\"583\":1}}],[\">start\",{\"1\":{\"583\":1}}],[\">startengine\",{\"1\":{\"579\":4}}],[\">submit<\",{\"1\":{\"442\":1}}],[\">set\",{\"1\":{\"431\":2,\"433\":1}}],[\">send\",{\"1\":{\"93\":2}}],[\">switch\",{\"1\":{\"94\":1}}],[\">全局注册和局部注册组件都可以在vue应用中使用组件\",{\"1\":{\"91\":1}}],[\">总结\",{\"1\":{\"91\":1}}],[\">you\",{\"1\":{\"91\":1}}],[\">现在你看到我了<\",{\"1\":{\"70\":1}}],[\">逆转消息<\",{\"1\":{\"70\":2}}],[\">鼠标悬停几秒钟查看此处动态绑定的提示信息\",{\"1\":{\"70\":2}}],[\">teleport\",{\"1\":{\"119\":2}}],[\">text\",{\"1\":{\"15\":1}}],[\">toggle\",{\"1\":{\"98\":1}}],[\">this\",{\"1\":{\"41\":1,\"70\":1,\"98\":1}}],[\">close\",{\"1\":{\"600\":1}}],[\">click\",{\"1\":{\"15\":1,\"25\":3,\"26\":3,\"36\":1,\"263\":1}}],[\">connect\",{\"1\":{\"600\":2}}],[\">contact<\",{\"1\":{\"380\":1,\"384\":1}}],[\">color\",{\"1\":{\"535\":2,\"579\":4,\"583\":1}}],[\">completed<\",{\"1\":{\"407\":1}}],[\">change\",{\"1\":{\"35\":1,\"93\":1}}],[\">提交<\",{\"1\":{\"30\":3,\"31\":2,\"346\":1}}],[\">英国<\",{\"1\":{\"30\":1}}],[\">美国<\",{\"1\":{\"30\":1}}],[\">中国<\",{\"1\":{\"30\":1}}],[\">mark\",{\"1\":{\"3\":1}}],[\"><br>\",{\"1\":{\"581\":1}}],[\"><br><br>\",{\"1\":{\"216\":2}}],[\"><\",{\"1\":{\"3\":1,\"15\":2,\"30\":1,\"65\":1,\"70\":8,\"82\":7,\"85\":2,\"87\":1,\"93\":2,\"94\":1,\"126\":1,\"150\":1,\"151\":1,\"152\":1,\"219\":1,\"228\":1,\"284\":1,\"345\":1,\"347\":1,\"348\":1,\"417\":2,\"580\":6}}],[\">\",{\"1\":{\"3\":11,\"4\":3,\"5\":3,\"14\":2,\"15\":3,\"19\":2,\"20\":1,\"21\":1,\"23\":4,\"25\":2,\"30\":8,\"31\":4,\"35\":1,\"36\":1,\"37\":2,\"41\":4,\"51\":3,\"66\":1,\"69\":1,\"70\":31,\"74\":1,\"77\":1,\"82\":2,\"87\":3,\"91\":1,\"92\":2,\"98\":1,\"119\":8,\"133\":1,\"134\":1,\"135\":3,\"142\":1,\"143\":3,\"154\":1,\"155\":1,\"156\":1,\"170\":4,\"208\":3,\"212\":1,\"213\":2,\"216\":1,\"218\":3,\"219\":2,\"221\":1,\"225\":1,\"227\":4,\"231\":1,\"235\":2,\"254\":7,\"286\":1,\"299\":1,\"321\":2,\"326\":2,\"331\":5,\"346\":3,\"347\":1,\"368\":1,\"377\":1,\"378\":4,\"379\":3,\"381\":1,\"382\":2,\"384\":4,\"385\":5,\"386\":2,\"387\":1,\"388\":3,\"389\":8,\"391\":2,\"392\":12,\"394\":5,\"396\":9,\"397\":5,\"403\":2,\"406\":3,\"407\":3,\"412\":2,\"413\":2,\"415\":1,\"417\":3,\"420\":1,\"442\":1,\"444\":2,\"514\":2,\"515\":2,\"517\":1,\"519\":1,\"520\":1,\"524\":3,\"525\":1,\"526\":1,\"528\":2,\"530\":1,\"531\":1,\"532\":1,\"534\":1,\"535\":1,\"537\":1,\"538\":1,\"540\":1,\"553\":2,\"579\":1,\"580\":9,\"581\":3,\"599\":2,\"600\":1}}],[\"eod\",{\"1\":{\"528\":1}}],[\"eot\",{\"1\":{\"528\":1}}],[\"eof\",{\"0\":{\"527\":1},\"1\":{\"527\":1,\"528\":5}}],[\"eol\",{\"1\":{\"524\":1,\"540\":1,\"541\":6,\"583\":4}}],[\"eval\",{\"1\":{\"468\":5,\"500\":1}}],[\"eventstream\",{\"1\":{\"198\":3}}],[\"events\",{\"1\":{\"144\":1}}],[\"eventa\",{\"1\":{\"38\":2}}],[\"eventbus\",{\"1\":{\"38\":8,\"93\":3}}],[\"eventtype\",{\"1\":{\"27\":1}}],[\"event\",{\"0\":{\"264\":1},\"1\":{\"22\":1,\"25\":11,\"27\":5,\"30\":4,\"31\":6,\"33\":1,\"38\":1,\"57\":4,\"70\":1,\"87\":2,\"198\":3,\"263\":11,\"264\":1,\"270\":1,\"271\":1,\"272\":9,\"294\":2,\"322\":3,\"346\":1}}],[\"eventemitter\",{\"1\":{\"22\":1,\"198\":1}}],[\"echo\",{\"1\":{\"514\":1,\"515\":12,\"519\":4,\"520\":1,\"524\":4,\"525\":8,\"526\":1,\"528\":2,\"530\":3,\"531\":3,\"532\":2,\"537\":1,\"538\":3,\"539\":3,\"540\":4,\"541\":20,\"543\":1,\"544\":1,\"545\":1,\"546\":1,\"547\":2,\"548\":1,\"549\":1,\"551\":5,\"552\":1,\"553\":8,\"555\":2,\"556\":3,\"557\":3,\"558\":1,\"560\":1,\"561\":1,\"562\":1,\"563\":1,\"564\":2,\"566\":1,\"568\":1,\"569\":1,\"575\":2,\"576\":2,\"577\":2,\"579\":2,\"580\":6,\"581\":2,\"582\":2,\"583\":4,\"590\":2,\"591\":2,\"598\":3,\"599\":2,\"600\":9}}],[\"eclipse的插件开发框架等\",{\"1\":{\"464\":1}}],[\"ecma\",{\"1\":{\"164\":4}}],[\"ecmascript\",{\"0\":{\"162\":1,\"164\":1},\"1\":{\"163\":1,\"164\":3,\"191\":1}}],[\"ejs1\",{\"1\":{\"367\":1}}],[\"ejs0\",{\"1\":{\"367\":1}}],[\"ejs\",{\"1\":{\"367\":7}}],[\"eating\",{\"1\":{\"591\":1}}],[\"eat\",{\"1\":{\"591\":2}}],[\"east\",{\"1\":{\"314\":7}}],[\"ease\",{\"1\":{\"144\":1,\"151\":3,\"152\":2}}],[\"each\",{\"1\":{\"291\":2}}],[\"early\",{\"1\":{\"186\":2}}],[\"e74c3c\",{\"1\":{\"161\":6}}],[\"etag\",{\"1\":{\"355\":1,\"356\":2}}],[\"et\",{\"1\":{\"154\":1}}],[\"eregi\",{\"1\":{\"604\":1}}],[\"ereg\",{\"1\":{\"604\":1}}],[\"ereg函数系列\",{\"1\":{\"604\":1}}],[\"err\",{\"1\":{\"365\":2,\"366\":2,\"369\":6,\"509\":3,\"511\":7}}],[\"errors\",{\"1\":{\"586\":2}}],[\"errorhandler\",{\"1\":{\"365\":1,\"366\":2}}],[\"errorclass\",{\"1\":{\"82\":8}}],[\"error\",{\"1\":{\"50\":4,\"51\":2,\"183\":1,\"187\":3,\"192\":5,\"193\":21,\"196\":13,\"198\":8,\"255\":1,\"264\":4,\"272\":4,\"282\":1,\"292\":2,\"310\":1,\"314\":1,\"322\":10,\"365\":1,\"366\":2,\"369\":2,\"405\":9,\"421\":1,\"432\":11,\"433\":3,\"467\":3,\"493\":3,\"494\":3,\"497\":1,\"511\":2,\"580\":2,\"581\":1,\"586\":3,\"587\":1,\"600\":2,\"604\":4}}],[\"erat\",{\"1\":{\"154\":2}}],[\"efficitur\",{\"1\":{\"154\":1}}],[\"effect\",{\"1\":{\"110\":1}}],[\"ensure\",{\"1\":{\"480\":1}}],[\"env参数传入的全局变量等\",{\"1\":{\"477\":1}}],[\"env\",{\"1\":{\"457\":6,\"469\":2,\"471\":1,\"521\":1}}],[\"environment\",{\"1\":{\"280\":4}}],[\"engine\",{\"1\":{\"367\":1,\"579\":3}}],[\"encode\",{\"1\":{\"604\":3}}],[\"encoding\",{\"1\":{\"355\":1}}],[\"enctype=\",{\"1\":{\"581\":1}}],[\"encapsulation\",{\"1\":{\"183\":1,\"312\":1,\"583\":1}}],[\"enum\",{\"0\":{\"537\":1},\"1\":{\"310\":3,\"314\":8,\"537\":2}}],[\"enumerate\",{\"1\":{\"191\":3}}],[\"enumeration\",{\"1\":{\"136\":1}}],[\"enumerable\",{\"1\":{\"191\":2}}],[\"enhanced\",{\"1\":{\"172\":1}}],[\"entry\",{\"0\":{\"485\":1},\"1\":{\"450\":1,\"453\":1,\"454\":2,\"458\":1,\"475\":1,\"480\":1,\"485\":1}}],[\"entries\",{\"1\":{\"170\":3,\"171\":3}}],[\"enter>\",{\"1\":{\"124\":2}}],[\"enter和\",{\"1\":{\"98\":1}}],[\"enter和v\",{\"1\":{\"98\":1}}],[\"enter钩子函数执行一些前置操作\",{\"1\":{\"98\":1}}],[\"enter\",{\"1\":{\"98\":6,\"125\":5}}],[\"enter=\",{\"1\":{\"3\":2}}],[\"enabled选择器用于选择可用\",{\"1\":{\"159\":1}}],[\"enabled和\",{\"1\":{\"159\":1}}],[\"enim\",{\"1\":{\"154\":2}}],[\"end>home<\",{\"1\":{\"394\":1}}],[\"endswith\",{\"1\":{\"167\":2,\"256\":2}}],[\"end\",{\"1\":{\"153\":2,\"155\":3,\"197\":1,\"256\":3,\"257\":1,\"270\":3,\"271\":3,\"394\":1}}],[\"en\",{\"1\":{\"87\":1,\"235\":1}}],[\"es\",{\"1\":{\"327\":3}}],[\"es模块化的语法更加丰富和强大\",{\"1\":{\"203\":1}}],[\"es模块化是javascript的官方模块化标准\",{\"1\":{\"203\":1}}],[\"es模块化支持使用import\",{\"1\":{\"203\":1}}],[\"es模块化支持编译时静态分析\",{\"1\":{\"203\":1}}],[\"es模块化采用的是实时绑定\",{\"1\":{\"203\":1}}],[\"es模块化采用import和export关键字进行模块的导入和导出\",{\"1\":{\"203\":1}}],[\"es模块化\",{\"0\":{\"201\":1}}],[\"es8\",{\"1\":{\"195\":1}}],[\"es7\",{\"1\":{\"170\":1}}],[\"es2017\",{\"1\":{\"195\":1,\"272\":1}}],[\"es2015\",{\"1\":{\"172\":1}}],[\"es2016引入了指数运算符\",{\"1\":{\"169\":1}}],[\"es2018\",{\"1\":{\"168\":5}}],[\"es2018中引入了后行断言\",{\"1\":{\"168\":1}}],[\"es2018中引入了s修饰符\",{\"1\":{\"168\":1}}],[\"es6装饰器是一种用于增强或修改类\",{\"1\":{\"204\":1}}],[\"es6模块\",{\"1\":{\"448\":1}}],[\"es6模块在编译阶段就可以确定模块的依赖关系\",{\"1\":{\"201\":1}}],[\"es6模块支持运行时动态加载模块\",{\"1\":{\"201\":1}}],[\"es6模块使用import和export关键字来导入和导出模块\",{\"1\":{\"201\":1}}],[\"es6模块化允许导入并执行其他模块中的代码\",{\"1\":{\"202\":1}}],[\"es6模块化允许在一个模块中嵌套导入和导出其他模块内容\",{\"1\":{\"202\":1}}],[\"es6模块化支持使用import\",{\"1\":{\"202\":1}}],[\"es6模块化还支持导入整个模块\",{\"1\":{\"202\":1}}],[\"es6模块化还支持默认导出和导入\",{\"1\":{\"202\":1}}],[\"es6模块化提供了一种强大且标准的方式来开发和组织javascript代码\",{\"1\":{\"201\":1}}],[\"es6模块化在浏览器中的使用需要使用<script\",{\"1\":{\"201\":1}}],[\"es6模块化的特点和优势包括\",{\"1\":{\"201\":1}}],[\"es6模块化是javascript的官方模块化标准\",{\"1\":{\"201\":1}}],[\"es6模块化已成为主流\",{\"1\":{\"200\":1}}],[\"es6模块等\",{\"1\":{\"56\":1}}],[\"es6提供了一些内置的symbol常量\",{\"1\":{\"174\":1}}],[\"es6提供了一些额外的函数支持\",{\"1\":{\"172\":1}}],[\"es6还提供了一系列内置的symbol常量\",{\"1\":{\"174\":1}}],[\"es6规定函数有一个名为name的只读属性\",{\"1\":{\"172\":1}}],[\"es6允许在函数参数列表的尾部添加逗号\",{\"1\":{\"172\":1}}],[\"es6允许在函数参数中指定默认值\",{\"1\":{\"172\":1}}],[\"es6引入了生成器\",{\"1\":{\"186\":1}}],[\"es6引入了\",{\"1\":{\"185\":1}}],[\"es6引入了类\",{\"1\":{\"183\":1}}],[\"es6引入了bigint数据类型\",{\"1\":{\"173\":1}}],[\"es6引入了参数解构赋值的语法\",{\"1\":{\"172\":1}}],[\"es6引入了剩余参数的概念\",{\"1\":{\"172\":1}}],[\"es6引入了一些新的数据结构\",{\"1\":{\"175\":1}}],[\"es6引入了一些便利的语法来创建和操作对象字面量\",{\"1\":{\"171\":1}}],[\"es6引入了一种新的原始数据类型\",{\"1\":{\"171\":1}}],[\"es6引入了number\",{\"1\":{\"169\":1}}],[\"es6引入了y修饰符\",{\"1\":{\"168\":1}}],[\"es6引入了u修饰符\",{\"1\":{\"168\":1}}],[\"es6引入了regexp构造函数的扩展\",{\"1\":{\"168\":1}}],[\"es6引入了模板字符串\",{\"1\":{\"167\":1}}],[\"es6对对象的处理也做了一些重要的改进和拓展\",{\"1\":{\"171\":1}}],[\"es6对数组做了许多重要的改进和拓展\",{\"1\":{\"170\":1}}],[\"es6对数字的拓展主要包括以下几个方面\",{\"1\":{\"169\":1}}],[\"es6对正则表达式进行了一些重要的改进和拓展\",{\"1\":{\"168\":1}}],[\"es6对字符串的常用方法进行了扩展\",{\"1\":{\"167\":1}}],[\"es6对字符串的拓展主要包括以下几个方面\",{\"1\":{\"167\":1}}],[\"es6中的一些内置对象\",{\"1\":{\"185\":1}}],[\"es6中的字符串可以被迭代遍历\",{\"1\":{\"167\":1}}],[\"es6中引入了二进制和八进制的新表示法\",{\"1\":{\"169\":1}}],[\"es6中可以使用\",{\"1\":{\"167\":1}}],[\"es6中可以使用解构赋值的方式对字符串进行拆分\",{\"1\":{\"167\":1}}],[\"es6\",{\"1\":{\"163\":1,\"172\":1,\"190\":1,\"192\":1,\"194\":1,\"197\":1,\"281\":1,\"331\":1}}],[\"eslint\",{\"1\":{\"2\":1}}],[\"empty\",{\"1\":{\"580\":4}}],[\"empty选择器用于选择没有子元素或者没有文本内容的元素\",{\"1\":{\"159\":1}}],[\"empty选择器\",{\"1\":{\"159\":1}}],[\"em\",{\"1\":{\"145\":1}}],[\"emitter\",{\"1\":{\"198\":3}}],[\"emit方法来发布指定的事件\",{\"1\":{\"38\":1}}],[\"emit\",{\"1\":{\"38\":1,\"198\":1}}],[\"email\",{\"1\":{\"30\":1,\"102\":2,\"134\":1,\"216\":5,\"225\":1,\"227\":1,\"282\":1,\"346\":3,\"405\":1,\"580\":4,\"600\":3,\"603\":1}}],[\"electron\",{\"1\":{\"390\":1}}],[\"element=\",{\"1\":{\"389\":4,\"391\":1,\"392\":6,\"394\":2,\"396\":4,\"397\":2}}],[\"element2\",{\"1\":{\"257\":2}}],[\"element2可以选择与element1后面的同一父元素中的所有element2\",{\"1\":{\"159\":1}}],[\"element1\",{\"1\":{\"159\":1,\"257\":2}}],[\"elementum\",{\"1\":{\"154\":1}}],[\"element节点又有子节点和兄弟节点\",{\"1\":{\"129\":1}}],[\"element<\",{\"1\":{\"98\":1}}],[\"elements可以获取所有的表单元素\",{\"1\":{\"33\":1}}],[\"elements\",{\"1\":{\"25\":1,\"33\":1,\"210\":2,\"265\":1}}],[\"element\",{\"1\":{\"14\":1,\"16\":4,\"21\":2,\"98\":2,\"129\":7,\"143\":2,\"151\":1,\"170\":8,\"257\":1,\"265\":21,\"389\":2,\"394\":1,\"397\":1}}],[\"elit\",{\"1\":{\"154\":2}}],[\"ellipse\",{\"1\":{\"153\":1}}],[\"ellipsis\",{\"1\":{\"144\":1}}],[\"el\",{\"1\":{\"70\":18,\"74\":1,\"77\":1,\"82\":2,\"87\":2,\"89\":1,\"91\":2}}],[\"elseif\",{\"1\":{\"556\":1,\"580\":1}}],[\"elseif语句用于在之前的条件为假且当前条件为真时执行一段代码\",{\"1\":{\"556\":1}}],[\"elseif语句\",{\"0\":{\"556\":1}}],[\"else语句\",{\"1\":{\"255\":2}}],[\"else>你又看到我了<\",{\"1\":{\"70\":1}}],[\"else\",{\"1\":{\"23\":1,\"52\":2,\"184\":1,\"185\":1,\"196\":1,\"198\":1,\"229\":1,\"255\":4,\"281\":1,\"282\":1,\"314\":2,\"317\":3,\"319\":1,\"323\":1,\"329\":2,\"369\":2,\"385\":1,\"421\":3,\"540\":1,\"553\":4,\"555\":1,\"556\":1,\"581\":1,\"598\":1,\"600\":5}}],[\"exit\",{\"1\":{\"580\":1}}],[\"exists\",{\"1\":{\"570\":1,\"598\":2}}],[\"existence\",{\"1\":{\"189\":2}}],[\"existingdatabase\",{\"1\":{\"133\":2}}],[\"exact\",{\"1\":{\"378\":1,\"388\":1}}],[\"examplemodule\",{\"1\":{\"444\":4}}],[\"example\",{\"1\":{\"41\":1,\"74\":2,\"77\":2,\"102\":2,\"129\":1,\"165\":1,\"196\":1,\"204\":9,\"219\":1,\"224\":1,\"271\":3,\"282\":1,\"286\":2,\"348\":2,\"352\":1,\"444\":6,\"594\":1,\"595\":1,\"596\":1,\"598\":1,\"599\":5,\"600\":1}}],[\"ext\",{\"1\":{\"463\":1,\"473\":1}}],[\"extract<numberorstring\",{\"1\":{\"321\":1}}],[\"extract\",{\"1\":{\"321\":1,\"476\":1}}],[\"extended\",{\"1\":{\"366\":1}}],[\"extends\",{\"1\":{\"13\":1,\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"23\":1,\"26\":1,\"31\":2,\"47\":1,\"48\":1,\"50\":1,\"171\":1,\"183\":4,\"312\":6,\"317\":1,\"319\":2,\"320\":2,\"324\":1,\"330\":1,\"387\":1,\"444\":2,\"589\":1,\"591\":1}}],[\"extension\",{\"1\":{\"464\":1}}],[\"extensions\",{\"1\":{\"189\":2,\"328\":1,\"454\":1,\"460\":3}}],[\"extensible\",{\"1\":{\"189\":2,\"371\":1}}],[\"external\",{\"1\":{\"142\":1}}],[\"exception\",{\"1\":{\"255\":1,\"588\":1,\"589\":1}}],[\"exclude<numberorstring\",{\"1\":{\"321\":1}}],[\"exclude\",{\"1\":{\"126\":1,\"321\":1,\"454\":1,\"471\":1,\"476\":1,\"487\":1}}],[\"execution\",{\"1\":{\"271\":1}}],[\"executor\",{\"1\":{\"192\":1}}],[\"exec\",{\"1\":{\"168\":4}}],[\"ex\",{\"1\":{\"145\":1,\"154\":2}}],[\"express安装express\",{\"1\":{\"512\":1}}],[\"express是一个流行的node\",{\"1\":{\"512\":1}}],[\"express框架\",{\"0\":{\"512\":1}}],[\"express模块\",{\"1\":{\"509\":1}}],[\"express\",{\"0\":{\"362\":1},\"1\":{\"363\":8,\"364\":16,\"365\":4,\"366\":10,\"367\":6,\"368\":9,\"506\":1,\"509\":4,\"512\":4}}],[\"expressions\",{\"1\":{\"258\":1,\"604\":1}}],[\"expression\",{\"1\":{\"255\":1,\"279\":1,\"313\":2}}],[\"expires\",{\"1\":{\"356\":2}}],[\"explicit\",{\"1\":{\"252\":1}}],[\"explorer版本中引入的盒模型\",{\"1\":{\"146\":1}}],[\"expensivecomponent\",{\"1\":{\"41\":1}}],[\"export语法来引入和导出模块\",{\"1\":{\"448\":1}}],[\"exports关键字进行模块的导入和导出\",{\"1\":{\"203\":1}}],[\"exports将add和subtract函数作为一个对象导出\",{\"1\":{\"200\":1}}],[\"exports\",{\"1\":{\"200\":1,\"450\":1,\"454\":1,\"456\":1,\"457\":3,\"460\":1,\"461\":1,\"463\":1,\"469\":5,\"471\":1,\"472\":1,\"473\":1,\"474\":1,\"475\":1,\"476\":2,\"479\":3,\"480\":1,\"482\":1,\"483\":1,\"485\":1,\"486\":1,\"487\":1,\"488\":1,\"489\":1,\"490\":1,\"491\":1,\"492\":1,\"495\":1,\"496\":1,\"500\":1}}],[\"exports或exports关键字导出模块的内容\",{\"1\":{\"200\":1}}],[\"export\",{\"1\":{\"3\":4,\"4\":1,\"5\":2,\"35\":2,\"36\":2,\"37\":3,\"38\":1,\"51\":2,\"92\":2,\"93\":6,\"94\":2,\"95\":1,\"98\":1,\"102\":1,\"105\":1,\"117\":2,\"126\":1,\"201\":2,\"202\":7,\"278\":1,\"326\":4,\"327\":3,\"329\":2,\"388\":1,\"389\":1,\"397\":1,\"403\":3,\"405\":4,\"406\":3,\"407\":6,\"416\":1,\"418\":1,\"420\":2,\"421\":1,\"422\":1,\"427\":1,\"429\":3,\"430\":2,\"431\":2,\"432\":2,\"433\":3,\"440\":2,\"442\":2,\"444\":3,\"462\":2}}],[\"e\",{\"1\":{\"5\":2,\"167\":1,\"170\":2,\"173\":1,\"185\":1,\"346\":3,\"586\":1}}],[\"editinput\",{\"1\":{\"3\":2}}],[\"editing\",{\"1\":{\"3\":6}}],[\"edit\",{\"1\":{\"3\":1}}],[\"edittodo\",{\"1\":{\"3\":2}}],[\"<<<eof\",{\"1\":{\"528\":3}}],[\"<notfound\",{\"1\":{\"392\":1}}],[\"<navigate>\",{\"1\":{\"389\":1}}],[\"<navigate\",{\"1\":{\"389\":1}}],[\"<navlink\",{\"1\":{\"380\":2,\"393\":1,\"394\":2}}],[\"<nav>\",{\"1\":{\"225\":1,\"226\":1,\"230\":1,\"380\":1,\"384\":1,\"394\":1,\"396\":1}}],[\"<提交号>命令可以选择性地将一个或多个提交应用到当前分支\",{\"1\":{\"338\":1}}],[\"<本地分支名>命令可以将本地的提交推送到远程仓库\",{\"1\":{\"336\":1}}],[\"<远程分支名>命令可以删除远程仓库中的指定分支\",{\"1\":{\"336\":1}}],[\"<远程分支名>命令可以在本地创建并切换到一个远程分支上\",{\"1\":{\"336\":1}}],[\"<远程分支名>命令可以拉取远程仓库的更新到本地仓库\",{\"1\":{\"336\":1}}],[\"<远程仓库地址>命令可以将远程仓库完整地克隆到本地\",{\"1\":{\"336\":1}}],[\"<远程仓库地址>命令将一个远程仓库添加到本地仓库\",{\"1\":{\"336\":1}}],[\"<远程仓库名>\",{\"1\":{\"336\":4}}],[\"<分支名>命令可以删除指定的分支\",{\"1\":{\"335\":1}}],[\"<分支名>命令可以将指定的分支合并到当前分支中\",{\"1\":{\"335\":1}}],[\"<分支名>命令可以切换到指定的分支\",{\"1\":{\"335\":1}}],[\"<分支名>命令可以创建一个新分支\",{\"1\":{\"335\":1}}],[\"<文件名>将其从仓库中移除\",{\"1\":{\"334\":1}}],[\"<video>\",{\"1\":{\"223\":1,\"225\":1}}],[\"<video\",{\"1\":{\"223\":1}}],[\"<embed\",{\"1\":{\"219\":1}}],[\"<enter\",{\"1\":{\"122\":1,\"124\":1}}],[\"<enter>\",{\"1\":{\"122\":1,\"124\":1}}],[\"<day>\",{\"1\":{\"168\":1}}],[\"<div>这是关于页面组件<\",{\"1\":{\"413\":1}}],[\"<div>这是首页组件<\",{\"1\":{\"413\":1}}],[\"<div>新的元素<\",{\"1\":{\"288\":2,\"296\":2}}],[\"<div>loading\",{\"1\":{\"23\":1,\"51\":1,\"397\":1}}],[\"<div><\",{\"1\":{\"15\":1}}],[\"<div>\",{\"1\":{\"5\":2,\"13\":1,\"15\":2,\"19\":3,\"20\":1,\"22\":1,\"23\":3,\"35\":2,\"36\":2,\"37\":2,\"41\":10,\"42\":1,\"47\":2,\"51\":2,\"92\":2,\"93\":6,\"94\":3,\"96\":2,\"97\":1,\"98\":1,\"102\":1,\"105\":1,\"116\":1,\"126\":1,\"147\":1,\"210\":1,\"384\":1,\"386\":2,\"388\":1,\"391\":2,\"396\":1,\"403\":1,\"405\":1,\"406\":2,\"407\":2,\"412\":1,\"415\":1,\"417\":1,\"420\":1,\"421\":1,\"422\":1,\"429\":2,\"430\":8,\"440\":1,\"442\":2,\"444\":1}}],[\"<div\",{\"1\":{\"3\":1,\"4\":1,\"14\":2,\"15\":1,\"23\":1,\"41\":1,\"66\":1,\"69\":1,\"70\":13,\"74\":1,\"77\":1,\"82\":9,\"85\":2,\"87\":1,\"91\":1,\"98\":1,\"119\":5,\"150\":1,\"151\":1,\"152\":1,\"154\":1,\"155\":4,\"156\":5,\"231\":1,\"345\":1,\"348\":1,\"412\":1,\"413\":1,\"420\":1}}],[\"<year>\",{\"1\":{\"168\":1}}],[\"<=>\",{\"1\":{\"604\":1}}],[\"<=a\",{\"1\":{\"168\":2}}],[\"<=\",{\"1\":{\"135\":1,\"168\":1,\"254\":2}}],[\"<routes>包含了四个<route>组件\",{\"1\":{\"392\":1}}],[\"<routes>\",{\"1\":{\"389\":4,\"392\":1,\"394\":1,\"396\":1,\"397\":1}}],[\"<route>\",{\"1\":{\"384\":1,\"389\":4,\"391\":2}}],[\"<route\",{\"1\":{\"377\":1,\"378\":4,\"379\":3,\"381\":1,\"382\":1,\"384\":3,\"385\":2,\"386\":2,\"387\":1,\"388\":3,\"389\":4,\"391\":1,\"392\":6,\"394\":2,\"396\":4,\"397\":2}}],[\"<router>\",{\"1\":{\"376\":1,\"385\":1,\"388\":1,\"389\":1,\"392\":1,\"394\":1,\"396\":1,\"397\":1}}],[\"<router\",{\"1\":{\"126\":1,\"384\":1,\"412\":1,\"413\":3,\"415\":1,\"417\":3,\"421\":2,\"422\":2}}],[\"<redirect\",{\"1\":{\"382\":1,\"385\":1}}],[\"<reference\",{\"1\":{\"326\":2,\"331\":3}}],[\"<react\",{\"1\":{\"5\":1,\"15\":1,\"394\":1}}],[\"<keep\",{\"0\":{\"126\":1},\"1\":{\"126\":1}}],[\"<zoom>\",{\"1\":{\"121\":1}}],[\"<userdetail\",{\"1\":{\"392\":1}}],[\"<userslist\",{\"1\":{\"392\":1}}],[\"<users\",{\"1\":{\"392\":1}}],[\"<user\",{\"1\":{\"92\":1,\"391\":1}}],[\"<ul><li>项目1<\",{\"1\":{\"219\":1}}],[\"<ul>\",{\"1\":{\"5\":1,\"209\":1,\"380\":1,\"384\":1,\"388\":1,\"396\":1,\"407\":1}}],[\"<ul\",{\"1\":{\"3\":1,\"347\":1}}],[\"<main>\",{\"1\":{\"225\":1,\"230\":1}}],[\"<month>\",{\"1\":{\"168\":1}}],[\"<meta>\",{\"1\":{\"208\":1}}],[\"<meta\",{\"1\":{\"70\":1,\"87\":1,\"208\":3,\"235\":1}}],[\"<mycomponent\",{\"1\":{\"51\":2}}],[\"<mycomponent><\",{\"1\":{\"15\":1}}],[\"<mycontext\",{\"1\":{\"37\":2}}],[\"<br>\",{\"1\":{\"515\":4,\"519\":1,\"525\":2,\"530\":1,\"531\":3,\"532\":2,\"600\":1}}],[\"<browserrouter>\",{\"1\":{\"386\":2}}],[\"<before\",{\"1\":{\"124\":2}}],[\"<body>\",{\"1\":{\"70\":1,\"87\":1,\"207\":2,\"367\":1,\"514\":1,\"581\":1}}],[\"<base\",{\"1\":{\"70\":1}}],[\"<button>元素用于创建按钮\",{\"1\":{\"30\":1}}],[\"<button>元素\",{\"1\":{\"30\":1}}],[\"<button\",{\"1\":{\"3\":1,\"5\":2,\"15\":1,\"20\":1,\"22\":1,\"25\":3,\"26\":3,\"30\":3,\"31\":2,\"35\":1,\"36\":1,\"41\":7,\"42\":2,\"51\":1,\"70\":2,\"77\":1,\"91\":1,\"93\":3,\"94\":1,\"97\":2,\"98\":1,\"102\":1,\"126\":1,\"229\":1,\"263\":1,\"345\":1,\"346\":1,\"348\":1,\"383\":1,\"384\":1,\"393\":3,\"403\":2,\"406\":2,\"407\":4,\"420\":1,\"429\":1,\"431\":8,\"432\":2,\"433\":2,\"440\":2,\"442\":2,\"444\":2}}],[\"<object\",{\"1\":{\"219\":1}}],[\"<outlet\",{\"1\":{\"396\":1}}],[\"<out\",{\"1\":{\"123\":1}}],[\"<ol><li>项目1<\",{\"1\":{\"219\":1}}],[\"<ol>\",{\"1\":{\"70\":1,\"209\":1}}],[\"<option\",{\"1\":{\"30\":3}}],[\"<app\",{\"1\":{\"394\":1,\"403\":1,\"406\":1}}],[\"<appear\",{\"1\":{\"122\":2}}],[\"<appear>\",{\"1\":{\"122\":2}}],[\"<about\",{\"1\":{\"392\":1,\"394\":1,\"396\":1,\"397\":1}}],[\"<amd\",{\"1\":{\"331\":2}}],[\"<aside>\",{\"1\":{\"230\":1}}],[\"<article>\",{\"1\":{\"226\":1,\"230\":1}}],[\"<audio>\",{\"1\":{\"222\":1}}],[\"<audio\",{\"1\":{\"222\":1}}],[\"<a>\",{\"1\":{\"209\":1,\"210\":1,\"224\":2}}],[\"<after\",{\"1\":{\"124\":2}}],[\"<a\",{\"1\":{\"70\":3,\"224\":1,\"232\":3}}],[\"<footer>版权所有<\",{\"1\":{\"396\":1}}],[\"<form>\",{\"1\":{\"216\":2}}],[\"<form>元素\",{\"1\":{\"30\":1}}],[\"<form\",{\"1\":{\"25\":1,\"30\":3,\"31\":2,\"70\":2,\"346\":1,\"580\":1,\"581\":1}}],[\"<frame>\",{\"1\":{\"218\":1}}],[\"<frame\",{\"1\":{\"218\":2}}],[\"<frameset>\",{\"1\":{\"218\":1}}],[\"<frameset\",{\"1\":{\"218\":1}}],[\"<fade>\",{\"1\":{\"121\":1}}],[\"<functioncomponent\",{\"1\":{\"19\":1,\"21\":1}}],[\"<wrappedcomponent\",{\"1\":{\"23\":3}}],[\"<counter>组件通过连接到redux\",{\"1\":{\"406\":1}}],[\"<counter\",{\"1\":{\"406\":1}}],[\"<contact\",{\"1\":{\"396\":1}}],[\"<component\",{\"1\":{\"94\":1,\"126\":1,\"385\":1}}],[\"<component>\",{\"1\":{\"94\":1}}],[\"<canvas\",{\"1\":{\"228\":1}}],[\"<canvas>\",{\"1\":{\"225\":1,\"228\":2,\"237\":2}}],[\"<caption>\",{\"1\":{\"215\":1}}],[\"<child\",{\"1\":{\"93\":2,\"96\":1}}],[\"<childcomponent\",{\"1\":{\"20\":1,\"35\":1,\"36\":1,\"37\":1,\"41\":2}}],[\"<classcomponent\",{\"1\":{\"19\":1}}],[\"<>\",{\"1\":{\"15\":1,\"135\":1}}],[\"<iframe\",{\"1\":{\"219\":1}}],[\"<in\",{\"1\":{\"123\":1}}],[\"<input>\",{\"1\":{\"216\":1}}],[\"<input>元素用于接收单行文本输入\",{\"1\":{\"30\":1}}],[\"<input>元素\",{\"1\":{\"30\":1}}],[\"<input\",{\"1\":{\"3\":4,\"5\":1,\"25\":1,\"30\":1,\"31\":2,\"41\":2,\"70\":2,\"216\":3,\"225\":1,\"227\":4,\"346\":2,\"347\":1,\"442\":1,\"580\":3,\"581\":2}}],[\"<img>\",{\"1\":{\"209\":1,\"221\":1,\"246\":1}}],[\"<img\",{\"1\":{\"15\":3,\"221\":1,\"368\":1}}],[\"<package>\",{\"1\":{\"510\":5}}],[\"<parentcomponent\",{\"1\":{\"396\":1}}],[\"<provider\",{\"1\":{\"403\":1,\"406\":1,\"407\":1}}],[\"<profile\",{\"1\":{\"389\":1}}],[\"<protectedroute\",{\"1\":{\"385\":1}}],[\"<picture>\",{\"1\":{\"239\":1}}],[\"<p\",{\"1\":{\"14\":2,\"15\":1,\"70\":3}}],[\"<p>我的第一个段落\",{\"1\":{\"528\":1}}],[\"<p>测试函数外变量\",{\"1\":{\"525\":1}}],[\"<p>测试函数内变量\",{\"1\":{\"525\":1}}],[\"<p>这是主页的内容\",{\"1\":{\"412\":1}}],[\"<p>当前过滤器\",{\"1\":{\"407\":1}}],[\"<p>email\",{\"1\":{\"405\":1}}],[\"<p>error\",{\"1\":{\"405\":1}}],[\"<p>today\",{\"1\":{\"367\":1}}],[\"<p>this\",{\"1\":{\"94\":2}}],[\"<p>新的段落<\",{\"1\":{\"288\":2,\"296\":2}}],[\"<p>职业\",{\"1\":{\"231\":1}}],[\"<p>年龄\",{\"1\":{\"231\":1}}],[\"<p>nullam\",{\"1\":{\"154\":1}}],[\"<p>name\",{\"1\":{\"36\":1,\"92\":1}}],[\"<p>integer\",{\"1\":{\"154\":1}}],[\"<p>lorem\",{\"1\":{\"154\":1}}],[\"<p>loading\",{\"1\":{\"41\":1,\"405\":1}}],[\"<p>计算值\",{\"1\":{\"105\":1}}],[\"<p>原始值\",{\"1\":{\"105\":1}}],[\"<p>插入到子组件插槽中的内容<\",{\"1\":{\"96\":1}}],[\"<p>original\",{\"1\":{\"74\":1}}],[\"<p>here\",{\"1\":{\"70\":1}}],[\"<p>height\",{\"1\":{\"41\":1}}],[\"<p>age\",{\"1\":{\"92\":1}}],[\"<p>and\",{\"1\":{\"70\":1}}],[\"<p>a\",{\"1\":{\"70\":1}}],[\"<p>using\",{\"1\":{\"70\":2}}],[\"<p>\",{\"1\":{\"70\":3,\"86\":1,\"209\":1,\"210\":1,\"442\":1,\"525\":2}}],[\"<p>result\",{\"1\":{\"41\":1}}],[\"<p>computed\",{\"1\":{\"74\":1}}],[\"<p>count\",{\"1\":{\"41\":3,\"42\":1,\"102\":1,\"444\":1}}],[\"<p>current\",{\"1\":{\"41\":1}}],[\"<p>data\",{\"1\":{\"41\":1,\"433\":1}}],[\"<p>shared\",{\"1\":{\"37\":1}}],[\"<p>message\",{\"1\":{\"35\":1,\"77\":1,\"102\":1}}],[\"<p>paragraph\",{\"1\":{\"15\":4,\"147\":3}}],[\"<p>paragraph<\",{\"1\":{\"15\":1}}],[\"<p>等html标签来构建ui结构\",{\"1\":{\"13\":1}}],[\"<p>welcome\",{\"1\":{\"13\":1}}],[\"<home\",{\"1\":{\"389\":1,\"392\":1,\"394\":1,\"396\":1,\"397\":1}}],[\"<h6>\",{\"1\":{\"209\":1,\"226\":1}}],[\"<h1\",{\"1\":{\"142\":1,\"231\":1}}],[\"<h1>我的第一个标题<\",{\"1\":{\"528\":1}}],[\"<h1>my\",{\"1\":{\"514\":1}}],[\"<h1>用户id\",{\"1\":{\"420\":1}}],[\"<h1>首页<\",{\"1\":{\"412\":1}}],[\"<h1>父组件<\",{\"1\":{\"396\":1}}],[\"<h1>父组件标题<\",{\"1\":{\"96\":1}}],[\"<h1>查询参数\",{\"1\":{\"386\":1}}],[\"<h1>路由参数\",{\"1\":{\"386\":1}}],[\"<h1>home<\",{\"1\":{\"384\":1,\"394\":1}}],[\"<h1>here\",{\"1\":{\"70\":1}}],[\"<h1>heading\",{\"1\":{\"15\":2}}],[\"<h1>heading<\",{\"1\":{\"15\":1}}],[\"<h1>hello\",{\"1\":{\"13\":1,\"14\":2,\"15\":2,\"16\":2,\"18\":2,\"19\":2,\"20\":1,\"21\":2}}],[\"<h1>welcome\",{\"1\":{\"367\":1,\"389\":3}}],[\"<h1>b<\",{\"1\":{\"119\":1}}],[\"<h1>about<\",{\"1\":{\"394\":1}}],[\"<h1>a<\",{\"1\":{\"119\":1}}],[\"<h1>another\",{\"1\":{\"92\":1}}],[\"<h1>子组件标题<\",{\"1\":{\"96\":1}}],[\"<h1>user\",{\"1\":{\"92\":1,\"391\":1,\"405\":1}}],[\"<h1>parent\",{\"1\":{\"35\":1,\"36\":1,\"37\":1}}],[\"<h1>counter\",{\"1\":{\"403\":1}}],[\"<h1>count\",{\"1\":{\"20\":1,\"22\":1,\"406\":1}}],[\"<h1>\",{\"1\":{\"13\":1,\"209\":1,\"210\":1,\"226\":1,\"421\":1,\"422\":1}}],[\"<h1>todo\",{\"1\":{\"4\":1,\"5\":1}}],[\"<h1>todos<\",{\"1\":{\"3\":1}}],[\"<html\",{\"1\":{\"87\":1,\"235\":1}}],[\"<html>\",{\"1\":{\"70\":1,\"207\":2,\"367\":1,\"514\":1,\"581\":1}}],[\"<head>\",{\"1\":{\"70\":1,\"87\":1,\"142\":2,\"207\":2,\"367\":1,\"581\":1}}],[\"<header>\",{\"1\":{\"225\":1,\"230\":1}}],[\"<header\",{\"1\":{\"3\":1}}],[\"<h2>php\",{\"1\":{\"515\":1}}],[\"<h2>profile<\",{\"1\":{\"415\":1}}],[\"<h2>count\",{\"1\":{\"440\":1}}],[\"<h2>child\",{\"1\":{\"35\":1,\"36\":1,\"37\":1}}],[\"<h2>users<\",{\"1\":{\"388\":1}}],[\"<h2>about<\",{\"1\":{\"388\":1}}],[\"<h2>home<\",{\"1\":{\"388\":1}}],[\"<h2>heading\",{\"1\":{\"15\":2}}],[\"<h2>teleport\",{\"1\":{\"119\":1}}],[\"<t>\",{\"1\":{\"320\":1}}],[\"<time>\",{\"1\":{\"235\":1}}],[\"<title>文件上传<\",{\"1\":{\"581\":1}}],[\"<title>my\",{\"1\":{\"367\":1}}],[\"<title>\",{\"1\":{\"207\":1}}],[\"<title>页面标题<\",{\"1\":{\"207\":1}}],[\"<title>vue生命周期示例<\",{\"1\":{\"87\":1}}],[\"<title>vue自定义指令示例<\",{\"1\":{\"70\":1}}],[\"<tfoot>\",{\"1\":{\"215\":1}}],[\"<tbody>\",{\"1\":{\"215\":1}}],[\"<thead>\",{\"1\":{\"215\":1}}],[\"<th>\",{\"1\":{\"215\":2}}],[\"<th>城市<\",{\"1\":{\"214\":1}}],[\"<th>年龄<\",{\"1\":{\"214\":1}}],[\"<th>姓名<\",{\"1\":{\"214\":1}}],[\"<td>\",{\"1\":{\"215\":2}}],[\"<td>london<\",{\"1\":{\"214\":1}}],[\"<td>30<\",{\"1\":{\"214\":1}}],[\"<td>jane<\",{\"1\":{\"214\":1}}],[\"<td>john<\",{\"1\":{\"214\":1}}],[\"<td>new\",{\"1\":{\"214\":1}}],[\"<td>25<\",{\"1\":{\"214\":1}}],[\"<tr>\",{\"1\":{\"214\":3,\"215\":2}}],[\"<transition>\",{\"0\":{\"120\":1},\"1\":{\"122\":1}}],[\"<transition\",{\"1\":{\"98\":1,\"122\":1}}],[\"<table>\",{\"1\":{\"214\":1,\"215\":2}}],[\"<teleport\",{\"1\":{\"119\":3}}],[\"<teleport>\",{\"0\":{\"119\":1}}],[\"<template\",{\"1\":{\"70\":2}}],[\"<template>\",{\"1\":{\"3\":3,\"4\":1,\"92\":2,\"93\":5,\"94\":4,\"96\":2,\"98\":1,\"102\":1,\"105\":1,\"119\":2,\"126\":1,\"245\":1,\"412\":2,\"415\":1,\"417\":1,\"420\":2,\"421\":1,\"422\":1,\"429\":3,\"430\":2,\"431\":2,\"432\":2,\"433\":2,\"440\":1,\"442\":2,\"444\":1}}],[\"<textarea>\",{\"1\":{\"227\":1}}],[\"<textarea>元素用于接收多行文本输入\",{\"1\":{\"30\":1}}],[\"<textarea>元素\",{\"1\":{\"30\":1}}],[\"<textarea\",{\"1\":{\"30\":1,\"580\":1}}],[\"<todo\",{\"1\":{\"5\":1}}],[\"<todolist\",{\"1\":{\"4\":1,\"407\":1}}],[\"<todoinput\",{\"1\":{\"4\":1}}],[\"<todoitem\",{\"1\":{\"3\":1}}],[\"<switch>\",{\"1\":{\"378\":1,\"385\":1,\"386\":2,\"389\":1,\"396\":1}}],[\"<strong>new\",{\"1\":{\"265\":1}}],[\"<strong>\",{\"1\":{\"209\":1,\"210\":1}}],[\"<style>\",{\"1\":{\"98\":1,\"142\":1,\"154\":1,\"155\":1,\"156\":1}}],[\"<style\",{\"1\":{\"4\":1,\"92\":1}}],[\"<slide>\",{\"1\":{\"121\":1}}],[\"<slot>这是默认的插槽内容<\",{\"1\":{\"96\":1}}],[\"<span>\",{\"1\":{\"210\":1}}],[\"<span\",{\"1\":{\"70\":8,\"231\":2,\"580\":2}}],[\"<script\",{\"1\":{\"65\":1,\"70\":1,\"87\":1,\"284\":1,\"444\":1}}],[\"<script>\",{\"1\":{\"3\":3,\"4\":1,\"70\":10,\"82\":2,\"87\":1,\"91\":1,\"92\":2,\"93\":5,\"94\":2,\"98\":1,\"102\":1,\"105\":1,\"126\":1,\"228\":1,\"229\":1,\"420\":1,\"421\":1,\"422\":1,\"429\":2,\"430\":1,\"431\":1,\"432\":1,\"433\":2,\"440\":1,\"442\":2,\"510\":1}}],[\"<suspense\",{\"1\":{\"51\":1,\"397\":1}}],[\"<settings\",{\"1\":{\"389\":1}}],[\"<select\",{\"1\":{\"30\":1}}],[\"<select>元素创建了一个下拉菜单选择框\",{\"1\":{\"30\":1}}],[\"<select>和<option>元素\",{\"1\":{\"30\":1}}],[\"<section>\",{\"1\":{\"230\":1}}],[\"<section\",{\"1\":{\"3\":1}}],[\"<\",{\"1\":{\"3\":12,\"4\":4,\"5\":5,\"13\":3,\"14\":6,\"15\":6,\"16\":2,\"18\":2,\"19\":5,\"20\":3,\"21\":2,\"22\":2,\"23\":5,\"25\":1,\"30\":7,\"31\":2,\"35\":3,\"36\":3,\"37\":5,\"41\":18,\"42\":2,\"47\":2,\"51\":4,\"66\":1,\"69\":1,\"70\":59,\"74\":3,\"77\":2,\"82\":4,\"86\":1,\"87\":6,\"91\":3,\"92\":11,\"93\":16,\"94\":9,\"96\":5,\"97\":1,\"98\":6,\"102\":5,\"105\":5,\"116\":1,\"119\":10,\"126\":4,\"129\":1,\"133\":1,\"135\":2,\"142\":4,\"147\":1,\"154\":5,\"155\":2,\"156\":2,\"168\":2,\"184\":1,\"185\":1,\"207\":5,\"212\":1,\"213\":2,\"214\":4,\"216\":3,\"218\":1,\"228\":1,\"229\":1,\"231\":1,\"254\":2,\"255\":1,\"281\":1,\"323\":1,\"345\":1,\"346\":1,\"347\":1,\"367\":6,\"376\":1,\"378\":1,\"379\":1,\"380\":5,\"382\":1,\"384\":7,\"385\":2,\"386\":8,\"388\":6,\"389\":5,\"391\":3,\"392\":3,\"394\":4,\"396\":9,\"397\":4,\"403\":3,\"405\":5,\"406\":4,\"407\":6,\"412\":6,\"413\":2,\"415\":3,\"417\":5,\"420\":6,\"421\":4,\"422\":4,\"429\":7,\"430\":11,\"431\":3,\"432\":3,\"433\":5,\"440\":4,\"442\":7,\"444\":5,\"514\":5,\"515\":3,\"517\":1,\"519\":1,\"520\":1,\"524\":3,\"525\":1,\"526\":1,\"528\":3,\"530\":1,\"531\":1,\"532\":1,\"534\":1,\"535\":1,\"537\":1,\"538\":1,\"540\":1,\"541\":1,\"553\":2,\"560\":1,\"561\":1,\"562\":1,\"564\":2,\"580\":9,\"581\":7,\"582\":1,\"599\":2}}],[\"<leave\",{\"1\":{\"122\":1,\"124\":1}}],[\"<leave>\",{\"1\":{\"122\":1,\"124\":1}}],[\"<label>\",{\"1\":{\"216\":1,\"246\":1}}],[\"<label\",{\"1\":{\"3\":2,\"216\":2,\"580\":3,\"581\":1}}],[\"<li>\",{\"1\":{\"209\":1,\"263\":1,\"380\":3,\"384\":3,\"388\":3,\"396\":3}}],[\"<link>\",{\"1\":{\"384\":1}}],[\"<link>组件用于一般性的导航\",{\"1\":{\"380\":1}}],[\"<link\",{\"1\":{\"142\":1,\"380\":1,\"384\":3,\"388\":3,\"393\":1,\"396\":3}}],[\"<li\",{\"1\":{\"3\":1,\"5\":1,\"70\":2,\"407\":1}}],[\"在转换过程中\",{\"1\":{\"604\":1}}],[\"在面向对象的程序设计\",{\"1\":{\"583\":1}}],[\"在面向对象编程中\",{\"1\":{\"183\":1,\"583\":1}}],[\"在用户提交表单后\",{\"1\":{\"580\":1}}],[\"在用户纠正错误后\",{\"1\":{\"32\":1}}],[\"在成功处理表单数据后\",{\"1\":{\"580\":1}}],[\"在当前数据库连接上执行\",{\"1\":{\"570\":1}}],[\"在当前作用域中查找标识符\",{\"1\":{\"261\":1}}],[\"在所有函数外部定义的变量\",{\"1\":{\"525\":1}}],[\"在脚本的其他任何地方都不能被改变\",{\"1\":{\"518\":1}}],[\"在脚本中\",{\"1\":{\"92\":1}}],[\"在node\",{\"1\":{\"509\":1,\"510\":1,\"511\":1}}],[\"在新文件中\",{\"1\":{\"508\":1}}],[\"在下载页面上\",{\"1\":{\"507\":1}}],[\"在网站首页上\",{\"1\":{\"507\":1}}],[\"在文件系统中生成html文件等\",{\"1\":{\"477\":1}}],[\"在执行webpack命令时通过\",{\"1\":{\"477\":1}}],[\"在你想要创建webpack项目的位置\",{\"1\":{\"475\":1}}],[\"在你的应用程序中\",{\"1\":{\"440\":1}}],[\"在你的应用程序的入口文件\",{\"1\":{\"440\":1}}],[\"在你的项目中\",{\"1\":{\"440\":1}}],[\"在现代\",{\"1\":{\"506\":1}}],[\"在现代前端开发中通常与其他工具和技术一起使用\",{\"1\":{\"470\":1}}],[\"在现代浏览器和各种javascript环境中广泛支持\",{\"1\":{\"201\":1}}],[\"在学习和实践时\",{\"1\":{\"467\":1}}],[\"在提取之前\",{\"1\":{\"466\":1}}],[\"在提取公共代码时\",{\"1\":{\"466\":1}}],[\"在提交表单期间\",{\"1\":{\"33\":1}}],[\"在提交表单时\",{\"1\":{\"33\":2}}],[\"在软件开发中\",{\"1\":{\"464\":1}}],[\"在确保代码逻辑正确的前提下\",{\"1\":{\"462\":1}}],[\"在进行动态导入之前\",{\"1\":{\"467\":1}}],[\"在进行动态导入时\",{\"1\":{\"467\":1}}],[\"在进行tree\",{\"1\":{\"462\":1}}],[\"在进行类型转换时\",{\"1\":{\"252\":1}}],[\"在源代码中进行修改后\",{\"1\":{\"461\":1}}],[\"在启动devserver时\",{\"1\":{\"461\":1}}],[\"在多个入口起点中使用相同的模块时\",{\"1\":{\"458\":1}}],[\"在编译时创建全局常量\",{\"1\":{\"456\":1}}],[\"在编写\",{\"1\":{\"310\":1}}],[\"在编写代码时\",{\"1\":{\"275\":1}}],[\"在编写es6代码时\",{\"1\":{\"165\":1}}],[\"在编写shouldcomponentupdate方法时\",{\"1\":{\"48\":1}}],[\"在配置中\",{\"1\":{\"456\":1}}],[\"在配置文件中添加或修改这些选项来满足你的构建需求\",{\"1\":{\"454\":1}}],[\"在配置过程中\",{\"1\":{\"132\":1}}],[\"在设计和实现模块之间的通信时\",{\"1\":{\"444\":1}}],[\"在没有启用命名空间的模块中访问启用了命名空间的模块时\",{\"1\":{\"444\":1}}],[\"在大型应用程序中可以更好地组织和管理vuex的状态\",{\"1\":{\"440\":1}}],[\"在初始化阶段做一些设置\",{\"1\":{\"437\":1}}],[\"在入口文件中创建vue实例时\",{\"1\":{\"427\":1}}],[\"在入口文件中的vue实例之前\",{\"1\":{\"427\":1}}],[\"在action中可以调用mutations来修改state的值\",{\"1\":{\"426\":1}}],[\"在app\",{\"1\":{\"5\":1}}],[\"在user组件中\",{\"1\":{\"420\":1}}],[\"在routes数组中\",{\"1\":{\"418\":1}}],[\"在redux中创建一个store\",{\"1\":{\"406\":1}}],[\"在redux中\",{\"1\":{\"400\":2,\"401\":7}}],[\"在readystate为4且状态码为200时\",{\"1\":{\"341\":1}}],[\"在react和其他一些前端框架中\",{\"1\":{\"31\":1}}],[\"在react元素中通过指定事件属性来绑定事件处理程序\",{\"1\":{\"25\":1}}],[\"在reactdom中\",{\"1\":{\"21\":1}}],[\"在react组件中定义一个路由配置对象\",{\"1\":{\"385\":1}}],[\"在react组件中\",{\"1\":{\"20\":1}}],[\"在react中通过props来实现\",{\"1\":{\"36\":1}}],[\"在react中\",{\"1\":{\"19\":1,\"21\":1,\"22\":1,\"25\":2,\"26\":1,\"27\":1,\"33\":2,\"35\":1,\"48\":1,\"50\":1,\"51\":2}}],[\"在react\",{\"1\":{\"18\":3,\"22\":1,\"385\":1}}],[\"在render方法中\",{\"1\":{\"20\":1}}],[\"在render\",{\"1\":{\"19\":1}}],[\"在代码中通过名称导航\",{\"1\":{\"417\":1}}],[\"在php\",{\"1\":{\"604\":1}}],[\"在php中\",{\"1\":{\"603\":1,\"604\":1}}],[\"在php开发过程中\",{\"1\":{\"602\":1}}],[\"在php代码文件的顶部使用\",{\"1\":{\"584\":1}}],[\"在profile组件的模板中\",{\"1\":{\"415\":1}}],[\"在parent组件中定义一个数据\",{\"1\":{\"93\":1}}],[\"在parent组件中有一个按钮\",{\"1\":{\"93\":1}}],[\"在todolist组件中\",{\"1\":{\"407\":1}}],[\"在themecomponent中\",{\"1\":{\"41\":1}}],[\"在根组件中使用<provider>组件包裹\",{\"1\":{\"406\":1}}],[\"在我们的react组件中使用fetchuser\",{\"1\":{\"405\":1}}],[\"在我们的redux应用中\",{\"1\":{\"405\":1}}],[\"在路由配置中通过name属性来定义命名视图\",{\"1\":{\"417\":1}}],[\"在路由配置中通过components属性来定义命名视图\",{\"1\":{\"417\":1}}],[\"在路由器实例的routes选项中\",{\"1\":{\"412\":1}}],[\"在路由切换前触发提示框\",{\"1\":{\"387\":1}}],[\"在路由的路径中定义参数\",{\"1\":{\"386\":1}}],[\"在认证逻辑中实现checkauth函数\",{\"1\":{\"385\":1}}],[\"在主组件中\",{\"1\":{\"384\":1}}],[\"在主线程中\",{\"1\":{\"57\":2}}],[\"在开始集成之前\",{\"1\":{\"369\":1}}],[\"在开发环境中\",{\"1\":{\"500\":1}}],[\"在开发模式下\",{\"1\":{\"479\":1}}],[\"在开发服务器中使用devtool选项\",{\"1\":{\"468\":1}}],[\"在开发阶段\",{\"1\":{\"443\":1}}],[\"在开发过程中\",{\"1\":{\"586\":1}}],[\"在开发过程中使用开发模式\",{\"1\":{\"479\":1}}],[\"在开发过程中可以更好地组织和管理应用程序的状态和逻辑\",{\"1\":{\"428\":1}}],[\"在开发过程中对代码的稳定性和可维护性有很大帮助\",{\"1\":{\"317\":1}}],[\"在开发过程的不同阶段都需要进行\",{\"1\":{\"372\":1}}],[\"在开发api时\",{\"1\":{\"371\":1}}],[\"在开发web应用时\",{\"1\":{\"355\":1,\"356\":1}}],[\"在典型的web应用程序中\",{\"1\":{\"367\":1}}],[\"在命令行中运行以下命令来执行应用程序\",{\"1\":{\"508\":1}}],[\"在命令行终端窗口中\",{\"1\":{\"364\":1}}],[\"在命令行工具中\",{\"1\":{\"88\":1}}],[\"在项目目录下创建一个名为\",{\"1\":{\"364\":1}}],[\"在项目目录下执行以下命令来安装\",{\"1\":{\"364\":1}}],[\"在项目目录中创建一个名为\",{\"1\":{\"475\":2}}],[\"在项目目录中打开终端\",{\"1\":{\"475\":1}}],[\"在项目目录中\",{\"1\":{\"88\":1}}],[\"在四次挥手过程中\",{\"1\":{\"361\":1}}],[\"在建立加密通道时存在一定的计算开销\",{\"1\":{\"359\":1}}],[\"在http\",{\"1\":{\"358\":1}}],[\"在html中显示表单和错误消息\",{\"1\":{\"580\":1}}],[\"在html元素的style属性中\",{\"1\":{\"142\":1}}],[\"在html文档的head标签内\",{\"1\":{\"142\":1}}],[\"在html文档中\",{\"1\":{\"142\":1}}],[\"在请求处理过程中执行自定义逻辑\",{\"1\":{\"366\":1}}],[\"在请求行中包含了请求方法\",{\"1\":{\"353\":1}}],[\"在请求成功后\",{\"1\":{\"50\":1}}],[\"在客户端和服务器之间传递会话信息\",{\"1\":{\"352\":1,\"355\":1}}],[\"在处理复杂的异步流程时非常有用\",{\"1\":{\"405\":1}}],[\"在处理服务器返回的数据时\",{\"1\":{\"349\":1}}],[\"在处理表单数据时\",{\"1\":{\"580\":1}}],[\"在处理表单提交时\",{\"1\":{\"33\":1}}],[\"在处理表单错误时\",{\"1\":{\"32\":1}}],[\"在处理表单验证和错误处理时\",{\"1\":{\"32\":1}}],[\"在加载新内容时\",{\"1\":{\"349\":1}}],[\"在加载新内容之前\",{\"1\":{\"349\":1}}],[\"在加载完成后\",{\"1\":{\"264\":1}}],[\"在加载完成后通过设置showcomponent状态变量来显示组件\",{\"1\":{\"51\":1}}],[\"在git中\",{\"1\":{\"334\":1}}],[\"在之前的示例中\",{\"1\":{\"330\":1}}],[\"在之前的版本中\",{\"1\":{\"40\":1}}],[\"在应用的入口文件中\",{\"1\":{\"426\":1}}],[\"在应用的根组件上使用<provider>组件包裹\",{\"1\":{\"406\":1}}],[\"在应用程序中使用路由配置和保护路由\",{\"1\":{\"385\":1}}],[\"在应用程序中添加适当的日志记录\",{\"1\":{\"372\":1}}],[\"在应用程序的最顶层\",{\"1\":{\"376\":1}}],[\"在应用程序的主文件中使用\",{\"1\":{\"368\":1}}],[\"在应用程序的主文件中设置\",{\"1\":{\"367\":1}}],[\"在应用\",{\"1\":{\"330\":1}}],[\"在另一个文件中继续扩展全局声明\",{\"1\":{\"329\":1}}],[\"在另一个文件中扩展全局声明\",{\"1\":{\"329\":1}}],[\"在另一个单文件组件中\",{\"1\":{\"92\":1}}],[\"在模块加载完成后执行操作\",{\"1\":{\"467\":1}}],[\"在模块解析过程中\",{\"1\":{\"328\":2}}],[\"在模板中使用提交mutation的方法\",{\"1\":{\"431\":1}}],[\"在模板中使用getter\",{\"1\":{\"430\":1}}],[\"在模板中使用时\",{\"1\":{\"86\":1}}],[\"在模板中定义一个占位符\",{\"1\":{\"94\":1}}],[\"在较早的版本中使用的默认模块解析策略\",{\"1\":{\"328\":1}}],[\"在联合类型中\",{\"1\":{\"319\":1}}],[\"在枚举中\",{\"1\":{\"314\":1}}],[\"在嵌套的作用域中\",{\"1\":{\"311\":1}}],[\"在嵌套函数中\",{\"1\":{\"262\":1}}],[\"在特定的作用域内声明的变量只在该作用域内可见\",{\"1\":{\"311\":1}}],[\"在此枚举中\",{\"1\":{\"310\":1}}],[\"在变量类型后面表示数组\",{\"1\":{\"310\":1}}],[\"在窗口大小改变时执行的操作\",{\"1\":{\"297\":1}}],[\"在服务器端构建高性能的\",{\"1\":{\"363\":1}}],[\"在服务器端\",{\"1\":{\"282\":1}}],[\"在服务器端或前端框架中\",{\"1\":{\"30\":1}}],[\"在拷贝对象属性时\",{\"1\":{\"281\":1}}],[\"在词法作用域下\",{\"1\":{\"280\":1}}],[\"在计算机中\",{\"1\":{\"277\":1}}],[\"在不同的路由中展示不同的内容或组件\",{\"1\":{\"413\":1}}],[\"在不同的设备上显示适应性的图片是一种常见的需求\",{\"1\":{\"239\":1}}],[\"在不需要给函数命名时\",{\"1\":{\"313\":1}}],[\"在不再需要时\",{\"1\":{\"275\":1}}],[\"在适当的时间被执行\",{\"1\":{\"270\":1}}],[\"在指定延迟后执行一次函数\",{\"1\":{\"266\":1}}],[\"在指定的条件下重复执行一段代码\",{\"1\":{\"255\":1}}],[\"在loadimageasync函数中\",{\"1\":{\"264\":1}}],[\"在less中使用\",{\"1\":{\"161\":1}}],[\"在事件循环中\",{\"1\":{\"271\":1}}],[\"在事件循环的过程中\",{\"1\":{\"264\":1}}],[\"在事务处理中\",{\"1\":{\"137\":1}}],[\"在父路由组件的模板中\",{\"1\":{\"415\":1}}],[\"在父级元素上捕获并处理事件\",{\"1\":{\"263\":1}}],[\"在父组件中定义props\",{\"1\":{\"93\":1}}],[\"在父组件\",{\"1\":{\"37\":1}}],[\"在对象方法内部定义的函数\",{\"1\":{\"262\":1}}],[\"在严格模式下\",{\"1\":{\"262\":1}}],[\"在非生产环境下\",{\"1\":{\"468\":1}}],[\"在非严格模式下\",{\"1\":{\"262\":1}}],[\"在非受控组件中\",{\"1\":{\"31\":1}}],[\"在浏览器缓存文件的过程中\",{\"1\":{\"483\":1}}],[\"在浏览器中打开vue应用\",{\"1\":{\"438\":1}}],[\"在浏览器中访问\",{\"1\":{\"364\":1}}],[\"在浏览器中具有原生支持\",{\"1\":{\"203\":1}}],[\"在浏览器环境中\",{\"1\":{\"262\":1,\"270\":1}}],[\"在全局作用域中\",{\"1\":{\"262\":1}}],[\"在全局作用域中找到变量globalvariable\",{\"1\":{\"261\":1}}],[\"在全局symbol注册表中\",{\"1\":{\"174\":1}}],[\"在外部函数作用域中找到变量outervariable\",{\"1\":{\"261\":1}}],[\"在该模式下\",{\"1\":{\"457\":3}}],[\"在该模式中\",{\"1\":{\"38\":1}}],[\"在该例子中\",{\"1\":{\"258\":1,\"259\":1}}],[\"在数组中搜索给定的值\",{\"1\":{\"578\":1}}],[\"在数组开头添加元素\",{\"1\":{\"257\":1}}],[\"在数组末尾添加元素\",{\"1\":{\"257\":1}}],[\"在数组字面量中添加元素来创建一个包含初始值的数组\",{\"1\":{\"257\":1}}],[\"在条件满足时重复执行一段代码\",{\"1\":{\"255\":1}}],[\"在条件满足时执行的代码\",{\"1\":{\"255\":1}}],[\"在条件满足时执行一个代码块\",{\"1\":{\"255\":1}}],[\"在条件满足时执行特定的代码块\",{\"1\":{\"255\":1}}],[\"在声明变量后\",{\"1\":{\"249\":1}}],[\"在顶部和底部不会有额外的空白\",{\"1\":{\"210\":1}}],[\"在页面滚动时执行的操作\",{\"1\":{\"301\":1}}],[\"在页面滚动到可见范围时再进行图片加载\",{\"1\":{\"54\":1}}],[\"在页面中显示视频控制器\",{\"1\":{\"223\":1}}],[\"在页面中显示音频控制器\",{\"1\":{\"222\":1}}],[\"在页面中独占一行\",{\"1\":{\"210\":1}}],[\"在某些环境或工具中可能需要使用附加的插件\",{\"1\":{\"204\":1}}],[\"在某些情况下\",{\"1\":{\"43\":1,\"91\":1,\"316\":1,\"322\":1}}],[\"在循环体内部执行异步操作\",{\"1\":{\"198\":1}}],[\"在调用\",{\"1\":{\"198\":1}}],[\"在调用异步函数时\",{\"1\":{\"196\":1}}],[\"在异步操作失败时处理错误\",{\"1\":{\"432\":2,\"433\":1}}],[\"在异步操作成功后提交mutation\",{\"1\":{\"432\":2,\"433\":1}}],[\"在异步操作完成后\",{\"1\":{\"428\":1}}],[\"在异步操作完成时执行的代码\",{\"1\":{\"306\":1}}],[\"在异步函数中\",{\"1\":{\"196\":1}}],[\"在异步请求成功后\",{\"1\":{\"50\":1}}],[\"在内部\",{\"1\":{\"195\":1}}],[\"在等待期间\",{\"1\":{\"195\":1}}],[\"在生产模式下\",{\"1\":{\"479\":1,\"480\":3}}],[\"在生产环境中\",{\"1\":{\"586\":1}}],[\"在生产环境中使用该插件可以大幅减小打包文件的体积\",{\"1\":{\"469\":1}}],[\"在生产环境中不要暴露源映射文件\",{\"1\":{\"468\":1}}],[\"在生产环境下\",{\"1\":{\"468\":1}}],[\"在生成器函数中\",{\"1\":{\"187\":1}}],[\"在生命周期的不同阶段调用对应的钩子函数可以实现组件数据管理和\",{\"1\":{\"87\":1}}],[\"在迭代器对象中\",{\"1\":{\"184\":1}}],[\"在迭代对象的属性时\",{\"1\":{\"174\":1}}],[\"在es6以前的javascript版本中\",{\"1\":{\"261\":1}}],[\"在es6之前\",{\"1\":{\"172\":1}}],[\"在es6中\",{\"1\":{\"165\":1,\"171\":2,\"184\":1}}],[\"在类装饰器的函数体内\",{\"1\":{\"324\":1}}],[\"在类的属性\",{\"1\":{\"320\":1}}],[\"在类的方法中可以使用\",{\"1\":{\"171\":1}}],[\"在类组件中使用方法时\",{\"1\":{\"26\":1}}],[\"在类组件中\",{\"1\":{\"19\":1,\"26\":1,\"50\":1}}],[\"在字符串的结尾补全指定的字符至指定长度\",{\"1\":{\"167\":1}}],[\"在字符串的开头补全指定的字符至指定长度\",{\"1\":{\"167\":1}}],[\"在解构得到的值为undefined时使用默认值\",{\"1\":{\"166\":1}}],[\"在水平和垂直方向上重复\",{\"1\":{\"158\":1}}],[\"在宽度小于等于600px时应用的css样式\",{\"1\":{\"157\":1}}],[\"在发送请求之前\",{\"1\":{\"349\":1}}],[\"在发送数据请求时\",{\"1\":{\"55\":1}}],[\"在发生换行时\",{\"1\":{\"155\":1}}],[\"在屏幕宽度小于等于768px时应用的样式\",{\"1\":{\"148\":1}}],[\"在屏幕阅读器中提供适当的辅助功能支持\",{\"1\":{\"32\":1}}],[\"在ie盒模型中\",{\"1\":{\"146\":1}}],[\"在合适的地方选择合适的css书写方式\",{\"1\":{\"142\":1}}],[\"在合适的时间添加\",{\"1\":{\"120\":1}}],[\"在创建vuex\",{\"1\":{\"437\":1}}],[\"在创建vue实例之前\",{\"1\":{\"426\":1}}],[\"在创建redux\",{\"1\":{\"405\":1}}],[\"在创建store时\",{\"1\":{\"401\":1}}],[\"在创建表时\",{\"1\":{\"136\":1}}],[\"在创建过程中\",{\"1\":{\"1\":1}}],[\"在关系型数据库中\",{\"1\":{\"136\":1}}],[\"在安装完成并配置好mysql服务器后\",{\"1\":{\"132\":1}}],[\"在安装过程中\",{\"1\":{\"132\":1}}],[\"在dom操作中可以使用节点的属性和方法来访问和修改节点的属性和内容\",{\"1\":{\"129\":1}}],[\"在一段时间内直接使用本地缓存\",{\"1\":{\"352\":1}}],[\"在一些情况下\",{\"1\":{\"269\":1}}],[\"在一个模块中的mutation中\",{\"1\":{\"444\":1}}],[\"在一个典型的vue\",{\"1\":{\"425\":1}}],[\"在一个文件中声明全局变量\",{\"1\":{\"329\":1}}],[\"在一个离开动画被触发后的下一帧被添加\",{\"1\":{\"125\":1}}],[\"在一个组件中使用mixins选项将混入对象应用到组件上\",{\"1\":{\"97\":1}}],[\"在一帧后被移除\",{\"1\":{\"125\":1}}],[\"在离开过渡效果被触发时立即添加\",{\"1\":{\"125\":2}}],[\"在过渡或动画完成之后移除\",{\"1\":{\"125\":4}}],[\"在过渡开始前\",{\"1\":{\"98\":1}}],[\"在元素前面添加新的元素\",{\"1\":{\"288\":1,\"296\":1}}],[\"在元素后面添加新的元素\",{\"1\":{\"288\":1,\"296\":1}}],[\"在元素内部开头添加新的元素\",{\"1\":{\"296\":1}}],[\"在元素内部开头添加新的段落\",{\"1\":{\"288\":1}}],[\"在元素内部末尾添加新的元素\",{\"1\":{\"296\":1}}],[\"在元素内部末尾添加新的段落\",{\"1\":{\"288\":1}}],[\"在元素滚动时背景图像也跟随滚动\",{\"1\":{\"158\":1}}],[\"在元素被插入之前添加\",{\"1\":{\"125\":1}}],[\"在元素插入完成后的下一帧被添加\",{\"1\":{\"125\":1}}],[\"在元素插入完成后的下一帧移除\",{\"1\":{\"125\":1}}],[\"在元素插入之前添加\",{\"1\":{\"125\":1}}],[\"在依赖注入模式中\",{\"1\":{\"117\":1}}],[\"在挂载之前调用\",{\"1\":{\"114\":1}}],[\"在挂载开始之前被调用\",{\"1\":{\"87\":1}}],[\"在回调函数中\",{\"1\":{\"110\":1,\"401\":1}}],[\"在需要时才进行加载和执行\",{\"1\":{\"494\":1}}],[\"在需要时才会进行异步加载\",{\"1\":{\"423\":1}}],[\"在需要的时候再通过import语句进行异步加载\",{\"1\":{\"458\":1}}],[\"在需要跳转到user组件的地方\",{\"1\":{\"420\":1}}],[\"在需要使用模块中的功能时\",{\"1\":{\"327\":1}}],[\"在需要换行时\",{\"1\":{\"154\":1}}],[\"在需要进行过渡的元素上添加特定的class和v\",{\"1\":{\"98\":1}}],[\"在需要切换组件的时候\",{\"1\":{\"94\":1}}],[\"在工程化的项目中\",{\"1\":{\"97\":1}}],[\"在单个组件上\",{\"1\":{\"97\":1}}],[\"在实际的web开发中\",{\"1\":{\"358\":1}}],[\"在实际项目中\",{\"1\":{\"328\":1}}],[\"在实际使用中\",{\"1\":{\"310\":1}}],[\"在实际开发中\",{\"1\":{\"203\":1,\"435\":1,\"466\":1,\"592\":1}}],[\"在实际应用中需要根据具体情况综合考虑缓存的利弊\",{\"1\":{\"465\":1}}],[\"在实际应用中\",{\"1\":{\"94\":1,\"600\":1}}],[\"在实例被创建后调用\",{\"1\":{\"114\":1}}],[\"在实例被创建之前调用\",{\"1\":{\"114\":1}}],[\"在实例初始化之后\",{\"1\":{\"87\":1}}],[\"在connect函数中使用mapstatetoprops和mapdispatchtoprops函数连接组件的props和redux的状态和操作\",{\"1\":{\"407\":1}}],[\"在computed中\",{\"1\":{\"440\":1}}],[\"在components选项中将button\",{\"1\":{\"91\":1}}],[\"在commonjs模块化中\",{\"1\":{\"200\":1}}],[\"在css中\",{\"1\":{\"98\":1,\"146\":2}}],[\"在child组件中\",{\"1\":{\"93\":1}}],[\"在moduleb中访问modulea的状态\",{\"1\":{\"444\":1}}],[\"在modules选项中列出每个模块\",{\"1\":{\"435\":1}}],[\"在methods中\",{\"1\":{\"440\":1}}],[\"在mysql中使用drop\",{\"1\":{\"133\":1,\"134\":1}}],[\"在mysql中使用create\",{\"1\":{\"133\":1,\"134\":1}}],[\"在mycontext\",{\"1\":{\"37\":1}}],[\"在main\",{\"1\":{\"93\":2,\"412\":1}}],[\"在子组件中通过this\",{\"1\":{\"93\":1}}],[\"在整个应用中就可以直接使用<button\",{\"1\":{\"91\":1}}],[\"在第一次声明的时候加上static关键字\",{\"1\":{\"524\":1}}],[\"在第一个例子中\",{\"1\":{\"82\":1}}],[\"在第二个例子中\",{\"1\":{\"82\":1}}],[\"在v6中\",{\"1\":{\"395\":2}}],[\"在vuex的入口文件\",{\"1\":{\"439\":1}}],[\"在vuex的创建过程中\",{\"1\":{\"438\":1}}],[\"在vuex模块中\",{\"1\":{\"436\":1}}],[\"在vuex中\",{\"1\":{\"428\":1,\"429\":1,\"430\":1,\"433\":1,\"434\":1,\"435\":1,\"444\":2}}],[\"在vue应用的入口文件\",{\"1\":{\"427\":1,\"438\":1}}],[\"在vue应用的模板中\",{\"1\":{\"412\":1}}],[\"在vue应用中使用vuex插件\",{\"1\":{\"426\":1}}],[\"在vue模板中\",{\"1\":{\"417\":1}}],[\"在vue组件的方法中\",{\"1\":{\"416\":1}}],[\"在vue组件中使用vuex的时候\",{\"1\":{\"444\":1}}],[\"在vue组件中使用vuex\",{\"1\":{\"441\":1,\"444\":1}}],[\"在vue组件中使用插槽可以实现以下目的\",{\"1\":{\"96\":1}}],[\"在vue组件中可以通过this\",{\"1\":{\"426\":1}}],[\"在vue组件中\",{\"1\":{\"91\":1}}],[\"在vue\",{\"1\":{\"415\":1}}],[\"在vue项目的模板文件中\",{\"1\":{\"413\":1}}],[\"在vue项目的路由配置文件\",{\"1\":{\"413\":1}}],[\"在vue实例中\",{\"1\":{\"412\":1,\"413\":1}}],[\"在vue中\",{\"1\":{\"90\":1,\"91\":1,\"93\":1,\"417\":2}}],[\"在vue的spa中\",{\"1\":{\"63\":1}}],[\"在v\",{\"1\":{\"70\":1}}],[\"在底层机制中\",{\"1\":{\"68\":1}}],[\"在传统的多页面应用中\",{\"1\":{\"63\":1}}],[\"在任何页面中作为\",{\"1\":{\"61\":1}}],[\"在webpack配置中\",{\"1\":{\"485\":1,\"486\":1,\"488\":1,\"489\":1,\"490\":1,\"500\":1}}],[\"在webpack配置文件中\",{\"1\":{\"467\":1}}],[\"在webpack配置文件中指定多个入口起点\",{\"1\":{\"458\":1}}],[\"在webpack\",{\"1\":{\"479\":3,\"481\":1,\"483\":1}}],[\"在webpack构建完成后执行\",{\"1\":{\"477\":1}}],[\"在webpack构建过程中\",{\"1\":{\"471\":1}}],[\"在webpack开始构建之前执行\",{\"1\":{\"477\":1}}],[\"在webpack中\",{\"1\":{\"455\":1,\"456\":1,\"457\":1,\"460\":1,\"462\":1,\"476\":1,\"479\":1}}],[\"在web应用程序中\",{\"1\":{\"369\":1}}],[\"在web\",{\"1\":{\"57\":1}}],[\"在web开发中\",{\"1\":{\"28\":1,\"129\":1,\"465\":1}}],[\"在后代元素中查找特定元素\",{\"1\":{\"303\":1}}],[\"在后台执行耗时任务\",{\"1\":{\"57\":1}}],[\"在后续需要使用相同数据的时候\",{\"1\":{\"55\":1}}],[\"在前端开发中\",{\"1\":{\"53\":2,\"56\":1,\"200\":1}}],[\"在每个路由组件中\",{\"1\":{\"384\":1}}],[\"在每个阶段都有对应的生命周期方法可以重写\",{\"1\":{\"22\":1}}],[\"在每次构建前清空输出目录\",{\"1\":{\"476\":1}}],[\"在每次加载应用程序时\",{\"1\":{\"439\":1}}],[\"在每次mutation被提交时\",{\"1\":{\"437\":1}}],[\"在每次\",{\"1\":{\"437\":1}}],[\"在每次循环时执行的代码\",{\"1\":{\"255\":1}}],[\"在每次组件更新时都会自动执行侦听器\",{\"1\":{\"110\":1}}],[\"在每次组件更新时都会自动执行该函数\",{\"1\":{\"110\":1}}],[\"在每次调用时\",{\"1\":{\"52\":1}}],[\"在javascript中也可以使用正则表达式来处理字符串\",{\"1\":{\"279\":1}}],[\"在javascript中\",{\"1\":{\"52\":2,\"199\":1,\"462\":1,\"511\":1}}],[\"在jsx中\",{\"1\":{\"14\":3}}],[\"在函数声明中\",{\"1\":{\"313\":1}}],[\"在函数作用域中定义的变量只能在该函数内部可见\",{\"1\":{\"311\":1}}],[\"在函数内部\",{\"1\":{\"262\":1}}],[\"在函数内部声明的变量具有局部作用域\",{\"1\":{\"249\":1}}],[\"在函数暂停时\",{\"1\":{\"195\":1}}],[\"在函数参数中使用\",{\"1\":{\"172\":1}}],[\"在函数调用中使用展开操作符\",{\"1\":{\"172\":1}}],[\"在函数方面引入了许多新的功能和语法\",{\"1\":{\"172\":1}}],[\"在函数式组件中\",{\"1\":{\"50\":1}}],[\"在函数组件中使用\",{\"1\":{\"393\":1}}],[\"在函数组件中\",{\"1\":{\"19\":1,\"21\":1,\"26\":1}}],[\"在store\",{\"1\":{\"429\":3,\"430\":2,\"431\":2,\"432\":2,\"433\":3}}],[\"在store文件夹中创建一个store\",{\"1\":{\"427\":1}}],[\"在stylus中\",{\"1\":{\"161\":1}}],[\"在style标签中\",{\"1\":{\"142\":1}}],[\"在styles\",{\"1\":{\"142\":1}}],[\"在submitform\",{\"1\":{\"346\":1}}],[\"在suspense组件中\",{\"1\":{\"51\":1}}],[\"在shouldcomponentupdate方法中编写适当的逻辑\",{\"1\":{\"48\":1}}],[\"在src\",{\"1\":{\"5\":1}}],[\"在自定义hooks中\",{\"1\":{\"42\":1}}],[\"在很大程度上简化了在函数式组件中处理状态和副作用的逻辑\",{\"1\":{\"40\":1}}],[\"在这些应用程序中\",{\"1\":{\"400\":1}}],[\"在这种布局中\",{\"1\":{\"147\":1}}],[\"在这种情况下\",{\"1\":{\"48\":1,\"110\":1,\"324\":1}}],[\"在这一步\",{\"1\":{\"87\":1}}],[\"在这个配置对象中\",{\"1\":{\"394\":1}}],[\"在这个组件中\",{\"1\":{\"384\":1}}],[\"在这个装饰器函数中\",{\"1\":{\"324\":1}}],[\"在这个规则中\",{\"1\":{\"150\":1,\"152\":1}}],[\"在这个示例中\",{\"1\":{\"36\":1,\"37\":1,\"38\":1,\"92\":1,\"95\":1,\"413\":1,\"422\":1,\"437\":1,\"440\":4,\"454\":1}}],[\"在这个例子中不会执行\",{\"1\":{\"193\":1}}],[\"在这个例子中\",{\"1\":{\"35\":1,\"70\":1,\"82\":3,\"85\":2,\"87\":1,\"96\":1,\"97\":1,\"258\":8,\"259\":1,\"263\":6,\"413\":2,\"422\":1,\"442\":2}}],[\"在这里定义vue数据\",{\"1\":{\"442\":1}}],[\"在这里添加一些逻辑\",{\"1\":{\"421\":6}}],[\"在这里可以初始化非响应式数据\",{\"1\":{\"442\":1}}],[\"在这里可以通过\",{\"1\":{\"391\":1}}],[\"在这里可以对目标类上的方法的指定参数进行检查或修改\",{\"1\":{\"204\":1}}],[\"在这里编写处理子元素点击事件的代码\",{\"1\":{\"302\":1}}],[\"在这里编写自定义插件的代码\",{\"1\":{\"298\":1}}],[\"在这里编写针对每个li元素的操作\",{\"1\":{\"291\":1}}],[\"在这里编写你的代码\",{\"1\":{\"285\":1,\"287\":2}}],[\"在这里处理非响应式数据的更新逻辑\",{\"1\":{\"442\":1}}],[\"在这里处理表单提交逻辑\",{\"1\":{\"442\":1}}],[\"在这里处理服务器响应\",{\"1\":{\"289\":1}}],[\"在这里处理返回的数据\",{\"1\":{\"289\":1}}],[\"在这里\",{\"1\":{\"22\":1}}],[\"在这里进行异步数据加载\",{\"1\":{\"22\":1}}],[\"在这里返回组件的jsx表示\",{\"1\":{\"22\":1}}],[\"在显示错误信息时\",{\"1\":{\"32\":1}}],[\"在选择受控组件或非受控组件时\",{\"1\":{\"31\":1}}],[\"在选择函数组件还是类组件时\",{\"1\":{\"18\":1}}],[\"在受控组件中\",{\"1\":{\"31\":1}}],[\"在组件上定义mapstatetoprops和mapdispatchtoprops函数\",{\"1\":{\"406\":1}}],[\"在组件实例创建之前调用\",{\"1\":{\"117\":1}}],[\"在组件实例化时调用\",{\"1\":{\"22\":1}}],[\"在组件被卸载之后调用\",{\"1\":{\"114\":1}}],[\"在组件被卸载之前调用\",{\"1\":{\"114\":1}}],[\"在组件被挂载后调用\",{\"1\":{\"114\":1}}],[\"在组件第一次挂载时自动执行该函数\",{\"1\":{\"110\":1}}],[\"在组件第一次渲染完成后调用\",{\"1\":{\"22\":1}}],[\"在组件中分发\",{\"1\":{\"444\":1}}],[\"在组件中提交\",{\"1\":{\"444\":1}}],[\"在组件中提交mutation修改状态\",{\"1\":{\"431\":1}}],[\"在组件中调用this\",{\"1\":{\"433\":1}}],[\"在组件中调用mutations来修改state中的属性\",{\"1\":{\"429\":1}}],[\"在组件中使用mapactions和mapmutations来使用action和mutation\",{\"1\":{\"433\":1}}],[\"在组件中使用this\",{\"1\":{\"432\":1}}],[\"在组件中使用getter获取状态\",{\"1\":{\"430\":1}}],[\"在组件中使用响应式对象\",{\"1\":{\"102\":1}}],[\"在组件中访问state属性\",{\"1\":{\"429\":1}}],[\"在组件中\",{\"1\":{\"403\":1,\"407\":1,\"413\":1,\"422\":1}}],[\"在组件中可以通过\",{\"1\":{\"386\":1}}],[\"在组件中可以使用mapstate\",{\"1\":{\"93\":1}}],[\"在组件中应用混入\",{\"1\":{\"97\":1}}],[\"在组件中data为什么必须是个函数\",{\"1\":{\"90\":1}}],[\"在组件中定义shouldcomponentupdate方法\",{\"1\":{\"48\":1}}],[\"在组件中定义一个处理提交的回调函数\",{\"1\":{\"33\":1}}],[\"在组件挂载后发起异步请求\",{\"1\":{\"50\":1}}],[\"在组件挂载期间\",{\"1\":{\"41\":1}}],[\"在组件内部实现shouldcomponentupdate方法来手动判断组件是否需要重新渲染\",{\"1\":{\"49\":1}}],[\"在组件准备更新前被调用\",{\"1\":{\"48\":1}}],[\"在组件状态变化时\",{\"1\":{\"45\":1}}],[\"在组件卸载或重新渲染时执行清理操作\",{\"1\":{\"41\":1}}],[\"在组件树中的任意位置获取父组件的数据\",{\"1\":{\"37\":1}}],[\"在组件即将从dom中移除时调用\",{\"1\":{\"22\":1}}],[\"在组件更新之后调用\",{\"1\":{\"114\":1}}],[\"在组件更新之前调用\",{\"1\":{\"114\":1}}],[\"在组件更新完成后调用\",{\"1\":{\"22\":1}}],[\"在组件更新前调用\",{\"1\":{\"22\":2}}],[\"在组件接收到新的props时调用\",{\"1\":{\"22\":1}}],[\"在组件的生命周期中可以通过this\",{\"1\":{\"20\":1}}],[\"在渲染过程中调用\",{\"1\":{\"22\":1}}],[\"在点击按钮时\",{\"1\":{\"20\":1}}],[\"在上述配置中\",{\"1\":{\"463\":1}}],[\"在上述示例配置中\",{\"1\":{\"460\":1}}],[\"在上述示例代码中\",{\"1\":{\"415\":1}}],[\"在上述示例中\",{\"1\":{\"13\":1,\"16\":1,\"36\":1,\"102\":2,\"151\":1,\"198\":5,\"200\":2,\"202\":6,\"204\":5,\"249\":1,\"270\":1,\"272\":1,\"310\":3,\"315\":1,\"367\":1,\"368\":1,\"369\":1,\"396\":2,\"456\":1,\"461\":1,\"537\":1}}],[\"在上述代码中\",{\"1\":{\"310\":1,\"324\":1,\"403\":4,\"462\":1}}],[\"在上述例子中\",{\"1\":{\"150\":1,\"152\":1,\"267\":2,\"272\":3,\"310\":1,\"441\":1}}],[\"在上述命令中\",{\"1\":{\"133\":1}}],[\"在上一步创建的web\",{\"1\":{\"57\":1}}],[\"在上面的代码中\",{\"1\":{\"86\":1,\"154\":1,\"155\":1,\"156\":1,\"157\":1,\"196\":1,\"197\":1,\"394\":1,\"397\":1,\"405\":2}}],[\"在上面的例子中\",{\"1\":{\"42\":2,\"50\":2,\"51\":2,\"52\":2,\"91\":2,\"96\":1,\"97\":1,\"98\":1,\"126\":1,\"261\":1,\"264\":1,\"267\":2,\"269\":1,\"272\":1,\"310\":1,\"312\":5,\"314\":1,\"389\":1,\"392\":1,\"401\":1,\"417\":1,\"423\":1,\"444\":1}}],[\"在上面的示中\",{\"1\":{\"41\":1}}],[\"在上面的示例中\",{\"1\":{\"20\":1,\"41\":8,\"102\":1,\"129\":1,\"161\":3,\"183\":3,\"184\":2,\"186\":2,\"188\":2,\"196\":2,\"198\":1,\"228\":1,\"231\":1,\"232\":1,\"268\":1,\"273\":2,\"330\":1,\"391\":1,\"417\":2,\"418\":1,\"437\":1,\"439\":1,\"467\":1,\"569\":1,\"579\":1,\"590\":1,\"591\":2}}],[\"在使用命名空间时\",{\"1\":{\"584\":1}}],[\"在使用模块之前\",{\"1\":{\"509\":1}}],[\"在使用webpack开发和构建应用程序时\",{\"1\":{\"498\":1}}],[\"在使用tree\",{\"1\":{\"462\":1}}],[\"在使用typescript时\",{\"1\":{\"444\":1}}],[\"在使用redux之前\",{\"1\":{\"407\":1}}],[\"在使用cookie和session时需要注意\",{\"1\":{\"357\":1}}],[\"在使用\",{\"1\":{\"330\":1}}],[\"在使用递归之前\",{\"1\":{\"269\":1}}],[\"在使用递归时\",{\"1\":{\"269\":2}}],[\"在使用闭包时\",{\"1\":{\"268\":1}}],[\"在使用定时器时\",{\"1\":{\"260\":1}}],[\"在使用变量之前\",{\"1\":{\"249\":1}}],[\"在使用混入时\",{\"1\":{\"97\":1}}],[\"在使用v\",{\"1\":{\"70\":1}}],[\"在使用shouldcomponentupdate方法进行手动优化时\",{\"1\":{\"48\":1}}],[\"在使用这些优化方法之前\",{\"1\":{\"47\":1}}],[\"在使用多个hooks时\",{\"1\":{\"43\":1}}],[\"在使用hooks时需要注意以下几个事项\",{\"1\":{\"43\":1}}],[\"在使用事件处理程序时\",{\"1\":{\"25\":1}}],[\"在使用时都可以像使用普通的react组件一样\",{\"1\":{\"19\":1}}],[\"在使用jsx时\",{\"1\":{\"13\":1,\"14\":1,\"15\":1}}],[\"在标签中插入javascript表达式\",{\"1\":{\"15\":1}}],[\"在构建大规模\",{\"1\":{\"9\":1}}],[\"在终端中执行以下命令\",{\"1\":{\"440\":1}}],[\"在终端中执行以下命令以运行vue应用\",{\"1\":{\"412\":1}}],[\"在终端中执行以下命令以安装vue\",{\"1\":{\"412\":1}}],[\"在终端中运行以下命令\",{\"1\":{\"375\":1,\"475\":1}}],[\"在终端中\",{\"1\":{\"5\":1}}],[\"在\",{\"0\":{\"4\":1},\"1\":{\"3\":6,\"91\":2,\"94\":1,\"95\":2,\"102\":2,\"110\":3,\"114\":1,\"161\":3,\"165\":1,\"186\":1,\"196\":5,\"213\":1,\"224\":1,\"238\":1,\"246\":1,\"252\":1,\"253\":1,\"260\":1,\"267\":1,\"270\":2,\"272\":1,\"275\":1,\"276\":2,\"310\":3,\"311\":4,\"312\":2,\"313\":2,\"314\":1,\"318\":1,\"321\":1,\"322\":1,\"326\":2,\"327\":1,\"328\":2,\"329\":1,\"330\":2,\"331\":3,\"364\":1,\"365\":1,\"366\":2,\"368\":1,\"386\":3,\"391\":1,\"393\":3,\"394\":2,\"397\":1,\"410\":1,\"419\":1,\"423\":1,\"438\":1,\"444\":1,\"475\":2,\"515\":1,\"525\":1,\"528\":1,\"535\":1,\"539\":1,\"569\":1,\"579\":1}}],[\"并验证和过滤你从外部来源接收的json数据\",{\"1\":{\"604\":1}}],[\"并验证服务器的身份\",{\"1\":{\"359\":1}}],[\"并减少安全风险\",{\"1\":{\"603\":1}}],[\"并仔细阅读并理解相关的安全建议和最佳实践\",{\"1\":{\"602\":1}}],[\"并产生一个致命错误\",{\"1\":{\"599\":1}}],[\"并避免名称冲突\",{\"1\":{\"584\":1}}],[\"并避免状态的错乱和混乱\",{\"1\":{\"40\":1}}],[\"并继续下一次循环迭代\",{\"1\":{\"564\":1}}],[\"并导航到您创建的应用程序文件夹\",{\"1\":{\"508\":1}}],[\"并保存为app\",{\"1\":{\"508\":1}}],[\"并保持状态的单一来源\",{\"1\":{\"429\":1}}],[\"并保持正确的url历史记录\",{\"1\":{\"384\":1}}],[\"并保持其非阻塞特性\",{\"1\":{\"270\":1}}],[\"并保持不停地运行\",{\"1\":{\"270\":1}}],[\"并输入以下命令来检查node\",{\"1\":{\"507\":1}}],[\"并尝试修复它\",{\"1\":{\"499\":1}}],[\"并并行处理模块和依赖关系的解析和转换\",{\"1\":{\"497\":1}}],[\"并启用热模块替换\",{\"1\":{\"490\":2}}],[\"并命名为bundle\",{\"1\":{\"486\":1}}],[\"并创建依赖关系图\",{\"1\":{\"485\":1}}],[\"并创建一个路由器实例\",{\"1\":{\"412\":1}}],[\"并创建一个具有多个特性的新类\",{\"1\":{\"330\":1}}],[\"并创建一个新的todo组件\",{\"1\":{\"5\":1}}],[\"并嵌入到打包后的文件中\",{\"1\":{\"476\":1}}],[\"并嵌套在profile组件的视图中\",{\"1\":{\"415\":1}}],[\"并解决样式文件之间的依赖关系\",{\"1\":{\"476\":1}}],[\"并解决状态保存的问题\",{\"1\":{\"70\":1}}],[\"并运行以下命令来初始化项目并生成\",{\"1\":{\"475\":1}}],[\"并运行以下命令来创建一个新的\",{\"1\":{\"1\":1}}],[\"并按需加载\",{\"1\":{\"467\":1,\"504\":1}}],[\"并按照提示进行安装\",{\"1\":{\"507\":1}}],[\"并按照提示设置项目的基本信息\",{\"1\":{\"364\":1}}],[\"并按照配置文件中的设置进行构建\",{\"1\":{\"454\":1}}],[\"并按照事件循环的顺序被执行\",{\"1\":{\"270\":1}}],[\"并按照从上到下的顺序依次应用\",{\"1\":{\"204\":1}}],[\"并降低后续维护和更新的工作量\",{\"1\":{\"466\":1}}],[\"并采取适当的措施解决问题\",{\"1\":{\"501\":1}}],[\"并采取相应的补救措施\",{\"1\":{\"602\":1}}],[\"并采取相应的策略来优化系统的性能和可靠性\",{\"1\":{\"465\":1}}],[\"并采取相应的行动\",{\"1\":{\"33\":1}}],[\"并采用lru\",{\"1\":{\"465\":1}}],[\"并维护插件的运行时状态\",{\"1\":{\"464\":1}}],[\"并与其他主流框架兼容\",{\"1\":{\"604\":1}}],[\"并与应用程序的其他组件进行交互\",{\"1\":{\"464\":1}}],[\"并与redux\",{\"1\":{\"403\":1}}],[\"并从根目录开始解析\",{\"1\":{\"460\":1}}],[\"并从当前文件所在的位置开始解析\",{\"1\":{\"460\":1}}],[\"并改善用户体验\",{\"1\":{\"458\":1}}],[\"并生成一个单独的输出文件\",{\"1\":{\"458\":1}}],[\"并生成一个合并后的声明\",{\"1\":{\"329\":1}}],[\"并生成可读性更好的输出文件\",{\"1\":{\"457\":1}}],[\"并添加以下基本配置\",{\"1\":{\"475\":1}}],[\"并添加以下代码\",{\"1\":{\"440\":2}}],[\"并添加了一个私有的\",{\"1\":{\"312\":1}}],[\"并添加了自己的\",{\"1\":{\"183\":1}}],[\"并查看每个mutation被调用时的状态快照\",{\"1\":{\"438\":1}}],[\"并打开vue\",{\"1\":{\"438\":1}}],[\"并打印出结果\",{\"1\":{\"258\":1}}],[\"并触发mutation来改变state的值\",{\"1\":{\"436\":1}}],[\"并触发重新渲染\",{\"1\":{\"11\":1,\"20\":1}}],[\"并接受额外的参数作为需要的数据\",{\"1\":{\"436\":1}}],[\"并接收来自web\",{\"1\":{\"57\":1}}],[\"并接收两个参数\",{\"1\":{\"48\":1}}],[\"并独立进行开发\",{\"1\":{\"434\":1}}],[\"并编写与应用程序相关的状态\",{\"1\":{\"427\":1}}],[\"并编写render方法来返回组件的结构和内容\",{\"1\":{\"18\":1}}],[\"并以相应的规则保证状态的一致性\",{\"1\":{\"425\":1}}],[\"并提高代码的复用性和可扩展性\",{\"1\":{\"583\":1}}],[\"并提高用户体验\",{\"1\":{\"480\":1}}],[\"并提升应用的性能\",{\"1\":{\"423\":1}}],[\"并提供全局访问点\",{\"1\":{\"592\":1}}],[\"并提供链式调用的方式处理操作结果\",{\"1\":{\"322\":1}}],[\"并提供代码补全和类型推断的功能\",{\"1\":{\"315\":1}}],[\"并提供额外的功能和特性\",{\"1\":{\"293\":1}}],[\"并提供错误信息\",{\"1\":{\"264\":1}}],[\"并提供加载好的图片作为结果\",{\"1\":{\"264\":1}}],[\"并提供更好的代码结构和可维护性\",{\"1\":{\"584\":1}}],[\"并提供更好的开发体验\",{\"1\":{\"453\":1,\"459\":1}}],[\"并提供更好的用户体验和更高的开发效率\",{\"1\":{\"343\":1}}],[\"并提供更好的用户体验\",{\"1\":{\"239\":1}}],[\"并提供更灵活的控制\",{\"1\":{\"263\":1}}],[\"并提供离线访问和其他功能\",{\"1\":{\"240\":1}}],[\"并提供了相应方法的具体实现\",{\"1\":{\"591\":1}}],[\"并提供了对有用信息的直接访问\",{\"1\":{\"522\":1}}],[\"并提供了有关模块大小\",{\"1\":{\"497\":1}}],[\"并提供了访问状态的方法\",{\"1\":{\"400\":1}}],[\"并提供了简便的ajax方法\",{\"1\":{\"343\":1}}],[\"并提供了用于创建和操作对象的方法\",{\"1\":{\"312\":1}}],[\"并提供了更好的错误处理机制\",{\"1\":{\"272\":1}}],[\"并提供了更好的代码组织和封装\",{\"1\":{\"199\":1}}],[\"并提供了更丰富和强大的模块化功能和语法\",{\"1\":{\"200\":1}}],[\"并提供了更灵活和可维护的样式规则\",{\"1\":{\"161\":3}}],[\"并提供了一套声明式的\",{\"1\":{\"60\":1}}],[\"并提供了一些表单级别的属性和事件\",{\"1\":{\"30\":1}}],[\"并提供多种编程语言的api和接口\",{\"1\":{\"131\":1}}],[\"并提供改进建议\",{\"1\":{\"58\":1}}],[\"并提供有关代码执行\",{\"1\":{\"58\":1}}],[\"并提供翻页功能\",{\"1\":{\"53\":1}}],[\"并提供相应的事件处理函数\",{\"1\":{\"38\":1}}],[\"并提供一个事件处理函数\",{\"1\":{\"38\":1}}],[\"并提供适当的用户反馈\",{\"1\":{\"33\":1}}],[\"并提供及时反馈\",{\"1\":{\"32\":1}}],[\"并不是必须的\",{\"1\":{\"417\":1}}],[\"并不会重新加载整个页面\",{\"1\":{\"416\":1}}],[\"并连接到redux\",{\"1\":{\"407\":1}}],[\"并尽量保持扁平化\",{\"1\":{\"407\":1}}],[\"并尽量最小化对dom的操作\",{\"1\":{\"46\":1}}],[\"并访问和操作redux中的状态\",{\"1\":{\"406\":1}}],[\"并定义了三个枚举常量\",{\"1\":{\"537\":1}}],[\"并定义路由规则\",{\"1\":{\"413\":1}}],[\"并定义路由处理逻辑\",{\"1\":{\"367\":1}}],[\"并定义初始状态和操作\",{\"1\":{\"407\":1}}],[\"并定义一个简单的reducer来处理状态的更新\",{\"1\":{\"406\":1}}],[\"并能够提供一种可维护的方式来处理复杂的状态逻辑\",{\"1\":{\"403\":1}}],[\"并能够同时执行其他任务\",{\"1\":{\"322\":1}}],[\"并简化了状态在不同组件间的传递与共享\",{\"1\":{\"402\":1}}],[\"并基于配置对象构建路由树\",{\"1\":{\"398\":1}}],[\"并实现其中的抽象方法\",{\"1\":{\"591\":1}}],[\"并实现一些高级编程技术\",{\"1\":{\"590\":1}}],[\"并实现各种各样的过渡效果\",{\"1\":{\"395\":1}}],[\"并实现了各自的\",{\"1\":{\"183\":1}}],[\"并管理过渡状态\",{\"1\":{\"395\":1}}],[\"并渲染对应的组件\",{\"1\":{\"394\":1}}],[\"并允许嵌套路由\",{\"1\":{\"389\":1}}],[\"并显示相关的错误信息\",{\"1\":{\"580\":1}}],[\"并显示用户的id\",{\"1\":{\"420\":1}}],[\"并显示\",{\"1\":{\"384\":1}}],[\"并遵循最佳实践\",{\"1\":{\"371\":1}}],[\"并监视api的运行状况\",{\"1\":{\"371\":1}}],[\"并限制对敏感数据的访问\",{\"1\":{\"371\":1}}],[\"并确定接口的输入和输出格式\",{\"1\":{\"371\":1}}],[\"并确保只接受合法和预期的值\",{\"1\":{\"602\":1}}],[\"并确保\",{\"1\":{\"581\":1}}],[\"并确保代码的兼容性和性能\",{\"1\":{\"466\":1}}],[\"并确保代码的质量和稳定性\",{\"1\":{\"337\":1}}],[\"并确保项目的模块导入路径正确无误\",{\"1\":{\"460\":1}}],[\"并确保界面响应正常\",{\"1\":{\"372\":1}}],[\"并确保每个服务器都能访问相同的存储系统\",{\"1\":{\"357\":1}}],[\"并确保您具备必要的管理员权限\",{\"1\":{\"132\":1}}],[\"并确保提交过程的可靠性和准确性\",{\"1\":{\"33\":1}}],[\"并用服务器的公钥进行加密\",{\"1\":{\"359\":1}}],[\"并用react组件来描述ui的结构和状态\",{\"1\":{\"45\":1}}],[\"并向服务器发送一个ack包\",{\"1\":{\"361\":1}}],[\"并向服务器发送加密通信的请求\",{\"1\":{\"359\":1}}],[\"并向客户端发送一个ack包\",{\"1\":{\"361\":1}}],[\"并向客户端发送一个syn\",{\"1\":{\"361\":1}}],[\"并向其添加了键值对\",{\"1\":{\"310\":1}}],[\"并合理配置相应的缓存头部信息\",{\"1\":{\"356\":1}}],[\"并合理规划你的事件名称和事件数据\",{\"1\":{\"38\":1}}],[\"并默认创建一个名为\",{\"1\":{\"335\":1}}],[\"并位于单独的一行上\",{\"1\":{\"331\":1}}],[\"并拥有每个函数的函数体\",{\"1\":{\"329\":1}}],[\"并获得更好的开发体验\",{\"1\":{\"325\":1}}],[\"并描述模块内部的类型和导出\",{\"1\":{\"325\":1}}],[\"并指定它们的命名空间\",{\"1\":{\"435\":1}}],[\"并指定它们对应的组件\",{\"1\":{\"384\":1}}],[\"并指定函数名和参数列表\",{\"1\":{\"566\":1}}],[\"并指定函数名\",{\"1\":{\"313\":1}}],[\"并指定了要执行的函数\",{\"1\":{\"263\":1}}],[\"并调用showsuggestions\",{\"1\":{\"347\":1}}],[\"并调用了它的\",{\"1\":{\"312\":1}}],[\"并调用它\",{\"1\":{\"258\":1}}],[\"并赋值为\",{\"1\":{\"311\":4}}],[\"并利用ajax进行局部更新\",{\"1\":{\"343\":1}}],[\"并利用\",{\"1\":{\"310\":1}}],[\"并利用promise来管理异步操作的状态和结果\",{\"1\":{\"264\":1}}],[\"并递归地拷贝原对象的每个属性\",{\"1\":{\"281\":1}}],[\"并递归地拷贝原数组的每个元素\",{\"1\":{\"281\":1}}],[\"并复制原始对象或数组中的属性\",{\"1\":{\"281\":2}}],[\"并及时处理和修复堆栈溢出问题\",{\"1\":{\"277\":1}}],[\"并标记所有从根对象\",{\"1\":{\"276\":1}}],[\"并找到\",{\"1\":{\"267\":1}}],[\"并成功执行\",{\"1\":{\"267\":1}}],[\"并替换父元素中的旧子元素\",{\"1\":{\"265\":1}}],[\"并移除了\",{\"1\":{\"265\":1}}],[\"并为用户创建一个对应的身份标识\",{\"1\":{\"370\":1}}],[\"并为每个路由指定一个处理函数来处理请求\",{\"1\":{\"365\":1}}],[\"并为其onclick属性赋值了一个匿名函数作为事件处理函数\",{\"1\":{\"263\":1}}],[\"并为子组件提供了额外的内容作为插槽的内容\",{\"1\":{\"96\":1}}],[\"并执行其回调函数\",{\"1\":{\"270\":1}}],[\"并执行对应的回调函数\",{\"1\":{\"270\":1}}],[\"并执行相应的处理代码\",{\"1\":{\"588\":1}}],[\"并执行相应的操作\",{\"1\":{\"76\":1,\"78\":1,\"301\":1,\"494\":1}}],[\"并执行相关的回调函数\",{\"1\":{\"264\":1}}],[\"并执行指定的函数\",{\"1\":{\"263\":1}}],[\"并立即调用它\",{\"1\":{\"258\":1}}],[\"并防止变量泄漏到全局作用域\",{\"1\":{\"258\":1}}],[\"并\",{\"1\":{\"258\":1}}],[\"并直接返回它们的和\",{\"1\":{\"258\":1}}],[\"并插入\",{\"1\":{\"257\":1}}],[\"并对整个构建过程进行干预\",{\"1\":{\"476\":1}}],[\"并对应用程序的状态进行时间旅行式的调试\",{\"1\":{\"404\":1}}],[\"并对应了子路由配置中的根\",{\"1\":{\"396\":1}}],[\"并对其执行相同的操作\",{\"1\":{\"291\":1}}],[\"并对其进行操作或应用事件\",{\"1\":{\"286\":1}}],[\"并对响应进行处理\",{\"1\":{\"234\":1}}],[\"并对每一项进行操作\",{\"1\":{\"198\":1}}],[\"并对每一项数据进行处理\",{\"1\":{\"198\":1}}],[\"并对每个组件进行单独的状态管理\",{\"1\":{\"45\":1}}],[\"并帮助辅助技术和搜索引擎更好地理解和处理页面内容\",{\"1\":{\"230\":1}}],[\"并帮助用户在提交表单时避免错误\",{\"1\":{\"32\":1}}],[\"并增强用户体验\",{\"1\":{\"219\":1}}],[\"并处理请求和响应的各个阶段\",{\"1\":{\"292\":1}}],[\"并处理接收到的事件\",{\"1\":{\"198\":1}}],[\"并处理可能发生的异常\",{\"1\":{\"196\":1}}],[\"并进入\",{\"1\":{\"198\":1}}],[\"并进行定制化的转换和处理\",{\"1\":{\"463\":1}}],[\"并进行一些计算或转换操作\",{\"1\":{\"430\":1}}],[\"并进行处理或筛选\",{\"1\":{\"198\":1}}],[\"并进行复杂的数据查询\",{\"1\":{\"134\":1}}],[\"并进行渲染\",{\"1\":{\"68\":1}}],[\"并抛出或处理失败的任务\",{\"1\":{\"198\":1}}],[\"并等待它们全部完成后再进行下一步操作\",{\"1\":{\"198\":1}}],[\"并发出一个警告\",{\"1\":{\"599\":1}}],[\"并发送适当的响应\",{\"1\":{\"365\":1}}],[\"并发执行异步任务\",{\"1\":{\"198\":2}}],[\"并发连接数等\",{\"1\":{\"138\":1}}],[\"并暂停函数执行\",{\"1\":{\"195\":1}}],[\"并包含一个或多个\",{\"1\":{\"186\":1}}],[\"并可选地插入新的元素\",{\"1\":{\"257\":1}}],[\"并可选地传入一个描述符字符串作为参数\",{\"1\":{\"174\":1}}],[\"并可以添加自己的特性\",{\"1\":{\"583\":1}}],[\"并可以携带其他自定义信息\",{\"1\":{\"402\":1,\"403\":1}}],[\"并可以将回调函数的嵌套结构转换为链式调用的形式\",{\"1\":{\"272\":1}}],[\"并可以使用\",{\"1\":{\"267\":1}}],[\"并可以返回一个值\",{\"1\":{\"251\":1,\"258\":1}}],[\"并可以通过指定的名称和参数来调用执行\",{\"1\":{\"565\":1}}],[\"并可以通过\",{\"1\":{\"196\":1}}],[\"并可以在自己的计算机上进行node\",{\"1\":{\"507\":1}}],[\"并可以在此基础上添加自己独有的属性和方法\",{\"1\":{\"183\":1}}],[\"并可以在应用程序中多次使用\",{\"1\":{\"90\":1}}],[\"并自动将webpack打包后的资源文件\",{\"1\":{\"476\":1}}],[\"并自动转换为标准的css文件\",{\"1\":{\"161\":1}}],[\"并自动安装所需的依赖项\",{\"1\":{\"88\":1}}],[\"并支持响应式设计和大量的ui组件\",{\"1\":{\"160\":1}}],[\"并灵活地调整元素的大小\",{\"1\":{\"147\":1}}],[\"并使得代码更容易维护和扩展\",{\"1\":{\"434\":1}}],[\"并使代码更具可读性\",{\"1\":{\"316\":1}}],[\"并使代码更加简洁和易于理解\",{\"1\":{\"466\":1}}],[\"并使代码更加简洁\",{\"1\":{\"166\":1}}],[\"并使其浮动到其容器的左侧或右侧\",{\"1\":{\"147\":1}}],[\"并使用fclose\",{\"1\":{\"594\":1}}],[\"并使用filter\",{\"1\":{\"580\":1}}],[\"并使用它们\",{\"1\":{\"590\":1}}],[\"并使用它进行数值的乘法计算\",{\"1\":{\"258\":1}}],[\"并使用对象的属性和方法\",{\"1\":{\"583\":1}}],[\"并使用变量名后面加上括号\",{\"1\":{\"569\":1}}],[\"并使用该变量来动态调用函数\",{\"1\":{\"569\":1}}],[\"并使用相应的包名称进行引入\",{\"1\":{\"509\":1}}],[\"并使用vue\",{\"1\":{\"440\":1}}],[\"并使用state\",{\"1\":{\"427\":1}}],[\"并使用props属性来接收参数\",{\"1\":{\"420\":1}}],[\"并使用redux进行状态管理\",{\"1\":{\"407\":1}}],[\"并使用react组件进行渲染和交互\",{\"1\":{\"406\":1}}],[\"并使用https来保证数据的安全传输\",{\"1\":{\"357\":1}}],[\"并使用适当的语法\",{\"1\":{\"327\":1}}],[\"并使用箭头=>来指定函数的返回值类型\",{\"1\":{\"315\":1}}],[\"并使用各种操作和方法对数组进行操作\",{\"1\":{\"310\":1}}],[\"并使用\",{\"1\":{\"195\":1,\"196\":2,\"197\":1,\"198\":1,\"312\":2,\"323\":1,\"326\":1}}],[\"并使用了stylus的darken\",{\"1\":{\"161\":1}}],[\"并使用了sass的darken函数来定义鼠标悬停时的背景颜色\",{\"1\":{\"161\":1}}],[\"并使用了less的darken\",{\"1\":{\"161\":1}}],[\"并使用弹性盒子属性来定义子元素的大小和排列方式\",{\"1\":{\"148\":1}}],[\"并使用动画属性来指定动画的细节和行为\",{\"1\":{\"144\":1}}],[\"并使用this\",{\"1\":{\"18\":1}}],[\"并只对实际发生变化的部分进行更新\",{\"1\":{\"128\":1}}],[\"并只把实际dom中需要变动的部分更新\",{\"1\":{\"45\":1}}],[\"并初始化其值为0\",{\"1\":{\"102\":1}}],[\"并给它设置一个独立的name属性\",{\"1\":{\"98\":1}}],[\"并给出相应的分数和改进建议\",{\"1\":{\"58\":1}}],[\"并应用了mymixin混入对象\",{\"1\":{\"97\":1}}],[\"并设置为\",{\"1\":{\"358\":2}}],[\"并设置回调函数\",{\"1\":{\"271\":1}}],[\"并设置一个唯一的name属性\",{\"1\":{\"98\":1}}],[\"并设置\",{\"1\":{\"95\":1}}],[\"并更新height状态\",{\"1\":{\"41\":1}}],[\"并返回其对应的键名\",{\"1\":{\"578\":1}}],[\"并返回文件的url路径\",{\"1\":{\"491\":1}}],[\"并返回文件路径\",{\"1\":{\"455\":1}}],[\"并返回相应的文件路径\",{\"1\":{\"476\":1}}],[\"并返回新的状态\",{\"1\":{\"436\":1}}],[\"并返回新的state\",{\"1\":{\"407\":1}}],[\"并返回正确的响应\",{\"1\":{\"371\":1}}],[\"并返回适当的响应\",{\"1\":{\"365\":1}}],[\"并返回它\",{\"1\":{\"268\":1}}],[\"并返回被删除的元素组成的数组\",{\"1\":{\"257\":1}}],[\"并返回删除的元素\",{\"1\":{\"257\":2}}],[\"并返回数组的新长度\",{\"1\":{\"257\":2}}],[\"并返回解决的值\",{\"1\":{\"195\":1}}],[\"并返回该\",{\"1\":{\"193\":1}}],[\"并返回该索引\",{\"1\":{\"170\":1}}],[\"并返回该元素的值\",{\"1\":{\"578\":2}}],[\"并返回该元素\",{\"1\":{\"170\":1}}],[\"并返回该context的当前值\",{\"1\":{\"41\":1}}],[\"并返回结果\",{\"1\":{\"52\":2}}],[\"并返回\",{\"1\":{\"52\":2}}],[\"并返回一个输出结果\",{\"1\":{\"313\":1}}],[\"并返回一个新函数\",{\"1\":{\"258\":1}}],[\"并返回一个新数组\",{\"1\":{\"257\":1}}],[\"并返回一个新的状态对象\",{\"1\":{\"402\":1,\"403\":1}}],[\"并返回一个新的状态\",{\"1\":{\"400\":2,\"401\":5,\"402\":1}}],[\"并返回一个新的构造函数\",{\"1\":{\"324\":1}}],[\"并返回一个新的数组\",{\"1\":{\"170\":1}}],[\"并返回一个新的函数\",{\"1\":{\"52\":1}}],[\"并返回一个\",{\"1\":{\"193\":2}}],[\"并返回一个只读的响应式对象\",{\"1\":{\"102\":1}}],[\"并返回一个响应式代理对象\",{\"1\":{\"102\":1}}],[\"并返回一个响应式数据对象\",{\"1\":{\"102\":1}}],[\"并返回一个具有性能优化的新组件\",{\"1\":{\"47\":1}}],[\"并返回一个包含当前状态值和一个更新状态的函数的数组\",{\"1\":{\"41\":1}}],[\"并返回了一个包含count的数组以及两个操作count变量的函数\",{\"1\":{\"42\":1}}],[\"并返回当前状态和一个dispatch函数\",{\"1\":{\"41\":1}}],[\"并享受到更好的开发体验\",{\"1\":{\"40\":1}}],[\"并传递用户的id\",{\"1\":{\"420\":1}}],[\"并传递当前状态和派发的action作为参数\",{\"1\":{\"402\":1}}],[\"并传递当前的状态和action作为参数\",{\"1\":{\"401\":1}}],[\"并传递动态数据\",{\"1\":{\"367\":1}}],[\"并传递错误信息\",{\"1\":{\"192\":1}}],[\"并传递结果\",{\"1\":{\"192\":1}}],[\"并传递指定的参数列表\",{\"1\":{\"191\":1}}],[\"并传递相应的数据\",{\"1\":{\"38\":2}}],[\"并传递了name属性\",{\"1\":{\"19\":1}}],[\"并根据不同的开发和生产环境选择合适的源映射方式\",{\"1\":{\"468\":1}}],[\"并根据实际需求和场景进行权衡和优化\",{\"1\":{\"467\":1}}],[\"并根据实际需求来减少对资源的请求\",{\"1\":{\"467\":1}}],[\"并根据配置中指定的解析规则来解析模块路径\",{\"1\":{\"460\":1}}],[\"并根据插件的建议对项目进行优化\",{\"1\":{\"504\":1}}],[\"并根据插件的文档配置选项来定制插件的行为\",{\"1\":{\"456\":1}}],[\"并根据插件提供的文档进行配置和调用\",{\"1\":{\"293\":1}}],[\"并根据情况修改状态\",{\"1\":{\"428\":1}}],[\"并根据状态渲染用户界面\",{\"1\":{\"407\":1}}],[\"并根据父组件的渲染位置自动渲染匹配的子组件\",{\"1\":{\"396\":1}}],[\"并根据路由变化自定义过渡效果\",{\"1\":{\"395\":1}}],[\"并根据\",{\"1\":{\"330\":1}}],[\"并根据类型进行不同的操作或逻辑分支\",{\"1\":{\"317\":1}}],[\"并根据具体问题选择合适的方法\",{\"1\":{\"269\":1}}],[\"并根据具体的项目需求和开发团队的情况来评估使用react的适宜程度\",{\"1\":{\"9\":1}}],[\"并根据操作的结果调用\",{\"1\":{\"192\":1}}],[\"并根据对象类型的不同而执行不同的操作\",{\"1\":{\"183\":1}}],[\"并根据提供的描述符字符串检索它们\",{\"1\":{\"174\":1}}],[\"并根据需要调用其他模块的操作\",{\"1\":{\"444\":1}}],[\"并根据需要进行错误日志记录或错误处理\",{\"1\":{\"467\":1}}],[\"并根据需要进行处理和计算\",{\"1\":{\"444\":1}}],[\"并根据需要进行相应的处理\",{\"1\":{\"398\":1}}],[\"并根据需要进行操作\",{\"1\":{\"253\":1}}],[\"并根据需要进行浏览器前缀处理\",{\"1\":{\"150\":1}}],[\"并根据需要来切换\",{\"1\":{\"94\":1}}],[\"并根据需要去使用它们\",{\"1\":{\"36\":1}}],[\"并根据分析结果进行优化改进\",{\"1\":{\"58\":1}}],[\"并根据结果来更新组件状态或进行相应的操作\",{\"1\":{\"33\":1}}],[\"并且拥有活跃的社区支持\",{\"1\":{\"604\":1}}],[\"并且支持分布式部署\",{\"1\":{\"601\":1}}],[\"并且支持异步加载\",{\"1\":{\"203\":1}}],[\"并且将每个算法封装起来\",{\"1\":{\"592\":1}}],[\"并且将该session\",{\"1\":{\"357\":1}}],[\"并且重新启动构建时将更快地使用缓存\",{\"1\":{\"497\":1}}],[\"并且会在打包文件中引用\",{\"1\":{\"468\":1}}],[\"并且会将loader的sourcemap也包含在内\",{\"1\":{\"468\":1}}],[\"并且便于对异步逻辑的管理和组织\",{\"1\":{\"433\":1}}],[\"并且每个action可以接受一个上下文\",{\"1\":{\"426\":1}}],[\"并且每个mutation可以接受两个参数\",{\"1\":{\"426\":1}}],[\"并且每个元素的数据类型必须与定义时指定的类型一致\",{\"1\":{\"310\":1}}],[\"并且使得代码更容易维护\",{\"1\":{\"425\":1}}],[\"并且允许组件直接从存储中获取状态\",{\"1\":{\"425\":1}}],[\"并且方便重构和维护\",{\"1\":{\"407\":1}}],[\"并且方便在表单提交时访问和处理表单数据\",{\"1\":{\"31\":1}}],[\"并且遵循redux的规范要求\",{\"1\":{\"401\":1}}],[\"并且该组件可以通过useparams\",{\"1\":{\"392\":1}}],[\"并且该组件也定义了两个子路由\",{\"1\":{\"392\":1}}],[\"并且减轻了服务器的负载\",{\"1\":{\"356\":1}}],[\"并且减少命名冲突的可能性\",{\"1\":{\"444\":1}}],[\"并且减少错误\",{\"1\":{\"314\":1}}],[\"并且减少对样式的重复编写\",{\"1\":{\"160\":1}}],[\"并且与javascript对象格式兼容\",{\"1\":{\"343\":1}}],[\"并且提供了更灵活和可读性更好的语法\",{\"1\":{\"343\":1}}],[\"并且有着较好的扩展性\",{\"1\":{\"604\":1}}],[\"并且有助于消除合并提交所引入的冗余\",{\"1\":{\"338\":1}}],[\"并且有一些新方法被推荐使用\",{\"1\":{\"22\":1}}],[\"并且git能够根据这些提交来还原文件的历史状态\",{\"1\":{\"333\":1}}],[\"并且能够支持多人同时协作开发\",{\"1\":{\"333\":1}}],[\"并且能够被编译成纯粹的javascript代码\",{\"1\":{\"309\":1}}],[\"并且不要在生产环境中显示详细的错误消息给用户\",{\"1\":{\"602\":1}}],[\"并且不需要事先将整个数据集存储在内存中\",{\"1\":{\"582\":1}}],[\"并且不受作用域限制\",{\"1\":{\"522\":1}}],[\"并且不存在对它们的引用之外的引用时\",{\"1\":{\"275\":1}}],[\"并且不得在普通的javascript函数中使用\",{\"1\":{\"43\":1}}],[\"并且说明了它们的执行顺序\",{\"1\":{\"271\":1}}],[\"并且通过event\",{\"1\":{\"263\":1}}],[\"并且内部函数可以访问外部函数的变量count\",{\"1\":{\"258\":1}}],[\"并且具有类似于普通函数的特性\",{\"1\":{\"258\":1}}],[\"并且自动绑定了this关键字\",{\"1\":{\"258\":1}}],[\"并且在内部使用\",{\"1\":{\"267\":1}}],[\"并且在每次请求时都会发送到服务器\",{\"1\":{\"240\":1}}],[\"并且在es6规范的最终版本中不再推荐使用\",{\"1\":{\"191\":1}}],[\"并且接收两个参数\",{\"1\":{\"204\":1}}],[\"并且接收三个参数\",{\"1\":{\"204\":2}}],[\"并且接收一个参数\",{\"1\":{\"204\":1}}],[\"并且它们可以相互独立\",{\"1\":{\"436\":1}}],[\"并且它的容量不会自动扩展或缩小\",{\"1\":{\"273\":1}}],[\"并且它的返回值会被封装在一个\",{\"1\":{\"194\":1}}],[\"并且它会暂停函数的执行\",{\"1\":{\"196\":1}}],[\"并且对键是弱引用\",{\"1\":{\"179\":1}}],[\"并且对对象是弱引用\",{\"1\":{\"178\":1}}],[\"并且对于简单的应用来说\",{\"1\":{\"128\":1}}],[\"并且只匹配该索引位置之后的字符\",{\"1\":{\"168\":1}}],[\"并且只是简单地基于\",{\"1\":{\"70\":1}}],[\"并且可以继承自其他类或实现接口\",{\"1\":{\"604\":1}}],[\"并且可以安全地关闭连接\",{\"1\":{\"361\":1}}],[\"并且可以被任何客户端使用\",{\"1\":{\"356\":1}}],[\"并且可以影响派生类的行为\",{\"1\":{\"324\":1}}],[\"并且可以使用\",{\"1\":{\"323\":1}}],[\"并且可以减少错误\",{\"1\":{\"314\":1}}],[\"并且可以添加自己的额外属性和方法\",{\"1\":{\"312\":1}}],[\"并且可以在异步操作完成后提交mutation来修改状态\",{\"1\":{\"432\":1}}],[\"并且可以在需要时与其他开发者共享和协作\",{\"1\":{\"333\":1}}],[\"并且可以在需要时被导入和使用\",{\"1\":{\"278\":1}}],[\"并且可以在字符串中插入变量或者表达式\",{\"1\":{\"167\":1}}],[\"并且可以通过namespaced属性来设置模块的命名空间\",{\"1\":{\"426\":1}}],[\"并且可以通过store\",{\"1\":{\"426\":1}}],[\"并且可以通过路由配置来管理每个视图的加载和展示\",{\"1\":{\"417\":1}}],[\"并且可以通过名称来识别具体的常量值\",{\"1\":{\"314\":1}}],[\"并且可以通过该原型对象共享属性和方法\",{\"1\":{\"267\":1}}],[\"并且可以通过函数调用方式和使用特定方法来显式地控制this的值\",{\"1\":{\"262\":1}}],[\"并且可以跨会话保留\",{\"1\":{\"236\":1}}],[\"并且可以获取其结果\",{\"1\":{\"192\":1}}],[\"并且可以返回一个清理函数用于取消副作用\",{\"1\":{\"41\":1}}],[\"并且当依赖的响应式属性发生变化时\",{\"1\":{\"104\":1}}],[\"并且尽量遵循hooks的规则\",{\"1\":{\"42\":1}}],[\"并且点击按钮时调用onmessagechange函数来通知父组件更新message的值\",{\"1\":{\"35\":1}}],[\"并且react会自动重新渲染组件\",{\"1\":{\"20\":1}}],[\"并在未来版本中可能会被移除\",{\"1\":{\"604\":1}}],[\"并在php\",{\"1\":{\"604\":4}}],[\"并在没有变化时直接从缓存中获取内容\",{\"1\":{\"601\":1}}],[\"并在html表单字段中设置value属性来实现数据的保持\",{\"1\":{\"580\":1}}],[\"并在这些事件发生时执行相应的代码\",{\"1\":{\"477\":1}}],[\"并在配置文件中进行相应的配置\",{\"1\":{\"475\":1}}],[\"并在配置文件的module\",{\"1\":{\"453\":1}}],[\"并在打包文件中引用\",{\"1\":{\"468\":1}}],[\"并在store选项中注入我们之前创建的vuex\",{\"1\":{\"440\":1}}],[\"并在异步操作完成后修改状态\",{\"1\":{\"433\":1}}],[\"并在异步操作完成后触发相应的redux\",{\"1\":{\"405\":1}}],[\"并在成功后提交mutation来修改状态\",{\"1\":{\"433\":1}}],[\"并在其子路由配置中通过components属性指定了两个命名视图\",{\"1\":{\"417\":1}}],[\"并在其中指定每个元素的数据类型\",{\"1\":{\"310\":1}}],[\"并在其中渲染了前面定义的函数组件和类组件\",{\"1\":{\"19\":1}}],[\"并在其中创建一个名为\",{\"1\":{\"367\":1,\"475\":1}}],[\"并在其中创建\",{\"1\":{\"3\":2}}],[\"并在用户点击按钮时更新计数器的值\",{\"1\":{\"406\":1}}],[\"并在用户输入时显示自动完成的列表\",{\"1\":{\"347\":1}}],[\"并在得到响应时触发fetch\",{\"1\":{\"405\":1}}],[\"并在必要时进行相应的处理\",{\"1\":{\"401\":1}}],[\"并在reducers中处理状态的更新逻辑\",{\"1\":{\"400\":1}}],[\"并在路由渲染时根据用户认证状态决定渲染目标组件还是重定向到登录页面\",{\"1\":{\"385\":1}}],[\"并在回调中处理插入结果\",{\"1\":{\"369\":1}}],[\"并在您计划创建新项目的位置创建一个新的文件夹\",{\"1\":{\"364\":1}}],[\"并在操作完成后通过回调函数处理结果的方式\",{\"1\":{\"322\":1}}],[\"并在操作完成后调用传递的回调函数callback来处理结果\",{\"1\":{\"258\":1}}],[\"并在函数参数\",{\"1\":{\"320\":1}}],[\"并在函数内部进行渲染\",{\"1\":{\"37\":1}}],[\"并在后续使用中进行类型检查\",{\"1\":{\"316\":1}}],[\"并在完成执行后从栈顶弹出\",{\"1\":{\"271\":1}}],[\"并在主线程中执行其对应的回调函数\",{\"1\":{\"270\":1}}],[\"并在合适的时机执行\",{\"1\":{\"270\":1}}],[\"并在弹出对话框中显示经纬度\",{\"1\":{\"229\":1}}],[\"并在模块加载完成后使用模块的导出内容\",{\"1\":{\"202\":1}}],[\"并在模板中直接使用它的属性和方法\",{\"1\":{\"102\":1}}],[\"并在控制台输出相应的信息\",{\"1\":{\"188\":1}}],[\"并在生成器的执行过程中进行处理\",{\"1\":{\"187\":1}}],[\"并在每个\",{\"1\":{\"186\":1}}],[\"并在每个生命周期钩子函数中添加了一些日志输出\",{\"1\":{\"87\":1}}],[\"并在对象属性不存在时使用默认值\",{\"1\":{\"166\":1}}],[\"并在它发生变化时输出变化值\",{\"1\":{\"110\":1}}],[\"并在它的值发生变化时输出变化值\",{\"1\":{\"110\":1}}],[\"并在需要的地方直接使用\",{\"1\":{\"442\":1}}],[\"并在需要的时候分配连接\",{\"1\":{\"358\":1}}],[\"并在需要时抛出它们\",{\"1\":{\"589\":1}}],[\"并在需要时动态加载所需的模块\",{\"1\":{\"443\":1}}],[\"并在需要时按需加载\",{\"1\":{\"423\":1}}],[\"并在需要时进行克隆和插入\",{\"1\":{\"245\":1}}],[\"并在需要时调用传递的函数\",{\"1\":{\"35\":1}}],[\"并在需要过渡的元素上使用<transition>组件的特定属性\",{\"1\":{\"98\":1}}],[\"并在父组件中根据名称选择插入的内容\",{\"1\":{\"96\":1}}],[\"并在父组件中监听这些事件来实现通信\",{\"1\":{\"93\":1}}],[\"并在url的变化时\",{\"1\":{\"63\":1}}],[\"并在组件卸载时自动停止执行\",{\"1\":{\"110\":1}}],[\"并在组件卸载时取消挂起的异步请求以防止内存泄漏\",{\"1\":{\"50\":1}}],[\"并在组件中使用它们\",{\"1\":{\"42\":1}}],[\"并在事件发生时执行相应的操作\",{\"1\":{\"272\":1}}],[\"并在事件发生时做出相应的处理\",{\"1\":{\"38\":1}}],[\"并在事件触发时打印一条消息\",{\"1\":{\"265\":1}}],[\"并在事件处理函数中处理表单数据\",{\"1\":{\"30\":1}}],[\"并在验证或提交过程中设置错误信息\",{\"1\":{\"32\":1}}],[\"并在jsx中通过this关键字来引用\",{\"1\":{\"26\":1}}],[\"并在浏览器中呈现\",{\"1\":{\"21\":1}}],[\"并通过对象之间的交互和消息传递来完成程序的功能\",{\"1\":{\"583\":1}}],[\"并通过创建多个对象来表示不同的实例\",{\"1\":{\"579\":1}}],[\"并通过style\",{\"1\":{\"472\":1}}],[\"并通过self\",{\"1\":{\"57\":1}}],[\"并通过setdata函数更新组件的状态\",{\"1\":{\"41\":1}}],[\"并通过devserver提供的功能进行调试和实时反馈\",{\"1\":{\"461\":1}}],[\"并通过import\",{\"1\":{\"448\":1}}],[\"并通过动作来提交变异\",{\"1\":{\"443\":1}}],[\"并通过命名空间在应用中访问\",{\"1\":{\"435\":1}}],[\"并通过components属性指定了三个命名视图\",{\"1\":{\"417\":1}}],[\"并通过css的background\",{\"1\":{\"54\":1}}],[\"并通过mapstatetoprops和mapdispatchtoprops函数定义组件所需的props和操作\",{\"1\":{\"407\":1}}],[\"并通过reducer来更新状态\",{\"1\":{\"403\":1}}],[\"并通过readystate属性来指示请求的状态\",{\"1\":{\"341\":1}}],[\"并通过reactdom\",{\"1\":{\"21\":1}}],[\"并通过编程方式来读取\",{\"1\":{\"369\":1}}],[\"并通过调用\",{\"1\":{\"366\":1}}],[\"并通过回调函数处理响应数据\",{\"1\":{\"343\":1}}],[\"并通过git\",{\"1\":{\"335\":1}}],[\"并通过模块名和导入的成员来使用模块的功能\",{\"1\":{\"327\":1}}],[\"并通过明确定义的接口和其他模块进行通信\",{\"1\":{\"327\":1}}],[\"并通过引用地址保存在栈指针中的变量中\",{\"1\":{\"273\":1}}],[\"并通过promise的then方法指定成功回调函数\",{\"1\":{\"264\":1}}],[\"并通过迭代器的\",{\"1\":{\"186\":1}}],[\"并通过\",{\"1\":{\"94\":1,\"183\":1,\"198\":1,\"282\":1,\"391\":1,\"591\":1}}],[\"并通过$on\",{\"1\":{\"93\":1}}],[\"并通过发布事件的方式向其他组件发送数据\",{\"1\":{\"38\":1}}],[\"并通过虚拟dom进行高效更新\",{\"1\":{\"10\":1}}],[\"并将临时文件移动到目标目录中使用move\",{\"1\":{\"581\":1}}],[\"并将构建后的文件输出到输出目录中\",{\"1\":{\"475\":1}}],[\"并将sideeffects选项设置为false\",{\"1\":{\"469\":1}}],[\"并将store作为provider的属性传递\",{\"1\":{\"406\":1}}],[\"并将它作为一个模块来导入和使用\",{\"1\":{\"440\":1}}],[\"并将它们作为模块导入到你的应用程序中\",{\"1\":{\"491\":1}}],[\"并将它们转换为可供webpack处理和打包的模块\",{\"1\":{\"476\":1}}],[\"并将它们打包成可在浏览器中运行的静态文件\",{\"1\":{\"448\":1}}],[\"并将它们的内存释放\",{\"1\":{\"276\":1}}],[\"并将它们依次放入执行栈中进行处理\",{\"1\":{\"271\":1}}],[\"并将它们与动态计算的值绑定在一起\",{\"1\":{\"85\":1}}],[\"并将key设置为\",{\"1\":{\"439\":1}}],[\"并将获取到的用户数据显示在界面上\",{\"1\":{\"405\":1}}],[\"并将我们的reducer传递给它\",{\"1\":{\"403\":1}}],[\"并将当前状态和action传递给它\",{\"1\":{\"401\":1}}],[\"并将远程仓库的全部内容复制到该目录中\",{\"1\":{\"336\":1}}],[\"并将指定对象作为新对象的原型\",{\"1\":{\"267\":1}}],[\"并将\",{\"1\":{\"267\":1}}],[\"并将克隆的元素添加到另一个容器中\",{\"1\":{\"265\":1}}],[\"并将导入的函数重命名为addition\",{\"1\":{\"202\":1}}],[\"并将异常作为拒绝原因\",{\"1\":{\"196\":1}}],[\"并将结果赋给左侧的变量\",{\"1\":{\"552\":1}}],[\"并将结果与当前的\",{\"1\":{\"269\":1}}],[\"并将结果保存在result变量中\",{\"1\":{\"258\":1}}],[\"并将结果保存在converted变量中\",{\"1\":{\"102\":1}}],[\"并将结果返回给调用方\",{\"1\":{\"195\":1}}],[\"并将这种语言称为\",{\"1\":{\"164\":1}}],[\"并将修改后的数据渲染到模板中\",{\"1\":{\"93\":1}}],[\"并将共享数据shareddata作为函数参数\",{\"1\":{\"37\":1}}],[\"并将其记录到日志文件中\",{\"1\":{\"586\":1}}],[\"并将其完全删除\",{\"1\":{\"497\":1}}],[\"并将其转换为模块\",{\"1\":{\"487\":1}}],[\"并将其转换为webpack可以处理的模块\",{\"1\":{\"455\":1}}],[\"并将其与webpack集成\",{\"1\":{\"472\":1}}],[\"并将其与该作用域相关联\",{\"1\":{\"280\":1}}],[\"并将其作为数组添加到plugins选项中\",{\"1\":{\"456\":1}}],[\"并将其作为属性传递给相应的元素\",{\"1\":{\"25\":1}}],[\"并将其传递给vue实例配置项中的router属性\",{\"1\":{\"413\":1}}],[\"并将其传递给store\",{\"1\":{\"402\":1}}],[\"并将其连接到redux\",{\"1\":{\"406\":1}}],[\"并将其打印到控制台\",{\"1\":{\"401\":1}}],[\"并将其渲染在父组件中定义的\",{\"1\":{\"396\":1}}],[\"并将其渲染成可视化的页面\",{\"1\":{\"360\":1}}],[\"并将其渲染到指定的路由出口\",{\"1\":{\"414\":1}}],[\"并将其渲染到子组件的模板中\",{\"1\":{\"93\":1}}],[\"并将其渲染到dom中\",{\"1\":{\"16\":1}}],[\"并将其发送给浏览器\",{\"1\":{\"360\":1}}],[\"并将其发送给服务器\",{\"1\":{\"360\":1}}],[\"并将其发送给dns服务器进行解析\",{\"1\":{\"360\":1}}],[\"并将其存储在cookie中发送给客户端\",{\"1\":{\"357\":1}}],[\"并将其赋值为\",{\"1\":{\"314\":1}}],[\"并将其赋值给变量add\",{\"1\":{\"258\":1}}],[\"并将其赋值给变量calculator\",{\"1\":{\"200\":1}}],[\"并将其赋值给一个变量或作为其他函数的参数传递\",{\"1\":{\"258\":1}}],[\"并将其赋值给对应的变量\",{\"1\":{\"166\":1}}],[\"并将其添加到页面中\",{\"1\":{\"301\":1}}],[\"并将其返回给操作系统或可用内存池供后续使用\",{\"1\":{\"276\":1}}],[\"并将其释放以供后续使用\",{\"1\":{\"274\":1}}],[\"并将其设置为新值\",{\"1\":{\"265\":1}}],[\"并将其保持在内存中\",{\"1\":{\"261\":1}}],[\"并将其默认值设置为\",{\"1\":{\"41\":1}}],[\"并将外部数据传递给原组件\",{\"1\":{\"23\":1}}],[\"并将变化部分与实际dom进行对比\",{\"1\":{\"9\":1}}],[\"并将变化的部分与实际的dom进行对比\",{\"1\":{\"8\":1}}],[\"并正确使用react的优化手段\",{\"1\":{\"9\":1}}],[\"sdk\",{\"1\":{\"371\":1}}],[\"square\",{\"1\":{\"319\":4,\"462\":3}}],[\"sqlite等\",{\"1\":{\"513\":1}}],[\"sql文件中还原数据库到databasename\",{\"1\":{\"133\":1}}],[\"sql文件中\",{\"1\":{\"133\":1}}],[\"sql\",{\"0\":{\"135\":1},\"1\":{\"133\":2,\"135\":1,\"236\":1,\"570\":1}}],[\"swim\",{\"1\":{\"317\":2}}],[\"switch>\",{\"1\":{\"378\":1,\"385\":1,\"386\":2}}],[\"switch组件\",{\"0\":{\"378\":1}}],[\"switch语句根据变量的不同值执行不同的代码块\",{\"1\":{\"557\":1}}],[\"switch语句\",{\"0\":{\"557\":1},\"1\":{\"255\":1}}],[\"switch\",{\"1\":{\"41\":1,\"255\":2,\"376\":1,\"386\":2,\"401\":1,\"402\":1,\"403\":1,\"405\":1,\"406\":1,\"407\":1,\"557\":1}}],[\"sweep\",{\"1\":{\"276\":1}}],[\"svg\",{\"1\":{\"237\":2}}],[\"symfony\",{\"1\":{\"604\":3}}],[\"symbols\",{\"1\":{\"174\":2}}],[\"symbol拥有自己的内置属性\",{\"1\":{\"174\":1}}],[\"symbol的应用非常广泛\",{\"1\":{\"174\":1}}],[\"symbol的内置常量\",{\"1\":{\"174\":1}}],[\"symbol的迭代和反射\",{\"1\":{\"174\":1}}],[\"symbol的主要特点是它的值是唯一的\",{\"1\":{\"174\":1}}],[\"symbol是一种新的原始数据类型\",{\"1\":{\"174\":1}}],[\"symbol是es6中引入的一种新的原始数据类型\",{\"1\":{\"174\":1}}],[\"symbol还提供了一些内置的属性\",{\"1\":{\"174\":1}}],[\"symbol可以用作对象的属性键\",{\"1\":{\"174\":1}}],[\"symbol2\",{\"1\":{\"174\":4}}],[\"symbol1\",{\"1\":{\"174\":6}}],[\"symbol值可以作为对象的属性名\",{\"1\":{\"171\":1}}],[\"symbol\",{\"0\":{\"174\":1},\"1\":{\"171\":3,\"174\":17,\"184\":3,\"185\":1,\"191\":2,\"310\":3,\"323\":1}}],[\"syntax\",{\"1\":{\"401\":1}}],[\"syntactically\",{\"1\":{\"161\":1}}],[\"system\",{\"0\":{\"464\":1},\"1\":{\"372\":1,\"464\":1}}],[\"s修饰符\",{\"1\":{\"168\":1}}],[\"skew\",{\"1\":{\"150\":2}}],[\"save\",{\"1\":{\"444\":1,\"472\":1,\"473\":1,\"474\":1,\"475\":1,\"510\":2}}],[\"savepoint\",{\"1\":{\"137\":1}}],[\"saga是一个用于管理副作用\",{\"1\":{\"405\":1}}],[\"saga和redux\",{\"1\":{\"405\":1,\"407\":1}}],[\"saga\",{\"1\":{\"401\":1,\"405\":1,\"406\":1}}],[\"sanitizing\",{\"1\":{\"204\":2}}],[\"sanitizer\",{\"1\":{\"204\":2}}],[\"sans\",{\"1\":{\"144\":1}}],[\"sayhello\",{\"1\":{\"171\":4,\"183\":7,\"251\":2,\"259\":3,\"262\":2,\"267\":4}}],[\"safe\",{\"1\":{\"169\":4,\"173\":1}}],[\"sass文件使用\",{\"1\":{\"161\":1}}],[\"sass是最受欢迎的css预处理器之一\",{\"1\":{\"161\":1}}],[\"sass\",{\"1\":{\"161\":1,\"455\":1,\"463\":1,\"472\":4}}],[\"software\",{\"1\":{\"371\":1}}],[\"socket\",{\"1\":{\"359\":2}}],[\"sort\",{\"1\":{\"257\":2,\"578\":2}}],[\"south\",{\"1\":{\"314\":8}}],[\"sound\",{\"1\":{\"171\":2,\"183\":2,\"312\":4,\"591\":4}}],[\"source\",{\"1\":{\"171\":2,\"468\":6,\"500\":1,\"597\":1}}],[\"solid\",{\"1\":{\"144\":2,\"155\":1}}],[\"someaction\",{\"1\":{\"444\":1}}],[\"somemutation\",{\"1\":{\"444\":1}}],[\"somevalue\",{\"1\":{\"444\":3}}],[\"someclass\",{\"1\":{\"326\":1,\"327\":3}}],[\"somefunction\",{\"1\":{\"326\":2,\"327\":3,\"328\":1,\"493\":1,\"494\":1}}],[\"something\",{\"1\":{\"187\":2,\"193\":1,\"329\":2}}],[\"someprop\",{\"1\":{\"48\":2}}],[\"some\",{\"1\":{\"41\":1,\"70\":1,\"272\":3}}],[\"sideeffects\",{\"1\":{\"469\":1}}],[\"sidebar和header\",{\"1\":{\"417\":1}}],[\"sidebarcomponent和headercomponent\",{\"1\":{\"417\":1}}],[\"sidebarcomponent\",{\"1\":{\"417\":2}}],[\"sidebar\",{\"1\":{\"417\":3}}],[\"sidelength\",{\"1\":{\"319\":2}}],[\"simple\",{\"1\":{\"371\":1}}],[\"since的缓存验证机制\",{\"1\":{\"356\":1}}],[\"since\",{\"1\":{\"356\":2}}],[\"since头部\",{\"1\":{\"352\":1}}],[\"singleton\",{\"1\":{\"592\":1}}],[\"single\",{\"1\":{\"343\":1,\"370\":1}}],[\"sign\",{\"1\":{\"169\":5,\"370\":1}}],[\"sit\",{\"1\":{\"154\":4}}],[\"sizing属性设置为border\",{\"1\":{\"146\":1}}],[\"sizing属性的值为content\",{\"1\":{\"146\":1}}],[\"sizing属性\",{\"1\":{\"146\":1}}],[\"sizing\",{\"1\":{\"144\":3,\"146\":1}}],[\"sizes\",{\"1\":{\"239\":1}}],[\"size\",{\"1\":{\"143\":2,\"144\":4,\"145\":5,\"157\":1,\"158\":1,\"176\":4,\"177\":3,\"581\":1}}],[\"sibling\",{\"1\":{\"143\":1,\"159\":1}}],[\"smallint\",{\"1\":{\"136\":1}}],[\"sfc\",{\"1\":{\"90\":1,\"91\":2,\"92\":1}}],[\"slideup\",{\"1\":{\"290\":1}}],[\"slidedown\",{\"1\":{\"290\":1}}],[\"slice\",{\"1\":{\"86\":1,\"256\":2,\"257\":2,\"281\":2,\"578\":2}}],[\"slot指令来使用\",{\"1\":{\"96\":1}}],[\"slot>\",{\"1\":{\"96\":1}}],[\"slot\",{\"1\":{\"70\":3,\"96\":1}}],[\"s\",{\"1\":{\"70\":1,\"151\":2,\"168\":3,\"549\":2,\"579\":3,\"598\":1}}],[\"sso\",{\"1\":{\"370\":1}}],[\"ssl证书是由数字证书颁发机构\",{\"1\":{\"359\":1}}],[\"ssl证书\",{\"1\":{\"359\":1}}],[\"ssl\",{\"1\":{\"359\":2}}],[\"ssg\",{\"1\":{\"61\":1}}],[\"ssr\",{\"1\":{\"61\":1}}],[\"speak\",{\"1\":{\"171\":4,\"183\":2,\"312\":10}}],[\"spread\",{\"1\":{\"170\":1,\"172\":1,\"173\":1,\"281\":1,\"401\":1}}],[\"sprite\",{\"1\":{\"54\":1}}],[\"spliti等正则表达式相关函数\",{\"1\":{\"604\":1}}],[\"splitchunks\",{\"1\":{\"480\":1}}],[\"splitchunks属性来决定如何拆分和加载这些代码块\",{\"1\":{\"467\":1}}],[\"splitchunks的chunks属性被设置为\",{\"1\":{\"467\":1}}],[\"splitchunks配置的cachegroups选项将第三方库提取为单独的输出文件\",{\"1\":{\"458\":1}}],[\"splitchunks配置\",{\"1\":{\"458\":1}}],[\"splitting来去除未使用的代码和拆分资源\",{\"1\":{\"504\":1}}],[\"splitting\",{\"0\":{\"458\":1,\"493\":1},\"1\":{\"453\":2,\"458\":1,\"480\":1}}],[\"split\",{\"1\":{\"70\":1,\"74\":1,\"256\":2,\"604\":1}}],[\"splice\",{\"1\":{\"5\":1,\"257\":2}}],[\"spa是一种web应用程序的架构模式\",{\"1\":{\"343\":1}}],[\"spa是一种通过动态更新页面的方式切换视图的web应用程序架构\",{\"1\":{\"63\":1}}],[\"spaceship\",{\"1\":{\"604\":1}}],[\"space\",{\"1\":{\"144\":2,\"147\":1,\"155\":4}}],[\"span>岁<\",{\"1\":{\"231\":1}}],[\"span><br>\",{\"1\":{\"580\":2}}],[\"span><\",{\"1\":{\"70\":1,\"231\":1}}],[\"span>\",{\"1\":{\"70\":7}}],[\"spa也有一些限制和挑战\",{\"1\":{\"63\":1}}],[\"spa的优势包括\",{\"1\":{\"63\":1}}],[\"spa单页面应用\",{\"0\":{\"63\":1}}],[\"spa\",{\"1\":{\"61\":1,\"63\":1,\"343\":1,\"409\":1,\"410\":1,\"412\":1}}],[\"shift\",{\"1\":{\"257\":2,\"578\":2}}],[\"shaking和code\",{\"1\":{\"504\":1}}],[\"shaking等\",{\"1\":{\"496\":1}}],[\"shaking技术可以消除未使用的代码\",{\"1\":{\"469\":1}}],[\"shaking时\",{\"1\":{\"462\":1}}],[\"shaking只针对es模块的静态分析有效\",{\"1\":{\"462\":1}}],[\"shaking在打包过程中的作用\",{\"1\":{\"462\":1}}],[\"shaking的优势主要体现在优化应用程序的体积\",{\"1\":{\"462\":1}}],[\"shaking的方式通常是通过配置optimization属性的usedexports选项为true\",{\"1\":{\"462\":1}}],[\"shaking的核心思想是通过静态分析的方式确定哪些代码被使用\",{\"1\":{\"462\":1}}],[\"shaking优化后\",{\"1\":{\"462\":1}}],[\"shaking优化\",{\"1\":{\"462\":1}}],[\"shaking一般与es模块使用的构建工具\",{\"1\":{\"462\":1}}],[\"shaking是一种用于优化javascript打包输出的技术\",{\"1\":{\"462\":1}}],[\"shaking\",{\"0\":{\"462\":1},\"1\":{\"469\":2,\"497\":2}}],[\"shallowcopyarr\",{\"1\":{\"281\":1}}],[\"shallowcopyobj\",{\"1\":{\"281\":1}}],[\"shallow\",{\"1\":{\"281\":1}}],[\"shape\",{\"1\":{\"153\":2,\"183\":5,\"318\":3,\"319\":7,\"591\":4}}],[\"shadow\",{\"1\":{\"144\":1}}],[\"shareddata\",{\"1\":{\"37\":4}}],[\"sheets\",{\"1\":{\"140\":1,\"161\":2}}],[\"should\",{\"1\":{\"70\":1,\"183\":1}}],[\"shouldcomponentupdate方法的返回值会影响组件是否重新渲染\",{\"1\":{\"48\":1}}],[\"shouldcomponentupdate方法可以用于手动优化组件的渲染过程\",{\"1\":{\"48\":1}}],[\"shouldcomponentupdate是一个生命周期方法\",{\"1\":{\"48\":1}}],[\"shouldcomponentupdate\",{\"1\":{\"22\":3,\"48\":1}}],[\"showsuggestions\",{\"1\":{\"347\":2}}],[\"showposition\",{\"1\":{\"229\":2}}],[\"showelement\",{\"1\":{\"98\":4}}],[\"show=\",{\"1\":{\"70\":1}}],[\"show\",{\"1\":{\"70\":6,\"94\":1,\"133\":1,\"288\":1,\"300\":1,\"407\":1}}],[\"showcomponent\",{\"1\":{\"51\":2}}],[\"suggestionitem\",{\"1\":{\"347\":3}}],[\"suggestionslist\",{\"1\":{\"347\":3}}],[\"suggestions\",{\"1\":{\"347\":8}}],[\"succeeded\",{\"1\":{\"314\":2}}],[\"success的action来更新用户数据\",{\"1\":{\"405\":1}}],[\"successfully\",{\"1\":{\"282\":1,\"432\":2}}],[\"success\",{\"1\":{\"193\":3,\"292\":1,\"405\":2,\"580\":1}}],[\"support\",{\"1\":{\"172\":1,\"497\":2}}],[\"super\",{\"1\":{\"20\":1,\"22\":1,\"23\":1,\"31\":1,\"171\":3,\"183\":4,\"312\":3,\"522\":1}}],[\"sun\",{\"1\":{\"164\":1}}],[\"sum\",{\"1\":{\"135\":1,\"172\":4,\"173\":2,\"254\":2,\"258\":2,\"313\":2}}],[\"suspense>\",{\"1\":{\"51\":1,\"397\":1}}],[\"suspense\",{\"1\":{\"51\":1,\"99\":1,\"397\":3}}],[\"subnamespace\",{\"1\":{\"584\":1}}],[\"sub实现\",{\"1\":{\"444\":1}}],[\"sub模式\",{\"1\":{\"444\":1}}],[\"submodule\",{\"1\":{\"338\":1}}],[\"submitform\",{\"1\":{\"346\":2,\"442\":2}}],[\"submit\",{\"1\":{\"28\":1,\"30\":6,\"31\":2,\"70\":2,\"216\":1,\"282\":2,\"289\":1,\"294\":1,\"346\":2,\"580\":2,\"581\":1}}],[\"submitted\",{\"1\":{\"25\":2,\"282\":1}}],[\"subarray\",{\"1\":{\"257\":2}}],[\"substr\",{\"1\":{\"256\":2,\"545\":1,\"570\":1}}],[\"substring\",{\"1\":{\"256\":9}}],[\"subscribe方法注册一个订阅函数\",{\"1\":{\"437\":1}}],[\"subscribers\",{\"1\":{\"272\":6}}],[\"subscriber\",{\"1\":{\"38\":1,\"272\":1}}],[\"subscribe\",{\"1\":{\"22\":1,\"38\":1,\"272\":4,\"278\":1,\"400\":1,\"401\":9,\"402\":2,\"437\":1}}],[\"subscription\",{\"1\":{\"22\":2}}],[\"subtract\",{\"1\":{\"200\":3,\"201\":3,\"202\":3}}],[\"subclasses\",{\"1\":{\"183\":1}}],[\"science\",{\"1\":{\"574\":2,\"575\":1,\"576\":1,\"577\":2}}],[\"scss$\",{\"1\":{\"472\":1}}],[\"scss代码转换为css\",{\"1\":{\"455\":1}}],[\"scss文件\",{\"1\":{\"455\":1}}],[\"scss扩展名\",{\"1\":{\"161\":1}}],[\"scope\",{\"1\":{\"261\":5,\"280\":2,\"311\":3}}],[\"scoped>\",{\"1\":{\"4\":1,\"92\":1}}],[\"scalar\",{\"1\":{\"604\":1}}],[\"scalable\",{\"1\":{\"237\":1}}],[\"scale\",{\"1\":{\"150\":3}}],[\"schema\",{\"1\":{\"231\":1}}],[\"script=greek\",{\"1\":{\"168\":1}}],[\"script>\",{\"1\":{\"3\":3,\"4\":1,\"65\":1,\"70\":11,\"82\":2,\"87\":2,\"91\":1,\"92\":2,\"93\":5,\"94\":2,\"98\":1,\"102\":1,\"105\":1,\"126\":1,\"228\":1,\"229\":1,\"284\":1,\"420\":1,\"421\":1,\"422\":1,\"429\":2,\"430\":1,\"431\":1,\"432\":1,\"433\":2,\"440\":1,\"442\":2,\"444\":1}}],[\"screen\",{\"1\":{\"148\":1,\"157\":2,\"266\":2}}],[\"scroller等\",{\"1\":{\"53\":1}}],[\"scroll\",{\"1\":{\"28\":1,\"70\":1,\"301\":1}}],[\"studying\",{\"1\":{\"183\":2,\"312\":2}}],[\"study\",{\"1\":{\"183\":2,\"312\":3}}],[\"studentid\",{\"1\":{\"312\":6}}],[\"student1\",{\"1\":{\"183\":3}}],[\"student\",{\"1\":{\"183\":2,\"267\":10,\"312\":12}}],[\"styl扩展名\",{\"1\":{\"161\":1}}],[\"stylus使用了一种更简化和紧凑的语法\",{\"1\":{\"161\":1}}],[\"stylus文件使用\",{\"1\":{\"161\":1}}],[\"stylus具有动态特性\",{\"1\":{\"161\":1}}],[\"stylus是一个非常灵活和简化的css预处理器\",{\"1\":{\"161\":1}}],[\"stylus\",{\"1\":{\"161\":1}}],[\"styles\",{\"1\":{\"142\":2}}],[\"stylesheet\",{\"1\":{\"142\":3}}],[\"style\",{\"1\":{\"85\":2,\"140\":1,\"143\":1,\"144\":1,\"161\":2,\"211\":1,\"265\":4,\"368\":3,\"454\":1,\"455\":2,\"463\":2,\"472\":1,\"474\":2,\"476\":2}}],[\"style实现\",{\"1\":{\"84\":1}}],[\"style绑定\",{\"0\":{\"83\":1}}],[\"style=\",{\"1\":{\"15\":1,\"70\":1,\"85\":2,\"142\":1,\"407\":1}}],[\"style>\",{\"1\":{\"4\":1,\"92\":1,\"98\":1,\"142\":1,\"154\":1,\"155\":1,\"156\":1}}],[\"strategy\",{\"1\":{\"592\":1}}],[\"strftime\",{\"1\":{\"570\":1}}],[\"strpos\",{\"1\":{\"570\":1}}],[\"strtotime\",{\"1\":{\"570\":1}}],[\"strtoupper\",{\"1\":{\"547\":1}}],[\"strtolower\",{\"1\":{\"547\":1}}],[\"strlen\",{\"1\":{\"543\":1,\"570\":1}}],[\"strong>\",{\"1\":{\"265\":1}}],[\"str3\",{\"1\":{\"256\":1}}],[\"str2\",{\"1\":{\"256\":1}}],[\"str1\",{\"1\":{\"256\":1}}],[\"streamdata\",{\"1\":{\"198\":3}}],[\"stretch\",{\"1\":{\"155\":2}}],[\"str\",{\"1\":{\"167\":9,\"168\":6,\"170\":2,\"173\":2,\"185\":2,\"252\":3,\"256\":28,\"257\":2,\"313\":2,\"546\":1,\"570\":1}}],[\"structural\",{\"1\":{\"159\":1}}],[\"structured\",{\"1\":{\"131\":1}}],[\"stripslashes\",{\"1\":{\"580\":1}}],[\"strict\",{\"1\":{\"359\":1}}],[\"strictmode>\",{\"1\":{\"5\":2,\"394\":2}}],[\"string或自定义类等\",{\"1\":{\"604\":1}}],[\"string和bool\",{\"1\":{\"604\":1}}],[\"string>\",{\"1\":{\"320\":1,\"321\":2}}],[\"stringarray\",{\"1\":{\"319\":2}}],[\"strings\",{\"1\":{\"167\":1}}],[\"string\",{\"0\":{\"256\":1,\"530\":1},\"1\":{\"136\":1,\"167\":3,\"204\":1,\"251\":1,\"252\":2,\"253\":2,\"279\":3,\"310\":6,\"311\":6,\"312\":11,\"313\":5,\"314\":1,\"315\":4,\"316\":4,\"317\":4,\"318\":2,\"319\":13,\"320\":1,\"321\":12,\"324\":2,\"329\":8,\"519\":1}}],[\"stringify\",{\"1\":{\"52\":2,\"281\":1}}],[\"storage\",{\"1\":{\"439\":1}}],[\"store文件\",{\"1\":{\"444\":1}}],[\"store注入到vue实例中\",{\"1\":{\"440\":1}}],[\"store对象\",{\"1\":{\"440\":1}}],[\"store中\",{\"1\":{\"439\":1}}],[\"store的状态和mutation的历史记录\",{\"1\":{\"438\":1}}],[\"store的构造函数中\",{\"1\":{\"438\":1}}],[\"store实例\",{\"1\":{\"426\":1,\"427\":1}}],[\"store交互\",{\"1\":{\"407\":1}}],[\"store时\",{\"1\":{\"405\":1,\"437\":1}}],[\"store来获取并显示状态的变化\",{\"1\":{\"403\":1}}],[\"store来管理应用程序的状态\",{\"1\":{\"403\":1}}],[\"store=\",{\"1\":{\"403\":1,\"406\":1,\"407\":1}}],[\"store提供给我们的应用程序\",{\"1\":{\"403\":2}}],[\"store提供了几个核心的方法来操作状态\",{\"1\":{\"401\":1}}],[\"store进行交互\",{\"1\":{\"403\":1}}],[\"store是redux的核心概念\",{\"1\":{\"403\":1}}],[\"store是redux的store对象\",{\"1\":{\"401\":2}}],[\"store是一个保存应用程序状态的容器\",{\"1\":{\"402\":1}}],[\"store是一个javascript对象\",{\"1\":{\"401\":1}}],[\"store是一个单一的\",{\"1\":{\"400\":1}}],[\"store是一个存储应用程序状态树的对象\",{\"1\":{\"400\":1}}],[\"store会调用reducer\",{\"1\":{\"401\":1}}],[\"store在redux中扮演着存储和管理应用程序状态的角色\",{\"1\":{\"401\":1}}],[\"store\",{\"0\":{\"3\":1},\"1\":{\"3\":1,\"93\":3,\"400\":1,\"401\":6,\"402\":5,\"403\":10,\"405\":3,\"406\":8,\"407\":14,\"425\":1,\"426\":1,\"427\":7,\"429\":1,\"430\":1,\"431\":1,\"432\":1,\"433\":1,\"437\":6,\"438\":1,\"439\":6,\"440\":8,\"444\":8}}],[\"stopped\",{\"1\":{\"583\":2}}],[\"stoppropagation\",{\"1\":{\"27\":2,\"263\":3}}],[\"stop属性相同\",{\"1\":{\"153\":1}}],[\"stop2\",{\"1\":{\"153\":2}}],[\"stop1\",{\"1\":{\"153\":2}}],[\"stop=\",{\"1\":{\"70\":1}}],[\"stop\",{\"1\":{\"70\":2,\"153\":3,\"583\":2}}],[\"stash命令可以将当前工作目录中的修改保存起来\",{\"1\":{\"338\":1}}],[\"stash\",{\"1\":{\"338\":1}}],[\"stack\",{\"1\":{\"271\":1,\"273\":3,\"274\":2,\"277\":2}}],[\"status命令可以查看当前工作区的状态\",{\"1\":{\"334\":1}}],[\"statuscode\",{\"1\":{\"314\":3}}],[\"status\",{\"1\":{\"282\":1,\"292\":2,\"345\":1,\"346\":1,\"347\":1,\"348\":1,\"365\":1,\"366\":1}}],[\"static\",{\"1\":{\"22\":5,\"82\":2,\"99\":1,\"183\":2,\"366\":2,\"368\":4,\"524\":2}}],[\"state用于存储数据\",{\"1\":{\"436\":1}}],[\"state应该是响应式的\",{\"1\":{\"436\":1}}],[\"state是模块内部管理的数据状态\",{\"1\":{\"436\":1}}],[\"state是一个包含多个状态属性的对象\",{\"1\":{\"429\":1}}],[\"state方式\",{\"1\":{\"429\":1}}],[\"state或使用与属性名称相对应的辅助函数mapstate\",{\"1\":{\"429\":1}}],[\"state对象\",{\"1\":{\"429\":1}}],[\"state和payload\",{\"1\":{\"426\":1}}],[\"statement\",{\"1\":{\"255\":1}}],[\"statements\",{\"1\":{\"255\":3,\"600\":1}}],[\"state提升\",{\"1\":{\"35\":1}}],[\"state来直接访问根状态\",{\"1\":{\"444\":1}}],[\"state来获取vuex的状态\",{\"1\":{\"441\":1}}],[\"state来定义初始状态\",{\"1\":{\"20\":1}}],[\"state来访问和修改状态\",{\"1\":{\"20\":1}}],[\"state来管理组件的状态\",{\"1\":{\"18\":1}}],[\"state\",{\"0\":{\"20\":1},\"1\":{\"3\":11,\"11\":1,\"20\":6,\"22\":7,\"23\":2,\"31\":3,\"40\":1,\"41\":4,\"93\":3,\"102\":17,\"105\":4,\"371\":1,\"393\":1,\"401\":7,\"402\":7,\"403\":8,\"405\":9,\"406\":6,\"407\":10,\"425\":1,\"426\":2,\"427\":2,\"428\":2,\"429\":11,\"430\":8,\"431\":8,\"433\":2,\"436\":1,\"437\":2,\"440\":9,\"441\":2,\"444\":5}}],[\"startengine\",{\"1\":{\"579\":2}}],[\"started\",{\"1\":{\"512\":1,\"579\":3,\"583\":2}}],[\"startswith\",{\"1\":{\"167\":2,\"256\":2}}],[\"start\",{\"1\":{\"5\":1,\"137\":1,\"153\":2,\"155\":3,\"197\":1,\"256\":4,\"257\":2,\"270\":3,\"271\":3,\"510\":1,\"583\":2}}],[\"separation\",{\"1\":{\"458\":1}}],[\"separator\",{\"1\":{\"256\":1,\"257\":1}}],[\"session数据通常存储在服务器的内存\",{\"1\":{\"357\":1}}],[\"session是在服务器端存储用户状态信息的一种机制\",{\"1\":{\"357\":1}}],[\"session\",{\"0\":{\"357\":1},\"1\":{\"357\":1,\"521\":1}}],[\"sessionstorage进行持久化\",{\"1\":{\"439\":1}}],[\"sessionstorage\",{\"1\":{\"236\":1,\"439\":1}}],[\"searchinput\",{\"1\":{\"347\":3}}],[\"search\",{\"1\":{\"256\":2,\"347\":2,\"386\":1,\"578\":2}}],[\"seal\",{\"1\":{\"171\":2}}],[\"security\",{\"1\":{\"359\":3}}],[\"secure\",{\"1\":{\"359\":3}}],[\"seconddecorator\",{\"1\":{\"324\":2}}],[\"second\",{\"1\":{\"320\":2,\"324\":2}}],[\"secondary\",{\"1\":{\"161\":5}}],[\"section>\",{\"1\":{\"3\":1}}],[\"semantic\",{\"1\":{\"160\":3}}],[\"semper\",{\"1\":{\"154\":1}}],[\"sem\",{\"1\":{\"154\":3}}],[\"sed\",{\"1\":{\"154\":5}}],[\"serialize\",{\"1\":{\"289\":1}}],[\"serif\",{\"1\":{\"144\":1}}],[\"service\",{\"1\":{\"243\":1}}],[\"server\",{\"1\":{\"131\":1,\"272\":3,\"366\":1,\"367\":1,\"368\":1,\"475\":1,\"509\":1,\"512\":1,\"521\":1,\"580\":2,\"581\":1}}],[\"serve\",{\"1\":{\"5\":1,\"88\":1,\"100\":1,\"412\":1,\"440\":1}}],[\"send\",{\"1\":{\"282\":1,\"345\":1,\"346\":1,\"347\":1,\"348\":1,\"364\":1,\"365\":5,\"366\":1,\"509\":1,\"512\":1}}],[\"sendmessage\",{\"1\":{\"93\":2}}],[\"senddatatoparent\",{\"1\":{\"93\":2}}],[\"seen\",{\"1\":{\"70\":2}}],[\"seo优化\",{\"1\":{\"359\":1}}],[\"seo\",{\"1\":{\"63\":1}}],[\"selectors\",{\"1\":{\"159\":3}}],[\"selector\",{\"0\":{\"159\":1},\"1\":{\"143\":10,\"159\":1}}],[\"select语句用于从数据库中检索数据\",{\"1\":{\"135\":1}}],[\"select语句的使用\",{\"1\":{\"135\":1}}],[\"select\",{\"1\":{\"134\":2,\"135\":8,\"600\":1}}],[\"select>\",{\"1\":{\"30\":1}}],[\"self=\",{\"1\":{\"70\":1}}],[\"self\",{\"1\":{\"57\":2,\"70\":1,\"262\":3,\"580\":1}}],[\"setloggedin\",{\"1\":{\"429\":1,\"431\":4}}],[\"setuser\",{\"1\":{\"432\":1}}],[\"setusername\",{\"1\":{\"429\":1,\"431\":4}}],[\"setup\",{\"1\":{\"70\":1,\"102\":1,\"105\":1,\"114\":2,\"116\":1,\"117\":2}}],[\"setfilter\",{\"1\":{\"407\":5}}],[\"setattribute\",{\"1\":{\"265\":2}}],[\"setprototypeof\",{\"1\":{\"189\":8,\"191\":3}}],[\"setinterval\",{\"1\":{\"260\":5,\"266\":1,\"270\":1,\"275\":1}}],[\"setint16\",{\"1\":{\"182\":1}}],[\"setint8\",{\"1\":{\"182\":1}}],[\"settings路径时\",{\"1\":{\"415\":1}}],[\"settings组件将会被渲染在profile组件的视图中\",{\"1\":{\"415\":1}}],[\"settings时\",{\"1\":{\"415\":1}}],[\"settings\",{\"1\":{\"389\":3,\"415\":5}}],[\"setting\",{\"1\":{\"188\":1,\"189\":4}}],[\"settimeout和setinterval中的回调函数\",{\"1\":{\"271\":1}}],[\"settimeout\",{\"1\":{\"102\":2,\"187\":1,\"192\":1,\"193\":3,\"196\":1,\"197\":1,\"258\":1,\"260\":5,\"266\":1,\"270\":5,\"271\":2,\"272\":3,\"275\":1,\"322\":4}}],[\"setter\",{\"1\":{\"73\":1,\"183\":2}}],[\"settodoinput\",{\"1\":{\"5\":3}}],[\"settodos\",{\"1\":{\"5\":3}}],[\"setshowcomponent\",{\"1\":{\"51\":2}}],[\"setstate方法更新count的值\",{\"1\":{\"20\":1}}],[\"setstate\",{\"1\":{\"20\":2,\"22\":1,\"23\":1,\"31\":1,\"50\":1}}],[\"setstate来更新状态\",{\"1\":{\"18\":1}}],[\"setheight\",{\"1\":{\"41\":2}}],[\"setdata\",{\"1\":{\"41\":2,\"50\":2,\"432\":1,\"433\":5}}],[\"setcount\",{\"1\":{\"41\":4,\"42\":3}}],[\"setmessage\",{\"1\":{\"35\":2,\"93\":2}}],[\"set\",{\"0\":{\"176\":1},\"1\":{\"3\":1,\"134\":1,\"136\":1,\"176\":15,\"177\":3,\"178\":1,\"179\":2,\"183\":1,\"184\":1,\"185\":4,\"188\":3,\"191\":2,\"282\":1,\"360\":1,\"367\":1,\"407\":4,\"586\":3,\"587\":1,\"600\":1}}],[\"srcset\",{\"1\":{\"239\":1}}],[\"src=\",{\"1\":{\"15\":3,\"65\":1,\"70\":1,\"87\":1,\"218\":2,\"219\":2,\"221\":1,\"222\":1,\"223\":1,\"284\":1,\"368\":1}}],[\"src\",{\"1\":{\"3\":2,\"5\":3,\"211\":1,\"221\":1,\"222\":1,\"223\":1,\"264\":2,\"300\":1,\"450\":1,\"454\":1,\"456\":1,\"460\":4,\"475\":2,\"476\":1,\"485\":2,\"488\":1}}],[\"创建数据库连接\",{\"1\":{\"600\":1}}],[\"创建数组\",{\"1\":{\"257\":1}}],[\"创建服务器端的文件上传处理代码\",{\"1\":{\"581\":1}}],[\"创建包含文件上传表单的html页面\",{\"1\":{\"581\":1}}],[\"创建两个\",{\"1\":{\"579\":1}}],[\"创建node\",{\"0\":{\"508\":1}}],[\"创建根vuex\",{\"1\":{\"444\":1}}],[\"创建组件\",{\"1\":{\"440\":1}}],[\"创建组件的基本语法有两种\",{\"1\":{\"19\":1}}],[\"创建插件对象\",{\"1\":{\"437\":1}}],[\"创建路由实例\",{\"1\":{\"415\":1,\"417\":1}}],[\"创建路由器实例\",{\"1\":{\"412\":1}}],[\"创建vuex模块\",{\"1\":{\"444\":1}}],[\"创建vuex\",{\"1\":{\"437\":1,\"439\":2,\"440\":1}}],[\"创建vuerouter实例\",{\"1\":{\"413\":1}}],[\"创建vue实例并将vuex\",{\"1\":{\"440\":1}}],[\"创建vue实例\",{\"0\":{\"67\":1},\"1\":{\"415\":1,\"440\":1}}],[\"创建一些用于展示内容的页面组件\",{\"1\":{\"412\":1}}],[\"创建一个汽车对象\",{\"1\":{\"583\":1}}],[\"创建一个简单的express应用并启动服务器\",{\"1\":{\"509\":1}}],[\"创建一个根vuex\",{\"1\":{\"444\":1}}],[\"创建一个名为app\",{\"1\":{\"440\":1}}],[\"创建一个商品模块\",{\"1\":{\"435\":1}}],[\"创建一个高阶组件\",{\"1\":{\"385\":1}}],[\"创建一个包含静态文件和资源的目录\",{\"1\":{\"368\":1}}],[\"创建一个包含视图模板的\",{\"1\":{\"367\":1}}],[\"创建一个xmlhttprequest对象\",{\"1\":{\"346\":1}}],[\"创建一个对象\",{\"1\":{\"267\":1}}],[\"创建一个空数组\",{\"1\":{\"257\":1}}],[\"创建一个\",{\"1\":{\"192\":1,\"330\":1,\"384\":1}}],[\"创建一个独立的css文件\",{\"1\":{\"142\":1}}],[\"创建一个vuex\",{\"1\":{\"426\":1}}],[\"创建一个vue3项目\",{\"1\":{\"100\":1}}],[\"创建一个vue实例作为事件总线\",{\"1\":{\"93\":1}}],[\"创建一个新项目\",{\"1\":{\"88\":1}}],[\"创建一个新的文件\",{\"1\":{\"508\":1}}],[\"创建一个新的文件夹\",{\"1\":{\"508\":1}}],[\"创建一个新的文件夹作为项目目录\",{\"1\":{\"475\":1}}],[\"创建一个新的文件store\",{\"1\":{\"440\":1}}],[\"创建一个新的vuex\",{\"1\":{\"426\":1,\"427\":1}}],[\"创建一个新的对象\",{\"1\":{\"267\":1}}],[\"创建一个新的实例对象\",{\"1\":{\"191\":1}}],[\"创建一个新的数据库\",{\"1\":{\"133\":1}}],[\"创建一个新的web\",{\"1\":{\"57\":1}}],[\"创建一个新的react项目\",{\"1\":{\"5\":1}}],[\"创建一个新的\",{\"0\":{\"1\":1},\"1\":{\"3\":1}}],[\"创建一个类组件的基本语法如下\",{\"1\":{\"19\":1}}],[\"创建一个函数组件的基本语法如下\",{\"1\":{\"19\":1}}],[\"创建页面组件\",{\"1\":{\"412\":1}}],[\"创建第一个应用的步骤如下\",{\"1\":{\"412\":1}}],[\"创建第一个应用\",{\"0\":{\"412\":1}}],[\"创建redux\",{\"1\":{\"407\":2}}],[\"创建reducers\",{\"1\":{\"402\":1}}],[\"创建react组件\",{\"1\":{\"407\":1}}],[\"创建react组件的基本语法\",{\"0\":{\"19\":1}}],[\"创建react元素\",{\"1\":{\"16\":1}}],[\"创建描述状态变化的action对象\",{\"1\":{\"402\":1}}],[\"创建store\",{\"1\":{\"402\":1}}],[\"创建入口文件和其他源文件\",{\"1\":{\"475\":1}}],[\"创建入口文件\",{\"1\":{\"364\":1}}],[\"创建项目目录\",{\"1\":{\"364\":1,\"475\":1}}],[\"创建xmlhttprequest对象\",{\"1\":{\"341\":1,\"345\":1}}],[\"创建分支\",{\"1\":{\"335\":1}}],[\"创建仓库\",{\"1\":{\"334\":1}}],[\"创建promise对象\",{\"1\":{\"306\":1}}],[\"创建deferred对象\",{\"1\":{\"306\":1}}],[\"创建正则表达式\",{\"1\":{\"279\":1}}],[\"创建的定时器\",{\"1\":{\"275\":1}}],[\"创建的响应式对象就可以追踪到更复杂数据的变化\",{\"1\":{\"102\":1}}],[\"创建元素\",{\"1\":{\"265\":1}}],[\"创建模板字符串\",{\"1\":{\"256\":1}}],[\"创建字符串\",{\"1\":{\"256\":1}}],[\"创建链接的元素\",{\"1\":{\"224\":1}}],[\"创建有序列表\",{\"1\":{\"219\":1}}],[\"创建无序列表\",{\"1\":{\"219\":1}}],[\"创建可撤销的代理对象\",{\"1\":{\"189\":1}}],[\"创建可见部分是渐变的遮罩效果\",{\"1\":{\"144\":1}}],[\"创建了一个新对象\",{\"1\":{\"310\":1}}],[\"创建了一个空对象\",{\"1\":{\"310\":1}}],[\"创建了一个红色的矩形图形\",{\"1\":{\"228\":1}}],[\"创建了一个代理对象\",{\"1\":{\"188\":1}}],[\"创建了一个名为\",{\"1\":{\"188\":1}}],[\"创建代理对象\",{\"1\":{\"188\":1}}],[\"创建生成器对象\",{\"1\":{\"186\":2}}],[\"创建对象\",{\"1\":{\"183\":1}}],[\"创建出丰富多样的动画效果\",{\"1\":{\"152\":1}}],[\"创建表\",{\"1\":{\"134\":1}}],[\"创建新的数据库\",{\"1\":{\"133\":1}}],[\"创建和管理表\",{\"1\":{\"132\":1}}],[\"创建和管理数据库\",{\"1\":{\"132\":1}}],[\"创建整个应用的初始虚拟dom树\",{\"1\":{\"128\":1}}],[\"创建虚拟dom树\",{\"1\":{\"128\":1}}],[\"创建需要动态渲染的组件\",{\"1\":{\"94\":1}}],[\"创建webpack配置文件\",{\"1\":{\"475\":1}}],[\"创建web\",{\"1\":{\"57\":1}}],[\"创建逻辑\",{\"1\":{\"42\":1}}],[\"创建上下文\",{\"1\":{\"37\":1}}],[\"创建完组件后\",{\"1\":{\"19\":1}}],[\"创建\",{\"0\":{\"3\":1},\"1\":{\"570\":1}}],[\"ns\",{\"1\":{\"326\":2}}],[\"nbsp\",{\"1\":{\"213\":1}}],[\"nbar\",{\"1\":{\"168\":2}}],[\"nth\",{\"1\":{\"159\":6}}],[\"nisl\",{\"1\":{\"154\":1}}],[\"n\",{\"1\":{\"52\":12,\"159\":3,\"167\":1,\"168\":2,\"172\":7,\"269\":8,\"313\":4,\"416\":1,\"538\":3,\"582\":1}}],[\"num2\",{\"1\":{\"258\":8}}],[\"num1\",{\"1\":{\"258\":8}}],[\"num=42\",{\"1\":{\"256\":1}}],[\"num\",{\"1\":{\"252\":3,\"256\":1}}],[\"numberorstring\",{\"1\":{\"321\":2}}],[\"numbers\",{\"1\":{\"172\":5,\"251\":1,\"278\":2,\"310\":10,\"311\":2,\"313\":4,\"315\":1,\"316\":2}}],[\"number\",{\"0\":{\"169\":1},\"1\":{\"30\":1,\"169\":31,\"172\":2,\"173\":1,\"251\":1,\"252\":2,\"253\":1,\"258\":3,\"278\":2,\"310\":6,\"311\":7,\"312\":13,\"313\":20,\"315\":6,\"316\":9,\"317\":1,\"318\":9,\"319\":10,\"320\":4,\"321\":13,\"329\":10,\"330\":3,\"444\":3}}],[\"nullableflags\",{\"1\":{\"319\":2}}],[\"null和undefined\",{\"1\":{\"310\":1}}],[\"nullish\",{\"1\":{\"173\":1}}],[\"null\",{\"0\":{\"536\":1,\"541\":1},\"1\":{\"22\":1,\"25\":1,\"41\":5,\"50\":1,\"173\":1,\"191\":1,\"193\":1,\"251\":2,\"252\":1,\"253\":1,\"267\":1,\"275\":1,\"281\":3,\"310\":15,\"319\":4,\"405\":3,\"536\":5,\"541\":24,\"604\":1}}],[\"nav>\",{\"1\":{\"380\":1,\"384\":1,\"394\":1,\"396\":1}}],[\"navlink>\",{\"1\":{\"380\":2,\"393\":1,\"394\":2}}],[\"navlink\",{\"1\":{\"380\":1,\"393\":3,\"394\":3}}],[\"navigate\",{\"1\":{\"384\":2,\"389\":1,\"393\":10}}],[\"navigation\",{\"0\":{\"380\":1,\"383\":1},\"1\":{\"380\":1,\"384\":1}}],[\"navigator\",{\"1\":{\"229\":2,\"266\":2}}],[\"nan\",{\"1\":{\"169\":2,\"252\":1}}],[\"nascetur\",{\"1\":{\"154\":1}}],[\"natoque\",{\"1\":{\"154\":1}}],[\"native就是一个例子\",{\"1\":{\"45\":1}}],[\"native\",{\"1\":{\"9\":1,\"390\":1}}],[\"native用于开发移动应用等\",{\"1\":{\"8\":1}}],[\"name的值会自动更新\",{\"1\":{\"442\":1}}],[\"name访问表单数据\",{\"1\":{\"442\":1}}],[\"nameorage\",{\"1\":{\"329\":4}}],[\"name返回john\",{\"1\":{\"259\":1}}],[\"namespaced\",{\"1\":{\"444\":2}}],[\"namespacename\",{\"1\":{\"326\":1}}],[\"namespace\",{\"1\":{\"325\":1,\"326\":6,\"329\":4,\"584\":4}}],[\"names\",{\"1\":{\"189\":2,\"315\":1,\"316\":2}}],[\"name和props\",{\"1\":{\"36\":1}}],[\"name将访问name属性的值\",{\"1\":{\"20\":1}}],[\"name=john中的id和name\",{\"1\":{\"521\":1}}],[\"name=john\",{\"1\":{\"365\":1}}],[\"name=\",{\"1\":{\"19\":2,\"20\":1,\"30\":3,\"36\":1,\"93\":1,\"98\":1,\"208\":2,\"216\":2,\"299\":1,\"331\":1,\"346\":2,\"417\":2,\"580\":4,\"581\":1,\"600\":1}}],[\"name\",{\"1\":{\"13\":2,\"14\":2,\"15\":2,\"18\":2,\"19\":2,\"20\":1,\"23\":3,\"33\":1,\"36\":3,\"52\":1,\"86\":1,\"92\":2,\"93\":5,\"102\":6,\"116\":1,\"134\":3,\"144\":2,\"167\":2,\"171\":18,\"172\":6,\"173\":3,\"177\":3,\"178\":2,\"179\":4,\"183\":24,\"188\":6,\"189\":31,\"191\":34,\"204\":7,\"216\":4,\"231\":1,\"249\":6,\"251\":4,\"253\":1,\"256\":2,\"258\":4,\"259\":6,\"262\":8,\"267\":36,\"273\":1,\"278\":5,\"282\":5,\"310\":4,\"312\":33,\"313\":2,\"315\":6,\"316\":4,\"317\":4,\"319\":4,\"321\":7,\"329\":3,\"330\":3,\"346\":2,\"357\":1,\"365\":2,\"369\":1,\"384\":3,\"385\":3,\"405\":1,\"412\":2,\"417\":5,\"420\":2,\"421\":2,\"442\":2,\"444\":1,\"463\":2,\"469\":1,\"473\":2,\"476\":1,\"480\":2,\"483\":2,\"495\":1,\"519\":1,\"574\":2,\"575\":2,\"576\":1,\"577\":2,\"580\":3,\"581\":2,\"584\":1,\"597\":2,\"600\":3,\"603\":1}}],[\"npx\",{\"1\":{\"5\":1,\"451\":1,\"475\":1}}],[\"npmjs\",{\"1\":{\"510\":1}}],[\"npm还有其他功能\",{\"1\":{\"510\":1}}],[\"npm\",{\"0\":{\"510\":1},\"1\":{\"2\":2,\"5\":2,\"65\":1,\"70\":1,\"87\":1,\"88\":2,\"100\":2,\"364\":3,\"367\":1,\"375\":1,\"384\":2,\"394\":1,\"397\":1,\"403\":1,\"405\":1,\"406\":1,\"407\":1,\"412\":2,\"427\":1,\"439\":1,\"440\":2,\"444\":2,\"449\":1,\"472\":1,\"473\":1,\"474\":1,\"475\":2,\"506\":1,\"507\":1,\"510\":11}}],[\"north\",{\"1\":{\"314\":15}}],[\"noconflict\",{\"1\":{\"307\":2}}],[\"nonreactivedata\",{\"1\":{\"442\":2}}],[\"nonnullable<foo>\",{\"1\":{\"319\":1}}],[\"nonnullable<t>\",{\"1\":{\"319\":1}}],[\"non\",{\"1\":{\"154\":1}}],[\"none模式下\",{\"1\":{\"479\":1}}],[\"none模式\",{\"1\":{\"479\":1}}],[\"none\",{\"1\":{\"144\":2,\"265\":2,\"352\":1,\"355\":1,\"356\":2,\"407\":1,\"457\":2,\"479\":1}}],[\"no\",{\"1\":{\"144\":1}}],[\"notation\",{\"1\":{\"343\":1,\"371\":1}}],[\"notfound\",{\"1\":{\"314\":1,\"378\":1}}],[\"notifications\",{\"1\":{\"243\":1}}],[\"not\",{\"1\":{\"70\":1,\"159\":3,\"172\":1}}],[\"nowrap\",{\"1\":{\"144\":1,\"155\":1}}],[\"now\",{\"1\":{\"3\":1,\"407\":1}}],[\"node包管理器\",{\"1\":{\"475\":1}}],[\"nodejs\",{\"1\":{\"329\":1,\"364\":1,\"507\":1}}],[\"node\",{\"0\":{\"505\":1},\"1\":{\"1\":1,\"41\":2,\"88\":3,\"128\":1,\"129\":1,\"241\":1,\"270\":2,\"276\":1,\"328\":9,\"363\":5,\"364\":4,\"454\":1,\"457\":3,\"460\":3,\"469\":1,\"471\":1,\"472\":1,\"476\":1,\"480\":1,\"487\":1,\"506\":9,\"507\":4,\"508\":5,\"510\":1,\"511\":1}}],[\"nested\",{\"0\":{\"379\":1}}],[\"nestedfunc\",{\"1\":{\"262\":2}}],[\"nestedarray\",{\"1\":{\"170\":3}}],[\"nestedobj\",{\"1\":{\"166\":2}}],[\"negation\",{\"1\":{\"159\":1}}],[\"never\",{\"1\":{\"70\":1,\"310\":8,\"319\":1}}],[\"netscape\",{\"1\":{\"164\":4}}],[\"net\",{\"1\":{\"65\":1,\"70\":1,\"87\":1}}],[\"network\",{\"1\":{\"58\":2}}],[\"needs\",{\"1\":{\"3\":1}}],[\"newuser\",{\"1\":{\"369\":2}}],[\"newcontent\",{\"1\":{\"348\":2}}],[\"newclass\",{\"1\":{\"265\":1}}],[\"newlink\",{\"1\":{\"288\":2}}],[\"newelement\",{\"1\":{\"265\":6}}],[\"newarr\",{\"1\":{\"257\":2}}],[\"newsubstring\",{\"1\":{\"256\":1}}],[\"newtarget\",{\"1\":{\"188\":1,\"189\":2,\"191\":1}}],[\"newtodo\",{\"1\":{\"3\":5}}],[\"newdatabase\",{\"1\":{\"133\":1}}],[\"newvalue\",{\"1\":{\"77\":2,\"110\":7,\"265\":1}}],[\"newmessage\",{\"1\":{\"35\":2}}],[\"new\",{\"1\":{\"3\":1,\"30\":1,\"52\":1,\"57\":1,\"70\":11,\"74\":1,\"77\":2,\"82\":2,\"86\":1,\"87\":1,\"89\":1,\"91\":1,\"93\":4,\"168\":1,\"171\":1,\"173\":2,\"176\":1,\"177\":1,\"178\":1,\"179\":1,\"180\":2,\"181\":2,\"182\":2,\"183\":10,\"185\":1,\"187\":2,\"188\":2,\"189\":16,\"192\":2,\"193\":5,\"196\":1,\"197\":1,\"198\":1,\"204\":4,\"253\":1,\"262\":1,\"264\":3,\"265\":2,\"267\":7,\"271\":1,\"272\":2,\"278\":1,\"279\":1,\"282\":2,\"294\":1,\"310\":4,\"312\":8,\"320\":1,\"322\":5,\"326\":1,\"327\":1,\"330\":1,\"345\":1,\"346\":2,\"347\":1,\"348\":1,\"365\":1,\"366\":1,\"367\":1,\"383\":2,\"384\":1,\"386\":1,\"393\":5,\"401\":1,\"402\":1,\"407\":1,\"412\":3,\"413\":2,\"415\":2,\"418\":1,\"420\":1,\"421\":1,\"427\":2,\"429\":1,\"430\":1,\"431\":3,\"432\":2,\"433\":1,\"437\":1,\"438\":1,\"439\":2,\"440\":2,\"444\":2,\"456\":2,\"469\":3,\"476\":2,\"488\":1,\"492\":1,\"496\":1,\"538\":1,\"539\":1,\"579\":3,\"582\":1,\"583\":1,\"584\":2,\"589\":1,\"597\":1,\"600\":1}}],[\"nextreducer\",{\"1\":{\"401\":1}}],[\"nextevent\",{\"1\":{\"198\":2}}],[\"nextstate\",{\"1\":{\"22\":2,\"48\":1}}],[\"nextprops和nextstate\",{\"1\":{\"48\":1}}],[\"nextprops\",{\"1\":{\"22\":5,\"48\":2}}],[\"next\",{\"1\":{\"2\":1,\"100\":1,\"184\":9,\"185\":1,\"186\":10,\"187\":16,\"197\":3,\"198\":6,\"323\":6,\"365\":1,\"366\":8,\"421\":19,\"582\":1}}],[\"credentials\",{\"1\":{\"432\":2}}],[\"creators是一个返回action对象的纯函数\",{\"1\":{\"401\":1}}],[\"creators\",{\"1\":{\"401\":1}}],[\"createpersistedstate\",{\"1\":{\"439\":3}}],[\"createwebhistory\",{\"1\":{\"417\":1}}],[\"createrouter\",{\"1\":{\"417\":1}}],[\"createelement\",{\"1\":{\"265\":2,\"345\":1,\"347\":1}}],[\"createeventemitter\",{\"1\":{\"198\":1}}],[\"createapp\",{\"1\":{\"101\":1}}],[\"created等\",{\"1\":{\"97\":1}}],[\"created\",{\"1\":{\"87\":4,\"95\":2,\"114\":1,\"442\":1}}],[\"createcontext\",{\"1\":{\"37\":1,\"41\":1}}],[\"createstore\",{\"1\":{\"3\":2,\"402\":2,\"403\":2,\"405\":2,\"406\":2,\"407\":2}}],[\"create\",{\"1\":{\"1\":1,\"5\":1,\"88\":1,\"100\":1,\"133\":1,\"134\":1,\"267\":4,\"406\":1,\"604\":2}}],[\"csh\",{\"1\":{\"527\":1}}],[\"csrf攻击等\",{\"1\":{\"602\":1}}],[\"csrf\",{\"1\":{\"340\":1,\"349\":1,\"355\":1,\"359\":1,\"602\":1}}],[\"css结尾的文件\",{\"1\":{\"476\":1}}],[\"css等css框架或库\",{\"1\":{\"474\":1}}],[\"css后缀的文件\",{\"1\":{\"463\":1}}],[\"css模块化等\",{\"1\":{\"455\":1}}],[\"css文件等\",{\"1\":{\"456\":1}}],[\"css文件\",{\"1\":{\"455\":2,\"486\":1}}],[\"css文件中编写css代码\",{\"1\":{\"142\":1}}],[\"css$\",{\"1\":{\"454\":1,\"455\":1,\"463\":1,\"474\":1,\"476\":1}}],[\"css和javascript\",{\"1\":{\"360\":1}}],[\"css部分定义了一个固定高度并且具有纵向滚动条的容器\",{\"1\":{\"348\":1}}],[\"css部分\",{\"1\":{\"348\":1}}],[\"css预处理器是一种将具有扩展语法的css代码转换成标准css的工具\",{\"1\":{\"161\":1}}],[\"css预处理器\",{\"0\":{\"161\":1,\"472\":1}}],[\"css是一个功能丰富且高度可定制的css框架\",{\"1\":{\"160\":1}}],[\"css框架和库\",{\"0\":{\"474\":1}}],[\"css框架是预先编写好的css样式集合\",{\"1\":{\"160\":1}}],[\"css框架\",{\"0\":{\"160\":1}}],[\"css样式规则\",{\"1\":{\"157\":1}}],[\"css样式属性是用于设置html元素的外观和布局的属性\",{\"1\":{\"144\":1}}],[\"css媒体查询\",{\"1\":{\"157\":1}}],[\"css多列布局\",{\"1\":{\"154\":1}}],[\"css提供了两种类型的渐变\",{\"1\":{\"153\":1}}],[\"css提供了丰富的2d和3d转换功能\",{\"1\":{\"150\":1}}],[\"css渐变\",{\"1\":{\"153\":1}}],[\"css渐变属性用于创建元素的渐变效果\",{\"1\":{\"144\":1}}],[\"css还提供了许多其他的动画相关属性和选择器\",{\"1\":{\"152\":1}}],[\"css动画提供了一种简单但强大的方式来实现各种动态效果\",{\"1\":{\"152\":1}}],[\"css动画是通过css属性的变化和过渡效果来创建元素的动画效果\",{\"1\":{\"152\":1}}],[\"css动画属性用于创建元素的动画效果\",{\"1\":{\"144\":1}}],[\"css3\",{\"0\":{\"149\":1}}],[\"css响应式设计是一种让网页在不同设备上自适应布局和样式的技术\",{\"1\":{\"148\":1}}],[\"css弹性布局是一种用于创建灵活和响应式布局的技术\",{\"1\":{\"147\":1}}],[\"css网格布局是一个强大的布局系统\",{\"1\":{\"147\":1}}],[\"css布局是指通过css样式来安排和组织网页中的元素\",{\"1\":{\"147\":1}}],[\"css盒模型是一种用于描述网页元素的布局和尺寸的概念\",{\"1\":{\"146\":1}}],[\"css选择器用于选择要应用样式的html元素\",{\"1\":{\"143\":1}}],[\"css为后缀\",{\"1\":{\"142\":1}}],[\"css过渡\",{\"1\":{\"98\":1,\"151\":1}}],[\"css精灵图\",{\"1\":{\"54\":1}}],[\"css\",{\"0\":{\"139\":1,\"156\":1},\"1\":{\"5\":1,\"54\":1,\"55\":1,\"60\":1,\"70\":1,\"89\":1,\"98\":1,\"120\":1,\"140\":2,\"141\":1,\"142\":1,\"148\":3,\"150\":1,\"152\":1,\"155\":1,\"156\":2,\"160\":1,\"210\":1,\"218\":1,\"233\":1,\"295\":3,\"366\":1,\"368\":4,\"394\":1,\"448\":1,\"454\":1,\"455\":2,\"463\":2,\"465\":1,\"472\":1,\"474\":3,\"476\":4,\"483\":1}}],[\"ctx\",{\"1\":{\"228\":3}}],[\"city\",{\"1\":{\"173\":2}}],[\"circle\",{\"1\":{\"153\":2,\"183\":11,\"319\":4,\"330\":12,\"591\":2}}],[\"cb\",{\"1\":{\"168\":2}}],[\"c\",{\"1\":{\"166\":6,\"167\":4,\"170\":3,\"171\":6,\"172\":2,\"184\":2,\"232\":1,\"281\":3,\"319\":3,\"604\":1}}],[\"cm\",{\"1\":{\"145\":1}}],[\"center\",{\"1\":{\"144\":2,\"155\":3}}],[\"ccc\",{\"1\":{\"144\":1,\"155\":1,\"156\":1}}],[\"customexception\",{\"1\":{\"589\":3}}],[\"customerrorhandler\",{\"1\":{\"587\":2}}],[\"customevent\",{\"1\":{\"93\":2,\"272\":2,\"322\":2}}],[\"cube\",{\"1\":{\"462\":1}}],[\"curr\",{\"1\":{\"313\":2}}],[\"currentstate\",{\"1\":{\"401\":2,\"402\":2}}],[\"currentdate\",{\"1\":{\"367\":2}}],[\"currentcomponent\",{\"1\":{\"94\":3,\"126\":5}}],[\"current\",{\"1\":{\"41\":6,\"582\":1}}],[\"currenttarget\",{\"1\":{\"27\":1}}],[\"cursor\",{\"1\":{\"144\":1}}],[\"car\",{\"1\":{\"535\":1,\"579\":9,\"583\":11}}],[\"cart\",{\"1\":{\"439\":2}}],[\"caching\",{\"0\":{\"495\":1},\"1\":{\"483\":1,\"497\":2}}],[\"cache文件夹下\",{\"1\":{\"482\":1}}],[\"cachegroups\",{\"1\":{\"480\":1}}],[\"cached\",{\"1\":{\"334\":1}}],[\"cache\",{\"1\":{\"52\":8,\"240\":1,\"355\":1,\"356\":1,\"482\":2,\"497\":1,\"601\":1}}],[\"ca\",{\"1\":{\"359\":1}}],[\"cat\",{\"1\":{\"312\":7,\"591\":2}}],[\"catch回调可以处理异常情况\",{\"1\":{\"467\":1}}],[\"catch语句块来捕获和处理异常\",{\"1\":{\"588\":1}}],[\"catch语句\",{\"1\":{\"255\":1}}],[\"catch\",{\"1\":{\"50\":2,\"51\":1,\"187\":2,\"192\":4,\"193\":7,\"196\":8,\"198\":9,\"255\":1,\"264\":1,\"272\":2,\"322\":3,\"405\":1,\"432\":4,\"433\":1,\"467\":1,\"493\":1,\"494\":1,\"511\":3,\"588\":1,\"589\":1}}],[\"canvas>\",{\"1\":{\"228\":1}}],[\"canvas\",{\"1\":{\"225\":1,\"228\":2}}],[\"cannot\",{\"1\":{\"189\":1,\"204\":1,\"317\":1}}],[\"cancelled\",{\"1\":{\"198\":5}}],[\"cancelled>\",{\"1\":{\"124\":2}}],[\"canceledit\",{\"1\":{\"3\":2}}],[\"casting\",{\"1\":{\"252\":1}}],[\"cascading\",{\"1\":{\"140\":1}}],[\"case\",{\"1\":{\"41\":2,\"91\":1,\"255\":2,\"401\":2,\"402\":2,\"403\":2,\"405\":3,\"406\":2,\"407\":3,\"519\":1,\"537\":3,\"557\":2}}],[\"capitalize\",{\"1\":{\"86\":3}}],[\"capture=\",{\"1\":{\"70\":1}}],[\"capture\",{\"1\":{\"70\":1}}],[\"calculateperimeter\",{\"1\":{\"591\":3}}],[\"calculatearea\",{\"1\":{\"183\":8,\"278\":4,\"591\":3}}],[\"calculatormodule\",{\"1\":{\"202\":2}}],[\"calculator\",{\"1\":{\"200\":5,\"201\":2,\"202\":16}}],[\"calculating\",{\"1\":{\"41\":1,\"52\":1}}],[\"callable\",{\"0\":{\"539\":1},\"1\":{\"539\":1}}],[\"call\",{\"1\":{\"253\":1,\"262\":1}}],[\"calling\",{\"1\":{\"188\":2,\"189\":9}}],[\"callbacks\",{\"1\":{\"272\":1}}],[\"callback\",{\"0\":{\"539\":1},\"1\":{\"86\":1,\"170\":4,\"192\":1,\"258\":3,\"260\":4,\"264\":1,\"271\":6,\"272\":6,\"313\":3,\"322\":3,\"387\":1,\"539\":1}}],[\"called\",{\"1\":{\"77\":1}}],[\"chrome\",{\"1\":{\"506\":1}}],[\"chunkfilename\",{\"1\":{\"483\":1}}],[\"chunkfilename选项来配置输出文件的文件名\",{\"1\":{\"483\":1}}],[\"chunkfilename选项\",{\"1\":{\"480\":1}}],[\"chunks\",{\"1\":{\"480\":2}}],[\"chunk\",{\"1\":{\"423\":1}}],[\"cheap\",{\"1\":{\"468\":3}}],[\"cherry\",{\"1\":{\"338\":3}}],[\"checkauth\",{\"1\":{\"385\":1}}],[\"checkout\",{\"1\":{\"335\":2,\"336\":2}}],[\"checkout命令可以切换分支\",{\"1\":{\"334\":1}}],[\"checkout命令可以撤销对文件的修改\",{\"1\":{\"334\":1}}],[\"checking\",{\"1\":{\"189\":3}}],[\"checked选择器可以选择被选中的复选框或单选按钮\",{\"1\":{\"159\":1}}],[\"checked选择器\",{\"1\":{\"159\":1}}],[\"check\",{\"1\":{\"3\":1}}],[\"checkbox\",{\"1\":{\"3\":2,\"30\":1}}],[\"ch\",{\"1\":{\"145\":1}}],[\"chain\",{\"1\":{\"261\":1,\"267\":2}}],[\"chaining\",{\"1\":{\"173\":1}}],[\"charlie\",{\"1\":{\"315\":1,\"316\":1}}],[\"charcodeat\",{\"1\":{\"256\":2}}],[\"chars\",{\"1\":{\"170\":2,\"173\":2}}],[\"charset=\",{\"1\":{\"70\":1,\"87\":1,\"129\":1,\"208\":1,\"235\":1}}],[\"char\",{\"1\":{\"136\":1,\"167\":2,\"185\":2,\"256\":1}}],[\"charat\",{\"1\":{\"86\":1,\"256\":2}}],[\"changecomponent\",{\"1\":{\"94\":2}}],[\"changedata\",{\"1\":{\"93\":2}}],[\"changed\",{\"1\":{\"77\":1}}],[\"changes\",{\"1\":{\"77\":1}}],[\"change\",{\"1\":{\"28\":1,\"70\":1}}],[\"childcount\",{\"1\":{\"265\":1}}],[\"childcomponent\",{\"1\":{\"20\":1,\"35\":5,\"36\":5,\"37\":4,\"41\":3,\"93\":3,\"96\":1}}],[\"childelementcount\",{\"1\":{\"265\":1}}],[\"childelement\",{\"1\":{\"265\":2,\"286\":1}}],[\"childevent\",{\"1\":{\"93\":1}}],[\"childevent=\",{\"1\":{\"93\":1}}],[\"child选择器选择作为其父元素唯一子元素的元素\",{\"1\":{\"159\":1}}],[\"child选择器和\",{\"1\":{\"159\":1}}],[\"child可以选择作为父元素中特定位置的子元素\",{\"1\":{\"159\":1}}],[\"child可以选择作为父元素第一个子元素的元素\",{\"1\":{\"159\":1}}],[\"child组件会自动更新\",{\"1\":{\"93\":1}}],[\"child>\",{\"1\":{\"93\":1}}],[\"children\",{\"1\":{\"93\":3,\"265\":1,\"303\":3,\"389\":1,\"415\":1,\"417\":1}}],[\"childref\",{\"1\":{\"41\":8}}],[\"child\",{\"1\":{\"35\":1,\"41\":2,\"93\":5,\"96\":1,\"143\":1,\"159\":1,\"265\":1,\"267\":3,\"299\":1,\"302\":1,\"303\":2}}],[\"china\",{\"1\":{\"30\":1}}],[\"codeigniter\",{\"1\":{\"604\":2}}],[\"code\",{\"0\":{\"458\":1,\"493\":1},\"1\":{\"284\":1,\"310\":1,\"453\":2,\"458\":1,\"480\":1,\"497\":1}}],[\"copywebpackplugin\",{\"1\":{\"456\":1,\"476\":1}}],[\"copy\",{\"1\":{\"281\":9,\"597\":1}}],[\"cookie方式传递的变量值\",{\"1\":{\"521\":1}}],[\"cookie等\",{\"1\":{\"360\":2}}],[\"cookie和session都是用于在web应用中维持用户状态的机制\",{\"1\":{\"357\":1}}],[\"cookie和session是web开发中常用的机制\",{\"1\":{\"357\":1}}],[\"cookie中的信息可以在客户端进行可视和修改\",{\"1\":{\"357\":1}}],[\"cookie与session的关系\",{\"1\":{\"357\":1}}],[\"cookie字段来设置cookie\",{\"1\":{\"357\":1}}],[\"cookie字段将一个或多个cookie发送到客户端\",{\"1\":{\"357\":1}}],[\"cookie是在客户端\",{\"1\":{\"357\":1}}],[\"cookie用于在客户端和服务器之间传递会话信息\",{\"1\":{\"351\":1}}],[\"cookie\",{\"0\":{\"357\":1},\"1\":{\"351\":1,\"352\":1,\"355\":1,\"357\":1,\"521\":1}}],[\"cookies\",{\"1\":{\"240\":1}}],[\"coords\",{\"1\":{\"229\":2}}],[\"cors\",{\"1\":{\"238\":1}}],[\"coalescing\",{\"1\":{\"173\":1,\"604\":1}}],[\"cover\",{\"1\":{\"144\":1}}],[\"collection\",{\"1\":{\"274\":1,\"276\":2,\"369\":5}}],[\"cols=\",{\"1\":{\"218\":1}}],[\"columns属性\",{\"1\":{\"156\":1}}],[\"columns\",{\"1\":{\"144\":1,\"147\":1,\"156\":1}}],[\"column2\",{\"1\":{\"135\":2}}],[\"column1\",{\"1\":{\"135\":2}}],[\"column\",{\"0\":{\"154\":1},\"1\":{\"134\":1,\"135\":11,\"144\":1,\"154\":4,\"155\":2,\"159\":1}}],[\"colorkey\",{\"1\":{\"321\":1}}],[\"colors\",{\"1\":{\"321\":2}}],[\"color和secondary\",{\"1\":{\"161\":1}}],[\"color和\",{\"1\":{\"161\":1}}],[\"color和$secondary\",{\"1\":{\"161\":1}}],[\"color来设置背景颜色\",{\"1\":{\"161\":3}}],[\"color\",{\"1\":{\"15\":1,\"70\":1,\"85\":2,\"141\":1,\"142\":5,\"143\":4,\"144\":8,\"147\":1,\"150\":1,\"151\":1,\"152\":3,\"153\":7,\"156\":1,\"161\":45,\"265\":1,\"295\":3,\"314\":1,\"318\":2,\"535\":1,\"583\":1}}],[\"counting\",{\"1\":{\"276\":1}}],[\"count和column\",{\"1\":{\"154\":1}}],[\"count属性为3来将文本内容分为3列\",{\"1\":{\"154\":1}}],[\"count属性来指定要创建的列数\",{\"1\":{\"154\":1}}],[\"count=ref\",{\"1\":{\"116\":1}}],[\"count<\",{\"1\":{\"97\":1}}],[\"count++\",{\"1\":{\"91\":1,\"97\":1,\"102\":3,\"258\":1,\"260\":1,\"278\":1,\"429\":1,\"431\":1,\"440\":1,\"444\":1}}],[\"counterreducer\",{\"1\":{\"401\":1,\"402\":1,\"403\":4}}],[\"counter函数返回一个内部函数\",{\"1\":{\"258\":1}}],[\"counter组件注册为局部组件\",{\"1\":{\"91\":1}}],[\"counter>`标签来引用和使用buttoncounter组件\",{\"1\":{\"91\":1}}],[\"counter>标签来引用和使用mycomponent组件了\",{\"1\":{\"91\":1}}],[\"counter>\",{\"1\":{\"91\":1}}],[\"counter><\",{\"1\":{\"91\":1}}],[\"counter\",{\"1\":{\"41\":2,\"42\":1,\"91\":3,\"258\":2,\"401\":7,\"402\":5,\"406\":5}}],[\"countercomponent是一个类组件\",{\"1\":{\"20\":1}}],[\"countercomponent\",{\"1\":{\"20\":1}}],[\"country\",{\"1\":{\"30\":1,\"173\":1}}],[\"count访问状态的值\",{\"1\":{\"20\":1}}],[\"count\",{\"1\":{\"20\":4,\"22\":14,\"41\":10,\"42\":4,\"91\":2,\"97\":2,\"102\":16,\"105\":3,\"116\":2,\"135\":1,\"144\":2,\"154\":1,\"258\":2,\"260\":2,\"278\":2,\"403\":8,\"406\":8,\"429\":4,\"430\":1,\"440\":6,\"441\":2,\"444\":5,\"570\":1,\"578\":2}}],[\"confirmedleave\",{\"1\":{\"421\":1}}],[\"configurable\",{\"1\":{\"191\":2}}],[\"config\",{\"1\":{\"70\":1,\"438\":1,\"450\":1,\"454\":1,\"475\":3,\"479\":3,\"482\":1}}],[\"connect等协议\",{\"1\":{\"370\":1}}],[\"connected\",{\"1\":{\"369\":1}}],[\"connect\",{\"1\":{\"369\":2,\"403\":2,\"405\":2,\"406\":2,\"407\":2,\"538\":1,\"570\":1}}],[\"connection\",{\"1\":{\"358\":1}}],[\"concat\",{\"1\":{\"257\":2}}],[\"conversion\",{\"1\":{\"252\":2}}],[\"convertedbool\",{\"1\":{\"252\":2}}],[\"convertedstr\",{\"1\":{\"252\":2}}],[\"convertednum\",{\"1\":{\"252\":2}}],[\"converted\",{\"1\":{\"102\":5}}],[\"condition2\",{\"1\":{\"255\":1}}],[\"condition1\",{\"1\":{\"255\":1}}],[\"conditional\",{\"1\":{\"255\":1,\"319\":1}}],[\"condition\",{\"1\":{\"135\":1,\"255\":2}}],[\"consequat\",{\"1\":{\"154\":1}}],[\"consectetur\",{\"1\":{\"154\":2}}],[\"consistency\",{\"1\":{\"137\":1}}],[\"consumer来获取上下文数据\",{\"1\":{\"37\":1}}],[\"consumer中\",{\"1\":{\"37\":1}}],[\"consumer组件来获取父组件传递的共享数据\",{\"1\":{\"37\":1}}],[\"consumer>\",{\"1\":{\"37\":2}}],[\"console\",{\"1\":{\"22\":1,\"23\":1,\"25\":6,\"26\":2,\"36\":1,\"41\":1,\"50\":2,\"51\":1,\"52\":8,\"70\":1,\"77\":3,\"87\":8,\"93\":2,\"97\":1,\"102\":9,\"110\":5,\"165\":2,\"166\":19,\"167\":18,\"168\":21,\"169\":30,\"170\":21,\"171\":14,\"172\":12,\"173\":6,\"174\":10,\"176\":4,\"177\":4,\"178\":2,\"179\":2,\"180\":2,\"181\":2,\"182\":2,\"183\":12,\"184\":8,\"185\":4,\"186\":8,\"187\":15,\"188\":8,\"189\":37,\"191\":17,\"192\":2,\"193\":14,\"196\":6,\"197\":3,\"198\":5,\"200\":2,\"201\":2,\"202\":6,\"204\":6,\"249\":5,\"251\":2,\"252\":4,\"253\":13,\"254\":21,\"256\":24,\"257\":18,\"258\":11,\"259\":7,\"260\":2,\"261\":3,\"262\":10,\"263\":5,\"264\":2,\"265\":1,\"267\":9,\"268\":1,\"269\":1,\"270\":8,\"271\":5,\"272\":6,\"278\":7,\"281\":3,\"282\":2,\"310\":17,\"311\":3,\"312\":11,\"313\":11,\"314\":14,\"315\":1,\"317\":4,\"320\":1,\"322\":6,\"323\":5,\"324\":6,\"329\":6,\"330\":2,\"364\":1,\"366\":3,\"367\":1,\"368\":1,\"369\":4,\"387\":3,\"401\":1,\"402\":1,\"432\":5,\"433\":1,\"437\":2,\"462\":1,\"467\":1,\"493\":1,\"494\":1,\"508\":1,\"509\":2,\"511\":5,\"512\":1}}],[\"constraints\",{\"1\":{\"320\":1}}],[\"construct\",{\"1\":{\"188\":1,\"189\":6,\"191\":2,\"535\":1,\"579\":2,\"582\":1,\"591\":1}}],[\"constructor\",{\"1\":{\"20\":1,\"22\":3,\"23\":1,\"31\":1,\"171\":1,\"183\":9,\"189\":5,\"191\":1,\"278\":1,\"312\":6,\"317\":1,\"320\":1,\"324\":9,\"330\":1}}],[\"const声明的变量必须在声明时进行初始化\",{\"1\":{\"165\":1}}],[\"const\",{\"1\":{\"5\":5,\"13\":1,\"14\":3,\"15\":1,\"16\":2,\"21\":1,\"23\":6,\"26\":1,\"27\":2,\"30\":1,\"31\":1,\"35\":3,\"36\":2,\"37\":2,\"38\":1,\"41\":25,\"42\":4,\"47\":1,\"50\":1,\"51\":3,\"52\":10,\"67\":1,\"70\":1,\"87\":1,\"93\":2,\"95\":1,\"97\":1,\"101\":1,\"102\":12,\"105\":2,\"110\":5,\"116\":1,\"117\":1,\"165\":2,\"167\":7,\"168\":10,\"169\":2,\"170\":18,\"171\":18,\"172\":4,\"173\":10,\"174\":13,\"176\":1,\"177\":5,\"178\":3,\"179\":5,\"180\":2,\"181\":2,\"182\":2,\"183\":10,\"184\":4,\"185\":8,\"186\":2,\"187\":9,\"188\":6,\"189\":39,\"191\":20,\"192\":2,\"193\":11,\"196\":4,\"197\":2,\"198\":20,\"200\":1,\"204\":7,\"249\":1,\"264\":2,\"267\":12,\"271\":1,\"272\":7,\"310\":4,\"311\":4,\"312\":7,\"313\":10,\"314\":5,\"315\":1,\"321\":2,\"322\":5,\"323\":3,\"326\":1,\"327\":1,\"329\":3,\"330\":1,\"364\":3,\"365\":4,\"366\":4,\"367\":4,\"368\":2,\"369\":5,\"383\":1,\"384\":6,\"385\":3,\"386\":4,\"387\":4,\"388\":4,\"391\":2,\"393\":4,\"397\":3,\"401\":3,\"402\":6,\"403\":6,\"405\":5,\"406\":2,\"407\":7,\"412\":2,\"413\":3,\"415\":2,\"417\":4,\"418\":2,\"419\":2,\"420\":1,\"421\":1,\"423\":1,\"427\":1,\"429\":2,\"430\":1,\"431\":1,\"432\":1,\"433\":2,\"437\":2,\"439\":2,\"440\":1,\"442\":1,\"444\":6,\"450\":1,\"454\":1,\"456\":2,\"469\":3,\"475\":1,\"476\":2,\"488\":1,\"492\":1,\"493\":1,\"494\":1,\"496\":1,\"509\":3,\"511\":4,\"512\":2}}],[\"continue\",{\"1\":{\"564\":1}}],[\"continue语句\",{\"1\":{\"564\":1}}],[\"contains\",{\"1\":{\"291\":1,\"299\":1}}],[\"container类中使用了混合器\",{\"1\":{\"161\":1}}],[\"container类中使用了混合器gradient\",{\"1\":{\"161\":2}}],[\"container元素都会具有一个渐变背景\",{\"1\":{\"161\":3}}],[\"container会应用display\",{\"1\":{\"157\":1}}],[\"container内部的元素按照flex布局进行排列\",{\"1\":{\"155\":1}}],[\"container是网格容器\",{\"1\":{\"156\":1}}],[\"container是flex容器\",{\"1\":{\"155\":1}}],[\"container是包含文本内容的容器元素\",{\"1\":{\"154\":1}}],[\"container<\",{\"1\":{\"119\":1}}],[\"container\",{\"1\":{\"14\":2,\"15\":1,\"119\":2,\"143\":4,\"144\":2,\"147\":3,\"154\":2,\"155\":2,\"156\":2,\"157\":1,\"161\":6,\"263\":8,\"265\":3,\"407\":1}}],[\"contact\",{\"1\":{\"70\":1,\"378\":2,\"380\":1,\"384\":8,\"396\":5,\"415\":5}}],[\"control等头部字段\",{\"1\":{\"601\":1}}],[\"control\",{\"1\":{\"355\":1,\"356\":1,\"370\":1}}],[\"controls\",{\"1\":{\"222\":1,\"223\":1}}],[\"controls><\",{\"1\":{\"222\":1,\"223\":1}}],[\"controller\",{\"1\":{\"62\":1,\"592\":1}}],[\"controlledcomponent\",{\"1\":{\"31\":1}}],[\"controlled\",{\"1\":{\"31\":1}}],[\"control头部\",{\"1\":{\"352\":1}}],[\"control头\",{\"1\":{\"55\":1}}],[\"context可以将某些只在特定组件层级中使用的状态提升到redux之外\",{\"1\":{\"407\":1}}],[\"context和redux可以结合使用\",{\"1\":{\"407\":1}}],[\"context\",{\"0\":{\"37\":1},\"1\":{\"37\":2,\"407\":1,\"426\":1,\"440\":4,\"444\":1}}],[\"contents\",{\"1\":{\"570\":2}}],[\"contenthash\",{\"1\":{\"469\":1,\"480\":1,\"483\":3,\"495\":1,\"504\":1}}],[\"contentbase\",{\"1\":{\"461\":3}}],[\"content进行警告\",{\"1\":{\"359\":1}}],[\"content指的是网页同时包含http和https资源的情况\",{\"1\":{\"359\":1}}],[\"content元素中\",{\"1\":{\"348\":1}}],[\"contentdiv\",{\"1\":{\"348\":2}}],[\"content=\",{\"1\":{\"208\":2}}],[\"content|\",{\"1\":{\"146\":1}}],[\"contentref\",{\"1\":{\"41\":3}}],[\"content\",{\"1\":{\"25\":1,\"70\":1,\"144\":1,\"146\":1,\"147\":1,\"155\":2,\"158\":1,\"218\":1,\"301\":1,\"348\":4,\"352\":2,\"355\":2,\"359\":2}}],[\"content<\",{\"1\":{\"15\":1,\"41\":1}}],[\"combinereducers\",{\"1\":{\"402\":2}}],[\"com\",{\"1\":{\"41\":1,\"102\":2,\"132\":1,\"160\":4,\"196\":1,\"219\":1,\"224\":1,\"271\":3,\"282\":1,\"284\":1,\"336\":2,\"348\":2,\"352\":1,\"510\":1,\"515\":1,\"519\":5,\"520\":2,\"600\":1}}],[\"commonjs\",{\"1\":{\"327\":1,\"328\":1}}],[\"commonjs采用require和module\",{\"1\":{\"203\":1}}],[\"commonjs和es模块的区别\",{\"0\":{\"203\":1}}],[\"commonjs模块的导入和导出都是值拷贝\",{\"1\":{\"203\":1}}],[\"commonjs模块是同步加载的\",{\"1\":{\"200\":1,\"203\":1}}],[\"commonjs模块支持在运行时动态导入模块\",{\"1\":{\"200\":1}}],[\"commonjs模块化适用于服务器端和构建工具\",{\"1\":{\"203\":1}}],[\"commonjs模块化的语法设计比较简洁\",{\"1\":{\"203\":1}}],[\"commonjs模块化的特点和优势包括\",{\"1\":{\"200\":1}}],[\"commonjs模块化不直接支持动态导入\",{\"1\":{\"203\":1}}],[\"commonjs模块化提供了一种简单和常用的模块化方案\",{\"1\":{\"200\":1}}],[\"commonjs模块化一般用于服务器端开发和构建工具中\",{\"1\":{\"200\":1}}],[\"commonjs模块化最初是为服务器端开发而设计\",{\"1\":{\"200\":1,\"203\":1}}],[\"commonjs模块化规范非常简单\",{\"1\":{\"200\":1}}],[\"commonjs模块化是一种用于服务器端和非浏览器环境的模块化规范\",{\"1\":{\"200\":1}}],[\"commonjs模块化\",{\"0\":{\"200\":1}}],[\"commodo\",{\"1\":{\"154\":1}}],[\"commas\",{\"1\":{\"172\":1}}],[\"comment\",{\"1\":{\"15\":1}}],[\"commit方式直接提交mutation\",{\"1\":{\"431\":1}}],[\"commit命令将暂存区的文件提交到当前分支\",{\"1\":{\"334\":1}}],[\"commit\",{\"1\":{\"3\":3,\"93\":2,\"137\":1,\"333\":1,\"338\":2,\"429\":1,\"431\":4,\"432\":4,\"433\":2,\"440\":2,\"441\":3,\"444\":3}}],[\"compatible\",{\"1\":{\"604\":1}}],[\"computer\",{\"1\":{\"574\":2,\"575\":1,\"576\":1,\"577\":2}}],[\"computedcount\",{\"1\":{\"105\":3}}],[\"computed\",{\"0\":{\"72\":1,\"103\":1},\"1\":{\"3\":1,\"74\":1,\"89\":1,\"93\":1,\"105\":2,\"429\":1,\"430\":1,\"433\":1,\"440\":1,\"441\":2}}],[\"compression\",{\"1\":{\"469\":1}}],[\"compressionplugin\",{\"1\":{\"469\":2}}],[\"composition\",{\"1\":{\"99\":2}}],[\"component=\",{\"1\":{\"377\":1,\"378\":4,\"379\":3,\"381\":1,\"384\":3,\"386\":2,\"387\":1,\"388\":3}}],[\"component的组件\",{\"1\":{\"97\":1}}],[\"componentb\",{\"1\":{\"94\":1,\"126\":2}}],[\"componenta\",{\"1\":{\"94\":1,\"126\":5}}],[\"component>\",{\"1\":{\"92\":1,\"93\":1,\"94\":1,\"96\":2,\"126\":1}}],[\"component><\",{\"1\":{\"92\":1}}],[\"componentnamecomponent\",{\"1\":{\"91\":1}}],[\"componentname\",{\"1\":{\"91\":3}}],[\"component<\",{\"1\":{\"35\":2,\"36\":2,\"37\":2,\"51\":1,\"92\":1,\"94\":1}}],[\"componentwillupdate\",{\"1\":{\"22\":1}}],[\"componentwillunmount\",{\"1\":{\"22\":3}}],[\"componentwillreceiveprops\",{\"1\":{\"22\":1}}],[\"componentwillmount\",{\"1\":{\"22\":1}}],[\"componentdidcatch\",{\"1\":{\"22\":1}}],[\"componentdidupdate\",{\"1\":{\"22\":3}}],[\"componentdidupdate等来处理组件的不同阶段\",{\"1\":{\"18\":1}}],[\"componentdidmount方法被调用时\",{\"1\":{\"50\":1}}],[\"componentdidmount\",{\"1\":{\"22\":3,\"23\":1,\"50\":1}}],[\"component类来定义的\",{\"1\":{\"19\":1}}],[\"component类\",{\"1\":{\"18\":1}}],[\"component\",{\"1\":{\"13\":1,\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"23\":2,\"26\":1,\"31\":2,\"35\":1,\"48\":1,\"50\":1,\"90\":1,\"91\":4,\"92\":1,\"93\":2,\"94\":2,\"97\":2,\"116\":3,\"384\":3,\"385\":5,\"386\":4,\"387\":1,\"412\":2,\"413\":2,\"415\":5,\"417\":3,\"418\":2,\"419\":1,\"420\":1,\"421\":1,\"423\":2,\"444\":2}}],[\"components\",{\"1\":{\"3\":4,\"4\":3,\"11\":3,\"31\":2,\"61\":1,\"63\":1,\"92\":1,\"93\":2,\"95\":2,\"116\":1,\"384\":3,\"397\":2,\"407\":2,\"415\":5,\"417\":2,\"419\":1,\"420\":1,\"423\":2}}],[\"compiled\",{\"1\":{\"70\":1}}],[\"complete\",{\"1\":{\"292\":1}}],[\"complete<\",{\"1\":{\"3\":1}}],[\"completed\",{\"1\":{\"3\":6,\"198\":1,\"407\":5,\"431\":2}}],[\"close\",{\"1\":{\"266\":1,\"369\":2}}],[\"closure\",{\"1\":{\"261\":1,\"268\":3,\"604\":1}}],[\"closures\",{\"1\":{\"258\":1,\"590\":1}}],[\"clone\",{\"1\":{\"336\":2}}],[\"clone命令可以将远程仓库克隆到本地\",{\"1\":{\"335\":1}}],[\"clonedeep\",{\"1\":{\"281\":2}}],[\"clonedelement\",{\"1\":{\"265\":2}}],[\"clonenode\",{\"1\":{\"265\":1}}],[\"cloak>\",{\"1\":{\"70\":1}}],[\"cloak\",{\"1\":{\"70\":1}}],[\"clean\",{\"1\":{\"456\":1}}],[\"cleanwebpackplugin\",{\"1\":{\"456\":3,\"476\":1}}],[\"cleanup\",{\"1\":{\"186\":2,\"193\":1}}],[\"cleartimeout\",{\"1\":{\"266\":1}}],[\"clear\",{\"1\":{\"144\":1,\"176\":1,\"177\":1}}],[\"clearinterval\",{\"1\":{\"22\":1,\"260\":1,\"266\":1}}],[\"clip的组合使用\",{\"1\":{\"158\":1}}],[\"clip\",{\"1\":{\"158\":2}}],[\"cli\",{\"1\":{\"88\":2,\"449\":1,\"475\":1}}],[\"client\",{\"1\":{\"369\":4}}],[\"clienty\",{\"1\":{\"27\":1}}],[\"clientx\",{\"1\":{\"27\":1}}],[\"click指令来监听按钮的点击事件并调用对应的方法\",{\"1\":{\"440\":1}}],[\"click\",{\"1\":{\"27\":1,\"28\":1,\"70\":5,\"263\":6,\"265\":1,\"272\":1,\"278\":1,\"287\":1,\"302\":1,\"493\":1,\"494\":1}}],[\"clicked\",{\"1\":{\"25\":2,\"26\":2,\"36\":1,\"91\":1,\"263\":9,\"265\":1,\"272\":1,\"278\":1}}],[\"click=\",{\"1\":{\"3\":1,\"70\":2,\"77\":1,\"91\":1,\"93\":3,\"94\":1,\"97\":2,\"98\":1,\"102\":1,\"126\":1,\"420\":1,\"429\":1,\"431\":8,\"432\":2,\"433\":2,\"440\":2,\"442\":2,\"444\":2}}],[\"classic\",{\"1\":{\"328\":1}}],[\"classes\",{\"1\":{\"320\":1,\"604\":1}}],[\"classlist\",{\"1\":{\"265\":2}}],[\"class类的元素以外的所有元素\",{\"1\":{\"159\":1}}],[\"classobject\",{\"1\":{\"82\":3}}],[\"class来实现\",{\"1\":{\"81\":1}}],[\"class绑定\",{\"0\":{\"80\":1}}],[\"class与style的绑定\",{\"0\":{\"79\":1}}],[\"classcomponent\",{\"1\":{\"18\":1,\"19\":1,\"21\":1}}],[\"classname=\",{\"1\":{\"14\":2,\"15\":1}}],[\"class\",{\"0\":{\"183\":1},\"1\":{\"11\":1,\"13\":1,\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"23\":1,\"26\":1,\"31\":2,\"47\":1,\"48\":1,\"50\":1,\"52\":1,\"82\":8,\"125\":2,\"143\":2,\"159\":2,\"171\":2,\"183\":12,\"189\":1,\"191\":1,\"204\":5,\"211\":1,\"253\":1,\"265\":1,\"278\":1,\"312\":12,\"317\":2,\"320\":1,\"324\":9,\"327\":1,\"329\":5,\"330\":2,\"387\":1,\"444\":2,\"535\":1,\"539\":1,\"579\":2,\"582\":1,\"583\":2,\"589\":1,\"591\":5}}],[\"class=\",{\"1\":{\"3\":10,\"4\":1,\"14\":2,\"82\":8,\"98\":1,\"119\":5,\"150\":1,\"151\":1,\"152\":1,\"154\":1,\"155\":4,\"156\":5,\"580\":2}}],[\"cdn可以将静态资源缓存到离用户更近的边缘服务器上\",{\"1\":{\"465\":1}}],[\"cdn缓存\",{\"1\":{\"465\":1}}],[\"cdn\",{\"1\":{\"65\":1,\"70\":1,\"87\":1,\"465\":1}}],[\"cd\",{\"1\":{\"2\":1,\"5\":1,\"88\":1,\"364\":1}}],[\"3中完全移除\",{\"1\":{\"604\":1}}],[\"3中的响应式系统进行了重写\",{\"1\":{\"99\":1}}],[\"365\",{\"1\":{\"532\":1}}],[\"345\",{\"1\":{\"531\":1}}],[\"3498db\",{\"1\":{\"161\":9}}],[\"31\",{\"1\":{\"356\":1}}],[\"3xx\",{\"1\":{\"354\":1}}],[\"3s\",{\"1\":{\"161\":6}}],[\"3d转换\",{\"1\":{\"150\":1}}],[\"3d\",{\"0\":{\"150\":1},\"1\":{\"237\":1}}],[\"3<\",{\"1\":{\"147\":1,\"155\":1,\"156\":1}}],[\"3mm\",{\"1\":{\"145\":1}}],[\"333\",{\"1\":{\"144\":1}}],[\"3会自动追踪这些依赖\",{\"1\":{\"107\":1}}],[\"3在一些方面与vue\",{\"1\":{\"99\":1}}],[\"3在性能方面表现更好\",{\"1\":{\"99\":1}}],[\"3还增加了其他一些功能和改进\",{\"1\":{\"99\":1}}],[\"3针对typescript和ide的支持进行了改进\",{\"1\":{\"99\":1}}],[\"3改进了错误处理机制\",{\"1\":{\"99\":1}}],[\"3添加了对typescript的原生支持\",{\"1\":{\"99\":1}}],[\"3引入了composition\",{\"1\":{\"99\":1}}],[\"3的体积比vue\",{\"1\":{\"99\":1}}],[\"3采用了虚拟dom的重写\",{\"1\":{\"99\":1}}],[\"3000\",{\"1\":{\"364\":2,\"365\":1,\"367\":3,\"368\":3,\"461\":2,\"490\":1,\"509\":2,\"512\":2}}],[\"300px\",{\"1\":{\"147\":1}}],[\"304\",{\"1\":{\"354\":1}}],[\"302\",{\"1\":{\"354\":1}}],[\"301\",{\"1\":{\"354\":1}}],[\"30px\",{\"1\":{\"147\":1}}],[\"30\",{\"1\":{\"92\":1,\"144\":1,\"147\":1,\"168\":2,\"171\":7,\"172\":2,\"183\":2,\"315\":2,\"316\":2}}],[\"3版本之后引入的新方法\",{\"1\":{\"22\":1}}],[\"3版本之前\",{\"1\":{\"18\":1,\"22\":1}}],[\"3版本开始\",{\"1\":{\"22\":1}}],[\"3\",{\"0\":{\"473\":1,\"487\":1,\"501\":1},\"1\":{\"1\":1,\"52\":3,\"70\":2,\"91\":1,\"99\":1,\"102\":2,\"110\":4,\"114\":1,\"144\":2,\"154\":1,\"165\":2,\"166\":6,\"167\":1,\"169\":12,\"170\":21,\"171\":6,\"172\":5,\"173\":2,\"174\":1,\"176\":2,\"183\":3,\"184\":2,\"185\":6,\"198\":1,\"200\":2,\"201\":2,\"202\":5,\"249\":1,\"251\":2,\"253\":2,\"254\":2,\"257\":27,\"258\":6,\"270\":1,\"273\":1,\"278\":1,\"281\":1,\"284\":1,\"310\":8,\"311\":4,\"312\":1,\"313\":6,\"314\":4,\"315\":1,\"316\":1,\"319\":1,\"323\":4,\"341\":1,\"359\":1,\"401\":1,\"403\":1,\"519\":2,\"540\":2,\"551\":1,\"564\":2,\"567\":1,\"571\":2,\"578\":7,\"582\":1,\"590\":1}}],[\"项目中使用该库\",{\"1\":{\"325\":1}}],[\"项目中使用\",{\"1\":{\"325\":1}}],[\"项目需求和团队共识\",{\"1\":{\"161\":1}}],[\"项目需求和团队经验\",{\"1\":{\"10\":1}}],[\"项目运行步骤\",{\"1\":{\"88\":1}}],[\"项目的步骤\",{\"1\":{\"88\":1}}],[\"项目\",{\"0\":{\"1\":1},\"1\":{\"1\":1,\"88\":1}}],[\"2中完全移除\",{\"1\":{\"604\":1}}],[\"2中被废弃\",{\"1\":{\"604\":1}}],[\"2中的object\",{\"1\":{\"99\":1}}],[\"21\",{\"1\":{\"576\":2}}],[\"27017\",{\"1\":{\"369\":1}}],[\"2等协议的引入\",{\"1\":{\"359\":1}}],[\"2和tls\",{\"1\":{\"359\":1}}],[\"23\",{\"1\":{\"356\":1}}],[\"2xx\",{\"1\":{\"354\":1}}],[\"2协议的多路复用等技术来提高性能\",{\"1\":{\"351\":1}}],[\"2秒后\",{\"1\":{\"271\":1}}],[\"2秒后输出\",{\"1\":{\"260\":1}}],[\"24\",{\"1\":{\"180\":1,\"181\":1,\"182\":2,\"254\":1,\"568\":1}}],[\"24pt\",{\"1\":{\"145\":1}}],[\"24px\",{\"1\":{\"143\":2,\"144\":1}}],[\"2^53\",{\"1\":{\"169\":1}}],[\"2980b9\",{\"1\":{\"161\":3}}],[\"2d转换\",{\"1\":{\"150\":1}}],[\"2d\",{\"0\":{\"150\":1},\"1\":{\"228\":1,\"237\":1}}],[\"2d和3d转换\",{\"0\":{\"150\":1}}],[\"2ex\",{\"1\":{\"145\":1}}],[\"2s\",{\"1\":{\"144\":1}}],[\"204\",{\"1\":{\"354\":1}}],[\"200\",{\"1\":{\"228\":2,\"282\":1,\"314\":1,\"345\":1,\"346\":1,\"347\":1,\"348\":1,\"352\":1,\"354\":1}}],[\"20000\",{\"1\":{\"583\":1}}],[\"2000\",{\"1\":{\"192\":1,\"196\":1,\"197\":1,\"258\":1,\"260\":1,\"270\":1,\"271\":1,\"272\":3}}],[\"200px和蓝色\",{\"1\":{\"152\":1}}],[\"200px\",{\"1\":{\"144\":1,\"145\":1,\"147\":1,\"151\":2,\"152\":2,\"348\":1}}],[\"2023\",{\"1\":{\"168\":2,\"356\":1}}],[\"201\",{\"1\":{\"354\":1}}],[\"2015\",{\"1\":{\"163\":1}}],[\"2016\",{\"1\":{\"70\":1}}],[\"20deg\",{\"1\":{\"150\":1}}],[\"20px\",{\"1\":{\"144\":1,\"147\":1,\"154\":1,\"156\":1,\"161\":12,\"265\":1}}],[\"20\",{\"1\":{\"134\":1,\"252\":2,\"312\":2,\"574\":2,\"575\":1,\"576\":1,\"577\":2}}],[\"262\",{\"1\":{\"164\":2}}],[\"26\",{\"1\":{\"134\":1,\"259\":2}}],[\"250px\",{\"1\":{\"290\":1}}],[\"25\",{\"1\":{\"102\":2,\"134\":1,\"183\":4,\"188\":5,\"189\":3,\"191\":3,\"218\":1,\"249\":2,\"251\":2,\"259\":2,\"273\":1,\"310\":4,\"312\":2,\"319\":1,\"369\":1}}],[\"2项目迁移到vue\",{\"1\":{\"99\":1}}],[\"2有一些不兼容之处\",{\"1\":{\"99\":1}}],[\"2的options\",{\"1\":{\"99\":1}}],[\"2的多路复用特性\",{\"1\":{\"55\":1}}],[\"2更小\",{\"1\":{\"99\":1}}],[\"2更高效\",{\"1\":{\"99\":1}}],[\"2<\",{\"1\":{\"15\":4,\"147\":1,\"155\":1,\"156\":1}}],[\"2\",{\"0\":{\"1\":1,\"472\":1,\"483\":1,\"486\":1,\"500\":1},\"1\":{\"5\":1,\"52\":5,\"65\":1,\"70\":15,\"87\":1,\"91\":1,\"95\":1,\"105\":1,\"110\":1,\"114\":1,\"165\":2,\"166\":11,\"168\":3,\"169\":2,\"170\":21,\"171\":6,\"172\":6,\"173\":2,\"174\":2,\"176\":4,\"180\":1,\"182\":2,\"183\":4,\"184\":2,\"185\":6,\"189\":4,\"198\":1,\"200\":2,\"201\":2,\"202\":5,\"251\":1,\"253\":2,\"254\":3,\"257\":29,\"258\":7,\"270\":4,\"272\":1,\"273\":1,\"278\":3,\"281\":5,\"310\":7,\"311\":2,\"313\":3,\"314\":3,\"315\":1,\"316\":1,\"317\":1,\"318\":2,\"319\":3,\"323\":4,\"330\":1,\"341\":1,\"393\":1,\"401\":1,\"403\":1,\"532\":1,\"540\":1,\"551\":1,\"564\":2,\"571\":4,\"573\":2,\"575\":2,\"576\":1,\"577\":2,\"578\":10,\"582\":1,\"591\":1}}]],\"serializationVersion\":2}";